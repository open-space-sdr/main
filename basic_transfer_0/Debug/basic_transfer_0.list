
basic_transfer_0.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000050b0  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000b50  08005290  08005290  00006290  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005de0  08005de0  0000705c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08005de0  08005de0  00006de0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005de8  08005de8  0000705c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005de8  08005de8  00006de8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005dec  08005dec  00006dec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  08005df0  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000368  2000005c  08005e4c  0000705c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200003c4  08005e4c  000073c4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000705c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000fd72  00000000  00000000  0000708c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002865  00000000  00000000  00016dfe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000cf8  00000000  00000000  00019668  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000009f4  00000000  00000000  0001a360  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00020cf0  00000000  00000000  0001ad54  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00012d7a  00000000  00000000  0003ba44  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000cdd56  00000000  00000000  0004e7be  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0011c514  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000381c  00000000  00000000  0011c558  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006c  00000000  00000000  0011fd74  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	2000005c 	.word	0x2000005c
 80001fc:	00000000 	.word	0x00000000
 8000200:	08005278 	.word	0x08005278

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000060 	.word	0x20000060
 800021c:	08005278 	.word	0x08005278

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295
 80002d4:	f000 b988 	b.w	80005e8 <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9d08      	ldr	r5, [sp, #32]
 80002f6:	468e      	mov	lr, r1
 80002f8:	4604      	mov	r4, r0
 80002fa:	4688      	mov	r8, r1
 80002fc:	2b00      	cmp	r3, #0
 80002fe:	d14a      	bne.n	8000396 <__udivmoddi4+0xa6>
 8000300:	428a      	cmp	r2, r1
 8000302:	4617      	mov	r7, r2
 8000304:	d962      	bls.n	80003cc <__udivmoddi4+0xdc>
 8000306:	fab2 f682 	clz	r6, r2
 800030a:	b14e      	cbz	r6, 8000320 <__udivmoddi4+0x30>
 800030c:	f1c6 0320 	rsb	r3, r6, #32
 8000310:	fa01 f806 	lsl.w	r8, r1, r6
 8000314:	fa20 f303 	lsr.w	r3, r0, r3
 8000318:	40b7      	lsls	r7, r6
 800031a:	ea43 0808 	orr.w	r8, r3, r8
 800031e:	40b4      	lsls	r4, r6
 8000320:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000324:	fa1f fc87 	uxth.w	ip, r7
 8000328:	fbb8 f1fe 	udiv	r1, r8, lr
 800032c:	0c23      	lsrs	r3, r4, #16
 800032e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000332:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000336:	fb01 f20c 	mul.w	r2, r1, ip
 800033a:	429a      	cmp	r2, r3
 800033c:	d909      	bls.n	8000352 <__udivmoddi4+0x62>
 800033e:	18fb      	adds	r3, r7, r3
 8000340:	f101 30ff 	add.w	r0, r1, #4294967295
 8000344:	f080 80ea 	bcs.w	800051c <__udivmoddi4+0x22c>
 8000348:	429a      	cmp	r2, r3
 800034a:	f240 80e7 	bls.w	800051c <__udivmoddi4+0x22c>
 800034e:	3902      	subs	r1, #2
 8000350:	443b      	add	r3, r7
 8000352:	1a9a      	subs	r2, r3, r2
 8000354:	b2a3      	uxth	r3, r4
 8000356:	fbb2 f0fe 	udiv	r0, r2, lr
 800035a:	fb0e 2210 	mls	r2, lr, r0, r2
 800035e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000362:	fb00 fc0c 	mul.w	ip, r0, ip
 8000366:	459c      	cmp	ip, r3
 8000368:	d909      	bls.n	800037e <__udivmoddi4+0x8e>
 800036a:	18fb      	adds	r3, r7, r3
 800036c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000370:	f080 80d6 	bcs.w	8000520 <__udivmoddi4+0x230>
 8000374:	459c      	cmp	ip, r3
 8000376:	f240 80d3 	bls.w	8000520 <__udivmoddi4+0x230>
 800037a:	443b      	add	r3, r7
 800037c:	3802      	subs	r0, #2
 800037e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000382:	eba3 030c 	sub.w	r3, r3, ip
 8000386:	2100      	movs	r1, #0
 8000388:	b11d      	cbz	r5, 8000392 <__udivmoddi4+0xa2>
 800038a:	40f3      	lsrs	r3, r6
 800038c:	2200      	movs	r2, #0
 800038e:	e9c5 3200 	strd	r3, r2, [r5]
 8000392:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000396:	428b      	cmp	r3, r1
 8000398:	d905      	bls.n	80003a6 <__udivmoddi4+0xb6>
 800039a:	b10d      	cbz	r5, 80003a0 <__udivmoddi4+0xb0>
 800039c:	e9c5 0100 	strd	r0, r1, [r5]
 80003a0:	2100      	movs	r1, #0
 80003a2:	4608      	mov	r0, r1
 80003a4:	e7f5      	b.n	8000392 <__udivmoddi4+0xa2>
 80003a6:	fab3 f183 	clz	r1, r3
 80003aa:	2900      	cmp	r1, #0
 80003ac:	d146      	bne.n	800043c <__udivmoddi4+0x14c>
 80003ae:	4573      	cmp	r3, lr
 80003b0:	d302      	bcc.n	80003b8 <__udivmoddi4+0xc8>
 80003b2:	4282      	cmp	r2, r0
 80003b4:	f200 8105 	bhi.w	80005c2 <__udivmoddi4+0x2d2>
 80003b8:	1a84      	subs	r4, r0, r2
 80003ba:	eb6e 0203 	sbc.w	r2, lr, r3
 80003be:	2001      	movs	r0, #1
 80003c0:	4690      	mov	r8, r2
 80003c2:	2d00      	cmp	r5, #0
 80003c4:	d0e5      	beq.n	8000392 <__udivmoddi4+0xa2>
 80003c6:	e9c5 4800 	strd	r4, r8, [r5]
 80003ca:	e7e2      	b.n	8000392 <__udivmoddi4+0xa2>
 80003cc:	2a00      	cmp	r2, #0
 80003ce:	f000 8090 	beq.w	80004f2 <__udivmoddi4+0x202>
 80003d2:	fab2 f682 	clz	r6, r2
 80003d6:	2e00      	cmp	r6, #0
 80003d8:	f040 80a4 	bne.w	8000524 <__udivmoddi4+0x234>
 80003dc:	1a8a      	subs	r2, r1, r2
 80003de:	0c03      	lsrs	r3, r0, #16
 80003e0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003e4:	b280      	uxth	r0, r0
 80003e6:	b2bc      	uxth	r4, r7
 80003e8:	2101      	movs	r1, #1
 80003ea:	fbb2 fcfe 	udiv	ip, r2, lr
 80003ee:	fb0e 221c 	mls	r2, lr, ip, r2
 80003f2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003f6:	fb04 f20c 	mul.w	r2, r4, ip
 80003fa:	429a      	cmp	r2, r3
 80003fc:	d907      	bls.n	800040e <__udivmoddi4+0x11e>
 80003fe:	18fb      	adds	r3, r7, r3
 8000400:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000404:	d202      	bcs.n	800040c <__udivmoddi4+0x11c>
 8000406:	429a      	cmp	r2, r3
 8000408:	f200 80e0 	bhi.w	80005cc <__udivmoddi4+0x2dc>
 800040c:	46c4      	mov	ip, r8
 800040e:	1a9b      	subs	r3, r3, r2
 8000410:	fbb3 f2fe 	udiv	r2, r3, lr
 8000414:	fb0e 3312 	mls	r3, lr, r2, r3
 8000418:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 800041c:	fb02 f404 	mul.w	r4, r2, r4
 8000420:	429c      	cmp	r4, r3
 8000422:	d907      	bls.n	8000434 <__udivmoddi4+0x144>
 8000424:	18fb      	adds	r3, r7, r3
 8000426:	f102 30ff 	add.w	r0, r2, #4294967295
 800042a:	d202      	bcs.n	8000432 <__udivmoddi4+0x142>
 800042c:	429c      	cmp	r4, r3
 800042e:	f200 80ca 	bhi.w	80005c6 <__udivmoddi4+0x2d6>
 8000432:	4602      	mov	r2, r0
 8000434:	1b1b      	subs	r3, r3, r4
 8000436:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800043a:	e7a5      	b.n	8000388 <__udivmoddi4+0x98>
 800043c:	f1c1 0620 	rsb	r6, r1, #32
 8000440:	408b      	lsls	r3, r1
 8000442:	fa22 f706 	lsr.w	r7, r2, r6
 8000446:	431f      	orrs	r7, r3
 8000448:	fa0e f401 	lsl.w	r4, lr, r1
 800044c:	fa20 f306 	lsr.w	r3, r0, r6
 8000450:	fa2e fe06 	lsr.w	lr, lr, r6
 8000454:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000458:	4323      	orrs	r3, r4
 800045a:	fa00 f801 	lsl.w	r8, r0, r1
 800045e:	fa1f fc87 	uxth.w	ip, r7
 8000462:	fbbe f0f9 	udiv	r0, lr, r9
 8000466:	0c1c      	lsrs	r4, r3, #16
 8000468:	fb09 ee10 	mls	lr, r9, r0, lr
 800046c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000470:	fb00 fe0c 	mul.w	lr, r0, ip
 8000474:	45a6      	cmp	lr, r4
 8000476:	fa02 f201 	lsl.w	r2, r2, r1
 800047a:	d909      	bls.n	8000490 <__udivmoddi4+0x1a0>
 800047c:	193c      	adds	r4, r7, r4
 800047e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000482:	f080 809c 	bcs.w	80005be <__udivmoddi4+0x2ce>
 8000486:	45a6      	cmp	lr, r4
 8000488:	f240 8099 	bls.w	80005be <__udivmoddi4+0x2ce>
 800048c:	3802      	subs	r0, #2
 800048e:	443c      	add	r4, r7
 8000490:	eba4 040e 	sub.w	r4, r4, lr
 8000494:	fa1f fe83 	uxth.w	lr, r3
 8000498:	fbb4 f3f9 	udiv	r3, r4, r9
 800049c:	fb09 4413 	mls	r4, r9, r3, r4
 80004a0:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80004a4:	fb03 fc0c 	mul.w	ip, r3, ip
 80004a8:	45a4      	cmp	ip, r4
 80004aa:	d908      	bls.n	80004be <__udivmoddi4+0x1ce>
 80004ac:	193c      	adds	r4, r7, r4
 80004ae:	f103 3eff 	add.w	lr, r3, #4294967295
 80004b2:	f080 8082 	bcs.w	80005ba <__udivmoddi4+0x2ca>
 80004b6:	45a4      	cmp	ip, r4
 80004b8:	d97f      	bls.n	80005ba <__udivmoddi4+0x2ca>
 80004ba:	3b02      	subs	r3, #2
 80004bc:	443c      	add	r4, r7
 80004be:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80004c2:	eba4 040c 	sub.w	r4, r4, ip
 80004c6:	fba0 ec02 	umull	lr, ip, r0, r2
 80004ca:	4564      	cmp	r4, ip
 80004cc:	4673      	mov	r3, lr
 80004ce:	46e1      	mov	r9, ip
 80004d0:	d362      	bcc.n	8000598 <__udivmoddi4+0x2a8>
 80004d2:	d05f      	beq.n	8000594 <__udivmoddi4+0x2a4>
 80004d4:	b15d      	cbz	r5, 80004ee <__udivmoddi4+0x1fe>
 80004d6:	ebb8 0203 	subs.w	r2, r8, r3
 80004da:	eb64 0409 	sbc.w	r4, r4, r9
 80004de:	fa04 f606 	lsl.w	r6, r4, r6
 80004e2:	fa22 f301 	lsr.w	r3, r2, r1
 80004e6:	431e      	orrs	r6, r3
 80004e8:	40cc      	lsrs	r4, r1
 80004ea:	e9c5 6400 	strd	r6, r4, [r5]
 80004ee:	2100      	movs	r1, #0
 80004f0:	e74f      	b.n	8000392 <__udivmoddi4+0xa2>
 80004f2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004f6:	0c01      	lsrs	r1, r0, #16
 80004f8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004fc:	b280      	uxth	r0, r0
 80004fe:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000502:	463b      	mov	r3, r7
 8000504:	4638      	mov	r0, r7
 8000506:	463c      	mov	r4, r7
 8000508:	46b8      	mov	r8, r7
 800050a:	46be      	mov	lr, r7
 800050c:	2620      	movs	r6, #32
 800050e:	fbb1 f1f7 	udiv	r1, r1, r7
 8000512:	eba2 0208 	sub.w	r2, r2, r8
 8000516:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800051a:	e766      	b.n	80003ea <__udivmoddi4+0xfa>
 800051c:	4601      	mov	r1, r0
 800051e:	e718      	b.n	8000352 <__udivmoddi4+0x62>
 8000520:	4610      	mov	r0, r2
 8000522:	e72c      	b.n	800037e <__udivmoddi4+0x8e>
 8000524:	f1c6 0220 	rsb	r2, r6, #32
 8000528:	fa2e f302 	lsr.w	r3, lr, r2
 800052c:	40b7      	lsls	r7, r6
 800052e:	40b1      	lsls	r1, r6
 8000530:	fa20 f202 	lsr.w	r2, r0, r2
 8000534:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000538:	430a      	orrs	r2, r1
 800053a:	fbb3 f8fe 	udiv	r8, r3, lr
 800053e:	b2bc      	uxth	r4, r7
 8000540:	fb0e 3318 	mls	r3, lr, r8, r3
 8000544:	0c11      	lsrs	r1, r2, #16
 8000546:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800054a:	fb08 f904 	mul.w	r9, r8, r4
 800054e:	40b0      	lsls	r0, r6
 8000550:	4589      	cmp	r9, r1
 8000552:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000556:	b280      	uxth	r0, r0
 8000558:	d93e      	bls.n	80005d8 <__udivmoddi4+0x2e8>
 800055a:	1879      	adds	r1, r7, r1
 800055c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000560:	d201      	bcs.n	8000566 <__udivmoddi4+0x276>
 8000562:	4589      	cmp	r9, r1
 8000564:	d81f      	bhi.n	80005a6 <__udivmoddi4+0x2b6>
 8000566:	eba1 0109 	sub.w	r1, r1, r9
 800056a:	fbb1 f9fe 	udiv	r9, r1, lr
 800056e:	fb09 f804 	mul.w	r8, r9, r4
 8000572:	fb0e 1119 	mls	r1, lr, r9, r1
 8000576:	b292      	uxth	r2, r2
 8000578:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800057c:	4542      	cmp	r2, r8
 800057e:	d229      	bcs.n	80005d4 <__udivmoddi4+0x2e4>
 8000580:	18ba      	adds	r2, r7, r2
 8000582:	f109 31ff 	add.w	r1, r9, #4294967295
 8000586:	d2c4      	bcs.n	8000512 <__udivmoddi4+0x222>
 8000588:	4542      	cmp	r2, r8
 800058a:	d2c2      	bcs.n	8000512 <__udivmoddi4+0x222>
 800058c:	f1a9 0102 	sub.w	r1, r9, #2
 8000590:	443a      	add	r2, r7
 8000592:	e7be      	b.n	8000512 <__udivmoddi4+0x222>
 8000594:	45f0      	cmp	r8, lr
 8000596:	d29d      	bcs.n	80004d4 <__udivmoddi4+0x1e4>
 8000598:	ebbe 0302 	subs.w	r3, lr, r2
 800059c:	eb6c 0c07 	sbc.w	ip, ip, r7
 80005a0:	3801      	subs	r0, #1
 80005a2:	46e1      	mov	r9, ip
 80005a4:	e796      	b.n	80004d4 <__udivmoddi4+0x1e4>
 80005a6:	eba7 0909 	sub.w	r9, r7, r9
 80005aa:	4449      	add	r1, r9
 80005ac:	f1a8 0c02 	sub.w	ip, r8, #2
 80005b0:	fbb1 f9fe 	udiv	r9, r1, lr
 80005b4:	fb09 f804 	mul.w	r8, r9, r4
 80005b8:	e7db      	b.n	8000572 <__udivmoddi4+0x282>
 80005ba:	4673      	mov	r3, lr
 80005bc:	e77f      	b.n	80004be <__udivmoddi4+0x1ce>
 80005be:	4650      	mov	r0, sl
 80005c0:	e766      	b.n	8000490 <__udivmoddi4+0x1a0>
 80005c2:	4608      	mov	r0, r1
 80005c4:	e6fd      	b.n	80003c2 <__udivmoddi4+0xd2>
 80005c6:	443b      	add	r3, r7
 80005c8:	3a02      	subs	r2, #2
 80005ca:	e733      	b.n	8000434 <__udivmoddi4+0x144>
 80005cc:	f1ac 0c02 	sub.w	ip, ip, #2
 80005d0:	443b      	add	r3, r7
 80005d2:	e71c      	b.n	800040e <__udivmoddi4+0x11e>
 80005d4:	4649      	mov	r1, r9
 80005d6:	e79c      	b.n	8000512 <__udivmoddi4+0x222>
 80005d8:	eba1 0109 	sub.w	r1, r1, r9
 80005dc:	46c4      	mov	ip, r8
 80005de:	fbb1 f9fe 	udiv	r9, r1, lr
 80005e2:	fb09 f804 	mul.w	r8, r9, r4
 80005e6:	e7c4      	b.n	8000572 <__udivmoddi4+0x282>

080005e8 <__aeabi_idiv0>:
 80005e8:	4770      	bx	lr
 80005ea:	bf00      	nop

080005ec <app_log>:
 * @param fmt the printf-style format string.
 * @param ... variable arguments for the format string.
 * @return void.
 * // test: app_log("system init with status %d\r\n", status);
 */
void app_log(const char *fmt, ...) {
 80005ec:	b40f      	push	{r0, r1, r2, r3}
 80005ee:	b580      	push	{r7, lr}
 80005f0:	b084      	sub	sp, #16
 80005f2:	af00      	add	r7, sp, #0
    static char buf[256];
    va_list ap;

    va_start(ap, fmt);
 80005f4:	f107 031c 	add.w	r3, r7, #28
 80005f8:	607b      	str	r3, [r7, #4]
    int n = vsnprintf(buf, sizeof(buf), fmt, ap);
 80005fa:	687b      	ldr	r3, [r7, #4]
 80005fc:	69ba      	ldr	r2, [r7, #24]
 80005fe:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000602:	480d      	ldr	r0, [pc, #52]	@ (8000638 <app_log+0x4c>)
 8000604:	f004 f9ac 	bl	8004960 <vsniprintf>
 8000608:	60f8      	str	r0, [r7, #12]
    va_end(ap);

    if (n > 0) {
 800060a:	68fb      	ldr	r3, [r7, #12]
 800060c:	2b00      	cmp	r3, #0
 800060e:	dd0c      	ble.n	800062a <app_log+0x3e>
        UART_HandleTypeDef* huart = get_debug_uart();
 8000610:	f000 f9ca 	bl	80009a8 <get_debug_uart>
 8000614:	60b8      	str	r0, [r7, #8]
        if (huart) {
 8000616:	68bb      	ldr	r3, [r7, #8]
 8000618:	2b00      	cmp	r3, #0
 800061a:	d006      	beq.n	800062a <app_log+0x3e>
            HAL_UART_Transmit(huart, (uint8_t*)buf, n, 100);
 800061c:	68fb      	ldr	r3, [r7, #12]
 800061e:	b29a      	uxth	r2, r3
 8000620:	2364      	movs	r3, #100	@ 0x64
 8000622:	4905      	ldr	r1, [pc, #20]	@ (8000638 <app_log+0x4c>)
 8000624:	68b8      	ldr	r0, [r7, #8]
 8000626:	f003 fbf3 	bl	8003e10 <HAL_UART_Transmit>
        }
    }
}
 800062a:	bf00      	nop
 800062c:	3710      	adds	r7, #16
 800062e:	46bd      	mov	sp, r7
 8000630:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000634:	b004      	add	sp, #16
 8000636:	4770      	bx	lr
 8000638:	20000078 	.word	0x20000078

0800063c <fpga_init>:
 * @brief initializes the fpga interface and underlying comm protocol
 * @param hspi pointer to the configured spi handle
 * @return void.
 * // test: fpga_init(&hspi1);
 */
void fpga_init(SPI_HandleTypeDef *hspi) {
 800063c:	b580      	push	{r7, lr}
 800063e:	b082      	sub	sp, #8
 8000640:	af00      	add	r7, sp, #0
 8000642:	6078      	str	r0, [r7, #4]
    fpga_comms_init(hspi);
 8000644:	6878      	ldr	r0, [r7, #4]
 8000646:	f001 f82f 	bl	80016a8 <fpga_comms_init>
}
 800064a:	bf00      	nop
 800064c:	3708      	adds	r7, #8
 800064e:	46bd      	mov	sp, r7
 8000650:	bd80      	pop	{r7, pc}
	...

08000654 <reg_write>:
 * @param addr the 8-bit register address
 * @param val the 16-bit value to write
 * @return void.
 * // test: reg_write(0x03, 0x5678);
 */
void reg_write(uint8_t addr, uint16_t val) {
 8000654:	b580      	push	{r7, lr}
 8000656:	b084      	sub	sp, #16
 8000658:	af00      	add	r7, sp, #0
 800065a:	4603      	mov	r3, r0
 800065c:	460a      	mov	r2, r1
 800065e:	71fb      	strb	r3, [r7, #7]
 8000660:	4613      	mov	r3, r2
 8000662:	80bb      	strh	r3, [r7, #4]
    reg_rw_status_t status = fpga_comms_write(addr, val);
 8000664:	88ba      	ldrh	r2, [r7, #4]
 8000666:	79fb      	ldrb	r3, [r7, #7]
 8000668:	4611      	mov	r1, r2
 800066a:	4618      	mov	r0, r3
 800066c:	f001 f82c 	bl	80016c8 <fpga_comms_write>
 8000670:	4603      	mov	r3, r0
 8000672:	73fb      	strb	r3, [r7, #15]

    if (status != REG_RW_OK) {
 8000674:	7bfb      	ldrb	r3, [r7, #15]
 8000676:	2b00      	cmp	r3, #0
 8000678:	d005      	beq.n	8000686 <reg_write+0x32>
        app_log("err: reg_write(0x%02X) failed, status=%d\r\n", addr, status);
 800067a:	79fb      	ldrb	r3, [r7, #7]
 800067c:	7bfa      	ldrb	r2, [r7, #15]
 800067e:	4619      	mov	r1, r3
 8000680:	4803      	ldr	r0, [pc, #12]	@ (8000690 <reg_write+0x3c>)
 8000682:	f7ff ffb3 	bl	80005ec <app_log>
    }
}
 8000686:	bf00      	nop
 8000688:	3710      	adds	r7, #16
 800068a:	46bd      	mov	sp, r7
 800068c:	bd80      	pop	{r7, pc}
 800068e:	bf00      	nop
 8000690:	08005290 	.word	0x08005290

08000694 <reg_read>:
 * @brief reads a 16-bit val register
 * @param addr the 8-bit register address
 * @return the 16-bit value read from the register, returns 0xffff on failure
 * // test: uint16_t magic = reg_read(0x03);
 */
uint16_t reg_read(uint8_t addr) {
 8000694:	b580      	push	{r7, lr}
 8000696:	b084      	sub	sp, #16
 8000698:	af00      	add	r7, sp, #0
 800069a:	4603      	mov	r3, r0
 800069c:	71fb      	strb	r3, [r7, #7]
    uint16_t read_data = 0;
 800069e:	2300      	movs	r3, #0
 80006a0:	81bb      	strh	r3, [r7, #12]
    reg_rw_status_t status = fpga_comms_read(addr, &read_data);
 80006a2:	f107 020c 	add.w	r2, r7, #12
 80006a6:	79fb      	ldrb	r3, [r7, #7]
 80006a8:	4611      	mov	r1, r2
 80006aa:	4618      	mov	r0, r3
 80006ac:	f001 f882 	bl	80017b4 <fpga_comms_read>
 80006b0:	4603      	mov	r3, r0
 80006b2:	73fb      	strb	r3, [r7, #15]

    if (status != REG_RW_OK) {
 80006b4:	7bfb      	ldrb	r3, [r7, #15]
 80006b6:	2b00      	cmp	r3, #0
 80006b8:	d008      	beq.n	80006cc <reg_read+0x38>
        app_log("err: reg_read(0x%02X) failed, status=%d\r\n", addr, status);
 80006ba:	79fb      	ldrb	r3, [r7, #7]
 80006bc:	7bfa      	ldrb	r2, [r7, #15]
 80006be:	4619      	mov	r1, r3
 80006c0:	4805      	ldr	r0, [pc, #20]	@ (80006d8 <reg_read+0x44>)
 80006c2:	f7ff ff93 	bl	80005ec <app_log>
        return 0xFFFF; // return known error code
 80006c6:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80006ca:	e000      	b.n	80006ce <reg_read+0x3a>
    }

    return read_data;
 80006cc:	89bb      	ldrh	r3, [r7, #12]
}
 80006ce:	4618      	mov	r0, r3
 80006d0:	3710      	adds	r7, #16
 80006d2:	46bd      	mov	sp, r7
 80006d4:	bd80      	pop	{r7, pc}
 80006d6:	bf00      	nop
 80006d8:	080052bc 	.word	0x080052bc

080006dc <setup_reg>:
 * @brief reads the magic number from specific register to confirm
 * @brief that communication with the fpga is working correctly.
 * @return void.
 * // test: setup_reg();
 */
void setup_reg(void) {
 80006dc:	b580      	push	{r7, lr}
 80006de:	b084      	sub	sp, #16
 80006e0:	af00      	add	r7, sp, #0
    app_log("\r\n- starting fpga setup & verification ---\r\n");
 80006e2:	481b      	ldr	r0, [pc, #108]	@ (8000750 <setup_reg+0x74>)
 80006e4:	f7ff ff82 	bl	80005ec <app_log>

    const int max_attempts = 5;
 80006e8:	2305      	movs	r3, #5
 80006ea:	60bb      	str	r3, [r7, #8]
    for (int i = 0; i < max_attempts; ++i) {
 80006ec:	2300      	movs	r3, #0
 80006ee:	60fb      	str	r3, [r7, #12]
 80006f0:	e01f      	b.n	8000732 <setup_reg+0x56>
        uint16_t magic_number = reg_read(0x03);
 80006f2:	2003      	movs	r0, #3
 80006f4:	f7ff ffce 	bl	8000694 <reg_read>
 80006f8:	4603      	mov	r3, r0
 80006fa:	80fb      	strh	r3, [r7, #6]

        if (magic_number == 0x5678) {
 80006fc:	88fb      	ldrh	r3, [r7, #6]
 80006fe:	f245 6278 	movw	r2, #22136	@ 0x5678
 8000702:	4293      	cmp	r3, r2
 8000704:	d108      	bne.n	8000718 <setup_reg+0x3c>
            app_log("- fpga com verified (magic=0x%04X)\r\n", magic_number);
 8000706:	88fb      	ldrh	r3, [r7, #6]
 8000708:	4619      	mov	r1, r3
 800070a:	4812      	ldr	r0, [pc, #72]	@ (8000754 <setup_reg+0x78>)
 800070c:	f7ff ff6e 	bl	80005ec <app_log>
            app_log("- fpga setup complete -\r\n");
 8000710:	4811      	ldr	r0, [pc, #68]	@ (8000758 <setup_reg+0x7c>)
 8000712:	f7ff ff6b 	bl	80005ec <app_log>
            return;
 8000716:	e017      	b.n	8000748 <setup_reg+0x6c>
        }

        app_log("warn: attempt %d, reading reg 0x03... got 0x%04X\r\n", i + 1, magic_number);
 8000718:	68fb      	ldr	r3, [r7, #12]
 800071a:	3301      	adds	r3, #1
 800071c:	88fa      	ldrh	r2, [r7, #6]
 800071e:	4619      	mov	r1, r3
 8000720:	480e      	ldr	r0, [pc, #56]	@ (800075c <setup_reg+0x80>)
 8000722:	f7ff ff63 	bl	80005ec <app_log>
        HAL_Delay(250);
 8000726:	20fa      	movs	r0, #250	@ 0xfa
 8000728:	f001 fc9a 	bl	8002060 <HAL_Delay>
    for (int i = 0; i < max_attempts; ++i) {
 800072c:	68fb      	ldr	r3, [r7, #12]
 800072e:	3301      	adds	r3, #1
 8000730:	60fb      	str	r3, [r7, #12]
 8000732:	68fa      	ldr	r2, [r7, #12]
 8000734:	68bb      	ldr	r3, [r7, #8]
 8000736:	429a      	cmp	r2, r3
 8000738:	dbdb      	blt.n	80006f2 <setup_reg+0x16>
    }

    app_log("FATAL: failed to verify fpga connection after %d attempts.\r\n", max_attempts);
 800073a:	68b9      	ldr	r1, [r7, #8]
 800073c:	4808      	ldr	r0, [pc, #32]	@ (8000760 <setup_reg+0x84>)
 800073e:	f7ff ff55 	bl	80005ec <app_log>
    app_log("- fpga setup stopp ed -\r\n");
 8000742:	4808      	ldr	r0, [pc, #32]	@ (8000764 <setup_reg+0x88>)
 8000744:	f7ff ff52 	bl	80005ec <app_log>
    // In a real application, enter error state here?
}
 8000748:	3710      	adds	r7, #16
 800074a:	46bd      	mov	sp, r7
 800074c:	bd80      	pop	{r7, pc}
 800074e:	bf00      	nop
 8000750:	080052e8 	.word	0x080052e8
 8000754:	08005318 	.word	0x08005318
 8000758:	08005340 	.word	0x08005340
 800075c:	0800535c 	.word	0x0800535c
 8000760:	08005390 	.word	0x08005390
 8000764:	080053d0 	.word	0x080053d0

08000768 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000768:	b580      	push	{r7, lr}
 800076a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800076c:	f001 fc07 	bl	8001f7e <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000770:	f000 f846 	bl	8000800 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000774:	f000 f900 	bl	8000978 <MX_GPIO_Init>
  MX_SPI1_Init();
 8000778:	f000 f88e 	bl	8000898 <MX_SPI1_Init>
  MX_USART1_UART_Init();
 800077c:	f000 f8ca 	bl	8000914 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  app_log("\r\n- STM32 FPGA Controller -\r\n");
 8000780:	4819      	ldr	r0, [pc, #100]	@ (80007e8 <main+0x80>)
 8000782:	f7ff ff33 	bl	80005ec <app_log>

  // init drivers and verify FPGA communication
  fpga_init(&hspi1);
 8000786:	4819      	ldr	r0, [pc, #100]	@ (80007ec <main+0x84>)
 8000788:	f7ff ff58 	bl	800063c <fpga_init>
  setup_reg();
 800078c:	f7ff ffa6 	bl	80006dc <setup_reg>

  // configure tx and rx
  write_max2851_base_regs();
 8000790:	f000 fa1a 	bl	8000bc8 <write_max2851_base_regs>
  write_max2850_base_regs();
 8000794:	f000 f918 	bl	80009c8 <write_max2850_base_regs>

  // setup for packet loopback
  smoke_setup_for_packet_loopback(RX_CHANNEL, 0x10, TX_CHANNEL_MASK);
 8000798:	2201      	movs	r2, #1
 800079a:	2110      	movs	r1, #16
 800079c:	2001      	movs	r0, #1
 800079e:	f001 f9c5 	bl	8001b2c <smoke_setup_for_packet_loopback>
  HAL_Delay(100);
 80007a2:	2064      	movs	r0, #100	@ 0x64
 80007a4:	f001 fc5c 	bl	8002060 <HAL_Delay>

  // packet loopback test:
  app_log("\r\n- Packet Loopback Test -\r\n");
 80007a8:	4811      	ldr	r0, [pc, #68]	@ (80007f0 <main+0x88>)
 80007aa:	f7ff ff1f 	bl	80005ec <app_log>
  smoke_modem_metrics(100, 5); // (interval, iters)
 80007ae:	2105      	movs	r1, #5
 80007b0:	2064      	movs	r0, #100	@ 0x64
 80007b2:	f001 f89d 	bl	80018f0 <smoke_modem_metrics>
  // only logging the last iteration rn (change in smoke.c)
  // FIXX
  // seeing numbers close to max 32int here, NEED TO FIX

  // CW tone and QEC test:
  app_log("\r\n- CW Tone & QEC Test -\r\n");
 80007b6:	480f      	ldr	r0, [pc, #60]	@ (80007f4 <main+0x8c>)
 80007b8:	f7ff ff18 	bl	80005ec <app_log>
  smoke_qec_hw();
 80007bc:	f001 f8e4 	bl	8001988 <smoke_qec_hw>

  // cleanup
  app_log("\r\n- test done, cleaning up -\r\n");
 80007c0:	480d      	ldr	r0, [pc, #52]	@ (80007f8 <main+0x90>)
 80007c2:	f7ff ff13 	bl	80005ec <app_log>
  smoke_disable_tx_cw();
 80007c6:	f001 f99d 	bl	8001b04 <smoke_disable_tx_cw>
  set_Rx(0);
 80007ca:	2000      	movs	r0, #0
 80007cc:	f000 fab0 	bl	8000d30 <set_Rx>
  reg_write(0x65, 0);
 80007d0:	2100      	movs	r1, #0
 80007d2:	2065      	movs	r0, #101	@ 0x65
 80007d4:	f7ff ff3e 	bl	8000654 <reg_write>

  app_log("- sys idle -\r\n");
 80007d8:	4808      	ldr	r0, [pc, #32]	@ (80007fc <main+0x94>)
 80007da:	f7ff ff07 	bl	80005ec <app_log>

  /* USER CODE BEGIN WHILE */
  while (1)
  {
    HAL_Delay(5000);
 80007de:	f241 3088 	movw	r0, #5000	@ 0x1388
 80007e2:	f001 fc3d 	bl	8002060 <HAL_Delay>
 80007e6:	e7fa      	b.n	80007de <main+0x76>
 80007e8:	080053ec 	.word	0x080053ec
 80007ec:	20000178 	.word	0x20000178
 80007f0:	0800540c 	.word	0x0800540c
 80007f4:	0800542c 	.word	0x0800542c
 80007f8:	08005448 	.word	0x08005448
 80007fc:	08005468 	.word	0x08005468

08000800 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000800:	b580      	push	{r7, lr}
 8000802:	b094      	sub	sp, #80	@ 0x50
 8000804:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000806:	f107 0318 	add.w	r3, r7, #24
 800080a:	2238      	movs	r2, #56	@ 0x38
 800080c:	2100      	movs	r1, #0
 800080e:	4618      	mov	r0, r3
 8000810:	f004 f8b4 	bl	800497c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000814:	1d3b      	adds	r3, r7, #4
 8000816:	2200      	movs	r2, #0
 8000818:	601a      	str	r2, [r3, #0]
 800081a:	605a      	str	r2, [r3, #4]
 800081c:	609a      	str	r2, [r3, #8]
 800081e:	60da      	str	r2, [r3, #12]
 8000820:	611a      	str	r2, [r3, #16]

  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000822:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8000826:	f001 fea3 	bl	8002570 <HAL_PWREx_ControlVoltageScaling>
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800082a:	2302      	movs	r3, #2
 800082c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800082e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000832:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000834:	2340      	movs	r3, #64	@ 0x40
 8000836:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000838:	2302      	movs	r3, #2
 800083a:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800083c:	2302      	movs	r3, #2
 800083e:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 8000840:	2301      	movs	r3, #1
 8000842:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 8;
 8000844:	2308      	movs	r3, #8
 8000846:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000848:	2302      	movs	r3, #2
 800084a:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800084c:	2302      	movs	r3, #2
 800084e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000850:	2302      	movs	r3, #2
 8000852:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000854:	f107 0318 	add.w	r3, r7, #24
 8000858:	4618      	mov	r0, r3
 800085a:	f001 ff3d 	bl	80026d8 <HAL_RCC_OscConfig>
 800085e:	4603      	mov	r3, r0
 8000860:	2b00      	cmp	r3, #0
 8000862:	d001      	beq.n	8000868 <SystemClock_Config+0x68>
  {
    Error_Handler();
 8000864:	f000 f8aa 	bl	80009bc <Error_Handler>
  }
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000868:	230f      	movs	r3, #15
 800086a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800086c:	2303      	movs	r3, #3
 800086e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000870:	2300      	movs	r3, #0
 8000872:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000874:	2300      	movs	r3, #0
 8000876:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000878:	2300      	movs	r3, #0
 800087a:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800087c:	1d3b      	adds	r3, r7, #4
 800087e:	2102      	movs	r1, #2
 8000880:	4618      	mov	r0, r3
 8000882:	f002 fa3b 	bl	8002cfc <HAL_RCC_ClockConfig>
 8000886:	4603      	mov	r3, r0
 8000888:	2b00      	cmp	r3, #0
 800088a:	d001      	beq.n	8000890 <SystemClock_Config+0x90>
  {
    Error_Handler();
 800088c:	f000 f896 	bl	80009bc <Error_Handler>
  }
}
 8000890:	bf00      	nop
 8000892:	3750      	adds	r7, #80	@ 0x50
 8000894:	46bd      	mov	sp, r7
 8000896:	bd80      	pop	{r7, pc}

08000898 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000898:	b580      	push	{r7, lr}
 800089a:	af00      	add	r7, sp, #0
  hspi1.Instance = SPI1;
 800089c:	4b1b      	ldr	r3, [pc, #108]	@ (800090c <MX_SPI1_Init+0x74>)
 800089e:	4a1c      	ldr	r2, [pc, #112]	@ (8000910 <MX_SPI1_Init+0x78>)
 80008a0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80008a2:	4b1a      	ldr	r3, [pc, #104]	@ (800090c <MX_SPI1_Init+0x74>)
 80008a4:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80008a8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80008aa:	4b18      	ldr	r3, [pc, #96]	@ (800090c <MX_SPI1_Init+0x74>)
 80008ac:	2200      	movs	r2, #0
 80008ae:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80008b0:	4b16      	ldr	r3, [pc, #88]	@ (800090c <MX_SPI1_Init+0x74>)
 80008b2:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 80008b6:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80008b8:	4b14      	ldr	r3, [pc, #80]	@ (800090c <MX_SPI1_Init+0x74>)
 80008ba:	2200      	movs	r2, #0
 80008bc:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80008be:	4b13      	ldr	r3, [pc, #76]	@ (800090c <MX_SPI1_Init+0x74>)
 80008c0:	2200      	movs	r2, #0
 80008c2:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_OUTPUT;
 80008c4:	4b11      	ldr	r3, [pc, #68]	@ (800090c <MX_SPI1_Init+0x74>)
 80008c6:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 80008ca:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 80008cc:	4b0f      	ldr	r3, [pc, #60]	@ (800090c <MX_SPI1_Init+0x74>)
 80008ce:	2210      	movs	r2, #16
 80008d0:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80008d2:	4b0e      	ldr	r3, [pc, #56]	@ (800090c <MX_SPI1_Init+0x74>)
 80008d4:	2200      	movs	r2, #0
 80008d6:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80008d8:	4b0c      	ldr	r3, [pc, #48]	@ (800090c <MX_SPI1_Init+0x74>)
 80008da:	2200      	movs	r2, #0
 80008dc:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80008de:	4b0b      	ldr	r3, [pc, #44]	@ (800090c <MX_SPI1_Init+0x74>)
 80008e0:	2200      	movs	r2, #0
 80008e2:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 80008e4:	4b09      	ldr	r3, [pc, #36]	@ (800090c <MX_SPI1_Init+0x74>)
 80008e6:	2207      	movs	r2, #7
 80008e8:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80008ea:	4b08      	ldr	r3, [pc, #32]	@ (800090c <MX_SPI1_Init+0x74>)
 80008ec:	2200      	movs	r2, #0
 80008ee:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80008f0:	4b06      	ldr	r3, [pc, #24]	@ (800090c <MX_SPI1_Init+0x74>)
 80008f2:	2208      	movs	r2, #8
 80008f4:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80008f6:	4805      	ldr	r0, [pc, #20]	@ (800090c <MX_SPI1_Init+0x74>)
 80008f8:	f002 fe0c 	bl	8003514 <HAL_SPI_Init>
 80008fc:	4603      	mov	r3, r0
 80008fe:	2b00      	cmp	r3, #0
 8000900:	d001      	beq.n	8000906 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8000902:	f000 f85b 	bl	80009bc <Error_Handler>
  }
}
 8000906:	bf00      	nop
 8000908:	bd80      	pop	{r7, pc}
 800090a:	bf00      	nop
 800090c:	20000178 	.word	0x20000178
 8000910:	40013000 	.word	0x40013000

08000914 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000914:	b580      	push	{r7, lr}
 8000916:	af00      	add	r7, sp, #0
  huart1.Instance = USART1;
 8000918:	4b15      	ldr	r3, [pc, #84]	@ (8000970 <MX_USART1_UART_Init+0x5c>)
 800091a:	4a16      	ldr	r2, [pc, #88]	@ (8000974 <MX_USART1_UART_Init+0x60>)
 800091c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800091e:	4b14      	ldr	r3, [pc, #80]	@ (8000970 <MX_USART1_UART_Init+0x5c>)
 8000920:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000924:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000926:	4b12      	ldr	r3, [pc, #72]	@ (8000970 <MX_USART1_UART_Init+0x5c>)
 8000928:	2200      	movs	r2, #0
 800092a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800092c:	4b10      	ldr	r3, [pc, #64]	@ (8000970 <MX_USART1_UART_Init+0x5c>)
 800092e:	2200      	movs	r2, #0
 8000930:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000932:	4b0f      	ldr	r3, [pc, #60]	@ (8000970 <MX_USART1_UART_Init+0x5c>)
 8000934:	2200      	movs	r2, #0
 8000936:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000938:	4b0d      	ldr	r3, [pc, #52]	@ (8000970 <MX_USART1_UART_Init+0x5c>)
 800093a:	220c      	movs	r2, #12
 800093c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800093e:	4b0c      	ldr	r3, [pc, #48]	@ (8000970 <MX_USART1_UART_Init+0x5c>)
 8000940:	2200      	movs	r2, #0
 8000942:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000944:	4b0a      	ldr	r3, [pc, #40]	@ (8000970 <MX_USART1_UART_Init+0x5c>)
 8000946:	2200      	movs	r2, #0
 8000948:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800094a:	4b09      	ldr	r3, [pc, #36]	@ (8000970 <MX_USART1_UART_Init+0x5c>)
 800094c:	2200      	movs	r2, #0
 800094e:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000950:	4b07      	ldr	r3, [pc, #28]	@ (8000970 <MX_USART1_UART_Init+0x5c>)
 8000952:	2200      	movs	r2, #0
 8000954:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000956:	4b06      	ldr	r3, [pc, #24]	@ (8000970 <MX_USART1_UART_Init+0x5c>)
 8000958:	2200      	movs	r2, #0
 800095a:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800095c:	4804      	ldr	r0, [pc, #16]	@ (8000970 <MX_USART1_UART_Init+0x5c>)
 800095e:	f003 fa07 	bl	8003d70 <HAL_UART_Init>
 8000962:	4603      	mov	r3, r0
 8000964:	2b00      	cmp	r3, #0
 8000966:	d001      	beq.n	800096c <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8000968:	f000 f828 	bl	80009bc <Error_Handler>
  }
}
 800096c:	bf00      	nop
 800096e:	bd80      	pop	{r7, pc}
 8000970:	200001dc 	.word	0x200001dc
 8000974:	40013800 	.word	0x40013800

08000978 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000978:	b480      	push	{r7}
 800097a:	b083      	sub	sp, #12
 800097c:	af00      	add	r7, sp, #0
  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800097e:	4b09      	ldr	r3, [pc, #36]	@ (80009a4 <MX_GPIO_Init+0x2c>)
 8000980:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000982:	4a08      	ldr	r2, [pc, #32]	@ (80009a4 <MX_GPIO_Init+0x2c>)
 8000984:	f043 0301 	orr.w	r3, r3, #1
 8000988:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800098a:	4b06      	ldr	r3, [pc, #24]	@ (80009a4 <MX_GPIO_Init+0x2c>)
 800098c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800098e:	f003 0301 	and.w	r3, r3, #1
 8000992:	607b      	str	r3, [r7, #4]
 8000994:	687b      	ldr	r3, [r7, #4]
}
 8000996:	bf00      	nop
 8000998:	370c      	adds	r7, #12
 800099a:	46bd      	mov	sp, r7
 800099c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a0:	4770      	bx	lr
 80009a2:	bf00      	nop
 80009a4:	40021000 	.word	0x40021000

080009a8 <get_debug_uart>:
void print_message(const char *message) {
	HAL_UART_Transmit(&huart1, (uint8_t*) message, strlen(message), 100);
}

// allows the logger to access the debug UART handle without creating a tight coupling
UART_HandleTypeDef* get_debug_uart(void) {
 80009a8:	b480      	push	{r7}
 80009aa:	af00      	add	r7, sp, #0
    return &huart1; // Or whichever UART you use for debugging
 80009ac:	4b02      	ldr	r3, [pc, #8]	@ (80009b8 <get_debug_uart+0x10>)
}
 80009ae:	4618      	mov	r0, r3
 80009b0:	46bd      	mov	sp, r7
 80009b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b6:	4770      	bx	lr
 80009b8:	200001dc 	.word	0x200001dc

080009bc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009bc:	b480      	push	{r7}
 80009be:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009c0:	b672      	cpsid	i
}
 80009c2:	bf00      	nop
  __disable_irq();
  while (1)
 80009c4:	bf00      	nop
 80009c6:	e7fd      	b.n	80009c4 <Error_Handler+0x8>

080009c8 <write_max2850_base_regs>:
#include "fpga.h"
#include "fpga_regs.h"
#include "app_log.h"
#include "main.h"

void write_max2850_base_regs(void) {
 80009c8:	b5b0      	push	{r4, r5, r7, lr}
 80009ca:	b0a4      	sub	sp, #144	@ 0x90
 80009cc:	af00      	add	r7, sp, #0
  app_log("- configuring max2850 (tx) base registers...\r\n");
 80009ce:	4859      	ldr	r0, [pc, #356]	@ (8000b34 <write_max2850_base_regs+0x16c>)
 80009d0:	f7ff fe0c 	bl	80005ec <app_log>

  const int16_t max2850_main_reg[32] = {
 80009d4:	4b58      	ldr	r3, [pc, #352]	@ (8000b38 <write_max2850_base_regs+0x170>)
 80009d6:	f107 0444 	add.w	r4, r7, #68	@ 0x44
 80009da:	461d      	mov	r5, r3
 80009dc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80009de:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80009e0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80009e2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80009e4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80009e6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80009e8:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80009ec:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
      /* 25:*/  0x3A8, /* 26:*/  0x015, /* 27:*/  0x180, /* 28:*/  0x061,
      /* 29:*/  0x000, /* 30:*/  0x000, /* 31:*/  0x000
  };

  // write main registers
  app_log("info: max2850 writing main regs...\r\n");
 80009f0:	4852      	ldr	r0, [pc, #328]	@ (8000b3c <write_max2850_base_regs+0x174>)
 80009f2:	f7ff fdfb 	bl	80005ec <app_log>
  for (int k = 0; k < 32; k++) {
 80009f6:	2300      	movs	r3, #0
 80009f8:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80009fc:	e020      	b.n	8000a40 <write_max2850_base_regs+0x78>
    if (k == 12) continue;
 80009fe:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8000a02:	2b0c      	cmp	r3, #12
 8000a04:	d016      	beq.n	8000a34 <write_max2850_base_regs+0x6c>
    reg_write(REG_SPI_MAX2850, (k << 10) | max2850_main_reg[k]);
 8000a06:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8000a0a:	b21b      	sxth	r3, r3
 8000a0c:	029b      	lsls	r3, r3, #10
 8000a0e:	b21a      	sxth	r2, r3
 8000a10:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8000a14:	005b      	lsls	r3, r3, #1
 8000a16:	3390      	adds	r3, #144	@ 0x90
 8000a18:	443b      	add	r3, r7
 8000a1a:	f933 3c4c 	ldrsh.w	r3, [r3, #-76]
 8000a1e:	4313      	orrs	r3, r2
 8000a20:	b21b      	sxth	r3, r3
 8000a22:	b29b      	uxth	r3, r3
 8000a24:	4619      	mov	r1, r3
 8000a26:	2042      	movs	r0, #66	@ 0x42
 8000a28:	f7ff fe14 	bl	8000654 <reg_write>
    HAL_Delay(5); // pacing delay from Teensy code
 8000a2c:	2005      	movs	r0, #5
 8000a2e:	f001 fb17 	bl	8002060 <HAL_Delay>
 8000a32:	e000      	b.n	8000a36 <write_max2850_base_regs+0x6e>
    if (k == 12) continue;
 8000a34:	bf00      	nop
  for (int k = 0; k < 32; k++) {
 8000a36:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8000a3a:	3301      	adds	r3, #1
 8000a3c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8000a40:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8000a44:	2b1f      	cmp	r3, #31
 8000a46:	ddda      	ble.n	80009fe <write_max2850_base_regs+0x36>
  }

  uint16_t readback = reg_read(REG_SPI_MAX2850);
 8000a48:	2042      	movs	r0, #66	@ 0x42
 8000a4a:	f7ff fe23 	bl	8000694 <reg_read>
 8000a4e:	4603      	mov	r3, r0
 8000a50:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86
  if(readback != 0xffff) {
 8000a54:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8000a58:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000a5c:	4293      	cmp	r3, r2
 8000a5e:	d006      	beq.n	8000a6e <write_max2850_base_regs+0xa6>
    app_log("warn: max2850 (tx) failed lock after main regs, status=0x%04X\r\n", readback);
 8000a60:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8000a64:	4619      	mov	r1, r3
 8000a66:	4836      	ldr	r0, [pc, #216]	@ (8000b40 <write_max2850_base_regs+0x178>)
 8000a68:	f7ff fdc0 	bl	80005ec <app_log>
 8000a6c:	e002      	b.n	8000a74 <write_max2850_base_regs+0xac>
  } else {
    app_log("ok: max2850 (tx) pll locked after main regs\r\n");
 8000a6e:	4835      	ldr	r0, [pc, #212]	@ (8000b44 <write_max2850_base_regs+0x17c>)
 8000a70:	f7ff fdbc 	bl	80005ec <app_log>
  }

  // write local regs
  app_log("info: max2850 writing local regs...\r\n");
 8000a74:	4834      	ldr	r0, [pc, #208]	@ (8000b48 <write_max2850_base_regs+0x180>)
 8000a76:	f7ff fdb9 	bl	80005ec <app_log>

  // enable local reg programming mode
  reg_write(REG_SPI_MAX2850, (0 << 10) | max2850_main_reg[0] | 0x01);
 8000a7a:	f9b7 3044 	ldrsh.w	r3, [r7, #68]	@ 0x44
 8000a7e:	f043 0301 	orr.w	r3, r3, #1
 8000a82:	b21b      	sxth	r3, r3
 8000a84:	b29b      	uxth	r3, r3
 8000a86:	4619      	mov	r1, r3
 8000a88:	2042      	movs	r0, #66	@ 0x42
 8000a8a:	f7ff fde3 	bl	8000654 <reg_write>
  HAL_Delay(10);
 8000a8e:	200a      	movs	r0, #10
 8000a90:	f001 fae6 	bl	8002060 <HAL_Delay>

  const int16_t max2850_local_reg[32] = {
 8000a94:	4b2d      	ldr	r3, [pc, #180]	@ (8000b4c <write_max2850_base_regs+0x184>)
 8000a96:	1d3c      	adds	r4, r7, #4
 8000a98:	461d      	mov	r5, r3
 8000a9a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000a9c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000a9e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000aa0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000aa2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000aa4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000aa6:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8000aaa:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
      /* 20:*/ 0x000, /* 21:*/ 0x000, /* 22:*/ 0x000, /* 23:*/ 0x000,
      /* 24:*/ 0x0C4, /* 25:*/ 0x12B, /* 26:*/ 0x165, /* 27:*/ 0x002,
      /* 28:*/ 0x004, /* 29:*/ 0x0,   /* 30:*/ 0x0,   /* 31:*/ 0x040
  };

  for (int k = 0; k < 32; k++) {
 8000aae:	2300      	movs	r3, #0
 8000ab0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8000ab4:	e028      	b.n	8000b08 <write_max2850_base_regs+0x140>
    if (k == 0 || k == 29 || k == 30) continue;
 8000ab6:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8000aba:	2b00      	cmp	r3, #0
 8000abc:	d01e      	beq.n	8000afc <write_max2850_base_regs+0x134>
 8000abe:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8000ac2:	2b1d      	cmp	r3, #29
 8000ac4:	d01a      	beq.n	8000afc <write_max2850_base_regs+0x134>
 8000ac6:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8000aca:	2b1e      	cmp	r3, #30
 8000acc:	d016      	beq.n	8000afc <write_max2850_base_regs+0x134>
    reg_write(REG_SPI_MAX2850, (k << 10) | max2850_local_reg[k]);
 8000ace:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8000ad2:	b21b      	sxth	r3, r3
 8000ad4:	029b      	lsls	r3, r3, #10
 8000ad6:	b21a      	sxth	r2, r3
 8000ad8:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8000adc:	005b      	lsls	r3, r3, #1
 8000ade:	3390      	adds	r3, #144	@ 0x90
 8000ae0:	443b      	add	r3, r7
 8000ae2:	f933 3c8c 	ldrsh.w	r3, [r3, #-140]
 8000ae6:	4313      	orrs	r3, r2
 8000ae8:	b21b      	sxth	r3, r3
 8000aea:	b29b      	uxth	r3, r3
 8000aec:	4619      	mov	r1, r3
 8000aee:	2042      	movs	r0, #66	@ 0x42
 8000af0:	f7ff fdb0 	bl	8000654 <reg_write>
    HAL_Delay(5);
 8000af4:	2005      	movs	r0, #5
 8000af6:	f001 fab3 	bl	8002060 <HAL_Delay>
 8000afa:	e000      	b.n	8000afe <write_max2850_base_regs+0x136>
    if (k == 0 || k == 29 || k == 30) continue;
 8000afc:	bf00      	nop
  for (int k = 0; k < 32; k++) {
 8000afe:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8000b02:	3301      	adds	r3, #1
 8000b04:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8000b08:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8000b0c:	2b1f      	cmp	r3, #31
 8000b0e:	ddd2      	ble.n	8000ab6 <write_max2850_base_regs+0xee>
  }

  // return to main reg programming mode
  reg_write(REG_SPI_MAX2850, (0 << 10) | max2850_main_reg[0] | 0x00);
 8000b10:	f9b7 3044 	ldrsh.w	r3, [r7, #68]	@ 0x44
 8000b14:	b29b      	uxth	r3, r3
 8000b16:	4619      	mov	r1, r3
 8000b18:	2042      	movs	r0, #66	@ 0x42
 8000b1a:	f7ff fd9b 	bl	8000654 <reg_write>
  HAL_Delay(10);
 8000b1e:	200a      	movs	r0, #10
 8000b20:	f001 fa9e 	bl	8002060 <HAL_Delay>

  app_log("info: max2850 config complete\r\n");
 8000b24:	480a      	ldr	r0, [pc, #40]	@ (8000b50 <write_max2850_base_regs+0x188>)
 8000b26:	f7ff fd61 	bl	80005ec <app_log>
}
 8000b2a:	bf00      	nop
 8000b2c:	3790      	adds	r7, #144	@ 0x90
 8000b2e:	46bd      	mov	sp, r7
 8000b30:	bdb0      	pop	{r4, r5, r7, pc}
 8000b32:	bf00      	nop
 8000b34:	08005478 	.word	0x08005478
 8000b38:	08005588 	.word	0x08005588
 8000b3c:	080054a8 	.word	0x080054a8
 8000b40:	080054d0 	.word	0x080054d0
 8000b44:	08005510 	.word	0x08005510
 8000b48:	08005540 	.word	0x08005540
 8000b4c:	080055c8 	.word	0x080055c8
 8000b50:	08005568 	.word	0x08005568

08000b54 <set_Tx>:
      reg_write(REG_SPI_MAX2850, (1 << 10) | rx_gain_setting);
    }
    reg_write(REG_CTRL, (uint16_t)(reg_read(REG_CTRL) & ~0x0002));
}

void set_Tx(uint16_t tx_gain_setting, uint16_t tx_channels) {
 8000b54:	b580      	push	{r7, lr}
 8000b56:	b082      	sub	sp, #8
 8000b58:	af00      	add	r7, sp, #0
 8000b5a:	4603      	mov	r3, r0
 8000b5c:	460a      	mov	r2, r1
 8000b5e:	80fb      	strh	r3, [r7, #6]
 8000b60:	4613      	mov	r3, r2
 8000b62:	80bb      	strh	r3, [r7, #4]
    reg_write(REG_SPI_MAX2850, (0 << 10) | (tx_channels << 5) | 0xE);
 8000b64:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000b68:	015b      	lsls	r3, r3, #5
 8000b6a:	b21b      	sxth	r3, r3
 8000b6c:	f043 030e 	orr.w	r3, r3, #14
 8000b70:	b21b      	sxth	r3, r3
 8000b72:	b29b      	uxth	r3, r3
 8000b74:	4619      	mov	r1, r3
 8000b76:	2042      	movs	r0, #66	@ 0x42
 8000b78:	f7ff fd6c 	bl	8000654 <reg_write>
    if(tx_gain_setting) {
 8000b7c:	88fb      	ldrh	r3, [r7, #6]
 8000b7e:	2b00      	cmp	r3, #0
 8000b80:	d010      	beq.n	8000ba4 <set_Tx+0x50>
      reg_write(REG_SPI_MAX2850, (9 << 10) | ((tx_gain_setting & 0x1F) << 4) | 0x0F);
 8000b82:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000b86:	011b      	lsls	r3, r3, #4
 8000b88:	b21b      	sxth	r3, r3
 8000b8a:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8000b8e:	b21b      	sxth	r3, r3
 8000b90:	f443 5310 	orr.w	r3, r3, #9216	@ 0x2400
 8000b94:	f043 030f 	orr.w	r3, r3, #15
 8000b98:	b21b      	sxth	r3, r3
 8000b9a:	b29b      	uxth	r3, r3
 8000b9c:	4619      	mov	r1, r3
 8000b9e:	2042      	movs	r0, #66	@ 0x42
 8000ba0:	f7ff fd58 	bl	8000654 <reg_write>
    }
    reg_write(REG_SPI_MAX2850, (10 << 10) | 0x01); // Enable PA Bias
 8000ba4:	f642 0101 	movw	r1, #10241	@ 0x2801
 8000ba8:	2042      	movs	r0, #66	@ 0x42
 8000baa:	f7ff fd53 	bl	8000654 <reg_write>
    reg_write(REG_CTRL, 0x00);
 8000bae:	2100      	movs	r1, #0
 8000bb0:	2023      	movs	r0, #35	@ 0x23
 8000bb2:	f7ff fd4f 	bl	8000654 <reg_write>
    reg_write(REG_CHAN_MASK, tx_channels);
 8000bb6:	88bb      	ldrh	r3, [r7, #4]
 8000bb8:	4619      	mov	r1, r3
 8000bba:	2002      	movs	r0, #2
 8000bbc:	f7ff fd4a 	bl	8000654 <reg_write>
}
 8000bc0:	bf00      	nop
 8000bc2:	3708      	adds	r7, #8
 8000bc4:	46bd      	mov	sp, r7
 8000bc6:	bd80      	pop	{r7, pc}

08000bc8 <write_max2851_base_regs>:
#include "fpga.h"
#include "fpga_regs.h"
#include "app_log.h"
#include "main.h"

void write_max2851_base_regs(void) {
 8000bc8:	b5b0      	push	{r4, r5, r7, lr}
 8000bca:	b0a4      	sub	sp, #144	@ 0x90
 8000bcc:	af00      	add	r7, sp, #0
  app_log("info: configuring max2851 (rx) base regs...\r\n");
 8000bce:	4851      	ldr	r0, [pc, #324]	@ (8000d14 <write_max2851_base_regs+0x14c>)
 8000bd0:	f7ff fd0c 	bl	80005ec <app_log>

  const int16_t max2851_main_reg[32] = {
 8000bd4:	4b50      	ldr	r3, [pc, #320]	@ (8000d18 <write_max2851_base_regs+0x150>)
 8000bd6:	f107 0444 	add.w	r4, r7, #68	@ 0x44
 8000bda:	461d      	mov	r5, r3
 8000bdc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000bde:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000be0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000be2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000be4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000be6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000be8:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8000bec:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
      /* 24:*/  0x203, /* 25:*/  0x3A8, /* 26:*/  0x015, /* 27:*/  0x180,
      /* 28:*/  0x061, /* 29:*/  0x000, /* 30:*/  0x000, /* 31:*/  0x000
  };

  // write main regs
  app_log("info: max2851 writing main registers...\r\n");
 8000bf0:	484a      	ldr	r0, [pc, #296]	@ (8000d1c <write_max2851_base_regs+0x154>)
 8000bf2:	f7ff fcfb 	bl	80005ec <app_log>
  for (int k = 0; k < 32; k++) {
 8000bf6:	2300      	movs	r3, #0
 8000bf8:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8000bfc:	e01d      	b.n	8000c3a <write_max2851_base_regs+0x72>
    if (k == 12) continue;
 8000bfe:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8000c02:	2b0c      	cmp	r3, #12
 8000c04:	d013      	beq.n	8000c2e <write_max2851_base_regs+0x66>
    reg_write(REG_SPI_MAX2851, (k << 10) | max2851_main_reg[k]);
 8000c06:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8000c0a:	b21b      	sxth	r3, r3
 8000c0c:	029b      	lsls	r3, r3, #10
 8000c0e:	b21a      	sxth	r2, r3
 8000c10:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8000c14:	005b      	lsls	r3, r3, #1
 8000c16:	3390      	adds	r3, #144	@ 0x90
 8000c18:	443b      	add	r3, r7
 8000c1a:	f933 3c4c 	ldrsh.w	r3, [r3, #-76]
 8000c1e:	4313      	orrs	r3, r2
 8000c20:	b21b      	sxth	r3, r3
 8000c22:	b29b      	uxth	r3, r3
 8000c24:	4619      	mov	r1, r3
 8000c26:	2043      	movs	r0, #67	@ 0x43
 8000c28:	f7ff fd14 	bl	8000654 <reg_write>
 8000c2c:	e000      	b.n	8000c30 <write_max2851_base_regs+0x68>
    if (k == 12) continue;
 8000c2e:	bf00      	nop
  for (int k = 0; k < 32; k++) {
 8000c30:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8000c34:	3301      	adds	r3, #1
 8000c36:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8000c3a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8000c3e:	2b1f      	cmp	r3, #31
 8000c40:	dddd      	ble.n	8000bfe <write_max2851_base_regs+0x36>
    // no teensy delays here
  }

  uint16_t readback = reg_read(REG_SPI_MAX2851);
 8000c42:	2043      	movs	r0, #67	@ 0x43
 8000c44:	f7ff fd26 	bl	8000694 <reg_read>
 8000c48:	4603      	mov	r3, r0
 8000c4a:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86
  if(readback != 0xffff) {
 8000c4e:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8000c52:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000c56:	4293      	cmp	r3, r2
 8000c58:	d005      	beq.n	8000c66 <write_max2851_base_regs+0x9e>
    app_log("warn: max2851 (rx) failed lock after main regs, status=0x%04X\r\n", readback);
 8000c5a:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8000c5e:	4619      	mov	r1, r3
 8000c60:	482f      	ldr	r0, [pc, #188]	@ (8000d20 <write_max2851_base_regs+0x158>)
 8000c62:	f7ff fcc3 	bl	80005ec <app_log>
  }

  // write local regs
  app_log("info: max2851 writing local regs...\r\n");
 8000c66:	482f      	ldr	r0, [pc, #188]	@ (8000d24 <write_max2851_base_regs+0x15c>)
 8000c68:	f7ff fcc0 	bl	80005ec <app_log>

  // enable local reg programming mode
  reg_write(REG_SPI_MAX2851, (0 << 10) | max2851_main_reg[0] | 0x01);
 8000c6c:	f9b7 3044 	ldrsh.w	r3, [r7, #68]	@ 0x44
 8000c70:	f043 0301 	orr.w	r3, r3, #1
 8000c74:	b21b      	sxth	r3, r3
 8000c76:	b29b      	uxth	r3, r3
 8000c78:	4619      	mov	r1, r3
 8000c7a:	2043      	movs	r0, #67	@ 0x43
 8000c7c:	f7ff fcea 	bl	8000654 <reg_write>

  const int16_t max2851_local_reg[32] = {
 8000c80:	4b29      	ldr	r3, [pc, #164]	@ (8000d28 <write_max2851_base_regs+0x160>)
 8000c82:	1d3c      	adds	r4, r7, #4
 8000c84:	461d      	mov	r5, r3
 8000c86:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000c88:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000c8a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000c8c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000c8e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000c90:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000c92:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8000c96:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
      /* 20:*/ 0x000, /* 21:*/ 0x000, /* 22:*/ 0x000, /* 23:*/ 0x000,
      /* 24:*/ 0x1C4, /* 25:*/ 0x12B, /* 26:*/ 0x165, /* 27:*/ 0x002,
      /* 28:*/ 0x004, /* 29:*/ 0x0,   /* 30:*/ 0x0,   /* 31:*/ 0x040
  };

  for (int k = 0; k < 32; k++) {
 8000c9a:	2300      	movs	r3, #0
 8000c9c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8000ca0:	e025      	b.n	8000cee <write_max2851_base_regs+0x126>
    if (k == 0 || k == 29 || k == 30) continue;
 8000ca2:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8000ca6:	2b00      	cmp	r3, #0
 8000ca8:	d01b      	beq.n	8000ce2 <write_max2851_base_regs+0x11a>
 8000caa:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8000cae:	2b1d      	cmp	r3, #29
 8000cb0:	d017      	beq.n	8000ce2 <write_max2851_base_regs+0x11a>
 8000cb2:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8000cb6:	2b1e      	cmp	r3, #30
 8000cb8:	d013      	beq.n	8000ce2 <write_max2851_base_regs+0x11a>
    reg_write(REG_SPI_MAX2851, (k << 10) | max2851_local_reg[k]);
 8000cba:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8000cbe:	b21b      	sxth	r3, r3
 8000cc0:	029b      	lsls	r3, r3, #10
 8000cc2:	b21a      	sxth	r2, r3
 8000cc4:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8000cc8:	005b      	lsls	r3, r3, #1
 8000cca:	3390      	adds	r3, #144	@ 0x90
 8000ccc:	443b      	add	r3, r7
 8000cce:	f933 3c8c 	ldrsh.w	r3, [r3, #-140]
 8000cd2:	4313      	orrs	r3, r2
 8000cd4:	b21b      	sxth	r3, r3
 8000cd6:	b29b      	uxth	r3, r3
 8000cd8:	4619      	mov	r1, r3
 8000cda:	2043      	movs	r0, #67	@ 0x43
 8000cdc:	f7ff fcba 	bl	8000654 <reg_write>
 8000ce0:	e000      	b.n	8000ce4 <write_max2851_base_regs+0x11c>
    if (k == 0 || k == 29 || k == 30) continue;
 8000ce2:	bf00      	nop
  for (int k = 0; k < 32; k++) {
 8000ce4:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8000ce8:	3301      	adds	r3, #1
 8000cea:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8000cee:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8000cf2:	2b1f      	cmp	r3, #31
 8000cf4:	ddd5      	ble.n	8000ca2 <write_max2851_base_regs+0xda>
  }

  // return to main rrg programming mode
  reg_write(REG_SPI_MAX2851, (0 << 10) | max2851_main_reg[0] | 0x00);
 8000cf6:	f9b7 3044 	ldrsh.w	r3, [r7, #68]	@ 0x44
 8000cfa:	b29b      	uxth	r3, r3
 8000cfc:	4619      	mov	r1, r3
 8000cfe:	2043      	movs	r0, #67	@ 0x43
 8000d00:	f7ff fca8 	bl	8000654 <reg_write>

  app_log("info: max2851 configuration complete.\r\n");
 8000d04:	4809      	ldr	r0, [pc, #36]	@ (8000d2c <write_max2851_base_regs+0x164>)
 8000d06:	f7ff fc71 	bl	80005ec <app_log>
}
 8000d0a:	bf00      	nop
 8000d0c:	3790      	adds	r7, #144	@ 0x90
 8000d0e:	46bd      	mov	sp, r7
 8000d10:	bdb0      	pop	{r4, r5, r7, pc}
 8000d12:	bf00      	nop
 8000d14:	08005608 	.word	0x08005608
 8000d18:	080056f4 	.word	0x080056f4
 8000d1c:	08005638 	.word	0x08005638
 8000d20:	08005664 	.word	0x08005664
 8000d24:	080056a4 	.word	0x080056a4
 8000d28:	08005734 	.word	0x08005734
 8000d2c:	080056cc 	.word	0x080056cc

08000d30 <set_Rx>:

// set_Rx, set_Rx_gain, and set_RxIdle functions remain unchanged
void set_Rx(int16_t rx_gain_setting) {
 8000d30:	b580      	push	{r7, lr}
 8000d32:	b082      	sub	sp, #8
 8000d34:	af00      	add	r7, sp, #0
 8000d36:	4603      	mov	r3, r0
 8000d38:	80fb      	strh	r3, [r7, #6]
    reg_write(REG_SPI_MAX2851, (0 << 10) | 0x02A);
 8000d3a:	212a      	movs	r1, #42	@ 0x2a
 8000d3c:	2043      	movs	r0, #67	@ 0x43
 8000d3e:	f7ff fc89 	bl	8000654 <reg_write>
    if(rx_gain_setting){
 8000d42:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000d46:	2b00      	cmp	r3, #0
 8000d48:	d004      	beq.n	8000d54 <set_Rx+0x24>
      set_Rx_gain(rx_gain_setting);
 8000d4a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000d4e:	4618      	mov	r0, r3
 8000d50:	f000 f814 	bl	8000d7c <set_Rx_gain>
    }
    reg_write(REG_CTRL, reg_read(REG_CTRL) | CTRL_TX_DISABLE_LVDS);
 8000d54:	2023      	movs	r0, #35	@ 0x23
 8000d56:	f7ff fc9d 	bl	8000694 <reg_read>
 8000d5a:	4603      	mov	r3, r0
 8000d5c:	f043 0301 	orr.w	r3, r3, #1
 8000d60:	b29b      	uxth	r3, r3
 8000d62:	4619      	mov	r1, r3
 8000d64:	2023      	movs	r0, #35	@ 0x23
 8000d66:	f7ff fc75 	bl	8000654 <reg_write>
    reg_write(REG_SPI_MAX2850, (10 << 10) | 0x00); // Disable PA Bias
 8000d6a:	f44f 5120 	mov.w	r1, #10240	@ 0x2800
 8000d6e:	2042      	movs	r0, #66	@ 0x42
 8000d70:	f7ff fc70 	bl	8000654 <reg_write>
}
 8000d74:	bf00      	nop
 8000d76:	3708      	adds	r7, #8
 8000d78:	46bd      	mov	sp, r7
 8000d7a:	bd80      	pop	{r7, pc}

08000d7c <set_Rx_gain>:

void set_Rx_gain(int16_t rx_gain_setting) {
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	b082      	sub	sp, #8
 8000d80:	af00      	add	r7, sp, #0
 8000d82:	4603      	mov	r3, r0
 8000d84:	80fb      	strh	r3, [r7, #6]
    reg_write(0x6A, rx_gain_setting);
 8000d86:	88fb      	ldrh	r3, [r7, #6]
 8000d88:	4619      	mov	r1, r3
 8000d8a:	206a      	movs	r0, #106	@ 0x6a
 8000d8c:	f7ff fc62 	bl	8000654 <reg_write>
}
 8000d90:	bf00      	nop
 8000d92:	3708      	adds	r7, #8
 8000d94:	46bd      	mov	sp, r7
 8000d96:	bd80      	pop	{r7, pc}

08000d98 <mm_read32_sel>:
#include "fpga_regs.h"
#include "app_log.h"
#include "main.h" // For HAL_Delay

// read a 32-bit value from the metric block by selecting and then reading ms/ls parts.
static inline uint32_t mm_read32_sel(uint8_t sel) {
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	b084      	sub	sp, #16
 8000d9c:	af00      	add	r7, sp, #0
 8000d9e:	4603      	mov	r3, r0
 8000da0:	71fb      	strb	r3, [r7, #7]
    reg_write(REG_MM_MUX_LS, sel);
 8000da2:	79fb      	ldrb	r3, [r7, #7]
 8000da4:	b29b      	uxth	r3, r3
 8000da6:	4619      	mov	r1, r3
 8000da8:	2069      	movs	r0, #105	@ 0x69
 8000daa:	f7ff fc53 	bl	8000654 <reg_write>
    uint16_t ms = reg_read(REG_MM_TRIGGER); // corrected, was REG_MM_MS
 8000dae:	2068      	movs	r0, #104	@ 0x68
 8000db0:	f7ff fc70 	bl	8000694 <reg_read>
 8000db4:	4603      	mov	r3, r0
 8000db6:	81fb      	strh	r3, [r7, #14]
    uint16_t ls = reg_read(REG_MM_MUX_LS);
 8000db8:	2069      	movs	r0, #105	@ 0x69
 8000dba:	f7ff fc6b 	bl	8000694 <reg_read>
 8000dbe:	4603      	mov	r3, r0
 8000dc0:	81bb      	strh	r3, [r7, #12]
    return ((uint32_t)ms << 16) | ls;
 8000dc2:	89fb      	ldrh	r3, [r7, #14]
 8000dc4:	041a      	lsls	r2, r3, #16
 8000dc6:	89bb      	ldrh	r3, [r7, #12]
 8000dc8:	4313      	orrs	r3, r2
}
 8000dca:	4618      	mov	r0, r3
 8000dcc:	3710      	adds	r7, #16
 8000dce:	46bd      	mov	sp, r7
 8000dd0:	bd80      	pop	{r7, pc}

08000dd2 <delta32>:

// calculates delta between stop and start counter, handling 32-bit wraparound
static inline uint32_t delta32(uint32_t stop, uint32_t start) {
 8000dd2:	b480      	push	{r7}
 8000dd4:	b083      	sub	sp, #12
 8000dd6:	af00      	add	r7, sp, #0
 8000dd8:	6078      	str	r0, [r7, #4]
 8000dda:	6039      	str	r1, [r7, #0]
    return (stop >= start) ? (stop - start) : (stop + (0xFFFFFFFFu - start) + 1u);
 8000ddc:	687a      	ldr	r2, [r7, #4]
 8000dde:	683b      	ldr	r3, [r7, #0]
 8000de0:	1ad3      	subs	r3, r2, r3
}
 8000de2:	4618      	mov	r0, r3
 8000de4:	370c      	adds	r7, #12
 8000de6:	46bd      	mov	sp, r7
 8000de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dec:	4770      	bx	lr
	...

08000df0 <mm_get_metric_q15>:
 * @param quiet if true, suppresses logging output for this call.
 * @return mm_status_t status code indicating success or failure.
 * // test: mm_counts_t counts; mm_get_metric_q15(100, NULL, &counts, false);
 */
mm_status_t mm_get_metric_q15(uint16_t interval_coarse, int32_t *metric_q15_out, mm_counts_t *counts_out, bool quiet)
{
 8000df0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8000df4:	b09a      	sub	sp, #104	@ 0x68
 8000df6:	af02      	add	r7, sp, #8
 8000df8:	61b9      	str	r1, [r7, #24]
 8000dfa:	617a      	str	r2, [r7, #20]
 8000dfc:	461a      	mov	r2, r3
 8000dfe:	4603      	mov	r3, r0
 8000e00:	83fb      	strh	r3, [r7, #30]
 8000e02:	4613      	mov	r3, r2
 8000e04:	777b      	strb	r3, [r7, #29]
    if (metric_q15_out) *metric_q15_out = 0;
 8000e06:	69bb      	ldr	r3, [r7, #24]
 8000e08:	2b00      	cmp	r3, #0
 8000e0a:	d002      	beq.n	8000e12 <mm_get_metric_q15+0x22>
 8000e0c:	69bb      	ldr	r3, [r7, #24]
 8000e0e:	2200      	movs	r2, #0
 8000e10:	601a      	str	r2, [r3, #0]
    if (counts_out) {
 8000e12:	697b      	ldr	r3, [r7, #20]
 8000e14:	2b00      	cmp	r3, #0
 8000e16:	d011      	beq.n	8000e3c <mm_get_metric_q15+0x4c>
        counts_out->evm = counts_out->check = counts_out->detect = counts_out->sent = 0;
 8000e18:	697b      	ldr	r3, [r7, #20]
 8000e1a:	2200      	movs	r2, #0
 8000e1c:	60da      	str	r2, [r3, #12]
 8000e1e:	697b      	ldr	r3, [r7, #20]
 8000e20:	68da      	ldr	r2, [r3, #12]
 8000e22:	697b      	ldr	r3, [r7, #20]
 8000e24:	609a      	str	r2, [r3, #8]
 8000e26:	697b      	ldr	r3, [r7, #20]
 8000e28:	689a      	ldr	r2, [r3, #8]
 8000e2a:	697b      	ldr	r3, [r7, #20]
 8000e2c:	605a      	str	r2, [r3, #4]
 8000e2e:	697b      	ldr	r3, [r7, #20]
 8000e30:	685a      	ldr	r2, [r3, #4]
 8000e32:	697b      	ldr	r3, [r7, #20]
 8000e34:	601a      	str	r2, [r3, #0]
        counts_out->interval_applied = interval_coarse;
 8000e36:	697b      	ldr	r3, [r7, #20]
 8000e38:	8bfa      	ldrh	r2, [r7, #30]
 8000e3a:	821a      	strh	r2, [r3, #16]
    }

    // program measurement window interval
    reg_write(REG_MM_INTERVAL, interval_coarse);
 8000e3c:	8bfb      	ldrh	r3, [r7, #30]
 8000e3e:	4619      	mov	r1, r3
 8000e40:	2067      	movs	r0, #103	@ 0x67
 8000e42:	f7ff fc07 	bl	8000654 <reg_write>

    // trigger with a 0 -> 1 edge on the trigger register
    reg_write(REG_MM_TRIGGER, 0x0000);
 8000e46:	2100      	movs	r1, #0
 8000e48:	2068      	movs	r0, #104	@ 0x68
 8000e4a:	f7ff fc03 	bl	8000654 <reg_write>
    reg_write(REG_MM_TRIGGER, 0x0001);
 8000e4e:	2101      	movs	r1, #1
 8000e50:	2068      	movs	r0, #104	@ 0x68
 8000e52:	f7ff fbff 	bl	8000654 <reg_write>

    // immediately read the latched 'start' values
    uint32_t evm_start   = mm_read32_sel(MM_SEL_EVM_START);
 8000e56:	2000      	movs	r0, #0
 8000e58:	f7ff ff9e 	bl	8000d98 <mm_read32_sel>
 8000e5c:	65f8      	str	r0, [r7, #92]	@ 0x5c
    uint32_t chk_start   = mm_read32_sel(MM_SEL_CHECK_START);
 8000e5e:	2002      	movs	r0, #2
 8000e60:	f7ff ff9a 	bl	8000d98 <mm_read32_sel>
 8000e64:	65b8      	str	r0, [r7, #88]	@ 0x58
    uint32_t det_start   = mm_read32_sel(MM_SEL_DETECT_START);
 8000e66:	2004      	movs	r0, #4
 8000e68:	f7ff ff96 	bl	8000d98 <mm_read32_sel>
 8000e6c:	6578      	str	r0, [r7, #84]	@ 0x54
    uint32_t sent_start  = mm_read32_sel(MM_SEL_MEM_START);
 8000e6e:	2006      	movs	r0, #6
 8000e70:	f7ff ff92 	bl	8000d98 <mm_read32_sel>
 8000e74:	6538      	str	r0, [r7, #80]	@ 0x50

    // wait for window to complete by polling the interval register
    uint32_t start_time = HAL_GetTick();
 8000e76:	f001 f8e7 	bl	8002048 <HAL_GetTick>
 8000e7a:	64f8      	str	r0, [r7, #76]	@ 0x4c
    while (reg_read(REG_MM_INTERVAL) != 0) {
 8000e7c:	e013      	b.n	8000ea6 <mm_get_metric_q15+0xb6>
        if (HAL_GetTick() - start_time > 2000) { // 2 sec timeout
 8000e7e:	f001 f8e3 	bl	8002048 <HAL_GetTick>
 8000e82:	4602      	mov	r2, r0
 8000e84:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8000e86:	1ad3      	subs	r3, r2, r3
 8000e88:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8000e8c:	d90b      	bls.n	8000ea6 <mm_get_metric_q15+0xb6>
            if (!quiet) app_log("err: mm_get_metric timeout\r\n");
 8000e8e:	7f7b      	ldrb	r3, [r7, #29]
 8000e90:	f083 0301 	eor.w	r3, r3, #1
 8000e94:	b2db      	uxtb	r3, r3
 8000e96:	2b00      	cmp	r3, #0
 8000e98:	d002      	beq.n	8000ea0 <mm_get_metric_q15+0xb0>
 8000e9a:	4841      	ldr	r0, [pc, #260]	@ (8000fa0 <mm_get_metric_q15+0x1b0>)
 8000e9c:	f7ff fba6 	bl	80005ec <app_log>
            return MM_ERR_TIMEOUT;
 8000ea0:	f06f 0301 	mvn.w	r3, #1
 8000ea4:	e076      	b.n	8000f94 <mm_get_metric_q15+0x1a4>
    while (reg_read(REG_MM_INTERVAL) != 0) {
 8000ea6:	2067      	movs	r0, #103	@ 0x67
 8000ea8:	f7ff fbf4 	bl	8000694 <reg_read>
 8000eac:	4603      	mov	r3, r0
 8000eae:	2b00      	cmp	r3, #0
 8000eb0:	d1e5      	bne.n	8000e7e <mm_get_metric_q15+0x8e>
        }
    }

    // read the latched 'stop' values
    uint32_t evm_stop    = mm_read32_sel(MM_SEL_EVM_STOP);
 8000eb2:	2001      	movs	r0, #1
 8000eb4:	f7ff ff70 	bl	8000d98 <mm_read32_sel>
 8000eb8:	64b8      	str	r0, [r7, #72]	@ 0x48
    uint32_t chk_stop    = mm_read32_sel(MM_SEL_CHECK_STOP);
 8000eba:	2003      	movs	r0, #3
 8000ebc:	f7ff ff6c 	bl	8000d98 <mm_read32_sel>
 8000ec0:	6478      	str	r0, [r7, #68]	@ 0x44
    uint32_t det_stop    = mm_read32_sel(MM_SEL_DETECT_STOP);
 8000ec2:	2005      	movs	r0, #5
 8000ec4:	f7ff ff68 	bl	8000d98 <mm_read32_sel>
 8000ec8:	6438      	str	r0, [r7, #64]	@ 0x40
    uint32_t sent_stop   = mm_read32_sel(MM_SEL_MEM_STOP);
 8000eca:	2007      	movs	r0, #7
 8000ecc:	f7ff ff64 	bl	8000d98 <mm_read32_sel>
 8000ed0:	63f8      	str	r0, [r7, #60]	@ 0x3c

    // calculate wraparound-safe deltas
    uint32_t d_evm   = delta32(evm_stop, evm_start);
 8000ed2:	6df9      	ldr	r1, [r7, #92]	@ 0x5c
 8000ed4:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 8000ed6:	f7ff ff7c 	bl	8000dd2 <delta32>
 8000eda:	63b8      	str	r0, [r7, #56]	@ 0x38
    uint32_t d_check = delta32(chk_stop, chk_start);
 8000edc:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8000ede:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8000ee0:	f7ff ff77 	bl	8000dd2 <delta32>
 8000ee4:	6378      	str	r0, [r7, #52]	@ 0x34
    uint32_t d_det   = delta32(det_stop, det_start);
 8000ee6:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8000ee8:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 8000eea:	f7ff ff72 	bl	8000dd2 <delta32>
 8000eee:	6338      	str	r0, [r7, #48]	@ 0x30
    uint32_t d_sent  = delta32(sent_stop, sent_start);
 8000ef0:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8000ef2:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8000ef4:	f7ff ff6d 	bl	8000dd2 <delta32>
 8000ef8:	62f8      	str	r0, [r7, #44]	@ 0x2c

    if (counts_out) {
 8000efa:	697b      	ldr	r3, [r7, #20]
 8000efc:	2b00      	cmp	r3, #0
 8000efe:	d00b      	beq.n	8000f18 <mm_get_metric_q15+0x128>
        counts_out->evm = d_evm;
 8000f00:	697b      	ldr	r3, [r7, #20]
 8000f02:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8000f04:	601a      	str	r2, [r3, #0]
        counts_out->check = d_check;
 8000f06:	697b      	ldr	r3, [r7, #20]
 8000f08:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8000f0a:	605a      	str	r2, [r3, #4]
        counts_out->detect = d_det;
 8000f0c:	697b      	ldr	r3, [r7, #20]
 8000f0e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8000f10:	609a      	str	r2, [r3, #8]
        counts_out->sent = d_sent;
 8000f12:	697b      	ldr	r3, [r7, #20]
 8000f14:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8000f16:	60da      	str	r2, [r3, #12]
    }

    // calculate evm/check as a q15 value
    if (metric_q15_out) {
 8000f18:	69bb      	ldr	r3, [r7, #24]
 8000f1a:	2b00      	cmp	r3, #0
 8000f1c:	d02b      	beq.n	8000f76 <mm_get_metric_q15+0x186>
        uint32_t denom = d_check ? d_check : 1u;
 8000f1e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000f20:	2b00      	cmp	r3, #0
 8000f22:	d001      	beq.n	8000f28 <mm_get_metric_q15+0x138>
 8000f24:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000f26:	e000      	b.n	8000f2a <mm_get_metric_q15+0x13a>
 8000f28:	2301      	movs	r3, #1
 8000f2a:	62bb      	str	r3, [r7, #40]	@ 0x28
        uint64_t num_scaled = ((uint64_t)d_evm << 15) + (denom >> 1); // with rounding
 8000f2c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8000f2e:	2200      	movs	r2, #0
 8000f30:	469a      	mov	sl, r3
 8000f32:	4693      	mov	fp, r2
 8000f34:	ea4f 455a 	mov.w	r5, sl, lsr #17
 8000f38:	ea4f 34ca 	mov.w	r4, sl, lsl #15
 8000f3c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000f3e:	085b      	lsrs	r3, r3, #1
 8000f40:	2200      	movs	r2, #0
 8000f42:	4698      	mov	r8, r3
 8000f44:	4691      	mov	r9, r2
 8000f46:	eb14 0308 	adds.w	r3, r4, r8
 8000f4a:	603b      	str	r3, [r7, #0]
 8000f4c:	eb45 0309 	adc.w	r3, r5, r9
 8000f50:	607b      	str	r3, [r7, #4]
 8000f52:	e9d7 3400 	ldrd	r3, r4, [r7]
 8000f56:	e9c7 3408 	strd	r3, r4, [r7, #32]
        *metric_q15_out = (int32_t)(num_scaled / denom);
 8000f5a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	60bb      	str	r3, [r7, #8]
 8000f60:	60fa      	str	r2, [r7, #12]
 8000f62:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8000f66:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8000f6a:	f7ff f9a9 	bl	80002c0 <__aeabi_uldivmod>
 8000f6e:	4602      	mov	r2, r0
 8000f70:	460b      	mov	r3, r1
 8000f72:	69bb      	ldr	r3, [r7, #24]
 8000f74:	601a      	str	r2, [r3, #0]
    }

    if (!quiet) {
 8000f76:	7f7b      	ldrb	r3, [r7, #29]
 8000f78:	f083 0301 	eor.w	r3, r3, #1
 8000f7c:	b2db      	uxtb	r3, r3
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	d007      	beq.n	8000f92 <mm_get_metric_q15+0x1a2>
        app_log("[mm] win=%u chk=%lu det=%lu sent=%lu\r\n",
 8000f82:	8bf9      	ldrh	r1, [r7, #30]
 8000f84:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000f86:	9300      	str	r3, [sp, #0]
 8000f88:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000f8a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8000f8c:	4805      	ldr	r0, [pc, #20]	@ (8000fa4 <mm_get_metric_q15+0x1b4>)
 8000f8e:	f7ff fb2d 	bl	80005ec <app_log>
                (unsigned)interval_coarse, (unsigned long)d_check,
                (unsigned long)d_det, (unsigned long)d_sent);
    }

    return MM_OK;
 8000f92:	2300      	movs	r3, #0
}
 8000f94:	4618      	mov	r0, r3
 8000f96:	3760      	adds	r7, #96	@ 0x60
 8000f98:	46bd      	mov	sp, r7
 8000f9a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8000f9e:	bf00      	nop
 8000fa0:	08005774 	.word	0x08005774
 8000fa4:	08005794 	.word	0x08005794

08000fa8 <q15_saturate>:
 * @brief saturates a 32-bit integer to a 16-bit integer range.
 * @param x the 32-bit integer to saturate.
 * @return the saturated 16-bit value.
 * // test: q15_saturate(40000) should return 32767.
 */
static inline int16_t q15_saturate(int32_t x) {
 8000fa8:	b480      	push	{r7}
 8000faa:	b083      	sub	sp, #12
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	6078      	str	r0, [r7, #4]
    if (x > 32767)  return 32767;
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8000fb6:	db02      	blt.n	8000fbe <q15_saturate+0x16>
 8000fb8:	f647 73ff 	movw	r3, #32767	@ 0x7fff
 8000fbc:	e007      	b.n	8000fce <q15_saturate+0x26>
    if (x < -32768) return -32768;
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	f513 4f00 	cmn.w	r3, #32768	@ 0x8000
 8000fc4:	da01      	bge.n	8000fca <q15_saturate+0x22>
 8000fc6:	4b05      	ldr	r3, [pc, #20]	@ (8000fdc <q15_saturate+0x34>)
 8000fc8:	e001      	b.n	8000fce <q15_saturate+0x26>
    return (int16_t)x;
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	b21b      	sxth	r3, r3
}
 8000fce:	4618      	mov	r0, r3
 8000fd0:	370c      	adds	r7, #12
 8000fd2:	46bd      	mov	sp, r7
 8000fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd8:	4770      	bx	lr
 8000fda:	bf00      	nop
 8000fdc:	ffff8000 	.word	0xffff8000

08000fe0 <q15_div>:
 * @param a the q15 numerator.
 * @param b the q15 denominator.
 * @return the saturated q15 quotient.
 * // test: q15_div(0x2000, 0x4000) should return 0x4000 (0.25/0.5=0.5).
 */
static inline int16_t q15_div(int16_t a, int16_t b) {
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	b084      	sub	sp, #16
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	4603      	mov	r3, r0
 8000fe8:	460a      	mov	r2, r1
 8000fea:	80fb      	strh	r3, [r7, #6]
 8000fec:	4613      	mov	r3, r2
 8000fee:	80bb      	strh	r3, [r7, #4]
    if (b == 0) return (a >= 0 ? 0x7FFF : (int16_t)0x8000);
 8000ff0:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000ff4:	2b00      	cmp	r3, #0
 8000ff6:	d108      	bne.n	800100a <q15_div+0x2a>
 8000ff8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	db02      	blt.n	8001006 <q15_div+0x26>
 8001000:	f647 73ff 	movw	r3, #32767	@ 0x7fff
 8001004:	e00e      	b.n	8001024 <q15_div+0x44>
 8001006:	4b09      	ldr	r3, [pc, #36]	@ (800102c <q15_div+0x4c>)
 8001008:	e00c      	b.n	8001024 <q15_div+0x44>
    int32_t n = ((int32_t)a << 15);
 800100a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800100e:	03db      	lsls	r3, r3, #15
 8001010:	60fb      	str	r3, [r7, #12]
    return q15_saturate(n / b);
 8001012:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001016:	68fa      	ldr	r2, [r7, #12]
 8001018:	fb92 f3f3 	sdiv	r3, r2, r3
 800101c:	4618      	mov	r0, r3
 800101e:	f7ff ffc3 	bl	8000fa8 <q15_saturate>
 8001022:	4603      	mov	r3, r0
}
 8001024:	4618      	mov	r0, r3
 8001026:	3710      	adds	r7, #16
 8001028:	46bd      	mov	sp, r7
 800102a:	bd80      	pop	{r7, pc}
 800102c:	ffff8000 	.word	0xffff8000

08001030 <sin_q15_from_rad>:
 * @brief calculates sin(x) using a lookup table
 * @param phase_q15 the input angle in q1.15 format, where the range [-32768, 32767] maps to [-pi, +pi]
 * @return the sine of the angle in q1.15 format
 * // test: sin_q15_from_rad(16384) should return ~32767 (sin(pi/2)).
 */
static inline int16_t sin_q15_from_rad(int16_t phase_q15) {
 8001030:	b480      	push	{r7}
 8001032:	b085      	sub	sp, #20
 8001034:	af00      	add	r7, sp, #0
 8001036:	4603      	mov	r3, r0
 8001038:	80fb      	strh	r3, [r7, #6]
    // Map phase (pi = 32767) to index (pi/2 = 128)
    int32_t index = ((int32_t)phase_q15 * (SIN_LUT_SIZE / 2)) >> 15;
 800103a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800103e:	01db      	lsls	r3, r3, #7
 8001040:	13db      	asrs	r3, r3, #15
 8001042:	60fb      	str	r3, [r7, #12]
    if (index < 0) index = -index; // Handle negative phase by symmetry sin(-x) = -sin(x)
 8001044:	68fb      	ldr	r3, [r7, #12]
 8001046:	2b00      	cmp	r3, #0
 8001048:	da02      	bge.n	8001050 <sin_q15_from_rad+0x20>
 800104a:	68fb      	ldr	r3, [r7, #12]
 800104c:	425b      	negs	r3, r3
 800104e:	60fb      	str	r3, [r7, #12]
    index %= (SIN_LUT_SIZE * 2);   // Wrap around 2*pi
 8001050:	68fb      	ldr	r3, [r7, #12]
 8001052:	425a      	negs	r2, r3
 8001054:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001058:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800105c:	bf58      	it	pl
 800105e:	4253      	negpl	r3, r2
 8001060:	60fb      	str	r3, [r7, #12]

    if (index < SIN_LUT_SIZE) {
 8001062:	68fb      	ldr	r3, [r7, #12]
 8001064:	2bff      	cmp	r3, #255	@ 0xff
 8001066:	dc04      	bgt.n	8001072 <sin_q15_from_rad+0x42>
        return sin_lut_q15[index];
 8001068:	4a0a      	ldr	r2, [pc, #40]	@ (8001094 <sin_q15_from_rad+0x64>)
 800106a:	68fb      	ldr	r3, [r7, #12]
 800106c:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8001070:	e009      	b.n	8001086 <sin_q15_from_rad+0x56>
    } else {
        return -sin_lut_q15[index - SIN_LUT_SIZE];
 8001072:	68fb      	ldr	r3, [r7, #12]
 8001074:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8001078:	4a06      	ldr	r2, [pc, #24]	@ (8001094 <sin_q15_from_rad+0x64>)
 800107a:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800107e:	b29b      	uxth	r3, r3
 8001080:	425b      	negs	r3, r3
 8001082:	b29b      	uxth	r3, r3
 8001084:	b21b      	sxth	r3, r3
    }
}
 8001086:	4618      	mov	r0, r3
 8001088:	3714      	adds	r7, #20
 800108a:	46bd      	mov	sp, r7
 800108c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001090:	4770      	bx	lr
 8001092:	bf00      	nop
 8001094:	08005b78 	.word	0x08005b78

08001098 <cos_q15_from_rad>:
 * @brief calculates cos(x) using a lookup table and sin(x + pi/2) identity
 * @param phase_q15 the input angle in q1.15 format, where the range [-32768, 32767] maps to [-pi, +pi]
 * @return the cosine of the angle in q1.15 format
 * // test: cos_q15_from_rad(0) should return ~32767 (cos(0)).
 */
static inline int16_t cos_q15_from_rad(int16_t phase_q15) {
 8001098:	b580      	push	{r7, lr}
 800109a:	b084      	sub	sp, #16
 800109c:	af00      	add	r7, sp, #0
 800109e:	4603      	mov	r3, r0
 80010a0:	80fb      	strh	r3, [r7, #6]
    // Phase is Q1.15, so pi/2 is 16384.
    int32_t phase_plus_half_pi = (int32_t)phase_q15 + 16384;
 80010a2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80010a6:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 80010aa:	60fb      	str	r3, [r7, #12]
    // Handle wrap around for the addition
    if (phase_plus_half_pi > 32767) {
 80010ac:	68fb      	ldr	r3, [r7, #12]
 80010ae:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80010b2:	db03      	blt.n	80010bc <cos_q15_from_rad+0x24>
        phase_plus_half_pi -= 65536;
 80010b4:	68fb      	ldr	r3, [r7, #12]
 80010b6:	f5a3 3380 	sub.w	r3, r3, #65536	@ 0x10000
 80010ba:	60fb      	str	r3, [r7, #12]
    }
    return sin_q15_from_rad((int16_t)phase_plus_half_pi);
 80010bc:	68fb      	ldr	r3, [r7, #12]
 80010be:	b21b      	sxth	r3, r3
 80010c0:	4618      	mov	r0, r3
 80010c2:	f7ff ffb5 	bl	8001030 <sin_q15_from_rad>
 80010c6:	4603      	mov	r3, r0
}
 80010c8:	4618      	mov	r0, r3
 80010ca:	3710      	adds	r7, #16
 80010cc:	46bd      	mov	sp, r7
 80010ce:	bd80      	pop	{r7, pc}

080010d0 <qec_set_tx_tone_q16>:
#include "main.h"
#include "math_utils.h" // includes the trig functions for fixed pont

#define SATURATE_S8(x) ((x) > 127 ? 127 : ((x) < -128 ? -128 : (x)))

void qec_set_tx_tone_q16(int32_t freq_q16) {
 80010d0:	b580      	push	{r7, lr}
 80010d2:	b084      	sub	sp, #16
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	6078      	str	r0, [r7, #4]
    // FPGA's NCO  requires a phase increment value
    // - calculated from the desired frequency relative to the sample clock
    // formula: phase_inc = (freq_hz / sample_rate_hz) * 2^16
    // Here, sample_rate is 80MHz. this simplifies to integer math:
    int16_t phase_inc = (int16_t)(freq_q16 / 80);
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	4a08      	ldr	r2, [pc, #32]	@ (80010fc <qec_set_tx_tone_q16+0x2c>)
 80010dc:	fb82 1203 	smull	r1, r2, r2, r3
 80010e0:	1152      	asrs	r2, r2, #5
 80010e2:	17db      	asrs	r3, r3, #31
 80010e4:	1ad3      	subs	r3, r2, r3
 80010e6:	81fb      	strh	r3, [r7, #14]
    reg_write(0x24, phase_inc);
 80010e8:	89fb      	ldrh	r3, [r7, #14]
 80010ea:	4619      	mov	r1, r3
 80010ec:	2024      	movs	r0, #36	@ 0x24
 80010ee:	f7ff fab1 	bl	8000654 <reg_write>
}
 80010f2:	bf00      	nop
 80010f4:	3710      	adds	r7, #16
 80010f6:	46bd      	mov	sp, r7
 80010f8:	bd80      	pop	{r7, pc}
 80010fa:	bf00      	nop
 80010fc:	66666667 	.word	0x66666667

08001100 <qec_correlator_measure>:

void qec_correlator_measure(uint16_t rxqec0_txqec1, uint16_t qec_pow2_num_samples,
                            int32_t *corr_ii, int32_t *corr_iq, int32_t *corr_qi, int32_t *corr_qq)
{
 8001100:	b580      	push	{r7, lr}
 8001102:	b086      	sub	sp, #24
 8001104:	af00      	add	r7, sp, #0
 8001106:	60ba      	str	r2, [r7, #8]
 8001108:	607b      	str	r3, [r7, #4]
 800110a:	4603      	mov	r3, r0
 800110c:	81fb      	strh	r3, [r7, #14]
 800110e:	460b      	mov	r3, r1
 8001110:	81bb      	strh	r3, [r7, #12]
    // configure correlator: set sample count and mode (RX vs TX).
    reg_write(REG_QEC_EN, (qec_pow2_num_samples << 2) | (rxqec0_txqec1 << 1) | 1);
 8001112:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001116:	009b      	lsls	r3, r3, #2
 8001118:	b21a      	sxth	r2, r3
 800111a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800111e:	005b      	lsls	r3, r3, #1
 8001120:	b21b      	sxth	r3, r3
 8001122:	4313      	orrs	r3, r2
 8001124:	b21b      	sxth	r3, r3
 8001126:	f043 0301 	orr.w	r3, r3, #1
 800112a:	b21b      	sxth	r3, r3
 800112c:	b29b      	uxth	r3, r3
 800112e:	4619      	mov	r1, r3
 8001130:	2025      	movs	r0, #37	@ 0x25
 8001132:	f7ff fa8f 	bl	8000654 <reg_write>

    // trigger the measurement by forcing the CW tone on
    reg_write(REG_CTRL, reg_read(REG_CTRL) | CTRL_FORCE_CW_TONE);
 8001136:	2023      	movs	r0, #35	@ 0x23
 8001138:	f7ff faac 	bl	8000694 <reg_read>
 800113c:	4603      	mov	r3, r0
 800113e:	f043 0308 	orr.w	r3, r3, #8
 8001142:	b29b      	uxth	r3, r3
 8001144:	4619      	mov	r1, r3
 8001146:	2023      	movs	r0, #35	@ 0x23
 8001148:	f7ff fa84 	bl	8000654 <reg_write>
    HAL_Delay(1); // Brief delay to ensure trigger is seen.
 800114c:	2001      	movs	r0, #1
 800114e:	f000 ff87 	bl	8002060 <HAL_Delay>
    // immediately turn the tone off to allow for subsequent re-triggering
    reg_write(REG_CTRL, reg_read(REG_CTRL) & ~CTRL_FORCE_CW_TONE);
 8001152:	2023      	movs	r0, #35	@ 0x23
 8001154:	f7ff fa9e 	bl	8000694 <reg_read>
 8001158:	4603      	mov	r3, r0
 800115a:	f023 0308 	bic.w	r3, r3, #8
 800115e:	b29b      	uxth	r3, r3
 8001160:	4619      	mov	r1, r3
 8001162:	2023      	movs	r0, #35	@ 0x23
 8001164:	f7ff fa76 	bl	8000654 <reg_write>

    // wait for the measurement to complete, the duration depends on sample count
    HAL_Delay(20);
 8001168:	2014      	movs	r0, #20
 800116a:	f000 ff79 	bl	8002060 <HAL_Delay>

    // disable the correlator block
    reg_write(REG_QEC_EN, 0x00);
 800116e:	2100      	movs	r1, #0
 8001170:	2025      	movs	r0, #37	@ 0x25
 8001172:	f7ff fa6f 	bl	8000654 <reg_write>

    // read back the 32-bit results. Each result is read in two 16-bit halves by writing the index of the half
    // to the register before reading.
    uint16_t temp_lsb;
    reg_write(REG_QEC_EN, 0 << 7); temp_lsb = reg_read(REG_QEC_EN);
 8001176:	2100      	movs	r1, #0
 8001178:	2025      	movs	r0, #37	@ 0x25
 800117a:	f7ff fa6b 	bl	8000654 <reg_write>
 800117e:	2025      	movs	r0, #37	@ 0x25
 8001180:	f7ff fa88 	bl	8000694 <reg_read>
 8001184:	4603      	mov	r3, r0
 8001186:	82fb      	strh	r3, [r7, #22]
    reg_write(REG_QEC_EN, 1 << 7); *corr_ii = (int32_t)((((uint32_t)reg_read(REG_QEC_EN)) << 16) | temp_lsb);
 8001188:	2180      	movs	r1, #128	@ 0x80
 800118a:	2025      	movs	r0, #37	@ 0x25
 800118c:	f7ff fa62 	bl	8000654 <reg_write>
 8001190:	2025      	movs	r0, #37	@ 0x25
 8001192:	f7ff fa7f 	bl	8000694 <reg_read>
 8001196:	4603      	mov	r3, r0
 8001198:	041a      	lsls	r2, r3, #16
 800119a:	8afb      	ldrh	r3, [r7, #22]
 800119c:	4313      	orrs	r3, r2
 800119e:	461a      	mov	r2, r3
 80011a0:	68bb      	ldr	r3, [r7, #8]
 80011a2:	601a      	str	r2, [r3, #0]

    reg_write(REG_QEC_EN, 2 << 7); temp_lsb = reg_read(REG_QEC_EN);
 80011a4:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80011a8:	2025      	movs	r0, #37	@ 0x25
 80011aa:	f7ff fa53 	bl	8000654 <reg_write>
 80011ae:	2025      	movs	r0, #37	@ 0x25
 80011b0:	f7ff fa70 	bl	8000694 <reg_read>
 80011b4:	4603      	mov	r3, r0
 80011b6:	82fb      	strh	r3, [r7, #22]
    reg_write(REG_QEC_EN, 3 << 7); *corr_iq = (int32_t)((((uint32_t)reg_read(REG_QEC_EN)) << 16) | temp_lsb);
 80011b8:	f44f 71c0 	mov.w	r1, #384	@ 0x180
 80011bc:	2025      	movs	r0, #37	@ 0x25
 80011be:	f7ff fa49 	bl	8000654 <reg_write>
 80011c2:	2025      	movs	r0, #37	@ 0x25
 80011c4:	f7ff fa66 	bl	8000694 <reg_read>
 80011c8:	4603      	mov	r3, r0
 80011ca:	041a      	lsls	r2, r3, #16
 80011cc:	8afb      	ldrh	r3, [r7, #22]
 80011ce:	4313      	orrs	r3, r2
 80011d0:	461a      	mov	r2, r3
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	601a      	str	r2, [r3, #0]

    reg_write(REG_QEC_EN, 4 << 7); temp_lsb = reg_read(REG_QEC_EN);
 80011d6:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80011da:	2025      	movs	r0, #37	@ 0x25
 80011dc:	f7ff fa3a 	bl	8000654 <reg_write>
 80011e0:	2025      	movs	r0, #37	@ 0x25
 80011e2:	f7ff fa57 	bl	8000694 <reg_read>
 80011e6:	4603      	mov	r3, r0
 80011e8:	82fb      	strh	r3, [r7, #22]
    reg_write(REG_QEC_EN, 5 << 7); *corr_qi = (int32_t)((((uint32_t)reg_read(REG_QEC_EN)) << 16) | temp_lsb);
 80011ea:	f44f 7120 	mov.w	r1, #640	@ 0x280
 80011ee:	2025      	movs	r0, #37	@ 0x25
 80011f0:	f7ff fa30 	bl	8000654 <reg_write>
 80011f4:	2025      	movs	r0, #37	@ 0x25
 80011f6:	f7ff fa4d 	bl	8000694 <reg_read>
 80011fa:	4603      	mov	r3, r0
 80011fc:	041a      	lsls	r2, r3, #16
 80011fe:	8afb      	ldrh	r3, [r7, #22]
 8001200:	4313      	orrs	r3, r2
 8001202:	461a      	mov	r2, r3
 8001204:	6a3b      	ldr	r3, [r7, #32]
 8001206:	601a      	str	r2, [r3, #0]

    reg_write(REG_QEC_EN, 6 << 7); temp_lsb = reg_read(REG_QEC_EN);
 8001208:	f44f 7140 	mov.w	r1, #768	@ 0x300
 800120c:	2025      	movs	r0, #37	@ 0x25
 800120e:	f7ff fa21 	bl	8000654 <reg_write>
 8001212:	2025      	movs	r0, #37	@ 0x25
 8001214:	f7ff fa3e 	bl	8000694 <reg_read>
 8001218:	4603      	mov	r3, r0
 800121a:	82fb      	strh	r3, [r7, #22]
    reg_write(REG_QEC_EN, 7 << 7); *corr_qq = (int32_t)((((uint32_t)reg_read(REG_QEC_EN)) << 16) | temp_lsb);
 800121c:	f44f 7160 	mov.w	r1, #896	@ 0x380
 8001220:	2025      	movs	r0, #37	@ 0x25
 8001222:	f7ff fa17 	bl	8000654 <reg_write>
 8001226:	2025      	movs	r0, #37	@ 0x25
 8001228:	f7ff fa34 	bl	8000694 <reg_read>
 800122c:	4603      	mov	r3, r0
 800122e:	041a      	lsls	r2, r3, #16
 8001230:	8afb      	ldrh	r3, [r7, #22]
 8001232:	4313      	orrs	r3, r2
 8001234:	461a      	mov	r2, r3
 8001236:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001238:	601a      	str	r2, [r3, #0]
}
 800123a:	bf00      	nop
 800123c:	3718      	adds	r7, #24
 800123e:	46bd      	mov	sp, r7
 8001240:	bd80      	pop	{r7, pc}
	...

08001244 <qec_apply_rx_correction_q15>:

void qec_apply_rx_correction_q15(int16_t gain_q15, int16_t phase_q15) {
 8001244:	b580      	push	{r7, lr}
 8001246:	b084      	sub	sp, #16
 8001248:	af00      	add	r7, sp, #0
 800124a:	4603      	mov	r3, r0
 800124c:	460a      	mov	r2, r1
 800124e:	80fb      	strh	r3, [r7, #6]
 8001250:	4613      	mov	r3, r2
 8001252:	80bb      	strh	r3, [r7, #4]
    // FPGA expects correction values as signed 8-bit integers
    // we must scale Q1.15 values into this range
    // Formula: scaled = round(value_q15 * 256 / 32768) = round(value_q15 / 128)
    // scale phase: ((phase_q15 * 256) + rounding) >> 15
    int16_t phase_scaled = ((int32_t)phase_q15 * 256 + (1 << 14)) >> 15;
 8001254:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001258:	3340      	adds	r3, #64	@ 0x40
 800125a:	021b      	lsls	r3, r3, #8
 800125c:	13db      	asrs	r3, r3, #15
 800125e:	81fb      	strh	r3, [r7, #14]

    // scale gain
    int16_t gain_minus_one = gain_q15 - 32767; // 1.0 in Q1.15 is 32767
 8001260:	88fb      	ldrh	r3, [r7, #6]
 8001262:	f5a3 43ff 	sub.w	r3, r3, #32640	@ 0x7f80
 8001266:	3b7f      	subs	r3, #127	@ 0x7f
 8001268:	b29b      	uxth	r3, r3
 800126a:	81bb      	strh	r3, [r7, #12]
    int16_t gain_scaled = ((int32_t)gain_minus_one * 256 + (1 << 14)) >> 15;
 800126c:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001270:	3340      	adds	r3, #64	@ 0x40
 8001272:	021b      	lsls	r3, r3, #8
 8001274:	13db      	asrs	r3, r3, #15
 8001276:	817b      	strh	r3, [r7, #10]

    // pack the 8-bit values into a single 16-bit word and write to the reg
    uint16_t write_val = ((uint8_t)SATURATE_S8(phase_scaled) << 8) | (uint8_t)SATURATE_S8(gain_scaled);
 8001278:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800127c:	2b7f      	cmp	r3, #127	@ 0x7f
 800127e:	dc0c      	bgt.n	800129a <qec_apply_rx_correction_q15+0x56>
 8001280:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001284:	f113 0f80 	cmn.w	r3, #128	@ 0x80
 8001288:	db05      	blt.n	8001296 <qec_apply_rx_correction_q15+0x52>
 800128a:	89fb      	ldrh	r3, [r7, #14]
 800128c:	b2db      	uxtb	r3, r3
 800128e:	b21b      	sxth	r3, r3
 8001290:	021b      	lsls	r3, r3, #8
 8001292:	b21a      	sxth	r2, r3
 8001294:	e003      	b.n	800129e <qec_apply_rx_correction_q15+0x5a>
 8001296:	4a11      	ldr	r2, [pc, #68]	@ (80012dc <qec_apply_rx_correction_q15+0x98>)
 8001298:	e001      	b.n	800129e <qec_apply_rx_correction_q15+0x5a>
 800129a:	f44f 42fe 	mov.w	r2, #32512	@ 0x7f00
 800129e:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80012a2:	2b7f      	cmp	r3, #127	@ 0x7f
 80012a4:	dc0a      	bgt.n	80012bc <qec_apply_rx_correction_q15+0x78>
 80012a6:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80012aa:	f113 0f80 	cmn.w	r3, #128	@ 0x80
 80012ae:	db03      	blt.n	80012b8 <qec_apply_rx_correction_q15+0x74>
 80012b0:	897b      	ldrh	r3, [r7, #10]
 80012b2:	b2db      	uxtb	r3, r3
 80012b4:	b21b      	sxth	r3, r3
 80012b6:	e002      	b.n	80012be <qec_apply_rx_correction_q15+0x7a>
 80012b8:	2380      	movs	r3, #128	@ 0x80
 80012ba:	e000      	b.n	80012be <qec_apply_rx_correction_q15+0x7a>
 80012bc:	237f      	movs	r3, #127	@ 0x7f
 80012be:	4313      	orrs	r3, r2
 80012c0:	b21b      	sxth	r3, r3
 80012c2:	813b      	strh	r3, [r7, #8]
    reg_write(0x63, write_val);
 80012c4:	893b      	ldrh	r3, [r7, #8]
 80012c6:	4619      	mov	r1, r3
 80012c8:	2063      	movs	r0, #99	@ 0x63
 80012ca:	f7ff f9c3 	bl	8000654 <reg_write>
    HAL_Delay(10);
 80012ce:	200a      	movs	r0, #10
 80012d0:	f000 fec6 	bl	8002060 <HAL_Delay>
}
 80012d4:	bf00      	nop
 80012d6:	3710      	adds	r7, #16
 80012d8:	46bd      	mov	sp, r7
 80012da:	bd80      	pop	{r7, pc}
 80012dc:	ffff8000 	.word	0xffff8000

080012e0 <qec_apply_tx_correction_q15>:

void qec_apply_tx_correction_q15(int16_t gain_q15, int16_t phase_q15, int32_t delay_q16)
{
 80012e0:	b5b0      	push	{r4, r5, r7, lr}
 80012e2:	b086      	sub	sp, #24
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	4603      	mov	r3, r0
 80012e8:	603a      	str	r2, [r7, #0]
 80012ea:	80fb      	strh	r3, [r7, #6]
 80012ec:	460b      	mov	r3, r1
 80012ee:	80bb      	strh	r3, [r7, #4]
    // Original float logic:
    // gain_new = gain/cosf(phase) - 1.0;
    // phase_new = sinf(phase);

    // calculate sin(phase) and cos(phase) using the lookup table helpers (do we need more precision here?)
    int16_t cos_p = cos_q15_from_rad(phase_q15);
 80012f0:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80012f4:	4618      	mov	r0, r3
 80012f6:	f7ff fecf 	bl	8001098 <cos_q15_from_rad>
 80012fa:	4603      	mov	r3, r0
 80012fc:	82fb      	strh	r3, [r7, #22]
    int16_t sin_p = sin_q15_from_rad(phase_q15);
 80012fe:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001302:	4618      	mov	r0, r3
 8001304:	f7ff fe94 	bl	8001030 <sin_q15_from_rad>
 8001308:	4603      	mov	r3, r0
 800130a:	82bb      	strh	r3, [r7, #20]

    // calculate gain/cos(phase) using fixed-point division
    int16_t gain_div_cos = q15_div(gain_q15, cos_p);
 800130c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8001310:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001314:	4611      	mov	r1, r2
 8001316:	4618      	mov	r0, r3
 8001318:	f7ff fe62 	bl	8000fe0 <q15_div>
 800131c:	4603      	mov	r3, r0
 800131e:	827b      	strh	r3, [r7, #18]

    // subtract 1.0 to get the final gain correction factor.
    int16_t gain_final = gain_div_cos - 32767; // 32767 is 1.0 in Q1.15
 8001320:	8a7b      	ldrh	r3, [r7, #18]
 8001322:	f5a3 43ff 	sub.w	r3, r3, #32640	@ 0x7f80
 8001326:	3b7f      	subs	r3, #127	@ 0x7f
 8001328:	b29b      	uxth	r3, r3
 800132a:	823b      	strh	r3, [r7, #16]

    // scale the final values to the format expected by the FPGA registers
    // teensy code used scaling factors of 512 for gain/phase and 1024 for delay.
    uint16_t gain_val  = ((int32_t)gain_final * 512) >> 15;
 800132c:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8001330:	025b      	lsls	r3, r3, #9
 8001332:	13db      	asrs	r3, r3, #15
 8001334:	81fb      	strh	r3, [r7, #14]
    uint16_t phase_val = ((int32_t)sin_p * 512) >> 15;
 8001336:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800133a:	025b      	lsls	r3, r3, #9
 800133c:	13db      	asrs	r3, r3, #15
 800133e:	81bb      	strh	r3, [r7, #12]
    uint16_t delay_val = (uint16_t)(((int64_t)delay_q16 * 1024) >> 16);
 8001340:	683b      	ldr	r3, [r7, #0]
 8001342:	17da      	asrs	r2, r3, #31
 8001344:	461c      	mov	r4, r3
 8001346:	4615      	mov	r5, r2
 8001348:	f04f 0200 	mov.w	r2, #0
 800134c:	f04f 0300 	mov.w	r3, #0
 8001350:	02ab      	lsls	r3, r5, #10
 8001352:	ea43 5394 	orr.w	r3, r3, r4, lsr #22
 8001356:	02a2      	lsls	r2, r4, #10
 8001358:	f04f 0000 	mov.w	r0, #0
 800135c:	f04f 0100 	mov.w	r1, #0
 8001360:	0c10      	lsrs	r0, r2, #16
 8001362:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8001366:	1419      	asrs	r1, r3, #16
 8001368:	4603      	mov	r3, r0
 800136a:	817b      	strh	r3, [r7, #10]

    // write the scaled values to the FPGA's windowed register.
    reg_write(0x27, delay_val);
 800136c:	897b      	ldrh	r3, [r7, #10]
 800136e:	4619      	mov	r1, r3
 8001370:	2027      	movs	r0, #39	@ 0x27
 8001372:	f7ff f96f 	bl	8000654 <reg_write>
    reg_write(0x27, phase_val);
 8001376:	89bb      	ldrh	r3, [r7, #12]
 8001378:	4619      	mov	r1, r3
 800137a:	2027      	movs	r0, #39	@ 0x27
 800137c:	f7ff f96a 	bl	8000654 <reg_write>
    reg_write(0x27, gain_val);
 8001380:	89fb      	ldrh	r3, [r7, #14]
 8001382:	4619      	mov	r1, r3
 8001384:	2027      	movs	r0, #39	@ 0x27
 8001386:	f7ff f965 	bl	8000654 <reg_write>
}
 800138a:	bf00      	nop
 800138c:	3718      	adds	r7, #24
 800138e:	46bd      	mov	sp, r7
 8001390:	bdb0      	pop	{r4, r5, r7, pc}

08001392 <isqrt_u64>:
#include "qec_math.h"
#include "math_utils.h"

// performs a 64-bit int sqrt
static uint32_t isqrt_u64(uint64_t x)
{
 8001392:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8001396:	b088      	sub	sp, #32
 8001398:	af00      	add	r7, sp, #0
 800139a:	e9c7 0102 	strd	r0, r1, [r7, #8]
    if (x == 0) return 0;
 800139e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80013a2:	4313      	orrs	r3, r2
 80013a4:	d101      	bne.n	80013aa <isqrt_u64+0x18>
 80013a6:	2300      	movs	r3, #0
 80013a8:	e07a      	b.n	80014a0 <isqrt_u64+0x10e>
    uint64_t res = 0;
 80013aa:	f04f 0200 	mov.w	r2, #0
 80013ae:	f04f 0300 	mov.w	r3, #0
 80013b2:	e9c7 2306 	strd	r2, r3, [r7, #24]
    uint64_t bit = 1ULL << 62;
 80013b6:	f04f 0200 	mov.w	r2, #0
 80013ba:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80013be:	e9c7 2304 	strd	r2, r3, [r7, #16]

    while (bit > x) bit >>= 2;
 80013c2:	e00b      	b.n	80013dc <isqrt_u64+0x4a>
 80013c4:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80013c8:	f04f 0200 	mov.w	r2, #0
 80013cc:	f04f 0300 	mov.w	r3, #0
 80013d0:	0882      	lsrs	r2, r0, #2
 80013d2:	ea42 7281 	orr.w	r2, r2, r1, lsl #30
 80013d6:	088b      	lsrs	r3, r1, #2
 80013d8:	e9c7 2304 	strd	r2, r3, [r7, #16]
 80013dc:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80013e0:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80013e4:	4290      	cmp	r0, r2
 80013e6:	eb71 0303 	sbcs.w	r3, r1, r3
 80013ea:	d3eb      	bcc.n	80013c4 <isqrt_u64+0x32>
    while (bit != 0) {
 80013ec:	e049      	b.n	8001482 <isqrt_u64+0xf0>
        if (x >= res + bit) {
 80013ee:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80013f2:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80013f6:	1884      	adds	r4, r0, r2
 80013f8:	eb41 0503 	adc.w	r5, r1, r3
 80013fc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001400:	42a2      	cmp	r2, r4
 8001402:	41ab      	sbcs	r3, r5
 8001404:	d325      	bcc.n	8001452 <isqrt_u64+0xc0>
            x   -= res + bit;
 8001406:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800140a:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800140e:	eb10 0802 	adds.w	r8, r0, r2
 8001412:	eb41 0903 	adc.w	r9, r1, r3
 8001416:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800141a:	ebb2 0a08 	subs.w	sl, r2, r8
 800141e:	eb63 0b09 	sbc.w	fp, r3, r9
 8001422:	e9c7 ab02 	strd	sl, fp, [r7, #8]
            res  = (res >> 1) + bit;
 8001426:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800142a:	f04f 0200 	mov.w	r2, #0
 800142e:	f04f 0300 	mov.w	r3, #0
 8001432:	0842      	lsrs	r2, r0, #1
 8001434:	ea42 72c1 	orr.w	r2, r2, r1, lsl #31
 8001438:	084b      	lsrs	r3, r1, #1
 800143a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800143e:	1886      	adds	r6, r0, r2
 8001440:	603e      	str	r6, [r7, #0]
 8001442:	eb41 0303 	adc.w	r3, r1, r3
 8001446:	607b      	str	r3, [r7, #4]
 8001448:	e9d7 2300 	ldrd	r2, r3, [r7]
 800144c:	e9c7 2306 	strd	r2, r3, [r7, #24]
 8001450:	e00b      	b.n	800146a <isqrt_u64+0xd8>
        } else {
            res >>= 1;
 8001452:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001456:	f04f 0200 	mov.w	r2, #0
 800145a:	f04f 0300 	mov.w	r3, #0
 800145e:	0842      	lsrs	r2, r0, #1
 8001460:	ea42 72c1 	orr.w	r2, r2, r1, lsl #31
 8001464:	084b      	lsrs	r3, r1, #1
 8001466:	e9c7 2306 	strd	r2, r3, [r7, #24]
        }
        bit >>= 2;
 800146a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800146e:	f04f 0200 	mov.w	r2, #0
 8001472:	f04f 0300 	mov.w	r3, #0
 8001476:	0882      	lsrs	r2, r0, #2
 8001478:	ea42 7281 	orr.w	r2, r2, r1, lsl #30
 800147c:	088b      	lsrs	r3, r1, #2
 800147e:	e9c7 2304 	strd	r2, r3, [r7, #16]
    while (bit != 0) {
 8001482:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001486:	4313      	orrs	r3, r2
 8001488:	d1b1      	bne.n	80013ee <isqrt_u64+0x5c>
    }
    if (res > 0xFFFFFFFFULL) res = 0xFFFFFFFFULL;
 800148a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800148e:	2b01      	cmp	r3, #1
 8001490:	d305      	bcc.n	800149e <isqrt_u64+0x10c>
 8001492:	f04f 32ff 	mov.w	r2, #4294967295
 8001496:	f04f 0300 	mov.w	r3, #0
 800149a:	e9c7 2306 	strd	r2, r3, [r7, #24]
    return (uint32_t)res;
 800149e:	69bb      	ldr	r3, [r7, #24]
}
 80014a0:	4618      	mov	r0, r3
 80014a2:	3720      	adds	r7, #32
 80014a4:	46bd      	mov	sp, r7
 80014a6:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80014aa:	4770      	bx	lr

080014ac <q31_from_ratio_int64>:

// calculates (num * 2^31) / den to produce a q31 result, using 64 bit math
static int32_t q31_from_ratio_int64(int64_t num, uint64_t den_pos)
{
 80014ac:	b5b0      	push	{r4, r5, r7, lr}
 80014ae:	b08c      	sub	sp, #48	@ 0x30
 80014b0:	af00      	add	r7, sp, #0
 80014b2:	e9c7 0102 	strd	r0, r1, [r7, #8]
 80014b6:	e9c7 2300 	strd	r2, r3, [r7]
    if (den_pos == 0) return 0;
 80014ba:	e9d7 2300 	ldrd	r2, r3, [r7]
 80014be:	4313      	orrs	r3, r2
 80014c0:	d101      	bne.n	80014c6 <q31_from_ratio_int64+0x1a>
 80014c2:	2300      	movs	r3, #0
 80014c4:	e040      	b.n	8001548 <q31_from_ratio_int64+0x9c>
    int sign = (num < 0);
 80014c6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80014ca:	f04f 0200 	mov.w	r2, #0
 80014ce:	f04f 0300 	mov.w	r3, #0
 80014d2:	0fca      	lsrs	r2, r1, #31
 80014d4:	2300      	movs	r3, #0
 80014d6:	b2d3      	uxtb	r3, r2
 80014d8:	627b      	str	r3, [r7, #36]	@ 0x24
    if (sign) num = -num;
 80014da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d007      	beq.n	80014f0 <q31_from_ratio_int64+0x44>
 80014e0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80014e4:	2100      	movs	r1, #0
 80014e6:	4254      	negs	r4, r2
 80014e8:	eb61 0503 	sbc.w	r5, r1, r3
 80014ec:	e9c7 4502 	strd	r4, r5, [r7, #8]

    // scale numerator by 2^31. since num comes from 32-bit inputs, this fits in 64 bits
    uint64_t scaled_num = (uint64_t)num << 31;
 80014f0:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80014f4:	f04f 0200 	mov.w	r2, #0
 80014f8:	f04f 0300 	mov.w	r3, #0
 80014fc:	07cb      	lsls	r3, r1, #31
 80014fe:	ea43 0350 	orr.w	r3, r3, r0, lsr #1
 8001502:	07c2      	lsls	r2, r0, #31
 8001504:	e9c7 2306 	strd	r2, r3, [r7, #24]

    uint64_t q = scaled_num / den_pos;
 8001508:	e9d7 2300 	ldrd	r2, r3, [r7]
 800150c:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001510:	f7fe fed6 	bl	80002c0 <__aeabi_uldivmod>
 8001514:	4602      	mov	r2, r0
 8001516:	460b      	mov	r3, r1
 8001518:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
    if (q > 0x7FFFFFFFULL) q = 0x7FFFFFFFULL; // saturate
 800151c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8001520:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8001524:	f173 0300 	sbcs.w	r3, r3, #0
 8001528:	d305      	bcc.n	8001536 <q31_from_ratio_int64+0x8a>
 800152a:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 800152e:	f04f 0300 	mov.w	r3, #0
 8001532:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28

    int32_t out = (int32_t)q;
 8001536:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001538:	617b      	str	r3, [r7, #20]
    return sign ? -out : out;
 800153a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800153c:	2b00      	cmp	r3, #0
 800153e:	d002      	beq.n	8001546 <q31_from_ratio_int64+0x9a>
 8001540:	697b      	ldr	r3, [r7, #20]
 8001542:	425b      	negs	r3, r3
 8001544:	e000      	b.n	8001548 <q31_from_ratio_int64+0x9c>
 8001546:	697b      	ldr	r3, [r7, #20]
}
 8001548:	4618      	mov	r0, r3
 800154a:	3730      	adds	r7, #48	@ 0x30
 800154c:	46bd      	mov	sp, r7
 800154e:	bdb0      	pop	{r4, r5, r7, pc}

08001550 <qec_calc_q31>:
 * @return 0 on success, negative on failure (ex non-positive determinant).
 * // test: int32_t g, p; qec_calc_q31(200, 10, 200, &g, &p);
 */
int qec_calc_q31(int32_t X11, int32_t X12, int32_t X22,
                 int32_t *gain_corr_q31, int32_t *phase_corr_q31)
{
 8001550:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001554:	b09a      	sub	sp, #104	@ 0x68
 8001556:	af00      	add	r7, sp, #0
 8001558:	6578      	str	r0, [r7, #84]	@ 0x54
 800155a:	6539      	str	r1, [r7, #80]	@ 0x50
 800155c:	64fa      	str	r2, [r7, #76]	@ 0x4c
 800155e:	64bb      	str	r3, [r7, #72]	@ 0x48
    if (!gain_corr_q31 || !phase_corr_q31) return -1;
 8001560:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001562:	2b00      	cmp	r3, #0
 8001564:	d003      	beq.n	800156e <qec_calc_q31+0x1e>
 8001566:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800156a:	2b00      	cmp	r3, #0
 800156c:	d102      	bne.n	8001574 <qec_calc_q31+0x24>
 800156e:	f04f 33ff 	mov.w	r3, #4294967295
 8001572:	e093      	b.n	800169c <qec_calc_q31+0x14c>

    // D = X22*X11 - X12*X12 (using 64 bit intermediates to prevent overflow)
    int64_t D = (int64_t)X22 * (int64_t)X11 - (int64_t)X12 * (int64_t)X12;
 8001574:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001576:	17da      	asrs	r2, r3, #31
 8001578:	469a      	mov	sl, r3
 800157a:	4693      	mov	fp, r2
 800157c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800157e:	17da      	asrs	r2, r3, #31
 8001580:	461c      	mov	r4, r3
 8001582:	4615      	mov	r5, r2
 8001584:	fb04 f20b 	mul.w	r2, r4, fp
 8001588:	fb0a f305 	mul.w	r3, sl, r5
 800158c:	4413      	add	r3, r2
 800158e:	fbaa 1204 	umull	r1, r2, sl, r4
 8001592:	647a      	str	r2, [r7, #68]	@ 0x44
 8001594:	460a      	mov	r2, r1
 8001596:	643a      	str	r2, [r7, #64]	@ 0x40
 8001598:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800159a:	4413      	add	r3, r2
 800159c:	647b      	str	r3, [r7, #68]	@ 0x44
 800159e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80015a0:	17da      	asrs	r2, r3, #31
 80015a2:	63bb      	str	r3, [r7, #56]	@ 0x38
 80015a4:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80015a6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80015a8:	17da      	asrs	r2, r3, #31
 80015aa:	633b      	str	r3, [r7, #48]	@ 0x30
 80015ac:	637a      	str	r2, [r7, #52]	@ 0x34
 80015ae:	e9d7 450e 	ldrd	r4, r5, [r7, #56]	@ 0x38
 80015b2:	462b      	mov	r3, r5
 80015b4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80015b8:	4652      	mov	r2, sl
 80015ba:	fb02 f203 	mul.w	r2, r2, r3
 80015be:	465b      	mov	r3, fp
 80015c0:	4621      	mov	r1, r4
 80015c2:	fb01 f303 	mul.w	r3, r1, r3
 80015c6:	4413      	add	r3, r2
 80015c8:	4622      	mov	r2, r4
 80015ca:	4651      	mov	r1, sl
 80015cc:	fba2 8901 	umull	r8, r9, r2, r1
 80015d0:	444b      	add	r3, r9
 80015d2:	4699      	mov	r9, r3
 80015d4:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 80015d8:	460b      	mov	r3, r1
 80015da:	ebb3 0308 	subs.w	r3, r3, r8
 80015de:	603b      	str	r3, [r7, #0]
 80015e0:	4613      	mov	r3, r2
 80015e2:	eb63 0309 	sbc.w	r3, r3, r9
 80015e6:	607b      	str	r3, [r7, #4]
 80015e8:	e9d7 3400 	ldrd	r3, r4, [r7]
 80015ec:	e9c7 3418 	strd	r3, r4, [r7, #96]	@ 0x60
    if (D <= 0) {
 80015f0:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	@ 0x60
 80015f4:	2a01      	cmp	r2, #1
 80015f6:	f173 0300 	sbcs.w	r3, r3, #0
 80015fa:	da0b      	bge.n	8001614 <qec_calc_q31+0xc4>
        *gain_corr_q31 = *phase_corr_q31 = 0;
 80015fc:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8001600:	2200      	movs	r2, #0
 8001602:	601a      	str	r2, [r3, #0]
 8001604:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8001608:	681a      	ldr	r2, [r3, #0]
 800160a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800160c:	601a      	str	r2, [r3, #0]
        return -2;
 800160e:	f06f 0301 	mvn.w	r3, #1
 8001612:	e043      	b.n	800169c <qec_calc_q31+0x14c>
    }

    uint32_t sqrtD = isqrt_u64((uint64_t)D);
 8001614:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	@ 0x60
 8001618:	4610      	mov	r0, r2
 800161a:	4619      	mov	r1, r3
 800161c:	f7ff feb9 	bl	8001392 <isqrt_u64>
 8001620:	65f8      	str	r0, [r7, #92]	@ 0x5c
    if (sqrtD == 0) {
 8001622:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001624:	2b00      	cmp	r3, #0
 8001626:	d10b      	bne.n	8001640 <qec_calc_q31+0xf0>
        *gain_corr_q31 = *phase_corr_q31 = 0;
 8001628:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800162c:	2200      	movs	r2, #0
 800162e:	601a      	str	r2, [r3, #0]
 8001630:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8001634:	681a      	ldr	r2, [r3, #0]
 8001636:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001638:	601a      	str	r2, [r3, #0]
        return -3;
 800163a:	f06f 0302 	mvn.w	r3, #2
 800163e:	e02d      	b.n	800169c <qec_calc_q31+0x14c>
    }

    *gain_corr_q31  = q31_from_ratio_int64((int64_t)X11, sqrtD);
 8001640:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001642:	17da      	asrs	r2, r3, #31
 8001644:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001646:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001648:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800164a:	2200      	movs	r2, #0
 800164c:	623b      	str	r3, [r7, #32]
 800164e:	627a      	str	r2, [r7, #36]	@ 0x24
 8001650:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001654:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8001658:	f7ff ff28 	bl	80014ac <q31_from_ratio_int64>
 800165c:	4602      	mov	r2, r0
 800165e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001660:	601a      	str	r2, [r3, #0]
    *phase_corr_q31 = q31_from_ratio_int64(-(int64_t)X12, sqrtD);
 8001662:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001664:	17da      	asrs	r2, r3, #31
 8001666:	61bb      	str	r3, [r7, #24]
 8001668:	61fa      	str	r2, [r7, #28]
 800166a:	2300      	movs	r3, #0
 800166c:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001670:	4602      	mov	r2, r0
 8001672:	4252      	negs	r2, r2
 8001674:	613a      	str	r2, [r7, #16]
 8001676:	460a      	mov	r2, r1
 8001678:	eb63 0302 	sbc.w	r3, r3, r2
 800167c:	617b      	str	r3, [r7, #20]
 800167e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001680:	2200      	movs	r2, #0
 8001682:	60bb      	str	r3, [r7, #8]
 8001684:	60fa      	str	r2, [r7, #12]
 8001686:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800168a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800168e:	f7ff ff0d 	bl	80014ac <q31_from_ratio_int64>
 8001692:	4602      	mov	r2, r0
 8001694:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8001698:	601a      	str	r2, [r3, #0]
    return 0;
 800169a:	2300      	movs	r3, #0
}
 800169c:	4618      	mov	r0, r3
 800169e:	3768      	adds	r7, #104	@ 0x68
 80016a0:	46bd      	mov	sp, r7
 80016a2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

080016a8 <fpga_comms_init>:
 * @brief initializes low-level comms module with the spi handle
 * @param hspi pointer to the configured hal spi handle.
 * @return void.
 * // test: fpga_comms_init(&hspi1); in main.c
 */
void fpga_comms_init(SPI_HandleTypeDef *hspi) {
 80016a8:	b480      	push	{r7}
 80016aa:	b083      	sub	sp, #12
 80016ac:	af00      	add	r7, sp, #0
 80016ae:	6078      	str	r0, [r7, #4]
    g_hspi = hspi;
 80016b0:	4a04      	ldr	r2, [pc, #16]	@ (80016c4 <fpga_comms_init+0x1c>)
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	6013      	str	r3, [r2, #0]
}
 80016b6:	bf00      	nop
 80016b8:	370c      	adds	r7, #12
 80016ba:	46bd      	mov	sp, r7
 80016bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c0:	4770      	bx	lr
 80016c2:	bf00      	nop
 80016c4:	20000270 	.word	0x20000270

080016c8 <fpga_comms_write>:
 * @param addr the 7-bit register address (0x00 to 0x7f)
 * @param data the 16-bit data to write
 * @return reg_rw_status_t status code indicating the outcome
 * // test: fpga_comms_write(0x03, 0x5678);
 */
reg_rw_status_t fpga_comms_write(uint8_t addr, uint16_t data) {
 80016c8:	b580      	push	{r7, lr}
 80016ca:	b086      	sub	sp, #24
 80016cc:	af02      	add	r7, sp, #8
 80016ce:	4603      	mov	r3, r0
 80016d0:	460a      	mov	r2, r1
 80016d2:	71fb      	strb	r3, [r7, #7]
 80016d4:	4613      	mov	r3, r2
 80016d6:	80bb      	strh	r3, [r7, #4]
    if (addr > ADDR_MASK) {
 80016d8:	227f      	movs	r2, #127	@ 0x7f
 80016da:	79fb      	ldrb	r3, [r7, #7]
 80016dc:	4293      	cmp	r3, r2
 80016de:	d901      	bls.n	80016e4 <fpga_comms_write+0x1c>
        return REG_RW_ERR_INVALID_ADDR;
 80016e0:	2302      	movs	r3, #2
 80016e2:	e061      	b.n	80017a8 <fpga_comms_write+0xe0>
    }
    if (g_hspi == NULL) {
 80016e4:	4b32      	ldr	r3, [pc, #200]	@ (80017b0 <fpga_comms_write+0xe8>)
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d101      	bne.n	80016f0 <fpga_comms_write+0x28>
        return REG_RW_ERROR;
 80016ec:	2301      	movs	r3, #1
 80016ee:	e05b      	b.n	80017a8 <fpga_comms_write+0xe0>

    uint8_t rx_byte;
    uint8_t tx_byte;

    // transaction 1: send command byte (write flag  + addr)
    tx_byte = WRITE_FLAG | addr;
 80016f0:	2280      	movs	r2, #128	@ 0x80
 80016f2:	79fb      	ldrb	r3, [r7, #7]
 80016f4:	4313      	orrs	r3, r2
 80016f6:	b2db      	uxtb	r3, r3
 80016f8:	73bb      	strb	r3, [r7, #14]
    if (HAL_SPI_TransmitReceive(g_hspi, &tx_byte, &rx_byte, 1, SPI_BYTE_TIMEOUT_MS) != HAL_OK) {
 80016fa:	4b2d      	ldr	r3, [pc, #180]	@ (80017b0 <fpga_comms_write+0xe8>)
 80016fc:	6818      	ldr	r0, [r3, #0]
 80016fe:	f107 020f 	add.w	r2, r7, #15
 8001702:	f107 010e 	add.w	r1, r7, #14
 8001706:	2364      	movs	r3, #100	@ 0x64
 8001708:	9300      	str	r3, [sp, #0]
 800170a:	2301      	movs	r3, #1
 800170c:	f001 ffad 	bl	800366a <HAL_SPI_TransmitReceive>
 8001710:	4603      	mov	r3, r0
 8001712:	2b00      	cmp	r3, #0
 8001714:	d001      	beq.n	800171a <fpga_comms_write+0x52>
        return REG_RW_ERR_SPI_TIMEOUT;
 8001716:	2303      	movs	r3, #3
 8001718:	e046      	b.n	80017a8 <fpga_comms_write+0xe0>
    }

    // transaction 2: send MSByte of data
    tx_byte = (data >> 8) & 0xFF;
 800171a:	88bb      	ldrh	r3, [r7, #4]
 800171c:	0a1b      	lsrs	r3, r3, #8
 800171e:	b29b      	uxth	r3, r3
 8001720:	b2db      	uxtb	r3, r3
 8001722:	73bb      	strb	r3, [r7, #14]
    if (HAL_SPI_TransmitReceive(g_hspi, &tx_byte, &rx_byte, 1, SPI_BYTE_TIMEOUT_MS) != HAL_OK) {
 8001724:	4b22      	ldr	r3, [pc, #136]	@ (80017b0 <fpga_comms_write+0xe8>)
 8001726:	6818      	ldr	r0, [r3, #0]
 8001728:	f107 020f 	add.w	r2, r7, #15
 800172c:	f107 010e 	add.w	r1, r7, #14
 8001730:	2364      	movs	r3, #100	@ 0x64
 8001732:	9300      	str	r3, [sp, #0]
 8001734:	2301      	movs	r3, #1
 8001736:	f001 ff98 	bl	800366a <HAL_SPI_TransmitReceive>
 800173a:	4603      	mov	r3, r0
 800173c:	2b00      	cmp	r3, #0
 800173e:	d001      	beq.n	8001744 <fpga_comms_write+0x7c>
        return REG_RW_ERR_SPI_TIMEOUT;
 8001740:	2303      	movs	r3, #3
 8001742:	e031      	b.n	80017a8 <fpga_comms_write+0xe0>
    }

    // transaction 3: send LSByte of data
    tx_byte = data & 0xFF;
 8001744:	88bb      	ldrh	r3, [r7, #4]
 8001746:	b2db      	uxtb	r3, r3
 8001748:	73bb      	strb	r3, [r7, #14]
    if (HAL_SPI_TransmitReceive(g_hspi, &tx_byte, &rx_byte, 1, SPI_BYTE_TIMEOUT_MS) != HAL_OK) {
 800174a:	4b19      	ldr	r3, [pc, #100]	@ (80017b0 <fpga_comms_write+0xe8>)
 800174c:	6818      	ldr	r0, [r3, #0]
 800174e:	f107 020f 	add.w	r2, r7, #15
 8001752:	f107 010e 	add.w	r1, r7, #14
 8001756:	2364      	movs	r3, #100	@ 0x64
 8001758:	9300      	str	r3, [sp, #0]
 800175a:	2301      	movs	r3, #1
 800175c:	f001 ff85 	bl	800366a <HAL_SPI_TransmitReceive>
 8001760:	4603      	mov	r3, r0
 8001762:	2b00      	cmp	r3, #0
 8001764:	d001      	beq.n	800176a <fpga_comms_write+0xa2>
        return REG_RW_ERR_SPI_TIMEOUT;
 8001766:	2303      	movs	r3, #3
 8001768:	e01e      	b.n	80017a8 <fpga_comms_write+0xe0>
    }

    // check for first ACK (0x01) which should have been received during the LSB transmission
    if (rx_byte != WRITE_ACK1) {
 800176a:	7bfb      	ldrb	r3, [r7, #15]
 800176c:	2201      	movs	r2, #1
 800176e:	4293      	cmp	r3, r2
 8001770:	d001      	beq.n	8001776 <fpga_comms_write+0xae>
        return REG_RW_ERR_WRITE_VERIFY;
 8001772:	2305      	movs	r3, #5
 8001774:	e018      	b.n	80017a8 <fpga_comms_write+0xe0>
    }

    // transaction 4: send dummy byte to clock out the second ACK (0x02)
    tx_byte = DUMMY_BYTE;
 8001776:	2300      	movs	r3, #0
 8001778:	73bb      	strb	r3, [r7, #14]
    if (HAL_SPI_TransmitReceive(g_hspi, &tx_byte, &rx_byte, 1, SPI_BYTE_TIMEOUT_MS) != HAL_OK) {
 800177a:	4b0d      	ldr	r3, [pc, #52]	@ (80017b0 <fpga_comms_write+0xe8>)
 800177c:	6818      	ldr	r0, [r3, #0]
 800177e:	f107 020f 	add.w	r2, r7, #15
 8001782:	f107 010e 	add.w	r1, r7, #14
 8001786:	2364      	movs	r3, #100	@ 0x64
 8001788:	9300      	str	r3, [sp, #0]
 800178a:	2301      	movs	r3, #1
 800178c:	f001 ff6d 	bl	800366a <HAL_SPI_TransmitReceive>
 8001790:	4603      	mov	r3, r0
 8001792:	2b00      	cmp	r3, #0
 8001794:	d001      	beq.n	800179a <fpga_comms_write+0xd2>
        return REG_RW_ERR_SPI_TIMEOUT;
 8001796:	2303      	movs	r3, #3
 8001798:	e006      	b.n	80017a8 <fpga_comms_write+0xe0>
    }

    // check for second ACK
    if (rx_byte != WRITE_ACK2) {
 800179a:	7bfb      	ldrb	r3, [r7, #15]
 800179c:	2202      	movs	r2, #2
 800179e:	4293      	cmp	r3, r2
 80017a0:	d001      	beq.n	80017a6 <fpga_comms_write+0xde>
        return REG_RW_ERR_WRITE_VERIFY;
 80017a2:	2305      	movs	r3, #5
 80017a4:	e000      	b.n	80017a8 <fpga_comms_write+0xe0>
    }

    return REG_RW_OK;
 80017a6:	2300      	movs	r3, #0
}
 80017a8:	4618      	mov	r0, r3
 80017aa:	3710      	adds	r7, #16
 80017ac:	46bd      	mov	sp, r7
 80017ae:	bd80      	pop	{r7, pc}
 80017b0:	20000270 	.word	0x20000270

080017b4 <fpga_comms_read>:
 * @param addr the 7-bit register address (0x00 to 0x7f)
 * @param read_data pointer to a uint16_t variable where the read data will be stored
 * @return reg_rw_status_t status code indicating the outcome
 * // test: uint16_t data; fpga_comms_read(0x03, &data);
 */
reg_rw_status_t fpga_comms_read(uint8_t addr, uint16_t *read_data) {
 80017b4:	b580      	push	{r7, lr}
 80017b6:	b086      	sub	sp, #24
 80017b8:	af02      	add	r7, sp, #8
 80017ba:	4603      	mov	r3, r0
 80017bc:	6039      	str	r1, [r7, #0]
 80017be:	71fb      	strb	r3, [r7, #7]
    if (addr > ADDR_MASK) {
 80017c0:	227f      	movs	r2, #127	@ 0x7f
 80017c2:	79fb      	ldrb	r3, [r7, #7]
 80017c4:	4293      	cmp	r3, r2
 80017c6:	d901      	bls.n	80017cc <fpga_comms_read+0x18>
        return REG_RW_ERR_INVALID_ADDR;
 80017c8:	2302      	movs	r3, #2
 80017ca:	e065      	b.n	8001898 <fpga_comms_read+0xe4>
    }
    if (read_data == NULL || g_hspi == NULL) {
 80017cc:	683b      	ldr	r3, [r7, #0]
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d003      	beq.n	80017da <fpga_comms_read+0x26>
 80017d2:	4b33      	ldr	r3, [pc, #204]	@ (80018a0 <fpga_comms_read+0xec>)
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d101      	bne.n	80017de <fpga_comms_read+0x2a>
        return REG_RW_ERROR;
 80017da:	2301      	movs	r3, #1
 80017dc:	e05c      	b.n	8001898 <fpga_comms_read+0xe4>
    }

    uint8_t rx_byte;
    uint8_t command_byte = addr & ADDR_MASK;
 80017de:	227f      	movs	r2, #127	@ 0x7f
 80017e0:	79fb      	ldrb	r3, [r7, #7]
 80017e2:	4013      	ands	r3, r2
 80017e4:	b2db      	uxtb	r3, r3
 80017e6:	72bb      	strb	r3, [r7, #10]

    // send the read request command
    if (HAL_SPI_TransmitReceive(g_hspi, &command_byte, &rx_byte, 1, SPI_BYTE_TIMEOUT_MS) != HAL_OK) {
 80017e8:	4b2d      	ldr	r3, [pc, #180]	@ (80018a0 <fpga_comms_read+0xec>)
 80017ea:	6818      	ldr	r0, [r3, #0]
 80017ec:	f107 020b 	add.w	r2, r7, #11
 80017f0:	f107 010a 	add.w	r1, r7, #10
 80017f4:	2364      	movs	r3, #100	@ 0x64
 80017f6:	9300      	str	r3, [sp, #0]
 80017f8:	2301      	movs	r3, #1
 80017fa:	f001 ff36 	bl	800366a <HAL_SPI_TransmitReceive>
 80017fe:	4603      	mov	r3, r0
 8001800:	2b00      	cmp	r3, #0
 8001802:	d001      	beq.n	8001808 <fpga_comms_read+0x54>
		return REG_RW_ERR_SPI_TIMEOUT;
 8001804:	2303      	movs	r3, #3
 8001806:	e047      	b.n	8001898 <fpga_comms_read+0xe4>
	}

    // poll with dummy bytes until we receive the preamble (0x00)
    int attempts = 0;
 8001808:	2300      	movs	r3, #0
 800180a:	60fb      	str	r3, [r7, #12]
    do {
        if (HAL_SPI_TransmitReceive(g_hspi, (uint8_t*)&DUMMY_BYTE, &rx_byte, 1, SPI_BYTE_TIMEOUT_MS) != HAL_OK) {
 800180c:	4b24      	ldr	r3, [pc, #144]	@ (80018a0 <fpga_comms_read+0xec>)
 800180e:	6818      	ldr	r0, [r3, #0]
 8001810:	f107 020b 	add.w	r2, r7, #11
 8001814:	2364      	movs	r3, #100	@ 0x64
 8001816:	9300      	str	r3, [sp, #0]
 8001818:	2301      	movs	r3, #1
 800181a:	4922      	ldr	r1, [pc, #136]	@ (80018a4 <fpga_comms_read+0xf0>)
 800181c:	f001 ff25 	bl	800366a <HAL_SPI_TransmitReceive>
 8001820:	4603      	mov	r3, r0
 8001822:	2b00      	cmp	r3, #0
 8001824:	d001      	beq.n	800182a <fpga_comms_read+0x76>
			return REG_RW_ERR_SPI_TIMEOUT;
 8001826:	2303      	movs	r3, #3
 8001828:	e036      	b.n	8001898 <fpga_comms_read+0xe4>
		}

        if (rx_byte == READ_PREAMBLE) {
 800182a:	7afb      	ldrb	r3, [r7, #11]
 800182c:	2200      	movs	r2, #0
 800182e:	4293      	cmp	r3, r2
 8001830:	d007      	beq.n	8001842 <fpga_comms_read+0x8e>
            break; // preamble found
        }

        if (++attempts > PROTOCOL_MAX_POLL_ATTEMPTS) {
 8001832:	68fb      	ldr	r3, [r7, #12]
 8001834:	3301      	adds	r3, #1
 8001836:	60fb      	str	r3, [r7, #12]
 8001838:	68fb      	ldr	r3, [r7, #12]
 800183a:	2b64      	cmp	r3, #100	@ 0x64
 800183c:	dde6      	ble.n	800180c <fpga_comms_read+0x58>
            return REG_RW_ERR_POLL_TIMEOUT;
 800183e:	2306      	movs	r3, #6
 8001840:	e02a      	b.n	8001898 <fpga_comms_read+0xe4>
            break; // preamble found
 8001842:	bf00      	nop
    } while (1);

    // next two bytes clocked in are the data
    uint8_t data_msb, data_lsb;

    if (HAL_SPI_TransmitReceive(g_hspi, (uint8_t*)&DUMMY_BYTE, &data_msb, 1, SPI_BYTE_TIMEOUT_MS) != HAL_OK) {
 8001844:	4b16      	ldr	r3, [pc, #88]	@ (80018a0 <fpga_comms_read+0xec>)
 8001846:	6818      	ldr	r0, [r3, #0]
 8001848:	f107 0209 	add.w	r2, r7, #9
 800184c:	2364      	movs	r3, #100	@ 0x64
 800184e:	9300      	str	r3, [sp, #0]
 8001850:	2301      	movs	r3, #1
 8001852:	4914      	ldr	r1, [pc, #80]	@ (80018a4 <fpga_comms_read+0xf0>)
 8001854:	f001 ff09 	bl	800366a <HAL_SPI_TransmitReceive>
 8001858:	4603      	mov	r3, r0
 800185a:	2b00      	cmp	r3, #0
 800185c:	d001      	beq.n	8001862 <fpga_comms_read+0xae>
		return REG_RW_ERR_SPI_TIMEOUT;
 800185e:	2303      	movs	r3, #3
 8001860:	e01a      	b.n	8001898 <fpga_comms_read+0xe4>
	}
    if (HAL_SPI_TransmitReceive(g_hspi, (uint8_t*)&DUMMY_BYTE, &data_lsb, 1, SPI_BYTE_TIMEOUT_MS) != HAL_OK) {
 8001862:	4b0f      	ldr	r3, [pc, #60]	@ (80018a0 <fpga_comms_read+0xec>)
 8001864:	6818      	ldr	r0, [r3, #0]
 8001866:	f107 0208 	add.w	r2, r7, #8
 800186a:	2364      	movs	r3, #100	@ 0x64
 800186c:	9300      	str	r3, [sp, #0]
 800186e:	2301      	movs	r3, #1
 8001870:	490c      	ldr	r1, [pc, #48]	@ (80018a4 <fpga_comms_read+0xf0>)
 8001872:	f001 fefa 	bl	800366a <HAL_SPI_TransmitReceive>
 8001876:	4603      	mov	r3, r0
 8001878:	2b00      	cmp	r3, #0
 800187a:	d001      	beq.n	8001880 <fpga_comms_read+0xcc>
		return REG_RW_ERR_SPI_TIMEOUT;
 800187c:	2303      	movs	r3, #3
 800187e:	e00b      	b.n	8001898 <fpga_comms_read+0xe4>
	}

    *read_data = ((uint16_t)data_msb << 8) | data_lsb;
 8001880:	7a7b      	ldrb	r3, [r7, #9]
 8001882:	b21b      	sxth	r3, r3
 8001884:	021b      	lsls	r3, r3, #8
 8001886:	b21a      	sxth	r2, r3
 8001888:	7a3b      	ldrb	r3, [r7, #8]
 800188a:	b21b      	sxth	r3, r3
 800188c:	4313      	orrs	r3, r2
 800188e:	b21b      	sxth	r3, r3
 8001890:	b29a      	uxth	r2, r3
 8001892:	683b      	ldr	r3, [r7, #0]
 8001894:	801a      	strh	r2, [r3, #0]

    return REG_RW_OK;
 8001896:	2300      	movs	r3, #0
}
 8001898:	4618      	mov	r0, r3
 800189a:	3710      	adds	r7, #16
 800189c:	46bd      	mov	sp, r7
 800189e:	bd80      	pop	{r7, pc}
 80018a0:	20000270 	.word	0x20000270
 80018a4:	08005d78 	.word	0x08005d78

080018a8 <q31_to_q15_sat>:
static inline int16_t q31_to_q15_sat(int32_t q) {
 80018a8:	b480      	push	{r7}
 80018aa:	b085      	sub	sp, #20
 80018ac:	af00      	add	r7, sp, #0
 80018ae:	6078      	str	r0, [r7, #4]
    const int32_t max_q31_for_q15 = 0x7FFF7FFF; // max Q31 value that won't overflow after rounding
 80018b0:	f06f 2380 	mvn.w	r3, #2147516416	@ 0x80008000
 80018b4:	60fb      	str	r3, [r7, #12]
    if (q >= max_q31_for_q15) {
 80018b6:	687a      	ldr	r2, [r7, #4]
 80018b8:	68fb      	ldr	r3, [r7, #12]
 80018ba:	429a      	cmp	r2, r3
 80018bc:	db02      	blt.n	80018c4 <q31_to_q15_sat+0x1c>
        return 32767;
 80018be:	f647 73ff 	movw	r3, #32767	@ 0x7fff
 80018c2:	e00c      	b.n	80018de <q31_to_q15_sat+0x36>
    int32_t v = (q + (1 << 15)) >> 16;
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 80018ca:	141b      	asrs	r3, r3, #16
 80018cc:	60bb      	str	r3, [r7, #8]
    if (v <= -32768) {
 80018ce:	68bb      	ldr	r3, [r7, #8]
 80018d0:	f513 4f00 	cmn.w	r3, #32768	@ 0x8000
 80018d4:	dc01      	bgt.n	80018da <q31_to_q15_sat+0x32>
        return -32768;
 80018d6:	4b05      	ldr	r3, [pc, #20]	@ (80018ec <q31_to_q15_sat+0x44>)
 80018d8:	e001      	b.n	80018de <q31_to_q15_sat+0x36>
    return (int16_t)v;
 80018da:	68bb      	ldr	r3, [r7, #8]
 80018dc:	b21b      	sxth	r3, r3
}
 80018de:	4618      	mov	r0, r3
 80018e0:	3714      	adds	r7, #20
 80018e2:	46bd      	mov	sp, r7
 80018e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e8:	4770      	bx	lr
 80018ea:	bf00      	nop
 80018ec:	ffff8000 	.word	0xffff8000

080018f0 <smoke_modem_metrics>:
 * @param interval_coarse duration of the measurement window
 * @param iters the number of measurement iterations to run
 * @return void.
 * // test: smoke_modem_metrics(100, 8);
 */
void smoke_modem_metrics(uint16_t interval_coarse, uint32_t iters) {
 80018f0:	b580      	push	{r7, lr}
 80018f2:	b08a      	sub	sp, #40	@ 0x28
 80018f4:	af02      	add	r7, sp, #8
 80018f6:	4603      	mov	r3, r0
 80018f8:	6039      	str	r1, [r7, #0]
 80018fa:	80fb      	strh	r3, [r7, #6]
    app_log("- starting modem metrics test -\r\n");
 80018fc:	481f      	ldr	r0, [pc, #124]	@ (800197c <smoke_modem_metrics+0x8c>)
 80018fe:	f7fe fe75 	bl	80005ec <app_log>
    for (uint32_t i = 0; i < iters; ++i) {
 8001902:	2300      	movs	r3, #0
 8001904:	61fb      	str	r3, [r7, #28]
 8001906:	e031      	b.n	800196c <smoke_modem_metrics+0x7c>
        mm_counts_t c = {0};
 8001908:	f107 0308 	add.w	r3, r7, #8
 800190c:	2200      	movs	r2, #0
 800190e:	601a      	str	r2, [r3, #0]
 8001910:	605a      	str	r2, [r3, #4]
 8001912:	609a      	str	r2, [r3, #8]
 8001914:	60da      	str	r2, [r3, #12]
 8001916:	611a      	str	r2, [r3, #16]
        if (mm_get_metric_q15(interval_coarse, NULL, &c, (i < iters - 1)) == MM_OK) {
 8001918:	683b      	ldr	r3, [r7, #0]
 800191a:	3b01      	subs	r3, #1
 800191c:	69fa      	ldr	r2, [r7, #28]
 800191e:	429a      	cmp	r2, r3
 8001920:	bf34      	ite	cc
 8001922:	2301      	movcc	r3, #1
 8001924:	2300      	movcs	r3, #0
 8001926:	b2db      	uxtb	r3, r3
 8001928:	f107 0208 	add.w	r2, r7, #8
 800192c:	88f8      	ldrh	r0, [r7, #6]
 800192e:	2100      	movs	r1, #0
 8001930:	f7ff fa5e 	bl	8000df0 <mm_get_metric_q15>
 8001934:	4603      	mov	r3, r0
 8001936:	2b00      	cmp	r3, #0
 8001938:	d10e      	bne.n	8001958 <smoke_modem_metrics+0x68>
            // only log the final iteration
            if (i == iters - 1) {
 800193a:	683b      	ldr	r3, [r7, #0]
 800193c:	3b01      	subs	r3, #1
 800193e:	69fa      	ldr	r2, [r7, #28]
 8001940:	429a      	cmp	r2, r3
 8001942:	d10d      	bne.n	8001960 <smoke_modem_metrics+0x70>
                 app_log("[mm] win=%u chk=%lu det=%lu sent=%lu\r\n",
 8001944:	88f9      	ldrh	r1, [r7, #6]
                    (unsigned)interval_coarse, (unsigned long)c.check,
 8001946:	68fa      	ldr	r2, [r7, #12]
                    (unsigned long)c.detect, (unsigned long)c.sent);
 8001948:	6938      	ldr	r0, [r7, #16]
 800194a:	697b      	ldr	r3, [r7, #20]
                 app_log("[mm] win=%u chk=%lu det=%lu sent=%lu\r\n",
 800194c:	9300      	str	r3, [sp, #0]
 800194e:	4603      	mov	r3, r0
 8001950:	480b      	ldr	r0, [pc, #44]	@ (8001980 <smoke_modem_metrics+0x90>)
 8001952:	f7fe fe4b 	bl	80005ec <app_log>
 8001956:	e003      	b.n	8001960 <smoke_modem_metrics+0x70>
            }
        } else {
            app_log("err: mm_get_metric timeout\r\n");
 8001958:	480a      	ldr	r0, [pc, #40]	@ (8001984 <smoke_modem_metrics+0x94>)
 800195a:	f7fe fe47 	bl	80005ec <app_log>
            break;
        }
        HAL_Delay(50);
    }
}
 800195e:	e009      	b.n	8001974 <smoke_modem_metrics+0x84>
        HAL_Delay(50);
 8001960:	2032      	movs	r0, #50	@ 0x32
 8001962:	f000 fb7d 	bl	8002060 <HAL_Delay>
    for (uint32_t i = 0; i < iters; ++i) {
 8001966:	69fb      	ldr	r3, [r7, #28]
 8001968:	3301      	adds	r3, #1
 800196a:	61fb      	str	r3, [r7, #28]
 800196c:	69fa      	ldr	r2, [r7, #28]
 800196e:	683b      	ldr	r3, [r7, #0]
 8001970:	429a      	cmp	r2, r3
 8001972:	d3c9      	bcc.n	8001908 <smoke_modem_metrics+0x18>
}
 8001974:	bf00      	nop
 8001976:	3720      	adds	r7, #32
 8001978:	46bd      	mov	sp, r7
 800197a:	bd80      	pop	{r7, pc}
 800197c:	080057bc 	.word	0x080057bc
 8001980:	080057e0 	.word	0x080057e0
 8001984:	08005808 	.word	0x08005808

08001988 <smoke_qec_hw>:
 * @brief runs full hardware test of the rx-qec loop
 * @brief measures at +/- frequencies, calculates a correction, applies it, and re-measures //not giving great corrections
 * @return void.
 * // test: smoke_qec_hw();
 */
void smoke_qec_hw(void) {
 8001988:	b580      	push	{r7, lr}
 800198a:	b094      	sub	sp, #80	@ 0x50
 800198c:	af02      	add	r7, sp, #8
    app_log("--- starting qec hardware flow test (fixed-point) ---\r\n");
 800198e:	4858      	ldr	r0, [pc, #352]	@ (8001af0 <smoke_qec_hw+0x168>)
 8001990:	f7fe fe2c 	bl	80005ec <app_log>
    // const float freq_mhz = 10.123;
    const int32_t freq_q16 = (int32_t)(10.123f * 65536.0f); // 10.123 in Q16.16
 8001994:	4b57      	ldr	r3, [pc, #348]	@ (8001af4 <smoke_qec_hw+0x16c>)
 8001996:	647b      	str	r3, [r7, #68]	@ 0x44
    const uint16_t num_samples_pow2 = 20;
 8001998:	2314      	movs	r3, #20
 800199a:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
    int32_t p_ii, p_iq, p_qi, p_qq, n_ii, n_iq, n_qi, n_qq;

    // 1. reset corrections
    qec_apply_rx_correction_q15(32767, 0); // gain=1.0, phase=0.0
 800199e:	2100      	movs	r1, #0
 80019a0:	f647 70ff 	movw	r0, #32767	@ 0x7fff
 80019a4:	f7ff fc4e 	bl	8001244 <qec_apply_rx_correction_q15>
    qec_apply_tx_correction_q15(32767, 0, 0);
 80019a8:	2200      	movs	r2, #0
 80019aa:	2100      	movs	r1, #0
 80019ac:	f647 70ff 	movw	r0, #32767	@ 0x7fff
 80019b0:	f7ff fc96 	bl	80012e0 <qec_apply_tx_correction_q15>
    HAL_Delay(50);
 80019b4:	2032      	movs	r0, #50	@ 0x32
 80019b6:	f000 fb53 	bl	8002060 <HAL_Delay>

    // 2. measure at +f and -f
    qec_set_tx_tone_q16(freq_q16);
 80019ba:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 80019bc:	f7ff fb88 	bl	80010d0 <qec_set_tx_tone_q16>
    qec_correlator_measure(0, num_samples_pow2, &p_ii, &p_iq, &p_qi, &p_qq);
 80019c0:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 80019c4:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 80019c8:	f8b7 1042 	ldrh.w	r1, [r7, #66]	@ 0x42
 80019cc:	f107 031c 	add.w	r3, r7, #28
 80019d0:	9301      	str	r3, [sp, #4]
 80019d2:	f107 0320 	add.w	r3, r7, #32
 80019d6:	9300      	str	r3, [sp, #0]
 80019d8:	4603      	mov	r3, r0
 80019da:	2000      	movs	r0, #0
 80019dc:	f7ff fb90 	bl	8001100 <qec_correlator_measure>
    qec_set_tx_tone_q16(-freq_q16);
 80019e0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80019e2:	425b      	negs	r3, r3
 80019e4:	4618      	mov	r0, r3
 80019e6:	f7ff fb73 	bl	80010d0 <qec_set_tx_tone_q16>
    qec_correlator_measure(0, num_samples_pow2, &n_ii, &n_iq, &n_qi, &n_qq);
 80019ea:	f107 0014 	add.w	r0, r7, #20
 80019ee:	f107 0218 	add.w	r2, r7, #24
 80019f2:	f8b7 1042 	ldrh.w	r1, [r7, #66]	@ 0x42
 80019f6:	f107 030c 	add.w	r3, r7, #12
 80019fa:	9301      	str	r3, [sp, #4]
 80019fc:	f107 0310 	add.w	r3, r7, #16
 8001a00:	9300      	str	r3, [sp, #0]
 8001a02:	4603      	mov	r3, r0
 8001a04:	2000      	movs	r0, #0
 8001a06:	f7ff fb7b 	bl	8001100 <qec_correlator_measure>

    // 3. calculate initial error
    int32_t x11_pre = p_ii + n_ii;
 8001a0a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001a0c:	69bb      	ldr	r3, [r7, #24]
 8001a0e:	4413      	add	r3, r2
 8001a10:	63fb      	str	r3, [r7, #60]	@ 0x3c
    int32_t x12_pre = p_iq + n_iq;
 8001a12:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001a14:	697b      	ldr	r3, [r7, #20]
 8001a16:	4413      	add	r3, r2
 8001a18:	63bb      	str	r3, [r7, #56]	@ 0x38
    int32_t x22_pre = p_qq + n_qq;
 8001a1a:	69fa      	ldr	r2, [r7, #28]
 8001a1c:	68fb      	ldr	r3, [r7, #12]
 8001a1e:	4413      	add	r3, r2
 8001a20:	637b      	str	r3, [r7, #52]	@ 0x34
    app_log("[qec_hw] pre-correction sums: x11=%ld, x12=%ld, x22=%ld\r\n", x11_pre, x12_pre, x22_pre);
 8001a22:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001a24:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8001a26:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8001a28:	4833      	ldr	r0, [pc, #204]	@ (8001af8 <smoke_qec_hw+0x170>)
 8001a2a:	f7fe fddf 	bl	80005ec <app_log>

    // 4. calculate and apply correction
    int32_t g_corr_q31, p_corr_q31;
    qec_calc_q31(x11_pre, x12_pre, x22_pre, &g_corr_q31, &p_corr_q31);
 8001a2e:	f107 0208 	add.w	r2, r7, #8
 8001a32:	1d3b      	adds	r3, r7, #4
 8001a34:	9300      	str	r3, [sp, #0]
 8001a36:	4613      	mov	r3, r2
 8001a38:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8001a3a:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8001a3c:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8001a3e:	f7ff fd87 	bl	8001550 <qec_calc_q31>

    int16_t g_corr_q15 = q31_to_q15_sat(g_corr_q31);
 8001a42:	68bb      	ldr	r3, [r7, #8]
 8001a44:	4618      	mov	r0, r3
 8001a46:	f7ff ff2f 	bl	80018a8 <q31_to_q15_sat>
 8001a4a:	4603      	mov	r3, r0
 8001a4c:	867b      	strh	r3, [r7, #50]	@ 0x32
    int16_t p_corr_q15 = q31_to_q15_sat(p_corr_q31);
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	4618      	mov	r0, r3
 8001a52:	f7ff ff29 	bl	80018a8 <q31_to_q15_sat>
 8001a56:	4603      	mov	r3, r0
 8001a58:	863b      	strh	r3, [r7, #48]	@ 0x30

    app_log("[qec_hw] applied correction: gain_q15=%d, phase_q15=%d\r\n", g_corr_q15, p_corr_q15);
 8001a5a:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	@ 0x32
 8001a5e:	f9b7 2030 	ldrsh.w	r2, [r7, #48]	@ 0x30
 8001a62:	4619      	mov	r1, r3
 8001a64:	4825      	ldr	r0, [pc, #148]	@ (8001afc <smoke_qec_hw+0x174>)
 8001a66:	f7fe fdc1 	bl	80005ec <app_log>
    qec_apply_rx_correction_q15(g_corr_q15, p_corr_q15);
 8001a6a:	f9b7 2030 	ldrsh.w	r2, [r7, #48]	@ 0x30
 8001a6e:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	@ 0x32
 8001a72:	4611      	mov	r1, r2
 8001a74:	4618      	mov	r0, r3
 8001a76:	f7ff fbe5 	bl	8001244 <qec_apply_rx_correction_q15>
    HAL_Delay(50);
 8001a7a:	2032      	movs	r0, #50	@ 0x32
 8001a7c:	f000 faf0 	bl	8002060 <HAL_Delay>

    // 5. re-measure to verify
    qec_set_tx_tone_q16(freq_q16);
 8001a80:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8001a82:	f7ff fb25 	bl	80010d0 <qec_set_tx_tone_q16>
    qec_correlator_measure(0, num_samples_pow2, &p_ii, &p_iq, &p_qi, &p_qq);
 8001a86:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8001a8a:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 8001a8e:	f8b7 1042 	ldrh.w	r1, [r7, #66]	@ 0x42
 8001a92:	f107 031c 	add.w	r3, r7, #28
 8001a96:	9301      	str	r3, [sp, #4]
 8001a98:	f107 0320 	add.w	r3, r7, #32
 8001a9c:	9300      	str	r3, [sp, #0]
 8001a9e:	4603      	mov	r3, r0
 8001aa0:	2000      	movs	r0, #0
 8001aa2:	f7ff fb2d 	bl	8001100 <qec_correlator_measure>
    qec_set_tx_tone_q16(-freq_q16);
 8001aa6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001aa8:	425b      	negs	r3, r3
 8001aaa:	4618      	mov	r0, r3
 8001aac:	f7ff fb10 	bl	80010d0 <qec_set_tx_tone_q16>
    qec_correlator_measure(0, num_samples_pow2, &n_ii, &n_iq, &n_qi, &n_qq);
 8001ab0:	f107 0014 	add.w	r0, r7, #20
 8001ab4:	f107 0218 	add.w	r2, r7, #24
 8001ab8:	f8b7 1042 	ldrh.w	r1, [r7, #66]	@ 0x42
 8001abc:	f107 030c 	add.w	r3, r7, #12
 8001ac0:	9301      	str	r3, [sp, #4]
 8001ac2:	f107 0310 	add.w	r3, r7, #16
 8001ac6:	9300      	str	r3, [sp, #0]
 8001ac8:	4603      	mov	r3, r0
 8001aca:	2000      	movs	r0, #0
 8001acc:	f7ff fb18 	bl	8001100 <qec_correlator_measure>
    int32_t x12_post = p_iq + n_iq;
 8001ad0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001ad2:	697b      	ldr	r3, [r7, #20]
 8001ad4:	4413      	add	r3, r2
 8001ad6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    app_log("[qec_hw] post-correction iq sum (x12): %ld (should be closer to 0)\r\n", x12_post);
 8001ad8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8001ada:	4809      	ldr	r0, [pc, #36]	@ (8001b00 <smoke_qec_hw+0x178>)
 8001adc:	f7fe fd86 	bl	80005ec <app_log>

    // 6. cleanup
    qec_set_tx_tone_q16(0);
 8001ae0:	2000      	movs	r0, #0
 8001ae2:	f7ff faf5 	bl	80010d0 <qec_set_tx_tone_q16>
}
 8001ae6:	bf00      	nop
 8001ae8:	3748      	adds	r7, #72	@ 0x48
 8001aea:	46bd      	mov	sp, r7
 8001aec:	bd80      	pop	{r7, pc}
 8001aee:	bf00      	nop
 8001af0:	08005988 	.word	0x08005988
 8001af4:	000a1f7c 	.word	0x000a1f7c
 8001af8:	080059c0 	.word	0x080059c0
 8001afc:	080059fc 	.word	0x080059fc
 8001b00:	08005a38 	.word	0x08005a38

08001b04 <smoke_disable_tx_cw>:
/**
 * @brief disables tx;s CW tone override
 * @brief returns the transmitter to sending data from the modem
 * @return void.
 */
void smoke_disable_tx_cw(void) {
 8001b04:	b580      	push	{r7, lr}
 8001b06:	af00      	add	r7, sp, #0
    reg_write(REG_CTRL, reg_read(REG_CTRL) & ~CTRL_FORCE_CW_TONE);
 8001b08:	2023      	movs	r0, #35	@ 0x23
 8001b0a:	f7fe fdc3 	bl	8000694 <reg_read>
 8001b0e:	4603      	mov	r3, r0
 8001b10:	f023 0308 	bic.w	r3, r3, #8
 8001b14:	b29b      	uxth	r3, r3
 8001b16:	4619      	mov	r1, r3
 8001b18:	2023      	movs	r0, #35	@ 0x23
 8001b1a:	f7fe fd9b 	bl	8000654 <reg_write>
    app_log("info: disabling tx cw tone, returning to modem data.\r\n");
 8001b1e:	4802      	ldr	r0, [pc, #8]	@ (8001b28 <smoke_disable_tx_cw+0x24>)
 8001b20:	f7fe fd64 	bl	80005ec <app_log>
}
 8001b24:	bf00      	nop
 8001b26:	bd80      	pop	{r7, pc}
 8001b28:	08005ab0 	.word	0x08005ab0

08001b2c <smoke_setup_for_packet_loopback>:
 * @param tx_gain the tx gain setting (0-31)
 * @param tx_mask the bitmask for the tx channel
 * @return void.
 */
void smoke_setup_for_packet_loopback(uint8_t rx_channel, uint16_t tx_gain, uint16_t tx_mask)
{
 8001b2c:	b580      	push	{r7, lr}
 8001b2e:	b082      	sub	sp, #8
 8001b30:	af00      	add	r7, sp, #0
 8001b32:	4603      	mov	r3, r0
 8001b34:	71fb      	strb	r3, [r7, #7]
 8001b36:	460b      	mov	r3, r1
 8001b38:	80bb      	strh	r3, [r7, #4]
 8001b3a:	4613      	mov	r3, r2
 8001b3c:	807b      	strh	r3, [r7, #2]
    app_log("info: starting complete packet loopback setup sequence...\r\n");
 8001b3e:	482e      	ldr	r0, [pc, #184]	@ (8001bf8 <smoke_setup_for_packet_loopback+0xcc>)
 8001b40:	f7fe fd54 	bl	80005ec <app_log>

    // 1- configure rx Path and disable tx
    reg_write(REG_CTRL, CTRL_MODEM_RESET); // modem in reset
 8001b44:	2102      	movs	r1, #2
 8001b46:	2023      	movs	r0, #35	@ 0x23
 8001b48:	f7fe fd84 	bl	8000654 <reg_write>
    HAL_Delay(1);
 8001b4c:	2001      	movs	r0, #1
 8001b4e:	f000 fa87 	bl	8002060 <HAL_Delay>
    reg_write(REG_CTRL, 0x00); // modem release
 8001b52:	2100      	movs	r1, #0
 8001b54:	2023      	movs	r0, #35	@ 0x23
 8001b56:	f7fe fd7d 	bl	8000654 <reg_write>
    HAL_Delay(1);
 8001b5a:	2001      	movs	r0, #1
 8001b5c:	f000 fa80 	bl	8002060 <HAL_Delay>

    reg_write(REG_ROLE_MODE, 0x02); // TDD disabled, primary role
 8001b60:	2102      	movs	r1, #2
 8001b62:	2001      	movs	r0, #1
 8001b64:	f7fe fd76 	bl	8000654 <reg_write>
    HAL_Delay(1);
 8001b68:	2001      	movs	r0, #1
 8001b6a:	f000 fa79 	bl	8002060 <HAL_Delay>

    set_Rx(0); // set MAX2851 to RX, disable TX path (sets REG_CTRL bit 0)
 8001b6e:	2000      	movs	r0, #0
 8001b70:	f7ff f8de 	bl	8000d30 <set_Rx>
    HAL_Delay(1);
 8001b74:	2001      	movs	r0, #1
 8001b76:	f000 fa73 	bl	8002060 <HAL_Delay>

    reg_write(0x65, 0); // ensure loopback path is off initially
 8001b7a:	2100      	movs	r1, #0
 8001b7c:	2065      	movs	r0, #101	@ 0x65
 8001b7e:	f7fe fd69 	bl	8000654 <reg_write>
    reg_write(REG_RX_MUX, rx_channel);
 8001b82:	79fb      	ldrb	r3, [r7, #7]
 8001b84:	b29b      	uxth	r3, r3
 8001b86:	4619      	mov	r1, r3
 8001b88:	2022      	movs	r0, #34	@ 0x22
 8001b8a:	f7fe fd63 	bl	8000654 <reg_write>
    reg_write(REG_FRAME_SRC, 2);
 8001b8e:	2102      	movs	r1, #2
 8001b90:	2066      	movs	r0, #102	@ 0x66
 8001b92:	f7fe fd5f 	bl	8000654 <reg_write>
    reg_write(REG_CAP_ARM, 1);
 8001b96:	2101      	movs	r1, #1
 8001b98:	204d      	movs	r0, #77	@ 0x4d
 8001b9a:	f7fe fd5b 	bl	8000654 <reg_write>
    reg_write(REG_RX_SD_FEEDBACK, 0);
 8001b9e:	2100      	movs	r1, #0
 8001ba0:	2062      	movs	r0, #98	@ 0x62
 8001ba2:	f7fe fd57 	bl	8000654 <reg_write>
    reg_write(REG_RSSI_SETPOINT, 90);
 8001ba6:	215a      	movs	r1, #90	@ 0x5a
 8001ba8:	2051      	movs	r0, #81	@ 0x51
 8001baa:	f7fe fd53 	bl	8000654 <reg_write>
    reg_write(REG_QEC_EN, 0);
 8001bae:	2100      	movs	r1, #0
 8001bb0:	2025      	movs	r0, #37	@ 0x25
 8001bb2:	f7fe fd4f 	bl	8000654 <reg_write>
    reg_write(0x64, 32); // digital RX gain unity
 8001bb6:	2120      	movs	r1, #32
 8001bb8:	2064      	movs	r0, #100	@ 0x64
 8001bba:	f7fe fd4b 	bl	8000654 <reg_write>
    HAL_Delay(1);
 8001bbe:	2001      	movs	r0, #1
 8001bc0:	f000 fa4e 	bl	8002060 <HAL_Delay>

    app_log("info: rx path configured.\r\n");
 8001bc4:	480d      	ldr	r0, [pc, #52]	@ (8001bfc <smoke_setup_for_packet_loopback+0xd0>)
 8001bc6:	f7fe fd11 	bl	80005ec <app_log>

    // 2- re-enable tx Path and loopback
    set_Tx(tx_gain, tx_mask); // re-enables TX path (clears REG_CTRL bit 0)
 8001bca:	88bb      	ldrh	r3, [r7, #4]
 8001bcc:	887a      	ldrh	r2, [r7, #2]
 8001bce:	4611      	mov	r1, r2
 8001bd0:	4618      	mov	r0, r3
 8001bd2:	f7fe ffbf 	bl	8000b54 <set_Tx>
    HAL_Delay(1);
 8001bd6:	2001      	movs	r0, #1
 8001bd8:	f000 fa42 	bl	8002060 <HAL_Delay>

    reg_write(0x65, 0x0002); // enable FPGA's digital loopback path
 8001bdc:	2102      	movs	r1, #2
 8001bde:	2065      	movs	r0, #101	@ 0x65
 8001be0:	f7fe fd38 	bl	8000654 <reg_write>
    HAL_Delay(1);
 8001be4:	2001      	movs	r0, #1
 8001be6:	f000 fa3b 	bl	8002060 <HAL_Delay>

    app_log("info: tx path and loopback enabled, setup complete.\r\n");
 8001bea:	4805      	ldr	r0, [pc, #20]	@ (8001c00 <smoke_setup_for_packet_loopback+0xd4>)
 8001bec:	f7fe fcfe 	bl	80005ec <app_log>
}
 8001bf0:	bf00      	nop
 8001bf2:	3708      	adds	r7, #8
 8001bf4:	46bd      	mov	sp, r7
 8001bf6:	bd80      	pop	{r7, pc}
 8001bf8:	08005ae8 	.word	0x08005ae8
 8001bfc:	08005b24 	.word	0x08005b24
 8001c00:	08005b40 	.word	0x08005b40

08001c04 <HAL_MspInit>:
 8001c04:	b580      	push	{r7, lr}
 8001c06:	b082      	sub	sp, #8
 8001c08:	af00      	add	r7, sp, #0
 8001c0a:	4b0f      	ldr	r3, [pc, #60]	@ (8001c48 <HAL_MspInit+0x44>)
 8001c0c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001c0e:	4a0e      	ldr	r2, [pc, #56]	@ (8001c48 <HAL_MspInit+0x44>)
 8001c10:	f043 0301 	orr.w	r3, r3, #1
 8001c14:	6613      	str	r3, [r2, #96]	@ 0x60
 8001c16:	4b0c      	ldr	r3, [pc, #48]	@ (8001c48 <HAL_MspInit+0x44>)
 8001c18:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001c1a:	f003 0301 	and.w	r3, r3, #1
 8001c1e:	607b      	str	r3, [r7, #4]
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	4b09      	ldr	r3, [pc, #36]	@ (8001c48 <HAL_MspInit+0x44>)
 8001c24:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c26:	4a08      	ldr	r2, [pc, #32]	@ (8001c48 <HAL_MspInit+0x44>)
 8001c28:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001c2c:	6593      	str	r3, [r2, #88]	@ 0x58
 8001c2e:	4b06      	ldr	r3, [pc, #24]	@ (8001c48 <HAL_MspInit+0x44>)
 8001c30:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c32:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001c36:	603b      	str	r3, [r7, #0]
 8001c38:	683b      	ldr	r3, [r7, #0]
 8001c3a:	f000 fd3d 	bl	80026b8 <HAL_PWREx_DisableUCPDDeadBattery>
 8001c3e:	bf00      	nop
 8001c40:	3708      	adds	r7, #8
 8001c42:	46bd      	mov	sp, r7
 8001c44:	bd80      	pop	{r7, pc}
 8001c46:	bf00      	nop
 8001c48:	40021000 	.word	0x40021000

08001c4c <HAL_SPI_MspInit>:
 8001c4c:	b580      	push	{r7, lr}
 8001c4e:	b08a      	sub	sp, #40	@ 0x28
 8001c50:	af00      	add	r7, sp, #0
 8001c52:	6078      	str	r0, [r7, #4]
 8001c54:	f107 0314 	add.w	r3, r7, #20
 8001c58:	2200      	movs	r2, #0
 8001c5a:	601a      	str	r2, [r3, #0]
 8001c5c:	605a      	str	r2, [r3, #4]
 8001c5e:	609a      	str	r2, [r3, #8]
 8001c60:	60da      	str	r2, [r3, #12]
 8001c62:	611a      	str	r2, [r3, #16]
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	4a17      	ldr	r2, [pc, #92]	@ (8001cc8 <HAL_SPI_MspInit+0x7c>)
 8001c6a:	4293      	cmp	r3, r2
 8001c6c:	d128      	bne.n	8001cc0 <HAL_SPI_MspInit+0x74>
 8001c6e:	4b17      	ldr	r3, [pc, #92]	@ (8001ccc <HAL_SPI_MspInit+0x80>)
 8001c70:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001c72:	4a16      	ldr	r2, [pc, #88]	@ (8001ccc <HAL_SPI_MspInit+0x80>)
 8001c74:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001c78:	6613      	str	r3, [r2, #96]	@ 0x60
 8001c7a:	4b14      	ldr	r3, [pc, #80]	@ (8001ccc <HAL_SPI_MspInit+0x80>)
 8001c7c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001c7e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001c82:	613b      	str	r3, [r7, #16]
 8001c84:	693b      	ldr	r3, [r7, #16]
 8001c86:	4b11      	ldr	r3, [pc, #68]	@ (8001ccc <HAL_SPI_MspInit+0x80>)
 8001c88:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001c8a:	4a10      	ldr	r2, [pc, #64]	@ (8001ccc <HAL_SPI_MspInit+0x80>)
 8001c8c:	f043 0301 	orr.w	r3, r3, #1
 8001c90:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001c92:	4b0e      	ldr	r3, [pc, #56]	@ (8001ccc <HAL_SPI_MspInit+0x80>)
 8001c94:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001c96:	f003 0301 	and.w	r3, r3, #1
 8001c9a:	60fb      	str	r3, [r7, #12]
 8001c9c:	68fb      	ldr	r3, [r7, #12]
 8001c9e:	23f0      	movs	r3, #240	@ 0xf0
 8001ca0:	617b      	str	r3, [r7, #20]
 8001ca2:	2302      	movs	r3, #2
 8001ca4:	61bb      	str	r3, [r7, #24]
 8001ca6:	2300      	movs	r3, #0
 8001ca8:	61fb      	str	r3, [r7, #28]
 8001caa:	2300      	movs	r3, #0
 8001cac:	623b      	str	r3, [r7, #32]
 8001cae:	2305      	movs	r3, #5
 8001cb0:	627b      	str	r3, [r7, #36]	@ 0x24
 8001cb2:	f107 0314 	add.w	r3, r7, #20
 8001cb6:	4619      	mov	r1, r3
 8001cb8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001cbc:	f000 fad6 	bl	800226c <HAL_GPIO_Init>
 8001cc0:	bf00      	nop
 8001cc2:	3728      	adds	r7, #40	@ 0x28
 8001cc4:	46bd      	mov	sp, r7
 8001cc6:	bd80      	pop	{r7, pc}
 8001cc8:	40013000 	.word	0x40013000
 8001ccc:	40021000 	.word	0x40021000

08001cd0 <HAL_UART_MspInit>:
 8001cd0:	b580      	push	{r7, lr}
 8001cd2:	b09e      	sub	sp, #120	@ 0x78
 8001cd4:	af00      	add	r7, sp, #0
 8001cd6:	6078      	str	r0, [r7, #4]
 8001cd8:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001cdc:	2200      	movs	r2, #0
 8001cde:	601a      	str	r2, [r3, #0]
 8001ce0:	605a      	str	r2, [r3, #4]
 8001ce2:	609a      	str	r2, [r3, #8]
 8001ce4:	60da      	str	r2, [r3, #12]
 8001ce6:	611a      	str	r2, [r3, #16]
 8001ce8:	f107 0320 	add.w	r3, r7, #32
 8001cec:	2244      	movs	r2, #68	@ 0x44
 8001cee:	2100      	movs	r1, #0
 8001cf0:	4618      	mov	r0, r3
 8001cf2:	f002 fe43 	bl	800497c <memset>
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	4a4c      	ldr	r2, [pc, #304]	@ (8001e2c <HAL_UART_MspInit+0x15c>)
 8001cfc:	4293      	cmp	r3, r2
 8001cfe:	d138      	bne.n	8001d72 <HAL_UART_MspInit+0xa2>
 8001d00:	2301      	movs	r3, #1
 8001d02:	623b      	str	r3, [r7, #32]
 8001d04:	2300      	movs	r3, #0
 8001d06:	627b      	str	r3, [r7, #36]	@ 0x24
 8001d08:	f107 0320 	add.w	r3, r7, #32
 8001d0c:	4618      	mov	r0, r3
 8001d0e:	f001 fa11 	bl	8003134 <HAL_RCCEx_PeriphCLKConfig>
 8001d12:	4603      	mov	r3, r0
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d001      	beq.n	8001d1c <HAL_UART_MspInit+0x4c>
 8001d18:	f7fe fe50 	bl	80009bc <Error_Handler>
 8001d1c:	4b44      	ldr	r3, [pc, #272]	@ (8001e30 <HAL_UART_MspInit+0x160>)
 8001d1e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001d20:	4a43      	ldr	r2, [pc, #268]	@ (8001e30 <HAL_UART_MspInit+0x160>)
 8001d22:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001d26:	6613      	str	r3, [r2, #96]	@ 0x60
 8001d28:	4b41      	ldr	r3, [pc, #260]	@ (8001e30 <HAL_UART_MspInit+0x160>)
 8001d2a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001d2c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001d30:	61fb      	str	r3, [r7, #28]
 8001d32:	69fb      	ldr	r3, [r7, #28]
 8001d34:	4b3e      	ldr	r3, [pc, #248]	@ (8001e30 <HAL_UART_MspInit+0x160>)
 8001d36:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001d38:	4a3d      	ldr	r2, [pc, #244]	@ (8001e30 <HAL_UART_MspInit+0x160>)
 8001d3a:	f043 0301 	orr.w	r3, r3, #1
 8001d3e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001d40:	4b3b      	ldr	r3, [pc, #236]	@ (8001e30 <HAL_UART_MspInit+0x160>)
 8001d42:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001d44:	f003 0301 	and.w	r3, r3, #1
 8001d48:	61bb      	str	r3, [r7, #24]
 8001d4a:	69bb      	ldr	r3, [r7, #24]
 8001d4c:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8001d50:	667b      	str	r3, [r7, #100]	@ 0x64
 8001d52:	2302      	movs	r3, #2
 8001d54:	66bb      	str	r3, [r7, #104]	@ 0x68
 8001d56:	2300      	movs	r3, #0
 8001d58:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8001d5a:	2300      	movs	r3, #0
 8001d5c:	673b      	str	r3, [r7, #112]	@ 0x70
 8001d5e:	2307      	movs	r3, #7
 8001d60:	677b      	str	r3, [r7, #116]	@ 0x74
 8001d62:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001d66:	4619      	mov	r1, r3
 8001d68:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001d6c:	f000 fa7e 	bl	800226c <HAL_GPIO_Init>
 8001d70:	e058      	b.n	8001e24 <HAL_UART_MspInit+0x154>
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	4a2f      	ldr	r2, [pc, #188]	@ (8001e34 <HAL_UART_MspInit+0x164>)
 8001d78:	4293      	cmp	r3, r2
 8001d7a:	d153      	bne.n	8001e24 <HAL_UART_MspInit+0x154>
 8001d7c:	2302      	movs	r3, #2
 8001d7e:	623b      	str	r3, [r7, #32]
 8001d80:	2300      	movs	r3, #0
 8001d82:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001d84:	f107 0320 	add.w	r3, r7, #32
 8001d88:	4618      	mov	r0, r3
 8001d8a:	f001 f9d3 	bl	8003134 <HAL_RCCEx_PeriphCLKConfig>
 8001d8e:	4603      	mov	r3, r0
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d001      	beq.n	8001d98 <HAL_UART_MspInit+0xc8>
 8001d94:	f7fe fe12 	bl	80009bc <Error_Handler>
 8001d98:	4b25      	ldr	r3, [pc, #148]	@ (8001e30 <HAL_UART_MspInit+0x160>)
 8001d9a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d9c:	4a24      	ldr	r2, [pc, #144]	@ (8001e30 <HAL_UART_MspInit+0x160>)
 8001d9e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001da2:	6593      	str	r3, [r2, #88]	@ 0x58
 8001da4:	4b22      	ldr	r3, [pc, #136]	@ (8001e30 <HAL_UART_MspInit+0x160>)
 8001da6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001da8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001dac:	617b      	str	r3, [r7, #20]
 8001dae:	697b      	ldr	r3, [r7, #20]
 8001db0:	4b1f      	ldr	r3, [pc, #124]	@ (8001e30 <HAL_UART_MspInit+0x160>)
 8001db2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001db4:	4a1e      	ldr	r2, [pc, #120]	@ (8001e30 <HAL_UART_MspInit+0x160>)
 8001db6:	f043 0301 	orr.w	r3, r3, #1
 8001dba:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001dbc:	4b1c      	ldr	r3, [pc, #112]	@ (8001e30 <HAL_UART_MspInit+0x160>)
 8001dbe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001dc0:	f003 0301 	and.w	r3, r3, #1
 8001dc4:	613b      	str	r3, [r7, #16]
 8001dc6:	693b      	ldr	r3, [r7, #16]
 8001dc8:	4b19      	ldr	r3, [pc, #100]	@ (8001e30 <HAL_UART_MspInit+0x160>)
 8001dca:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001dcc:	4a18      	ldr	r2, [pc, #96]	@ (8001e30 <HAL_UART_MspInit+0x160>)
 8001dce:	f043 0302 	orr.w	r3, r3, #2
 8001dd2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001dd4:	4b16      	ldr	r3, [pc, #88]	@ (8001e30 <HAL_UART_MspInit+0x160>)
 8001dd6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001dd8:	f003 0302 	and.w	r3, r3, #2
 8001ddc:	60fb      	str	r3, [r7, #12]
 8001dde:	68fb      	ldr	r3, [r7, #12]
 8001de0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001de4:	667b      	str	r3, [r7, #100]	@ 0x64
 8001de6:	2302      	movs	r3, #2
 8001de8:	66bb      	str	r3, [r7, #104]	@ 0x68
 8001dea:	2300      	movs	r3, #0
 8001dec:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8001dee:	2300      	movs	r3, #0
 8001df0:	673b      	str	r3, [r7, #112]	@ 0x70
 8001df2:	2307      	movs	r3, #7
 8001df4:	677b      	str	r3, [r7, #116]	@ 0x74
 8001df6:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001dfa:	4619      	mov	r1, r3
 8001dfc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001e00:	f000 fa34 	bl	800226c <HAL_GPIO_Init>
 8001e04:	2308      	movs	r3, #8
 8001e06:	667b      	str	r3, [r7, #100]	@ 0x64
 8001e08:	2302      	movs	r3, #2
 8001e0a:	66bb      	str	r3, [r7, #104]	@ 0x68
 8001e0c:	2300      	movs	r3, #0
 8001e0e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8001e10:	2300      	movs	r3, #0
 8001e12:	673b      	str	r3, [r7, #112]	@ 0x70
 8001e14:	2307      	movs	r3, #7
 8001e16:	677b      	str	r3, [r7, #116]	@ 0x74
 8001e18:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001e1c:	4619      	mov	r1, r3
 8001e1e:	4806      	ldr	r0, [pc, #24]	@ (8001e38 <HAL_UART_MspInit+0x168>)
 8001e20:	f000 fa24 	bl	800226c <HAL_GPIO_Init>
 8001e24:	bf00      	nop
 8001e26:	3778      	adds	r7, #120	@ 0x78
 8001e28:	46bd      	mov	sp, r7
 8001e2a:	bd80      	pop	{r7, pc}
 8001e2c:	40013800 	.word	0x40013800
 8001e30:	40021000 	.word	0x40021000
 8001e34:	40004400 	.word	0x40004400
 8001e38:	48000400 	.word	0x48000400

08001e3c <NMI_Handler>:
 8001e3c:	b480      	push	{r7}
 8001e3e:	af00      	add	r7, sp, #0
 8001e40:	bf00      	nop
 8001e42:	e7fd      	b.n	8001e40 <NMI_Handler+0x4>

08001e44 <HardFault_Handler>:
 8001e44:	b480      	push	{r7}
 8001e46:	af00      	add	r7, sp, #0
 8001e48:	bf00      	nop
 8001e4a:	e7fd      	b.n	8001e48 <HardFault_Handler+0x4>

08001e4c <MemManage_Handler>:
 8001e4c:	b480      	push	{r7}
 8001e4e:	af00      	add	r7, sp, #0
 8001e50:	bf00      	nop
 8001e52:	e7fd      	b.n	8001e50 <MemManage_Handler+0x4>

08001e54 <BusFault_Handler>:
 8001e54:	b480      	push	{r7}
 8001e56:	af00      	add	r7, sp, #0
 8001e58:	bf00      	nop
 8001e5a:	e7fd      	b.n	8001e58 <BusFault_Handler+0x4>

08001e5c <UsageFault_Handler>:
 8001e5c:	b480      	push	{r7}
 8001e5e:	af00      	add	r7, sp, #0
 8001e60:	bf00      	nop
 8001e62:	e7fd      	b.n	8001e60 <UsageFault_Handler+0x4>

08001e64 <SVC_Handler>:
 8001e64:	b480      	push	{r7}
 8001e66:	af00      	add	r7, sp, #0
 8001e68:	bf00      	nop
 8001e6a:	46bd      	mov	sp, r7
 8001e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e70:	4770      	bx	lr

08001e72 <DebugMon_Handler>:
 8001e72:	b480      	push	{r7}
 8001e74:	af00      	add	r7, sp, #0
 8001e76:	bf00      	nop
 8001e78:	46bd      	mov	sp, r7
 8001e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e7e:	4770      	bx	lr

08001e80 <PendSV_Handler>:
 8001e80:	b480      	push	{r7}
 8001e82:	af00      	add	r7, sp, #0
 8001e84:	bf00      	nop
 8001e86:	46bd      	mov	sp, r7
 8001e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e8c:	4770      	bx	lr

08001e8e <SysTick_Handler>:
 8001e8e:	b580      	push	{r7, lr}
 8001e90:	af00      	add	r7, sp, #0
 8001e92:	f000 f8c7 	bl	8002024 <HAL_IncTick>
 8001e96:	bf00      	nop
 8001e98:	bd80      	pop	{r7, pc}
	...

08001e9c <_sbrk>:
 8001e9c:	b580      	push	{r7, lr}
 8001e9e:	b086      	sub	sp, #24
 8001ea0:	af00      	add	r7, sp, #0
 8001ea2:	6078      	str	r0, [r7, #4]
 8001ea4:	4a14      	ldr	r2, [pc, #80]	@ (8001ef8 <_sbrk+0x5c>)
 8001ea6:	4b15      	ldr	r3, [pc, #84]	@ (8001efc <_sbrk+0x60>)
 8001ea8:	1ad3      	subs	r3, r2, r3
 8001eaa:	617b      	str	r3, [r7, #20]
 8001eac:	697b      	ldr	r3, [r7, #20]
 8001eae:	613b      	str	r3, [r7, #16]
 8001eb0:	4b13      	ldr	r3, [pc, #76]	@ (8001f00 <_sbrk+0x64>)
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d102      	bne.n	8001ebe <_sbrk+0x22>
 8001eb8:	4b11      	ldr	r3, [pc, #68]	@ (8001f00 <_sbrk+0x64>)
 8001eba:	4a12      	ldr	r2, [pc, #72]	@ (8001f04 <_sbrk+0x68>)
 8001ebc:	601a      	str	r2, [r3, #0]
 8001ebe:	4b10      	ldr	r3, [pc, #64]	@ (8001f00 <_sbrk+0x64>)
 8001ec0:	681a      	ldr	r2, [r3, #0]
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	4413      	add	r3, r2
 8001ec6:	693a      	ldr	r2, [r7, #16]
 8001ec8:	429a      	cmp	r2, r3
 8001eca:	d207      	bcs.n	8001edc <_sbrk+0x40>
 8001ecc:	f002 fd5e 	bl	800498c <__errno>
 8001ed0:	4603      	mov	r3, r0
 8001ed2:	220c      	movs	r2, #12
 8001ed4:	601a      	str	r2, [r3, #0]
 8001ed6:	f04f 33ff 	mov.w	r3, #4294967295
 8001eda:	e009      	b.n	8001ef0 <_sbrk+0x54>
 8001edc:	4b08      	ldr	r3, [pc, #32]	@ (8001f00 <_sbrk+0x64>)
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	60fb      	str	r3, [r7, #12]
 8001ee2:	4b07      	ldr	r3, [pc, #28]	@ (8001f00 <_sbrk+0x64>)
 8001ee4:	681a      	ldr	r2, [r3, #0]
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	4413      	add	r3, r2
 8001eea:	4a05      	ldr	r2, [pc, #20]	@ (8001f00 <_sbrk+0x64>)
 8001eec:	6013      	str	r3, [r2, #0]
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	4618      	mov	r0, r3
 8001ef2:	3718      	adds	r7, #24
 8001ef4:	46bd      	mov	sp, r7
 8001ef6:	bd80      	pop	{r7, pc}
 8001ef8:	20008000 	.word	0x20008000
 8001efc:	00000400 	.word	0x00000400
 8001f00:	20000274 	.word	0x20000274
 8001f04:	200003c8 	.word	0x200003c8

08001f08 <SystemInit>:
 8001f08:	b480      	push	{r7}
 8001f0a:	af00      	add	r7, sp, #0
 8001f0c:	4b06      	ldr	r3, [pc, #24]	@ (8001f28 <SystemInit+0x20>)
 8001f0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001f12:	4a05      	ldr	r2, [pc, #20]	@ (8001f28 <SystemInit+0x20>)
 8001f14:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001f18:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
 8001f1c:	bf00      	nop
 8001f1e:	46bd      	mov	sp, r7
 8001f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f24:	4770      	bx	lr
 8001f26:	bf00      	nop
 8001f28:	e000ed00 	.word	0xe000ed00

08001f2c <Reset_Handler>:
 8001f2c:	480d      	ldr	r0, [pc, #52]	@ (8001f64 <LoopForever+0x2>)
 8001f2e:	4685      	mov	sp, r0
 8001f30:	f7ff ffea 	bl	8001f08 <SystemInit>
 8001f34:	480c      	ldr	r0, [pc, #48]	@ (8001f68 <LoopForever+0x6>)
 8001f36:	490d      	ldr	r1, [pc, #52]	@ (8001f6c <LoopForever+0xa>)
 8001f38:	4a0d      	ldr	r2, [pc, #52]	@ (8001f70 <LoopForever+0xe>)
 8001f3a:	2300      	movs	r3, #0
 8001f3c:	e002      	b.n	8001f44 <LoopCopyDataInit>

08001f3e <CopyDataInit>:
 8001f3e:	58d4      	ldr	r4, [r2, r3]
 8001f40:	50c4      	str	r4, [r0, r3]
 8001f42:	3304      	adds	r3, #4

08001f44 <LoopCopyDataInit>:
 8001f44:	18c4      	adds	r4, r0, r3
 8001f46:	428c      	cmp	r4, r1
 8001f48:	d3f9      	bcc.n	8001f3e <CopyDataInit>
 8001f4a:	4a0a      	ldr	r2, [pc, #40]	@ (8001f74 <LoopForever+0x12>)
 8001f4c:	4c0a      	ldr	r4, [pc, #40]	@ (8001f78 <LoopForever+0x16>)
 8001f4e:	2300      	movs	r3, #0
 8001f50:	e001      	b.n	8001f56 <LoopFillZerobss>

08001f52 <FillZerobss>:
 8001f52:	6013      	str	r3, [r2, #0]
 8001f54:	3204      	adds	r2, #4

08001f56 <LoopFillZerobss>:
 8001f56:	42a2      	cmp	r2, r4
 8001f58:	d3fb      	bcc.n	8001f52 <FillZerobss>
 8001f5a:	f002 fd1d 	bl	8004998 <__libc_init_array>
 8001f5e:	f7fe fc03 	bl	8000768 <main>

08001f62 <LoopForever>:
 8001f62:	e7fe      	b.n	8001f62 <LoopForever>
 8001f64:	20008000 	.word	0x20008000
 8001f68:	20000000 	.word	0x20000000
 8001f6c:	2000005c 	.word	0x2000005c
 8001f70:	08005df0 	.word	0x08005df0
 8001f74:	2000005c 	.word	0x2000005c
 8001f78:	200003c4 	.word	0x200003c4

08001f7c <ADC1_2_IRQHandler>:
 8001f7c:	e7fe      	b.n	8001f7c <ADC1_2_IRQHandler>

08001f7e <HAL_Init>:
 8001f7e:	b580      	push	{r7, lr}
 8001f80:	b082      	sub	sp, #8
 8001f82:	af00      	add	r7, sp, #0
 8001f84:	2300      	movs	r3, #0
 8001f86:	71fb      	strb	r3, [r7, #7]
 8001f88:	2003      	movs	r0, #3
 8001f8a:	f000 f93d 	bl	8002208 <HAL_NVIC_SetPriorityGrouping>
 8001f8e:	200f      	movs	r0, #15
 8001f90:	f000 f80e 	bl	8001fb0 <HAL_InitTick>
 8001f94:	4603      	mov	r3, r0
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d002      	beq.n	8001fa0 <HAL_Init+0x22>
 8001f9a:	2301      	movs	r3, #1
 8001f9c:	71fb      	strb	r3, [r7, #7]
 8001f9e:	e001      	b.n	8001fa4 <HAL_Init+0x26>
 8001fa0:	f7ff fe30 	bl	8001c04 <HAL_MspInit>
 8001fa4:	79fb      	ldrb	r3, [r7, #7]
 8001fa6:	4618      	mov	r0, r3
 8001fa8:	3708      	adds	r7, #8
 8001faa:	46bd      	mov	sp, r7
 8001fac:	bd80      	pop	{r7, pc}
	...

08001fb0 <HAL_InitTick>:
 8001fb0:	b580      	push	{r7, lr}
 8001fb2:	b084      	sub	sp, #16
 8001fb4:	af00      	add	r7, sp, #0
 8001fb6:	6078      	str	r0, [r7, #4]
 8001fb8:	2300      	movs	r3, #0
 8001fba:	73fb      	strb	r3, [r7, #15]
 8001fbc:	4b16      	ldr	r3, [pc, #88]	@ (8002018 <HAL_InitTick+0x68>)
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d022      	beq.n	800200a <HAL_InitTick+0x5a>
 8001fc4:	4b15      	ldr	r3, [pc, #84]	@ (800201c <HAL_InitTick+0x6c>)
 8001fc6:	681a      	ldr	r2, [r3, #0]
 8001fc8:	4b13      	ldr	r3, [pc, #76]	@ (8002018 <HAL_InitTick+0x68>)
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8001fd0:	fbb1 f3f3 	udiv	r3, r1, r3
 8001fd4:	fbb2 f3f3 	udiv	r3, r2, r3
 8001fd8:	4618      	mov	r0, r3
 8001fda:	f000 f93a 	bl	8002252 <HAL_SYSTICK_Config>
 8001fde:	4603      	mov	r3, r0
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d10f      	bne.n	8002004 <HAL_InitTick+0x54>
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	2b0f      	cmp	r3, #15
 8001fe8:	d809      	bhi.n	8001ffe <HAL_InitTick+0x4e>
 8001fea:	2200      	movs	r2, #0
 8001fec:	6879      	ldr	r1, [r7, #4]
 8001fee:	f04f 30ff 	mov.w	r0, #4294967295
 8001ff2:	f000 f914 	bl	800221e <HAL_NVIC_SetPriority>
 8001ff6:	4a0a      	ldr	r2, [pc, #40]	@ (8002020 <HAL_InitTick+0x70>)
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	6013      	str	r3, [r2, #0]
 8001ffc:	e007      	b.n	800200e <HAL_InitTick+0x5e>
 8001ffe:	2301      	movs	r3, #1
 8002000:	73fb      	strb	r3, [r7, #15]
 8002002:	e004      	b.n	800200e <HAL_InitTick+0x5e>
 8002004:	2301      	movs	r3, #1
 8002006:	73fb      	strb	r3, [r7, #15]
 8002008:	e001      	b.n	800200e <HAL_InitTick+0x5e>
 800200a:	2301      	movs	r3, #1
 800200c:	73fb      	strb	r3, [r7, #15]
 800200e:	7bfb      	ldrb	r3, [r7, #15]
 8002010:	4618      	mov	r0, r3
 8002012:	3710      	adds	r7, #16
 8002014:	46bd      	mov	sp, r7
 8002016:	bd80      	pop	{r7, pc}
 8002018:	20000008 	.word	0x20000008
 800201c:	20000000 	.word	0x20000000
 8002020:	20000004 	.word	0x20000004

08002024 <HAL_IncTick>:
 8002024:	b480      	push	{r7}
 8002026:	af00      	add	r7, sp, #0
 8002028:	4b05      	ldr	r3, [pc, #20]	@ (8002040 <HAL_IncTick+0x1c>)
 800202a:	681a      	ldr	r2, [r3, #0]
 800202c:	4b05      	ldr	r3, [pc, #20]	@ (8002044 <HAL_IncTick+0x20>)
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	4413      	add	r3, r2
 8002032:	4a03      	ldr	r2, [pc, #12]	@ (8002040 <HAL_IncTick+0x1c>)
 8002034:	6013      	str	r3, [r2, #0]
 8002036:	bf00      	nop
 8002038:	46bd      	mov	sp, r7
 800203a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800203e:	4770      	bx	lr
 8002040:	20000278 	.word	0x20000278
 8002044:	20000008 	.word	0x20000008

08002048 <HAL_GetTick>:
 8002048:	b480      	push	{r7}
 800204a:	af00      	add	r7, sp, #0
 800204c:	4b03      	ldr	r3, [pc, #12]	@ (800205c <HAL_GetTick+0x14>)
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	4618      	mov	r0, r3
 8002052:	46bd      	mov	sp, r7
 8002054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002058:	4770      	bx	lr
 800205a:	bf00      	nop
 800205c:	20000278 	.word	0x20000278

08002060 <HAL_Delay>:
 8002060:	b580      	push	{r7, lr}
 8002062:	b084      	sub	sp, #16
 8002064:	af00      	add	r7, sp, #0
 8002066:	6078      	str	r0, [r7, #4]
 8002068:	f7ff ffee 	bl	8002048 <HAL_GetTick>
 800206c:	60b8      	str	r0, [r7, #8]
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	60fb      	str	r3, [r7, #12]
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002078:	d004      	beq.n	8002084 <HAL_Delay+0x24>
 800207a:	4b09      	ldr	r3, [pc, #36]	@ (80020a0 <HAL_Delay+0x40>)
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	68fa      	ldr	r2, [r7, #12]
 8002080:	4413      	add	r3, r2
 8002082:	60fb      	str	r3, [r7, #12]
 8002084:	bf00      	nop
 8002086:	f7ff ffdf 	bl	8002048 <HAL_GetTick>
 800208a:	4602      	mov	r2, r0
 800208c:	68bb      	ldr	r3, [r7, #8]
 800208e:	1ad3      	subs	r3, r2, r3
 8002090:	68fa      	ldr	r2, [r7, #12]
 8002092:	429a      	cmp	r2, r3
 8002094:	d8f7      	bhi.n	8002086 <HAL_Delay+0x26>
 8002096:	bf00      	nop
 8002098:	bf00      	nop
 800209a:	3710      	adds	r7, #16
 800209c:	46bd      	mov	sp, r7
 800209e:	bd80      	pop	{r7, pc}
 80020a0:	20000008 	.word	0x20000008

080020a4 <__NVIC_SetPriorityGrouping>:
 80020a4:	b480      	push	{r7}
 80020a6:	b085      	sub	sp, #20
 80020a8:	af00      	add	r7, sp, #0
 80020aa:	6078      	str	r0, [r7, #4]
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	f003 0307 	and.w	r3, r3, #7
 80020b2:	60fb      	str	r3, [r7, #12]
 80020b4:	4b0c      	ldr	r3, [pc, #48]	@ (80020e8 <__NVIC_SetPriorityGrouping+0x44>)
 80020b6:	68db      	ldr	r3, [r3, #12]
 80020b8:	60bb      	str	r3, [r7, #8]
 80020ba:	68ba      	ldr	r2, [r7, #8]
 80020bc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80020c0:	4013      	ands	r3, r2
 80020c2:	60bb      	str	r3, [r7, #8]
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	021a      	lsls	r2, r3, #8
 80020c8:	68bb      	ldr	r3, [r7, #8]
 80020ca:	4313      	orrs	r3, r2
 80020cc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80020d0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80020d4:	60bb      	str	r3, [r7, #8]
 80020d6:	4a04      	ldr	r2, [pc, #16]	@ (80020e8 <__NVIC_SetPriorityGrouping+0x44>)
 80020d8:	68bb      	ldr	r3, [r7, #8]
 80020da:	60d3      	str	r3, [r2, #12]
 80020dc:	bf00      	nop
 80020de:	3714      	adds	r7, #20
 80020e0:	46bd      	mov	sp, r7
 80020e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e6:	4770      	bx	lr
 80020e8:	e000ed00 	.word	0xe000ed00

080020ec <__NVIC_GetPriorityGrouping>:
 80020ec:	b480      	push	{r7}
 80020ee:	af00      	add	r7, sp, #0
 80020f0:	4b04      	ldr	r3, [pc, #16]	@ (8002104 <__NVIC_GetPriorityGrouping+0x18>)
 80020f2:	68db      	ldr	r3, [r3, #12]
 80020f4:	0a1b      	lsrs	r3, r3, #8
 80020f6:	f003 0307 	and.w	r3, r3, #7
 80020fa:	4618      	mov	r0, r3
 80020fc:	46bd      	mov	sp, r7
 80020fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002102:	4770      	bx	lr
 8002104:	e000ed00 	.word	0xe000ed00

08002108 <__NVIC_SetPriority>:
 8002108:	b480      	push	{r7}
 800210a:	b083      	sub	sp, #12
 800210c:	af00      	add	r7, sp, #0
 800210e:	4603      	mov	r3, r0
 8002110:	6039      	str	r1, [r7, #0]
 8002112:	71fb      	strb	r3, [r7, #7]
 8002114:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002118:	2b00      	cmp	r3, #0
 800211a:	db0a      	blt.n	8002132 <__NVIC_SetPriority+0x2a>
 800211c:	683b      	ldr	r3, [r7, #0]
 800211e:	b2da      	uxtb	r2, r3
 8002120:	490c      	ldr	r1, [pc, #48]	@ (8002154 <__NVIC_SetPriority+0x4c>)
 8002122:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002126:	0112      	lsls	r2, r2, #4
 8002128:	b2d2      	uxtb	r2, r2
 800212a:	440b      	add	r3, r1
 800212c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
 8002130:	e00a      	b.n	8002148 <__NVIC_SetPriority+0x40>
 8002132:	683b      	ldr	r3, [r7, #0]
 8002134:	b2da      	uxtb	r2, r3
 8002136:	4908      	ldr	r1, [pc, #32]	@ (8002158 <__NVIC_SetPriority+0x50>)
 8002138:	79fb      	ldrb	r3, [r7, #7]
 800213a:	f003 030f 	and.w	r3, r3, #15
 800213e:	3b04      	subs	r3, #4
 8002140:	0112      	lsls	r2, r2, #4
 8002142:	b2d2      	uxtb	r2, r2
 8002144:	440b      	add	r3, r1
 8002146:	761a      	strb	r2, [r3, #24]
 8002148:	bf00      	nop
 800214a:	370c      	adds	r7, #12
 800214c:	46bd      	mov	sp, r7
 800214e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002152:	4770      	bx	lr
 8002154:	e000e100 	.word	0xe000e100
 8002158:	e000ed00 	.word	0xe000ed00

0800215c <NVIC_EncodePriority>:
 800215c:	b480      	push	{r7}
 800215e:	b089      	sub	sp, #36	@ 0x24
 8002160:	af00      	add	r7, sp, #0
 8002162:	60f8      	str	r0, [r7, #12]
 8002164:	60b9      	str	r1, [r7, #8]
 8002166:	607a      	str	r2, [r7, #4]
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	f003 0307 	and.w	r3, r3, #7
 800216e:	61fb      	str	r3, [r7, #28]
 8002170:	69fb      	ldr	r3, [r7, #28]
 8002172:	f1c3 0307 	rsb	r3, r3, #7
 8002176:	2b04      	cmp	r3, #4
 8002178:	bf28      	it	cs
 800217a:	2304      	movcs	r3, #4
 800217c:	61bb      	str	r3, [r7, #24]
 800217e:	69fb      	ldr	r3, [r7, #28]
 8002180:	3304      	adds	r3, #4
 8002182:	2b06      	cmp	r3, #6
 8002184:	d902      	bls.n	800218c <NVIC_EncodePriority+0x30>
 8002186:	69fb      	ldr	r3, [r7, #28]
 8002188:	3b03      	subs	r3, #3
 800218a:	e000      	b.n	800218e <NVIC_EncodePriority+0x32>
 800218c:	2300      	movs	r3, #0
 800218e:	617b      	str	r3, [r7, #20]
 8002190:	f04f 32ff 	mov.w	r2, #4294967295
 8002194:	69bb      	ldr	r3, [r7, #24]
 8002196:	fa02 f303 	lsl.w	r3, r2, r3
 800219a:	43da      	mvns	r2, r3
 800219c:	68bb      	ldr	r3, [r7, #8]
 800219e:	401a      	ands	r2, r3
 80021a0:	697b      	ldr	r3, [r7, #20]
 80021a2:	409a      	lsls	r2, r3
 80021a4:	f04f 31ff 	mov.w	r1, #4294967295
 80021a8:	697b      	ldr	r3, [r7, #20]
 80021aa:	fa01 f303 	lsl.w	r3, r1, r3
 80021ae:	43d9      	mvns	r1, r3
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	400b      	ands	r3, r1
 80021b4:	4313      	orrs	r3, r2
 80021b6:	4618      	mov	r0, r3
 80021b8:	3724      	adds	r7, #36	@ 0x24
 80021ba:	46bd      	mov	sp, r7
 80021bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c0:	4770      	bx	lr
	...

080021c4 <SysTick_Config>:
 80021c4:	b580      	push	{r7, lr}
 80021c6:	b082      	sub	sp, #8
 80021c8:	af00      	add	r7, sp, #0
 80021ca:	6078      	str	r0, [r7, #4]
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	3b01      	subs	r3, #1
 80021d0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80021d4:	d301      	bcc.n	80021da <SysTick_Config+0x16>
 80021d6:	2301      	movs	r3, #1
 80021d8:	e00f      	b.n	80021fa <SysTick_Config+0x36>
 80021da:	4a0a      	ldr	r2, [pc, #40]	@ (8002204 <SysTick_Config+0x40>)
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	3b01      	subs	r3, #1
 80021e0:	6053      	str	r3, [r2, #4]
 80021e2:	210f      	movs	r1, #15
 80021e4:	f04f 30ff 	mov.w	r0, #4294967295
 80021e8:	f7ff ff8e 	bl	8002108 <__NVIC_SetPriority>
 80021ec:	4b05      	ldr	r3, [pc, #20]	@ (8002204 <SysTick_Config+0x40>)
 80021ee:	2200      	movs	r2, #0
 80021f0:	609a      	str	r2, [r3, #8]
 80021f2:	4b04      	ldr	r3, [pc, #16]	@ (8002204 <SysTick_Config+0x40>)
 80021f4:	2207      	movs	r2, #7
 80021f6:	601a      	str	r2, [r3, #0]
 80021f8:	2300      	movs	r3, #0
 80021fa:	4618      	mov	r0, r3
 80021fc:	3708      	adds	r7, #8
 80021fe:	46bd      	mov	sp, r7
 8002200:	bd80      	pop	{r7, pc}
 8002202:	bf00      	nop
 8002204:	e000e010 	.word	0xe000e010

08002208 <HAL_NVIC_SetPriorityGrouping>:
 8002208:	b580      	push	{r7, lr}
 800220a:	b082      	sub	sp, #8
 800220c:	af00      	add	r7, sp, #0
 800220e:	6078      	str	r0, [r7, #4]
 8002210:	6878      	ldr	r0, [r7, #4]
 8002212:	f7ff ff47 	bl	80020a4 <__NVIC_SetPriorityGrouping>
 8002216:	bf00      	nop
 8002218:	3708      	adds	r7, #8
 800221a:	46bd      	mov	sp, r7
 800221c:	bd80      	pop	{r7, pc}

0800221e <HAL_NVIC_SetPriority>:
 800221e:	b580      	push	{r7, lr}
 8002220:	b086      	sub	sp, #24
 8002222:	af00      	add	r7, sp, #0
 8002224:	4603      	mov	r3, r0
 8002226:	60b9      	str	r1, [r7, #8]
 8002228:	607a      	str	r2, [r7, #4]
 800222a:	73fb      	strb	r3, [r7, #15]
 800222c:	f7ff ff5e 	bl	80020ec <__NVIC_GetPriorityGrouping>
 8002230:	6178      	str	r0, [r7, #20]
 8002232:	687a      	ldr	r2, [r7, #4]
 8002234:	68b9      	ldr	r1, [r7, #8]
 8002236:	6978      	ldr	r0, [r7, #20]
 8002238:	f7ff ff90 	bl	800215c <NVIC_EncodePriority>
 800223c:	4602      	mov	r2, r0
 800223e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002242:	4611      	mov	r1, r2
 8002244:	4618      	mov	r0, r3
 8002246:	f7ff ff5f 	bl	8002108 <__NVIC_SetPriority>
 800224a:	bf00      	nop
 800224c:	3718      	adds	r7, #24
 800224e:	46bd      	mov	sp, r7
 8002250:	bd80      	pop	{r7, pc}

08002252 <HAL_SYSTICK_Config>:
 8002252:	b580      	push	{r7, lr}
 8002254:	b082      	sub	sp, #8
 8002256:	af00      	add	r7, sp, #0
 8002258:	6078      	str	r0, [r7, #4]
 800225a:	6878      	ldr	r0, [r7, #4]
 800225c:	f7ff ffb2 	bl	80021c4 <SysTick_Config>
 8002260:	4603      	mov	r3, r0
 8002262:	4618      	mov	r0, r3
 8002264:	3708      	adds	r7, #8
 8002266:	46bd      	mov	sp, r7
 8002268:	bd80      	pop	{r7, pc}
	...

0800226c <HAL_GPIO_Init>:
 800226c:	b480      	push	{r7}
 800226e:	b087      	sub	sp, #28
 8002270:	af00      	add	r7, sp, #0
 8002272:	6078      	str	r0, [r7, #4]
 8002274:	6039      	str	r1, [r7, #0]
 8002276:	2300      	movs	r3, #0
 8002278:	617b      	str	r3, [r7, #20]
 800227a:	e15a      	b.n	8002532 <HAL_GPIO_Init+0x2c6>
 800227c:	683b      	ldr	r3, [r7, #0]
 800227e:	681a      	ldr	r2, [r3, #0]
 8002280:	2101      	movs	r1, #1
 8002282:	697b      	ldr	r3, [r7, #20]
 8002284:	fa01 f303 	lsl.w	r3, r1, r3
 8002288:	4013      	ands	r3, r2
 800228a:	60fb      	str	r3, [r7, #12]
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	2b00      	cmp	r3, #0
 8002290:	f000 814c 	beq.w	800252c <HAL_GPIO_Init+0x2c0>
 8002294:	683b      	ldr	r3, [r7, #0]
 8002296:	685b      	ldr	r3, [r3, #4]
 8002298:	f003 0303 	and.w	r3, r3, #3
 800229c:	2b01      	cmp	r3, #1
 800229e:	d005      	beq.n	80022ac <HAL_GPIO_Init+0x40>
 80022a0:	683b      	ldr	r3, [r7, #0]
 80022a2:	685b      	ldr	r3, [r3, #4]
 80022a4:	f003 0303 	and.w	r3, r3, #3
 80022a8:	2b02      	cmp	r3, #2
 80022aa:	d130      	bne.n	800230e <HAL_GPIO_Init+0xa2>
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	689b      	ldr	r3, [r3, #8]
 80022b0:	613b      	str	r3, [r7, #16]
 80022b2:	697b      	ldr	r3, [r7, #20]
 80022b4:	005b      	lsls	r3, r3, #1
 80022b6:	2203      	movs	r2, #3
 80022b8:	fa02 f303 	lsl.w	r3, r2, r3
 80022bc:	43db      	mvns	r3, r3
 80022be:	693a      	ldr	r2, [r7, #16]
 80022c0:	4013      	ands	r3, r2
 80022c2:	613b      	str	r3, [r7, #16]
 80022c4:	683b      	ldr	r3, [r7, #0]
 80022c6:	68da      	ldr	r2, [r3, #12]
 80022c8:	697b      	ldr	r3, [r7, #20]
 80022ca:	005b      	lsls	r3, r3, #1
 80022cc:	fa02 f303 	lsl.w	r3, r2, r3
 80022d0:	693a      	ldr	r2, [r7, #16]
 80022d2:	4313      	orrs	r3, r2
 80022d4:	613b      	str	r3, [r7, #16]
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	693a      	ldr	r2, [r7, #16]
 80022da:	609a      	str	r2, [r3, #8]
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	685b      	ldr	r3, [r3, #4]
 80022e0:	613b      	str	r3, [r7, #16]
 80022e2:	2201      	movs	r2, #1
 80022e4:	697b      	ldr	r3, [r7, #20]
 80022e6:	fa02 f303 	lsl.w	r3, r2, r3
 80022ea:	43db      	mvns	r3, r3
 80022ec:	693a      	ldr	r2, [r7, #16]
 80022ee:	4013      	ands	r3, r2
 80022f0:	613b      	str	r3, [r7, #16]
 80022f2:	683b      	ldr	r3, [r7, #0]
 80022f4:	685b      	ldr	r3, [r3, #4]
 80022f6:	091b      	lsrs	r3, r3, #4
 80022f8:	f003 0201 	and.w	r2, r3, #1
 80022fc:	697b      	ldr	r3, [r7, #20]
 80022fe:	fa02 f303 	lsl.w	r3, r2, r3
 8002302:	693a      	ldr	r2, [r7, #16]
 8002304:	4313      	orrs	r3, r2
 8002306:	613b      	str	r3, [r7, #16]
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	693a      	ldr	r2, [r7, #16]
 800230c:	605a      	str	r2, [r3, #4]
 800230e:	683b      	ldr	r3, [r7, #0]
 8002310:	685b      	ldr	r3, [r3, #4]
 8002312:	f003 0303 	and.w	r3, r3, #3
 8002316:	2b03      	cmp	r3, #3
 8002318:	d017      	beq.n	800234a <HAL_GPIO_Init+0xde>
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	68db      	ldr	r3, [r3, #12]
 800231e:	613b      	str	r3, [r7, #16]
 8002320:	697b      	ldr	r3, [r7, #20]
 8002322:	005b      	lsls	r3, r3, #1
 8002324:	2203      	movs	r2, #3
 8002326:	fa02 f303 	lsl.w	r3, r2, r3
 800232a:	43db      	mvns	r3, r3
 800232c:	693a      	ldr	r2, [r7, #16]
 800232e:	4013      	ands	r3, r2
 8002330:	613b      	str	r3, [r7, #16]
 8002332:	683b      	ldr	r3, [r7, #0]
 8002334:	689a      	ldr	r2, [r3, #8]
 8002336:	697b      	ldr	r3, [r7, #20]
 8002338:	005b      	lsls	r3, r3, #1
 800233a:	fa02 f303 	lsl.w	r3, r2, r3
 800233e:	693a      	ldr	r2, [r7, #16]
 8002340:	4313      	orrs	r3, r2
 8002342:	613b      	str	r3, [r7, #16]
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	693a      	ldr	r2, [r7, #16]
 8002348:	60da      	str	r2, [r3, #12]
 800234a:	683b      	ldr	r3, [r7, #0]
 800234c:	685b      	ldr	r3, [r3, #4]
 800234e:	f003 0303 	and.w	r3, r3, #3
 8002352:	2b02      	cmp	r3, #2
 8002354:	d123      	bne.n	800239e <HAL_GPIO_Init+0x132>
 8002356:	697b      	ldr	r3, [r7, #20]
 8002358:	08da      	lsrs	r2, r3, #3
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	3208      	adds	r2, #8
 800235e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002362:	613b      	str	r3, [r7, #16]
 8002364:	697b      	ldr	r3, [r7, #20]
 8002366:	f003 0307 	and.w	r3, r3, #7
 800236a:	009b      	lsls	r3, r3, #2
 800236c:	220f      	movs	r2, #15
 800236e:	fa02 f303 	lsl.w	r3, r2, r3
 8002372:	43db      	mvns	r3, r3
 8002374:	693a      	ldr	r2, [r7, #16]
 8002376:	4013      	ands	r3, r2
 8002378:	613b      	str	r3, [r7, #16]
 800237a:	683b      	ldr	r3, [r7, #0]
 800237c:	691a      	ldr	r2, [r3, #16]
 800237e:	697b      	ldr	r3, [r7, #20]
 8002380:	f003 0307 	and.w	r3, r3, #7
 8002384:	009b      	lsls	r3, r3, #2
 8002386:	fa02 f303 	lsl.w	r3, r2, r3
 800238a:	693a      	ldr	r2, [r7, #16]
 800238c:	4313      	orrs	r3, r2
 800238e:	613b      	str	r3, [r7, #16]
 8002390:	697b      	ldr	r3, [r7, #20]
 8002392:	08da      	lsrs	r2, r3, #3
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	3208      	adds	r2, #8
 8002398:	6939      	ldr	r1, [r7, #16]
 800239a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	613b      	str	r3, [r7, #16]
 80023a4:	697b      	ldr	r3, [r7, #20]
 80023a6:	005b      	lsls	r3, r3, #1
 80023a8:	2203      	movs	r2, #3
 80023aa:	fa02 f303 	lsl.w	r3, r2, r3
 80023ae:	43db      	mvns	r3, r3
 80023b0:	693a      	ldr	r2, [r7, #16]
 80023b2:	4013      	ands	r3, r2
 80023b4:	613b      	str	r3, [r7, #16]
 80023b6:	683b      	ldr	r3, [r7, #0]
 80023b8:	685b      	ldr	r3, [r3, #4]
 80023ba:	f003 0203 	and.w	r2, r3, #3
 80023be:	697b      	ldr	r3, [r7, #20]
 80023c0:	005b      	lsls	r3, r3, #1
 80023c2:	fa02 f303 	lsl.w	r3, r2, r3
 80023c6:	693a      	ldr	r2, [r7, #16]
 80023c8:	4313      	orrs	r3, r2
 80023ca:	613b      	str	r3, [r7, #16]
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	693a      	ldr	r2, [r7, #16]
 80023d0:	601a      	str	r2, [r3, #0]
 80023d2:	683b      	ldr	r3, [r7, #0]
 80023d4:	685b      	ldr	r3, [r3, #4]
 80023d6:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80023da:	2b00      	cmp	r3, #0
 80023dc:	f000 80a6 	beq.w	800252c <HAL_GPIO_Init+0x2c0>
 80023e0:	4b5b      	ldr	r3, [pc, #364]	@ (8002550 <HAL_GPIO_Init+0x2e4>)
 80023e2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80023e4:	4a5a      	ldr	r2, [pc, #360]	@ (8002550 <HAL_GPIO_Init+0x2e4>)
 80023e6:	f043 0301 	orr.w	r3, r3, #1
 80023ea:	6613      	str	r3, [r2, #96]	@ 0x60
 80023ec:	4b58      	ldr	r3, [pc, #352]	@ (8002550 <HAL_GPIO_Init+0x2e4>)
 80023ee:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80023f0:	f003 0301 	and.w	r3, r3, #1
 80023f4:	60bb      	str	r3, [r7, #8]
 80023f6:	68bb      	ldr	r3, [r7, #8]
 80023f8:	4a56      	ldr	r2, [pc, #344]	@ (8002554 <HAL_GPIO_Init+0x2e8>)
 80023fa:	697b      	ldr	r3, [r7, #20]
 80023fc:	089b      	lsrs	r3, r3, #2
 80023fe:	3302      	adds	r3, #2
 8002400:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002404:	613b      	str	r3, [r7, #16]
 8002406:	697b      	ldr	r3, [r7, #20]
 8002408:	f003 0303 	and.w	r3, r3, #3
 800240c:	009b      	lsls	r3, r3, #2
 800240e:	220f      	movs	r2, #15
 8002410:	fa02 f303 	lsl.w	r3, r2, r3
 8002414:	43db      	mvns	r3, r3
 8002416:	693a      	ldr	r2, [r7, #16]
 8002418:	4013      	ands	r3, r2
 800241a:	613b      	str	r3, [r7, #16]
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8002422:	d01f      	beq.n	8002464 <HAL_GPIO_Init+0x1f8>
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	4a4c      	ldr	r2, [pc, #304]	@ (8002558 <HAL_GPIO_Init+0x2ec>)
 8002428:	4293      	cmp	r3, r2
 800242a:	d019      	beq.n	8002460 <HAL_GPIO_Init+0x1f4>
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	4a4b      	ldr	r2, [pc, #300]	@ (800255c <HAL_GPIO_Init+0x2f0>)
 8002430:	4293      	cmp	r3, r2
 8002432:	d013      	beq.n	800245c <HAL_GPIO_Init+0x1f0>
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	4a4a      	ldr	r2, [pc, #296]	@ (8002560 <HAL_GPIO_Init+0x2f4>)
 8002438:	4293      	cmp	r3, r2
 800243a:	d00d      	beq.n	8002458 <HAL_GPIO_Init+0x1ec>
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	4a49      	ldr	r2, [pc, #292]	@ (8002564 <HAL_GPIO_Init+0x2f8>)
 8002440:	4293      	cmp	r3, r2
 8002442:	d007      	beq.n	8002454 <HAL_GPIO_Init+0x1e8>
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	4a48      	ldr	r2, [pc, #288]	@ (8002568 <HAL_GPIO_Init+0x2fc>)
 8002448:	4293      	cmp	r3, r2
 800244a:	d101      	bne.n	8002450 <HAL_GPIO_Init+0x1e4>
 800244c:	2305      	movs	r3, #5
 800244e:	e00a      	b.n	8002466 <HAL_GPIO_Init+0x1fa>
 8002450:	2306      	movs	r3, #6
 8002452:	e008      	b.n	8002466 <HAL_GPIO_Init+0x1fa>
 8002454:	2304      	movs	r3, #4
 8002456:	e006      	b.n	8002466 <HAL_GPIO_Init+0x1fa>
 8002458:	2303      	movs	r3, #3
 800245a:	e004      	b.n	8002466 <HAL_GPIO_Init+0x1fa>
 800245c:	2302      	movs	r3, #2
 800245e:	e002      	b.n	8002466 <HAL_GPIO_Init+0x1fa>
 8002460:	2301      	movs	r3, #1
 8002462:	e000      	b.n	8002466 <HAL_GPIO_Init+0x1fa>
 8002464:	2300      	movs	r3, #0
 8002466:	697a      	ldr	r2, [r7, #20]
 8002468:	f002 0203 	and.w	r2, r2, #3
 800246c:	0092      	lsls	r2, r2, #2
 800246e:	4093      	lsls	r3, r2
 8002470:	693a      	ldr	r2, [r7, #16]
 8002472:	4313      	orrs	r3, r2
 8002474:	613b      	str	r3, [r7, #16]
 8002476:	4937      	ldr	r1, [pc, #220]	@ (8002554 <HAL_GPIO_Init+0x2e8>)
 8002478:	697b      	ldr	r3, [r7, #20]
 800247a:	089b      	lsrs	r3, r3, #2
 800247c:	3302      	adds	r3, #2
 800247e:	693a      	ldr	r2, [r7, #16]
 8002480:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8002484:	4b39      	ldr	r3, [pc, #228]	@ (800256c <HAL_GPIO_Init+0x300>)
 8002486:	689b      	ldr	r3, [r3, #8]
 8002488:	613b      	str	r3, [r7, #16]
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	43db      	mvns	r3, r3
 800248e:	693a      	ldr	r2, [r7, #16]
 8002490:	4013      	ands	r3, r2
 8002492:	613b      	str	r3, [r7, #16]
 8002494:	683b      	ldr	r3, [r7, #0]
 8002496:	685b      	ldr	r3, [r3, #4]
 8002498:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800249c:	2b00      	cmp	r3, #0
 800249e:	d003      	beq.n	80024a8 <HAL_GPIO_Init+0x23c>
 80024a0:	693a      	ldr	r2, [r7, #16]
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	4313      	orrs	r3, r2
 80024a6:	613b      	str	r3, [r7, #16]
 80024a8:	4a30      	ldr	r2, [pc, #192]	@ (800256c <HAL_GPIO_Init+0x300>)
 80024aa:	693b      	ldr	r3, [r7, #16]
 80024ac:	6093      	str	r3, [r2, #8]
 80024ae:	4b2f      	ldr	r3, [pc, #188]	@ (800256c <HAL_GPIO_Init+0x300>)
 80024b0:	68db      	ldr	r3, [r3, #12]
 80024b2:	613b      	str	r3, [r7, #16]
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	43db      	mvns	r3, r3
 80024b8:	693a      	ldr	r2, [r7, #16]
 80024ba:	4013      	ands	r3, r2
 80024bc:	613b      	str	r3, [r7, #16]
 80024be:	683b      	ldr	r3, [r7, #0]
 80024c0:	685b      	ldr	r3, [r3, #4]
 80024c2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d003      	beq.n	80024d2 <HAL_GPIO_Init+0x266>
 80024ca:	693a      	ldr	r2, [r7, #16]
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	4313      	orrs	r3, r2
 80024d0:	613b      	str	r3, [r7, #16]
 80024d2:	4a26      	ldr	r2, [pc, #152]	@ (800256c <HAL_GPIO_Init+0x300>)
 80024d4:	693b      	ldr	r3, [r7, #16]
 80024d6:	60d3      	str	r3, [r2, #12]
 80024d8:	4b24      	ldr	r3, [pc, #144]	@ (800256c <HAL_GPIO_Init+0x300>)
 80024da:	685b      	ldr	r3, [r3, #4]
 80024dc:	613b      	str	r3, [r7, #16]
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	43db      	mvns	r3, r3
 80024e2:	693a      	ldr	r2, [r7, #16]
 80024e4:	4013      	ands	r3, r2
 80024e6:	613b      	str	r3, [r7, #16]
 80024e8:	683b      	ldr	r3, [r7, #0]
 80024ea:	685b      	ldr	r3, [r3, #4]
 80024ec:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d003      	beq.n	80024fc <HAL_GPIO_Init+0x290>
 80024f4:	693a      	ldr	r2, [r7, #16]
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	4313      	orrs	r3, r2
 80024fa:	613b      	str	r3, [r7, #16]
 80024fc:	4a1b      	ldr	r2, [pc, #108]	@ (800256c <HAL_GPIO_Init+0x300>)
 80024fe:	693b      	ldr	r3, [r7, #16]
 8002500:	6053      	str	r3, [r2, #4]
 8002502:	4b1a      	ldr	r3, [pc, #104]	@ (800256c <HAL_GPIO_Init+0x300>)
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	613b      	str	r3, [r7, #16]
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	43db      	mvns	r3, r3
 800250c:	693a      	ldr	r2, [r7, #16]
 800250e:	4013      	ands	r3, r2
 8002510:	613b      	str	r3, [r7, #16]
 8002512:	683b      	ldr	r3, [r7, #0]
 8002514:	685b      	ldr	r3, [r3, #4]
 8002516:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800251a:	2b00      	cmp	r3, #0
 800251c:	d003      	beq.n	8002526 <HAL_GPIO_Init+0x2ba>
 800251e:	693a      	ldr	r2, [r7, #16]
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	4313      	orrs	r3, r2
 8002524:	613b      	str	r3, [r7, #16]
 8002526:	4a11      	ldr	r2, [pc, #68]	@ (800256c <HAL_GPIO_Init+0x300>)
 8002528:	693b      	ldr	r3, [r7, #16]
 800252a:	6013      	str	r3, [r2, #0]
 800252c:	697b      	ldr	r3, [r7, #20]
 800252e:	3301      	adds	r3, #1
 8002530:	617b      	str	r3, [r7, #20]
 8002532:	683b      	ldr	r3, [r7, #0]
 8002534:	681a      	ldr	r2, [r3, #0]
 8002536:	697b      	ldr	r3, [r7, #20]
 8002538:	fa22 f303 	lsr.w	r3, r2, r3
 800253c:	2b00      	cmp	r3, #0
 800253e:	f47f ae9d 	bne.w	800227c <HAL_GPIO_Init+0x10>
 8002542:	bf00      	nop
 8002544:	bf00      	nop
 8002546:	371c      	adds	r7, #28
 8002548:	46bd      	mov	sp, r7
 800254a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800254e:	4770      	bx	lr
 8002550:	40021000 	.word	0x40021000
 8002554:	40010000 	.word	0x40010000
 8002558:	48000400 	.word	0x48000400
 800255c:	48000800 	.word	0x48000800
 8002560:	48000c00 	.word	0x48000c00
 8002564:	48001000 	.word	0x48001000
 8002568:	48001400 	.word	0x48001400
 800256c:	40010400 	.word	0x40010400

08002570 <HAL_PWREx_ControlVoltageScaling>:
 8002570:	b480      	push	{r7}
 8002572:	b085      	sub	sp, #20
 8002574:	af00      	add	r7, sp, #0
 8002576:	6078      	str	r0, [r7, #4]
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	2b00      	cmp	r3, #0
 800257c:	d141      	bne.n	8002602 <HAL_PWREx_ControlVoltageScaling+0x92>
 800257e:	4b4b      	ldr	r3, [pc, #300]	@ (80026ac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002586:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800258a:	d131      	bne.n	80025f0 <HAL_PWREx_ControlVoltageScaling+0x80>
 800258c:	4b47      	ldr	r3, [pc, #284]	@ (80026ac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800258e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002592:	4a46      	ldr	r2, [pc, #280]	@ (80026ac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002594:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002598:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 800259c:	4b43      	ldr	r3, [pc, #268]	@ (80026ac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80025a4:	4a41      	ldr	r2, [pc, #260]	@ (80026ac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80025a6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80025aa:	6013      	str	r3, [r2, #0]
 80025ac:	4b40      	ldr	r3, [pc, #256]	@ (80026b0 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	2232      	movs	r2, #50	@ 0x32
 80025b2:	fb02 f303 	mul.w	r3, r2, r3
 80025b6:	4a3f      	ldr	r2, [pc, #252]	@ (80026b4 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80025b8:	fba2 2303 	umull	r2, r3, r2, r3
 80025bc:	0c9b      	lsrs	r3, r3, #18
 80025be:	3301      	adds	r3, #1
 80025c0:	60fb      	str	r3, [r7, #12]
 80025c2:	e002      	b.n	80025ca <HAL_PWREx_ControlVoltageScaling+0x5a>
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	3b01      	subs	r3, #1
 80025c8:	60fb      	str	r3, [r7, #12]
 80025ca:	4b38      	ldr	r3, [pc, #224]	@ (80026ac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80025cc:	695b      	ldr	r3, [r3, #20]
 80025ce:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80025d2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80025d6:	d102      	bne.n	80025de <HAL_PWREx_ControlVoltageScaling+0x6e>
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d1f2      	bne.n	80025c4 <HAL_PWREx_ControlVoltageScaling+0x54>
 80025de:	4b33      	ldr	r3, [pc, #204]	@ (80026ac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80025e0:	695b      	ldr	r3, [r3, #20]
 80025e2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80025e6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80025ea:	d158      	bne.n	800269e <HAL_PWREx_ControlVoltageScaling+0x12e>
 80025ec:	2303      	movs	r3, #3
 80025ee:	e057      	b.n	80026a0 <HAL_PWREx_ControlVoltageScaling+0x130>
 80025f0:	4b2e      	ldr	r3, [pc, #184]	@ (80026ac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80025f2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80025f6:	4a2d      	ldr	r2, [pc, #180]	@ (80026ac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80025f8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80025fc:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8002600:	e04d      	b.n	800269e <HAL_PWREx_ControlVoltageScaling+0x12e>
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002608:	d141      	bne.n	800268e <HAL_PWREx_ControlVoltageScaling+0x11e>
 800260a:	4b28      	ldr	r3, [pc, #160]	@ (80026ac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002612:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002616:	d131      	bne.n	800267c <HAL_PWREx_ControlVoltageScaling+0x10c>
 8002618:	4b24      	ldr	r3, [pc, #144]	@ (80026ac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800261a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800261e:	4a23      	ldr	r2, [pc, #140]	@ (80026ac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002620:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002624:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8002628:	4b20      	ldr	r3, [pc, #128]	@ (80026ac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002630:	4a1e      	ldr	r2, [pc, #120]	@ (80026ac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002632:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002636:	6013      	str	r3, [r2, #0]
 8002638:	4b1d      	ldr	r3, [pc, #116]	@ (80026b0 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	2232      	movs	r2, #50	@ 0x32
 800263e:	fb02 f303 	mul.w	r3, r2, r3
 8002642:	4a1c      	ldr	r2, [pc, #112]	@ (80026b4 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002644:	fba2 2303 	umull	r2, r3, r2, r3
 8002648:	0c9b      	lsrs	r3, r3, #18
 800264a:	3301      	adds	r3, #1
 800264c:	60fb      	str	r3, [r7, #12]
 800264e:	e002      	b.n	8002656 <HAL_PWREx_ControlVoltageScaling+0xe6>
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	3b01      	subs	r3, #1
 8002654:	60fb      	str	r3, [r7, #12]
 8002656:	4b15      	ldr	r3, [pc, #84]	@ (80026ac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002658:	695b      	ldr	r3, [r3, #20]
 800265a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800265e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002662:	d102      	bne.n	800266a <HAL_PWREx_ControlVoltageScaling+0xfa>
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	2b00      	cmp	r3, #0
 8002668:	d1f2      	bne.n	8002650 <HAL_PWREx_ControlVoltageScaling+0xe0>
 800266a:	4b10      	ldr	r3, [pc, #64]	@ (80026ac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800266c:	695b      	ldr	r3, [r3, #20]
 800266e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002672:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002676:	d112      	bne.n	800269e <HAL_PWREx_ControlVoltageScaling+0x12e>
 8002678:	2303      	movs	r3, #3
 800267a:	e011      	b.n	80026a0 <HAL_PWREx_ControlVoltageScaling+0x130>
 800267c:	4b0b      	ldr	r3, [pc, #44]	@ (80026ac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800267e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002682:	4a0a      	ldr	r2, [pc, #40]	@ (80026ac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002684:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002688:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 800268c:	e007      	b.n	800269e <HAL_PWREx_ControlVoltageScaling+0x12e>
 800268e:	4b07      	ldr	r3, [pc, #28]	@ (80026ac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002696:	4a05      	ldr	r2, [pc, #20]	@ (80026ac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002698:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800269c:	6013      	str	r3, [r2, #0]
 800269e:	2300      	movs	r3, #0
 80026a0:	4618      	mov	r0, r3
 80026a2:	3714      	adds	r7, #20
 80026a4:	46bd      	mov	sp, r7
 80026a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026aa:	4770      	bx	lr
 80026ac:	40007000 	.word	0x40007000
 80026b0:	20000000 	.word	0x20000000
 80026b4:	431bde83 	.word	0x431bde83

080026b8 <HAL_PWREx_DisableUCPDDeadBattery>:
 80026b8:	b480      	push	{r7}
 80026ba:	af00      	add	r7, sp, #0
 80026bc:	4b05      	ldr	r3, [pc, #20]	@ (80026d4 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80026be:	689b      	ldr	r3, [r3, #8]
 80026c0:	4a04      	ldr	r2, [pc, #16]	@ (80026d4 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80026c2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80026c6:	6093      	str	r3, [r2, #8]
 80026c8:	bf00      	nop
 80026ca:	46bd      	mov	sp, r7
 80026cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d0:	4770      	bx	lr
 80026d2:	bf00      	nop
 80026d4:	40007000 	.word	0x40007000

080026d8 <HAL_RCC_OscConfig>:
 80026d8:	b580      	push	{r7, lr}
 80026da:	b088      	sub	sp, #32
 80026dc:	af00      	add	r7, sp, #0
 80026de:	6078      	str	r0, [r7, #4]
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d101      	bne.n	80026ea <HAL_RCC_OscConfig+0x12>
 80026e6:	2301      	movs	r3, #1
 80026e8:	e2fe      	b.n	8002ce8 <HAL_RCC_OscConfig+0x610>
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	f003 0301 	and.w	r3, r3, #1
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d075      	beq.n	80027e2 <HAL_RCC_OscConfig+0x10a>
 80026f6:	4b97      	ldr	r3, [pc, #604]	@ (8002954 <HAL_RCC_OscConfig+0x27c>)
 80026f8:	689b      	ldr	r3, [r3, #8]
 80026fa:	f003 030c 	and.w	r3, r3, #12
 80026fe:	61bb      	str	r3, [r7, #24]
 8002700:	4b94      	ldr	r3, [pc, #592]	@ (8002954 <HAL_RCC_OscConfig+0x27c>)
 8002702:	68db      	ldr	r3, [r3, #12]
 8002704:	f003 0303 	and.w	r3, r3, #3
 8002708:	617b      	str	r3, [r7, #20]
 800270a:	69bb      	ldr	r3, [r7, #24]
 800270c:	2b0c      	cmp	r3, #12
 800270e:	d102      	bne.n	8002716 <HAL_RCC_OscConfig+0x3e>
 8002710:	697b      	ldr	r3, [r7, #20]
 8002712:	2b03      	cmp	r3, #3
 8002714:	d002      	beq.n	800271c <HAL_RCC_OscConfig+0x44>
 8002716:	69bb      	ldr	r3, [r7, #24]
 8002718:	2b08      	cmp	r3, #8
 800271a:	d10b      	bne.n	8002734 <HAL_RCC_OscConfig+0x5c>
 800271c:	4b8d      	ldr	r3, [pc, #564]	@ (8002954 <HAL_RCC_OscConfig+0x27c>)
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002724:	2b00      	cmp	r3, #0
 8002726:	d05b      	beq.n	80027e0 <HAL_RCC_OscConfig+0x108>
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	685b      	ldr	r3, [r3, #4]
 800272c:	2b00      	cmp	r3, #0
 800272e:	d157      	bne.n	80027e0 <HAL_RCC_OscConfig+0x108>
 8002730:	2301      	movs	r3, #1
 8002732:	e2d9      	b.n	8002ce8 <HAL_RCC_OscConfig+0x610>
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	685b      	ldr	r3, [r3, #4]
 8002738:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800273c:	d106      	bne.n	800274c <HAL_RCC_OscConfig+0x74>
 800273e:	4b85      	ldr	r3, [pc, #532]	@ (8002954 <HAL_RCC_OscConfig+0x27c>)
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	4a84      	ldr	r2, [pc, #528]	@ (8002954 <HAL_RCC_OscConfig+0x27c>)
 8002744:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002748:	6013      	str	r3, [r2, #0]
 800274a:	e01d      	b.n	8002788 <HAL_RCC_OscConfig+0xb0>
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	685b      	ldr	r3, [r3, #4]
 8002750:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002754:	d10c      	bne.n	8002770 <HAL_RCC_OscConfig+0x98>
 8002756:	4b7f      	ldr	r3, [pc, #508]	@ (8002954 <HAL_RCC_OscConfig+0x27c>)
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	4a7e      	ldr	r2, [pc, #504]	@ (8002954 <HAL_RCC_OscConfig+0x27c>)
 800275c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002760:	6013      	str	r3, [r2, #0]
 8002762:	4b7c      	ldr	r3, [pc, #496]	@ (8002954 <HAL_RCC_OscConfig+0x27c>)
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	4a7b      	ldr	r2, [pc, #492]	@ (8002954 <HAL_RCC_OscConfig+0x27c>)
 8002768:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800276c:	6013      	str	r3, [r2, #0]
 800276e:	e00b      	b.n	8002788 <HAL_RCC_OscConfig+0xb0>
 8002770:	4b78      	ldr	r3, [pc, #480]	@ (8002954 <HAL_RCC_OscConfig+0x27c>)
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	4a77      	ldr	r2, [pc, #476]	@ (8002954 <HAL_RCC_OscConfig+0x27c>)
 8002776:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800277a:	6013      	str	r3, [r2, #0]
 800277c:	4b75      	ldr	r3, [pc, #468]	@ (8002954 <HAL_RCC_OscConfig+0x27c>)
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	4a74      	ldr	r2, [pc, #464]	@ (8002954 <HAL_RCC_OscConfig+0x27c>)
 8002782:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002786:	6013      	str	r3, [r2, #0]
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	685b      	ldr	r3, [r3, #4]
 800278c:	2b00      	cmp	r3, #0
 800278e:	d013      	beq.n	80027b8 <HAL_RCC_OscConfig+0xe0>
 8002790:	f7ff fc5a 	bl	8002048 <HAL_GetTick>
 8002794:	6138      	str	r0, [r7, #16]
 8002796:	e008      	b.n	80027aa <HAL_RCC_OscConfig+0xd2>
 8002798:	f7ff fc56 	bl	8002048 <HAL_GetTick>
 800279c:	4602      	mov	r2, r0
 800279e:	693b      	ldr	r3, [r7, #16]
 80027a0:	1ad3      	subs	r3, r2, r3
 80027a2:	2b64      	cmp	r3, #100	@ 0x64
 80027a4:	d901      	bls.n	80027aa <HAL_RCC_OscConfig+0xd2>
 80027a6:	2303      	movs	r3, #3
 80027a8:	e29e      	b.n	8002ce8 <HAL_RCC_OscConfig+0x610>
 80027aa:	4b6a      	ldr	r3, [pc, #424]	@ (8002954 <HAL_RCC_OscConfig+0x27c>)
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d0f0      	beq.n	8002798 <HAL_RCC_OscConfig+0xc0>
 80027b6:	e014      	b.n	80027e2 <HAL_RCC_OscConfig+0x10a>
 80027b8:	f7ff fc46 	bl	8002048 <HAL_GetTick>
 80027bc:	6138      	str	r0, [r7, #16]
 80027be:	e008      	b.n	80027d2 <HAL_RCC_OscConfig+0xfa>
 80027c0:	f7ff fc42 	bl	8002048 <HAL_GetTick>
 80027c4:	4602      	mov	r2, r0
 80027c6:	693b      	ldr	r3, [r7, #16]
 80027c8:	1ad3      	subs	r3, r2, r3
 80027ca:	2b64      	cmp	r3, #100	@ 0x64
 80027cc:	d901      	bls.n	80027d2 <HAL_RCC_OscConfig+0xfa>
 80027ce:	2303      	movs	r3, #3
 80027d0:	e28a      	b.n	8002ce8 <HAL_RCC_OscConfig+0x610>
 80027d2:	4b60      	ldr	r3, [pc, #384]	@ (8002954 <HAL_RCC_OscConfig+0x27c>)
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d1f0      	bne.n	80027c0 <HAL_RCC_OscConfig+0xe8>
 80027de:	e000      	b.n	80027e2 <HAL_RCC_OscConfig+0x10a>
 80027e0:	bf00      	nop
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	f003 0302 	and.w	r3, r3, #2
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d075      	beq.n	80028da <HAL_RCC_OscConfig+0x202>
 80027ee:	4b59      	ldr	r3, [pc, #356]	@ (8002954 <HAL_RCC_OscConfig+0x27c>)
 80027f0:	689b      	ldr	r3, [r3, #8]
 80027f2:	f003 030c 	and.w	r3, r3, #12
 80027f6:	61bb      	str	r3, [r7, #24]
 80027f8:	4b56      	ldr	r3, [pc, #344]	@ (8002954 <HAL_RCC_OscConfig+0x27c>)
 80027fa:	68db      	ldr	r3, [r3, #12]
 80027fc:	f003 0303 	and.w	r3, r3, #3
 8002800:	617b      	str	r3, [r7, #20]
 8002802:	69bb      	ldr	r3, [r7, #24]
 8002804:	2b0c      	cmp	r3, #12
 8002806:	d102      	bne.n	800280e <HAL_RCC_OscConfig+0x136>
 8002808:	697b      	ldr	r3, [r7, #20]
 800280a:	2b02      	cmp	r3, #2
 800280c:	d002      	beq.n	8002814 <HAL_RCC_OscConfig+0x13c>
 800280e:	69bb      	ldr	r3, [r7, #24]
 8002810:	2b04      	cmp	r3, #4
 8002812:	d11f      	bne.n	8002854 <HAL_RCC_OscConfig+0x17c>
 8002814:	4b4f      	ldr	r3, [pc, #316]	@ (8002954 <HAL_RCC_OscConfig+0x27c>)
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800281c:	2b00      	cmp	r3, #0
 800281e:	d005      	beq.n	800282c <HAL_RCC_OscConfig+0x154>
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	68db      	ldr	r3, [r3, #12]
 8002824:	2b00      	cmp	r3, #0
 8002826:	d101      	bne.n	800282c <HAL_RCC_OscConfig+0x154>
 8002828:	2301      	movs	r3, #1
 800282a:	e25d      	b.n	8002ce8 <HAL_RCC_OscConfig+0x610>
 800282c:	4b49      	ldr	r3, [pc, #292]	@ (8002954 <HAL_RCC_OscConfig+0x27c>)
 800282e:	685b      	ldr	r3, [r3, #4]
 8002830:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	691b      	ldr	r3, [r3, #16]
 8002838:	061b      	lsls	r3, r3, #24
 800283a:	4946      	ldr	r1, [pc, #280]	@ (8002954 <HAL_RCC_OscConfig+0x27c>)
 800283c:	4313      	orrs	r3, r2
 800283e:	604b      	str	r3, [r1, #4]
 8002840:	4b45      	ldr	r3, [pc, #276]	@ (8002958 <HAL_RCC_OscConfig+0x280>)
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	4618      	mov	r0, r3
 8002846:	f7ff fbb3 	bl	8001fb0 <HAL_InitTick>
 800284a:	4603      	mov	r3, r0
 800284c:	2b00      	cmp	r3, #0
 800284e:	d043      	beq.n	80028d8 <HAL_RCC_OscConfig+0x200>
 8002850:	2301      	movs	r3, #1
 8002852:	e249      	b.n	8002ce8 <HAL_RCC_OscConfig+0x610>
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	68db      	ldr	r3, [r3, #12]
 8002858:	2b00      	cmp	r3, #0
 800285a:	d023      	beq.n	80028a4 <HAL_RCC_OscConfig+0x1cc>
 800285c:	4b3d      	ldr	r3, [pc, #244]	@ (8002954 <HAL_RCC_OscConfig+0x27c>)
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	4a3c      	ldr	r2, [pc, #240]	@ (8002954 <HAL_RCC_OscConfig+0x27c>)
 8002862:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002866:	6013      	str	r3, [r2, #0]
 8002868:	f7ff fbee 	bl	8002048 <HAL_GetTick>
 800286c:	6138      	str	r0, [r7, #16]
 800286e:	e008      	b.n	8002882 <HAL_RCC_OscConfig+0x1aa>
 8002870:	f7ff fbea 	bl	8002048 <HAL_GetTick>
 8002874:	4602      	mov	r2, r0
 8002876:	693b      	ldr	r3, [r7, #16]
 8002878:	1ad3      	subs	r3, r2, r3
 800287a:	2b02      	cmp	r3, #2
 800287c:	d901      	bls.n	8002882 <HAL_RCC_OscConfig+0x1aa>
 800287e:	2303      	movs	r3, #3
 8002880:	e232      	b.n	8002ce8 <HAL_RCC_OscConfig+0x610>
 8002882:	4b34      	ldr	r3, [pc, #208]	@ (8002954 <HAL_RCC_OscConfig+0x27c>)
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800288a:	2b00      	cmp	r3, #0
 800288c:	d0f0      	beq.n	8002870 <HAL_RCC_OscConfig+0x198>
 800288e:	4b31      	ldr	r3, [pc, #196]	@ (8002954 <HAL_RCC_OscConfig+0x27c>)
 8002890:	685b      	ldr	r3, [r3, #4]
 8002892:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	691b      	ldr	r3, [r3, #16]
 800289a:	061b      	lsls	r3, r3, #24
 800289c:	492d      	ldr	r1, [pc, #180]	@ (8002954 <HAL_RCC_OscConfig+0x27c>)
 800289e:	4313      	orrs	r3, r2
 80028a0:	604b      	str	r3, [r1, #4]
 80028a2:	e01a      	b.n	80028da <HAL_RCC_OscConfig+0x202>
 80028a4:	4b2b      	ldr	r3, [pc, #172]	@ (8002954 <HAL_RCC_OscConfig+0x27c>)
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	4a2a      	ldr	r2, [pc, #168]	@ (8002954 <HAL_RCC_OscConfig+0x27c>)
 80028aa:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80028ae:	6013      	str	r3, [r2, #0]
 80028b0:	f7ff fbca 	bl	8002048 <HAL_GetTick>
 80028b4:	6138      	str	r0, [r7, #16]
 80028b6:	e008      	b.n	80028ca <HAL_RCC_OscConfig+0x1f2>
 80028b8:	f7ff fbc6 	bl	8002048 <HAL_GetTick>
 80028bc:	4602      	mov	r2, r0
 80028be:	693b      	ldr	r3, [r7, #16]
 80028c0:	1ad3      	subs	r3, r2, r3
 80028c2:	2b02      	cmp	r3, #2
 80028c4:	d901      	bls.n	80028ca <HAL_RCC_OscConfig+0x1f2>
 80028c6:	2303      	movs	r3, #3
 80028c8:	e20e      	b.n	8002ce8 <HAL_RCC_OscConfig+0x610>
 80028ca:	4b22      	ldr	r3, [pc, #136]	@ (8002954 <HAL_RCC_OscConfig+0x27c>)
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d1f0      	bne.n	80028b8 <HAL_RCC_OscConfig+0x1e0>
 80028d6:	e000      	b.n	80028da <HAL_RCC_OscConfig+0x202>
 80028d8:	bf00      	nop
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	f003 0308 	and.w	r3, r3, #8
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d041      	beq.n	800296a <HAL_RCC_OscConfig+0x292>
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	695b      	ldr	r3, [r3, #20]
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d01c      	beq.n	8002928 <HAL_RCC_OscConfig+0x250>
 80028ee:	4b19      	ldr	r3, [pc, #100]	@ (8002954 <HAL_RCC_OscConfig+0x27c>)
 80028f0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80028f4:	4a17      	ldr	r2, [pc, #92]	@ (8002954 <HAL_RCC_OscConfig+0x27c>)
 80028f6:	f043 0301 	orr.w	r3, r3, #1
 80028fa:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 80028fe:	f7ff fba3 	bl	8002048 <HAL_GetTick>
 8002902:	6138      	str	r0, [r7, #16]
 8002904:	e008      	b.n	8002918 <HAL_RCC_OscConfig+0x240>
 8002906:	f7ff fb9f 	bl	8002048 <HAL_GetTick>
 800290a:	4602      	mov	r2, r0
 800290c:	693b      	ldr	r3, [r7, #16]
 800290e:	1ad3      	subs	r3, r2, r3
 8002910:	2b02      	cmp	r3, #2
 8002912:	d901      	bls.n	8002918 <HAL_RCC_OscConfig+0x240>
 8002914:	2303      	movs	r3, #3
 8002916:	e1e7      	b.n	8002ce8 <HAL_RCC_OscConfig+0x610>
 8002918:	4b0e      	ldr	r3, [pc, #56]	@ (8002954 <HAL_RCC_OscConfig+0x27c>)
 800291a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800291e:	f003 0302 	and.w	r3, r3, #2
 8002922:	2b00      	cmp	r3, #0
 8002924:	d0ef      	beq.n	8002906 <HAL_RCC_OscConfig+0x22e>
 8002926:	e020      	b.n	800296a <HAL_RCC_OscConfig+0x292>
 8002928:	4b0a      	ldr	r3, [pc, #40]	@ (8002954 <HAL_RCC_OscConfig+0x27c>)
 800292a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800292e:	4a09      	ldr	r2, [pc, #36]	@ (8002954 <HAL_RCC_OscConfig+0x27c>)
 8002930:	f023 0301 	bic.w	r3, r3, #1
 8002934:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8002938:	f7ff fb86 	bl	8002048 <HAL_GetTick>
 800293c:	6138      	str	r0, [r7, #16]
 800293e:	e00d      	b.n	800295c <HAL_RCC_OscConfig+0x284>
 8002940:	f7ff fb82 	bl	8002048 <HAL_GetTick>
 8002944:	4602      	mov	r2, r0
 8002946:	693b      	ldr	r3, [r7, #16]
 8002948:	1ad3      	subs	r3, r2, r3
 800294a:	2b02      	cmp	r3, #2
 800294c:	d906      	bls.n	800295c <HAL_RCC_OscConfig+0x284>
 800294e:	2303      	movs	r3, #3
 8002950:	e1ca      	b.n	8002ce8 <HAL_RCC_OscConfig+0x610>
 8002952:	bf00      	nop
 8002954:	40021000 	.word	0x40021000
 8002958:	20000004 	.word	0x20000004
 800295c:	4b8c      	ldr	r3, [pc, #560]	@ (8002b90 <HAL_RCC_OscConfig+0x4b8>)
 800295e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002962:	f003 0302 	and.w	r3, r3, #2
 8002966:	2b00      	cmp	r3, #0
 8002968:	d1ea      	bne.n	8002940 <HAL_RCC_OscConfig+0x268>
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	f003 0304 	and.w	r3, r3, #4
 8002972:	2b00      	cmp	r3, #0
 8002974:	f000 80a6 	beq.w	8002ac4 <HAL_RCC_OscConfig+0x3ec>
 8002978:	2300      	movs	r3, #0
 800297a:	77fb      	strb	r3, [r7, #31]
 800297c:	4b84      	ldr	r3, [pc, #528]	@ (8002b90 <HAL_RCC_OscConfig+0x4b8>)
 800297e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002980:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002984:	2b00      	cmp	r3, #0
 8002986:	d101      	bne.n	800298c <HAL_RCC_OscConfig+0x2b4>
 8002988:	2301      	movs	r3, #1
 800298a:	e000      	b.n	800298e <HAL_RCC_OscConfig+0x2b6>
 800298c:	2300      	movs	r3, #0
 800298e:	2b00      	cmp	r3, #0
 8002990:	d00d      	beq.n	80029ae <HAL_RCC_OscConfig+0x2d6>
 8002992:	4b7f      	ldr	r3, [pc, #508]	@ (8002b90 <HAL_RCC_OscConfig+0x4b8>)
 8002994:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002996:	4a7e      	ldr	r2, [pc, #504]	@ (8002b90 <HAL_RCC_OscConfig+0x4b8>)
 8002998:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800299c:	6593      	str	r3, [r2, #88]	@ 0x58
 800299e:	4b7c      	ldr	r3, [pc, #496]	@ (8002b90 <HAL_RCC_OscConfig+0x4b8>)
 80029a0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80029a2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80029a6:	60fb      	str	r3, [r7, #12]
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	2301      	movs	r3, #1
 80029ac:	77fb      	strb	r3, [r7, #31]
 80029ae:	4b79      	ldr	r3, [pc, #484]	@ (8002b94 <HAL_RCC_OscConfig+0x4bc>)
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d118      	bne.n	80029ec <HAL_RCC_OscConfig+0x314>
 80029ba:	4b76      	ldr	r3, [pc, #472]	@ (8002b94 <HAL_RCC_OscConfig+0x4bc>)
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	4a75      	ldr	r2, [pc, #468]	@ (8002b94 <HAL_RCC_OscConfig+0x4bc>)
 80029c0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80029c4:	6013      	str	r3, [r2, #0]
 80029c6:	f7ff fb3f 	bl	8002048 <HAL_GetTick>
 80029ca:	6138      	str	r0, [r7, #16]
 80029cc:	e008      	b.n	80029e0 <HAL_RCC_OscConfig+0x308>
 80029ce:	f7ff fb3b 	bl	8002048 <HAL_GetTick>
 80029d2:	4602      	mov	r2, r0
 80029d4:	693b      	ldr	r3, [r7, #16]
 80029d6:	1ad3      	subs	r3, r2, r3
 80029d8:	2b02      	cmp	r3, #2
 80029da:	d901      	bls.n	80029e0 <HAL_RCC_OscConfig+0x308>
 80029dc:	2303      	movs	r3, #3
 80029de:	e183      	b.n	8002ce8 <HAL_RCC_OscConfig+0x610>
 80029e0:	4b6c      	ldr	r3, [pc, #432]	@ (8002b94 <HAL_RCC_OscConfig+0x4bc>)
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d0f0      	beq.n	80029ce <HAL_RCC_OscConfig+0x2f6>
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	689b      	ldr	r3, [r3, #8]
 80029f0:	2b01      	cmp	r3, #1
 80029f2:	d108      	bne.n	8002a06 <HAL_RCC_OscConfig+0x32e>
 80029f4:	4b66      	ldr	r3, [pc, #408]	@ (8002b90 <HAL_RCC_OscConfig+0x4b8>)
 80029f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80029fa:	4a65      	ldr	r2, [pc, #404]	@ (8002b90 <HAL_RCC_OscConfig+0x4b8>)
 80029fc:	f043 0301 	orr.w	r3, r3, #1
 8002a00:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002a04:	e024      	b.n	8002a50 <HAL_RCC_OscConfig+0x378>
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	689b      	ldr	r3, [r3, #8]
 8002a0a:	2b05      	cmp	r3, #5
 8002a0c:	d110      	bne.n	8002a30 <HAL_RCC_OscConfig+0x358>
 8002a0e:	4b60      	ldr	r3, [pc, #384]	@ (8002b90 <HAL_RCC_OscConfig+0x4b8>)
 8002a10:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002a14:	4a5e      	ldr	r2, [pc, #376]	@ (8002b90 <HAL_RCC_OscConfig+0x4b8>)
 8002a16:	f043 0304 	orr.w	r3, r3, #4
 8002a1a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002a1e:	4b5c      	ldr	r3, [pc, #368]	@ (8002b90 <HAL_RCC_OscConfig+0x4b8>)
 8002a20:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002a24:	4a5a      	ldr	r2, [pc, #360]	@ (8002b90 <HAL_RCC_OscConfig+0x4b8>)
 8002a26:	f043 0301 	orr.w	r3, r3, #1
 8002a2a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002a2e:	e00f      	b.n	8002a50 <HAL_RCC_OscConfig+0x378>
 8002a30:	4b57      	ldr	r3, [pc, #348]	@ (8002b90 <HAL_RCC_OscConfig+0x4b8>)
 8002a32:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002a36:	4a56      	ldr	r2, [pc, #344]	@ (8002b90 <HAL_RCC_OscConfig+0x4b8>)
 8002a38:	f023 0301 	bic.w	r3, r3, #1
 8002a3c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002a40:	4b53      	ldr	r3, [pc, #332]	@ (8002b90 <HAL_RCC_OscConfig+0x4b8>)
 8002a42:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002a46:	4a52      	ldr	r2, [pc, #328]	@ (8002b90 <HAL_RCC_OscConfig+0x4b8>)
 8002a48:	f023 0304 	bic.w	r3, r3, #4
 8002a4c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	689b      	ldr	r3, [r3, #8]
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d016      	beq.n	8002a86 <HAL_RCC_OscConfig+0x3ae>
 8002a58:	f7ff faf6 	bl	8002048 <HAL_GetTick>
 8002a5c:	6138      	str	r0, [r7, #16]
 8002a5e:	e00a      	b.n	8002a76 <HAL_RCC_OscConfig+0x39e>
 8002a60:	f7ff faf2 	bl	8002048 <HAL_GetTick>
 8002a64:	4602      	mov	r2, r0
 8002a66:	693b      	ldr	r3, [r7, #16]
 8002a68:	1ad3      	subs	r3, r2, r3
 8002a6a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002a6e:	4293      	cmp	r3, r2
 8002a70:	d901      	bls.n	8002a76 <HAL_RCC_OscConfig+0x39e>
 8002a72:	2303      	movs	r3, #3
 8002a74:	e138      	b.n	8002ce8 <HAL_RCC_OscConfig+0x610>
 8002a76:	4b46      	ldr	r3, [pc, #280]	@ (8002b90 <HAL_RCC_OscConfig+0x4b8>)
 8002a78:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002a7c:	f003 0302 	and.w	r3, r3, #2
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d0ed      	beq.n	8002a60 <HAL_RCC_OscConfig+0x388>
 8002a84:	e015      	b.n	8002ab2 <HAL_RCC_OscConfig+0x3da>
 8002a86:	f7ff fadf 	bl	8002048 <HAL_GetTick>
 8002a8a:	6138      	str	r0, [r7, #16]
 8002a8c:	e00a      	b.n	8002aa4 <HAL_RCC_OscConfig+0x3cc>
 8002a8e:	f7ff fadb 	bl	8002048 <HAL_GetTick>
 8002a92:	4602      	mov	r2, r0
 8002a94:	693b      	ldr	r3, [r7, #16]
 8002a96:	1ad3      	subs	r3, r2, r3
 8002a98:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002a9c:	4293      	cmp	r3, r2
 8002a9e:	d901      	bls.n	8002aa4 <HAL_RCC_OscConfig+0x3cc>
 8002aa0:	2303      	movs	r3, #3
 8002aa2:	e121      	b.n	8002ce8 <HAL_RCC_OscConfig+0x610>
 8002aa4:	4b3a      	ldr	r3, [pc, #232]	@ (8002b90 <HAL_RCC_OscConfig+0x4b8>)
 8002aa6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002aaa:	f003 0302 	and.w	r3, r3, #2
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d1ed      	bne.n	8002a8e <HAL_RCC_OscConfig+0x3b6>
 8002ab2:	7ffb      	ldrb	r3, [r7, #31]
 8002ab4:	2b01      	cmp	r3, #1
 8002ab6:	d105      	bne.n	8002ac4 <HAL_RCC_OscConfig+0x3ec>
 8002ab8:	4b35      	ldr	r3, [pc, #212]	@ (8002b90 <HAL_RCC_OscConfig+0x4b8>)
 8002aba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002abc:	4a34      	ldr	r2, [pc, #208]	@ (8002b90 <HAL_RCC_OscConfig+0x4b8>)
 8002abe:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002ac2:	6593      	str	r3, [r2, #88]	@ 0x58
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	f003 0320 	and.w	r3, r3, #32
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d03c      	beq.n	8002b4a <HAL_RCC_OscConfig+0x472>
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	699b      	ldr	r3, [r3, #24]
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d01c      	beq.n	8002b12 <HAL_RCC_OscConfig+0x43a>
 8002ad8:	4b2d      	ldr	r3, [pc, #180]	@ (8002b90 <HAL_RCC_OscConfig+0x4b8>)
 8002ada:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002ade:	4a2c      	ldr	r2, [pc, #176]	@ (8002b90 <HAL_RCC_OscConfig+0x4b8>)
 8002ae0:	f043 0301 	orr.w	r3, r3, #1
 8002ae4:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98
 8002ae8:	f7ff faae 	bl	8002048 <HAL_GetTick>
 8002aec:	6138      	str	r0, [r7, #16]
 8002aee:	e008      	b.n	8002b02 <HAL_RCC_OscConfig+0x42a>
 8002af0:	f7ff faaa 	bl	8002048 <HAL_GetTick>
 8002af4:	4602      	mov	r2, r0
 8002af6:	693b      	ldr	r3, [r7, #16]
 8002af8:	1ad3      	subs	r3, r2, r3
 8002afa:	2b02      	cmp	r3, #2
 8002afc:	d901      	bls.n	8002b02 <HAL_RCC_OscConfig+0x42a>
 8002afe:	2303      	movs	r3, #3
 8002b00:	e0f2      	b.n	8002ce8 <HAL_RCC_OscConfig+0x610>
 8002b02:	4b23      	ldr	r3, [pc, #140]	@ (8002b90 <HAL_RCC_OscConfig+0x4b8>)
 8002b04:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002b08:	f003 0302 	and.w	r3, r3, #2
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d0ef      	beq.n	8002af0 <HAL_RCC_OscConfig+0x418>
 8002b10:	e01b      	b.n	8002b4a <HAL_RCC_OscConfig+0x472>
 8002b12:	4b1f      	ldr	r3, [pc, #124]	@ (8002b90 <HAL_RCC_OscConfig+0x4b8>)
 8002b14:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002b18:	4a1d      	ldr	r2, [pc, #116]	@ (8002b90 <HAL_RCC_OscConfig+0x4b8>)
 8002b1a:	f023 0301 	bic.w	r3, r3, #1
 8002b1e:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98
 8002b22:	f7ff fa91 	bl	8002048 <HAL_GetTick>
 8002b26:	6138      	str	r0, [r7, #16]
 8002b28:	e008      	b.n	8002b3c <HAL_RCC_OscConfig+0x464>
 8002b2a:	f7ff fa8d 	bl	8002048 <HAL_GetTick>
 8002b2e:	4602      	mov	r2, r0
 8002b30:	693b      	ldr	r3, [r7, #16]
 8002b32:	1ad3      	subs	r3, r2, r3
 8002b34:	2b02      	cmp	r3, #2
 8002b36:	d901      	bls.n	8002b3c <HAL_RCC_OscConfig+0x464>
 8002b38:	2303      	movs	r3, #3
 8002b3a:	e0d5      	b.n	8002ce8 <HAL_RCC_OscConfig+0x610>
 8002b3c:	4b14      	ldr	r3, [pc, #80]	@ (8002b90 <HAL_RCC_OscConfig+0x4b8>)
 8002b3e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002b42:	f003 0302 	and.w	r3, r3, #2
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d1ef      	bne.n	8002b2a <HAL_RCC_OscConfig+0x452>
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	69db      	ldr	r3, [r3, #28]
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	f000 80c9 	beq.w	8002ce6 <HAL_RCC_OscConfig+0x60e>
 8002b54:	4b0e      	ldr	r3, [pc, #56]	@ (8002b90 <HAL_RCC_OscConfig+0x4b8>)
 8002b56:	689b      	ldr	r3, [r3, #8]
 8002b58:	f003 030c 	and.w	r3, r3, #12
 8002b5c:	2b0c      	cmp	r3, #12
 8002b5e:	f000 8083 	beq.w	8002c68 <HAL_RCC_OscConfig+0x590>
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	69db      	ldr	r3, [r3, #28]
 8002b66:	2b02      	cmp	r3, #2
 8002b68:	d15e      	bne.n	8002c28 <HAL_RCC_OscConfig+0x550>
 8002b6a:	4b09      	ldr	r3, [pc, #36]	@ (8002b90 <HAL_RCC_OscConfig+0x4b8>)
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	4a08      	ldr	r2, [pc, #32]	@ (8002b90 <HAL_RCC_OscConfig+0x4b8>)
 8002b70:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002b74:	6013      	str	r3, [r2, #0]
 8002b76:	f7ff fa67 	bl	8002048 <HAL_GetTick>
 8002b7a:	6138      	str	r0, [r7, #16]
 8002b7c:	e00c      	b.n	8002b98 <HAL_RCC_OscConfig+0x4c0>
 8002b7e:	f7ff fa63 	bl	8002048 <HAL_GetTick>
 8002b82:	4602      	mov	r2, r0
 8002b84:	693b      	ldr	r3, [r7, #16]
 8002b86:	1ad3      	subs	r3, r2, r3
 8002b88:	2b02      	cmp	r3, #2
 8002b8a:	d905      	bls.n	8002b98 <HAL_RCC_OscConfig+0x4c0>
 8002b8c:	2303      	movs	r3, #3
 8002b8e:	e0ab      	b.n	8002ce8 <HAL_RCC_OscConfig+0x610>
 8002b90:	40021000 	.word	0x40021000
 8002b94:	40007000 	.word	0x40007000
 8002b98:	4b55      	ldr	r3, [pc, #340]	@ (8002cf0 <HAL_RCC_OscConfig+0x618>)
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d1ec      	bne.n	8002b7e <HAL_RCC_OscConfig+0x4a6>
 8002ba4:	4b52      	ldr	r3, [pc, #328]	@ (8002cf0 <HAL_RCC_OscConfig+0x618>)
 8002ba6:	68da      	ldr	r2, [r3, #12]
 8002ba8:	4b52      	ldr	r3, [pc, #328]	@ (8002cf4 <HAL_RCC_OscConfig+0x61c>)
 8002baa:	4013      	ands	r3, r2
 8002bac:	687a      	ldr	r2, [r7, #4]
 8002bae:	6a11      	ldr	r1, [r2, #32]
 8002bb0:	687a      	ldr	r2, [r7, #4]
 8002bb2:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002bb4:	3a01      	subs	r2, #1
 8002bb6:	0112      	lsls	r2, r2, #4
 8002bb8:	4311      	orrs	r1, r2
 8002bba:	687a      	ldr	r2, [r7, #4]
 8002bbc:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8002bbe:	0212      	lsls	r2, r2, #8
 8002bc0:	4311      	orrs	r1, r2
 8002bc2:	687a      	ldr	r2, [r7, #4]
 8002bc4:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8002bc6:	0852      	lsrs	r2, r2, #1
 8002bc8:	3a01      	subs	r2, #1
 8002bca:	0552      	lsls	r2, r2, #21
 8002bcc:	4311      	orrs	r1, r2
 8002bce:	687a      	ldr	r2, [r7, #4]
 8002bd0:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8002bd2:	0852      	lsrs	r2, r2, #1
 8002bd4:	3a01      	subs	r2, #1
 8002bd6:	0652      	lsls	r2, r2, #25
 8002bd8:	4311      	orrs	r1, r2
 8002bda:	687a      	ldr	r2, [r7, #4]
 8002bdc:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8002bde:	06d2      	lsls	r2, r2, #27
 8002be0:	430a      	orrs	r2, r1
 8002be2:	4943      	ldr	r1, [pc, #268]	@ (8002cf0 <HAL_RCC_OscConfig+0x618>)
 8002be4:	4313      	orrs	r3, r2
 8002be6:	60cb      	str	r3, [r1, #12]
 8002be8:	4b41      	ldr	r3, [pc, #260]	@ (8002cf0 <HAL_RCC_OscConfig+0x618>)
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	4a40      	ldr	r2, [pc, #256]	@ (8002cf0 <HAL_RCC_OscConfig+0x618>)
 8002bee:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002bf2:	6013      	str	r3, [r2, #0]
 8002bf4:	4b3e      	ldr	r3, [pc, #248]	@ (8002cf0 <HAL_RCC_OscConfig+0x618>)
 8002bf6:	68db      	ldr	r3, [r3, #12]
 8002bf8:	4a3d      	ldr	r2, [pc, #244]	@ (8002cf0 <HAL_RCC_OscConfig+0x618>)
 8002bfa:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002bfe:	60d3      	str	r3, [r2, #12]
 8002c00:	f7ff fa22 	bl	8002048 <HAL_GetTick>
 8002c04:	6138      	str	r0, [r7, #16]
 8002c06:	e008      	b.n	8002c1a <HAL_RCC_OscConfig+0x542>
 8002c08:	f7ff fa1e 	bl	8002048 <HAL_GetTick>
 8002c0c:	4602      	mov	r2, r0
 8002c0e:	693b      	ldr	r3, [r7, #16]
 8002c10:	1ad3      	subs	r3, r2, r3
 8002c12:	2b02      	cmp	r3, #2
 8002c14:	d901      	bls.n	8002c1a <HAL_RCC_OscConfig+0x542>
 8002c16:	2303      	movs	r3, #3
 8002c18:	e066      	b.n	8002ce8 <HAL_RCC_OscConfig+0x610>
 8002c1a:	4b35      	ldr	r3, [pc, #212]	@ (8002cf0 <HAL_RCC_OscConfig+0x618>)
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d0f0      	beq.n	8002c08 <HAL_RCC_OscConfig+0x530>
 8002c26:	e05e      	b.n	8002ce6 <HAL_RCC_OscConfig+0x60e>
 8002c28:	4b31      	ldr	r3, [pc, #196]	@ (8002cf0 <HAL_RCC_OscConfig+0x618>)
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	4a30      	ldr	r2, [pc, #192]	@ (8002cf0 <HAL_RCC_OscConfig+0x618>)
 8002c2e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002c32:	6013      	str	r3, [r2, #0]
 8002c34:	f7ff fa08 	bl	8002048 <HAL_GetTick>
 8002c38:	6138      	str	r0, [r7, #16]
 8002c3a:	e008      	b.n	8002c4e <HAL_RCC_OscConfig+0x576>
 8002c3c:	f7ff fa04 	bl	8002048 <HAL_GetTick>
 8002c40:	4602      	mov	r2, r0
 8002c42:	693b      	ldr	r3, [r7, #16]
 8002c44:	1ad3      	subs	r3, r2, r3
 8002c46:	2b02      	cmp	r3, #2
 8002c48:	d901      	bls.n	8002c4e <HAL_RCC_OscConfig+0x576>
 8002c4a:	2303      	movs	r3, #3
 8002c4c:	e04c      	b.n	8002ce8 <HAL_RCC_OscConfig+0x610>
 8002c4e:	4b28      	ldr	r3, [pc, #160]	@ (8002cf0 <HAL_RCC_OscConfig+0x618>)
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d1f0      	bne.n	8002c3c <HAL_RCC_OscConfig+0x564>
 8002c5a:	4b25      	ldr	r3, [pc, #148]	@ (8002cf0 <HAL_RCC_OscConfig+0x618>)
 8002c5c:	68da      	ldr	r2, [r3, #12]
 8002c5e:	4924      	ldr	r1, [pc, #144]	@ (8002cf0 <HAL_RCC_OscConfig+0x618>)
 8002c60:	4b25      	ldr	r3, [pc, #148]	@ (8002cf8 <HAL_RCC_OscConfig+0x620>)
 8002c62:	4013      	ands	r3, r2
 8002c64:	60cb      	str	r3, [r1, #12]
 8002c66:	e03e      	b.n	8002ce6 <HAL_RCC_OscConfig+0x60e>
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	69db      	ldr	r3, [r3, #28]
 8002c6c:	2b01      	cmp	r3, #1
 8002c6e:	d101      	bne.n	8002c74 <HAL_RCC_OscConfig+0x59c>
 8002c70:	2301      	movs	r3, #1
 8002c72:	e039      	b.n	8002ce8 <HAL_RCC_OscConfig+0x610>
 8002c74:	4b1e      	ldr	r3, [pc, #120]	@ (8002cf0 <HAL_RCC_OscConfig+0x618>)
 8002c76:	68db      	ldr	r3, [r3, #12]
 8002c78:	617b      	str	r3, [r7, #20]
 8002c7a:	697b      	ldr	r3, [r7, #20]
 8002c7c:	f003 0203 	and.w	r2, r3, #3
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	6a1b      	ldr	r3, [r3, #32]
 8002c84:	429a      	cmp	r2, r3
 8002c86:	d12c      	bne.n	8002ce2 <HAL_RCC_OscConfig+0x60a>
 8002c88:	697b      	ldr	r3, [r7, #20]
 8002c8a:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c92:	3b01      	subs	r3, #1
 8002c94:	011b      	lsls	r3, r3, #4
 8002c96:	429a      	cmp	r2, r3
 8002c98:	d123      	bne.n	8002ce2 <HAL_RCC_OscConfig+0x60a>
 8002c9a:	697b      	ldr	r3, [r7, #20]
 8002c9c:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ca4:	021b      	lsls	r3, r3, #8
 8002ca6:	429a      	cmp	r2, r3
 8002ca8:	d11b      	bne.n	8002ce2 <HAL_RCC_OscConfig+0x60a>
 8002caa:	697b      	ldr	r3, [r7, #20]
 8002cac:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002cb4:	06db      	lsls	r3, r3, #27
 8002cb6:	429a      	cmp	r2, r3
 8002cb8:	d113      	bne.n	8002ce2 <HAL_RCC_OscConfig+0x60a>
 8002cba:	697b      	ldr	r3, [r7, #20]
 8002cbc:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002cc4:	085b      	lsrs	r3, r3, #1
 8002cc6:	3b01      	subs	r3, #1
 8002cc8:	055b      	lsls	r3, r3, #21
 8002cca:	429a      	cmp	r2, r3
 8002ccc:	d109      	bne.n	8002ce2 <HAL_RCC_OscConfig+0x60a>
 8002cce:	697b      	ldr	r3, [r7, #20]
 8002cd0:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002cd8:	085b      	lsrs	r3, r3, #1
 8002cda:	3b01      	subs	r3, #1
 8002cdc:	065b      	lsls	r3, r3, #25
 8002cde:	429a      	cmp	r2, r3
 8002ce0:	d001      	beq.n	8002ce6 <HAL_RCC_OscConfig+0x60e>
 8002ce2:	2301      	movs	r3, #1
 8002ce4:	e000      	b.n	8002ce8 <HAL_RCC_OscConfig+0x610>
 8002ce6:	2300      	movs	r3, #0
 8002ce8:	4618      	mov	r0, r3
 8002cea:	3720      	adds	r7, #32
 8002cec:	46bd      	mov	sp, r7
 8002cee:	bd80      	pop	{r7, pc}
 8002cf0:	40021000 	.word	0x40021000
 8002cf4:	019f800c 	.word	0x019f800c
 8002cf8:	feeefffc 	.word	0xfeeefffc

08002cfc <HAL_RCC_ClockConfig>:
 8002cfc:	b580      	push	{r7, lr}
 8002cfe:	b086      	sub	sp, #24
 8002d00:	af00      	add	r7, sp, #0
 8002d02:	6078      	str	r0, [r7, #4]
 8002d04:	6039      	str	r1, [r7, #0]
 8002d06:	2300      	movs	r3, #0
 8002d08:	617b      	str	r3, [r7, #20]
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d101      	bne.n	8002d14 <HAL_RCC_ClockConfig+0x18>
 8002d10:	2301      	movs	r3, #1
 8002d12:	e11e      	b.n	8002f52 <HAL_RCC_ClockConfig+0x256>
 8002d14:	4b91      	ldr	r3, [pc, #580]	@ (8002f5c <HAL_RCC_ClockConfig+0x260>)
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	f003 030f 	and.w	r3, r3, #15
 8002d1c:	683a      	ldr	r2, [r7, #0]
 8002d1e:	429a      	cmp	r2, r3
 8002d20:	d910      	bls.n	8002d44 <HAL_RCC_ClockConfig+0x48>
 8002d22:	4b8e      	ldr	r3, [pc, #568]	@ (8002f5c <HAL_RCC_ClockConfig+0x260>)
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	f023 020f 	bic.w	r2, r3, #15
 8002d2a:	498c      	ldr	r1, [pc, #560]	@ (8002f5c <HAL_RCC_ClockConfig+0x260>)
 8002d2c:	683b      	ldr	r3, [r7, #0]
 8002d2e:	4313      	orrs	r3, r2
 8002d30:	600b      	str	r3, [r1, #0]
 8002d32:	4b8a      	ldr	r3, [pc, #552]	@ (8002f5c <HAL_RCC_ClockConfig+0x260>)
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	f003 030f 	and.w	r3, r3, #15
 8002d3a:	683a      	ldr	r2, [r7, #0]
 8002d3c:	429a      	cmp	r2, r3
 8002d3e:	d001      	beq.n	8002d44 <HAL_RCC_ClockConfig+0x48>
 8002d40:	2301      	movs	r3, #1
 8002d42:	e106      	b.n	8002f52 <HAL_RCC_ClockConfig+0x256>
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	f003 0301 	and.w	r3, r3, #1
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d073      	beq.n	8002e38 <HAL_RCC_ClockConfig+0x13c>
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	685b      	ldr	r3, [r3, #4]
 8002d54:	2b03      	cmp	r3, #3
 8002d56:	d129      	bne.n	8002dac <HAL_RCC_ClockConfig+0xb0>
 8002d58:	4b81      	ldr	r3, [pc, #516]	@ (8002f60 <HAL_RCC_ClockConfig+0x264>)
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d101      	bne.n	8002d68 <HAL_RCC_ClockConfig+0x6c>
 8002d64:	2301      	movs	r3, #1
 8002d66:	e0f4      	b.n	8002f52 <HAL_RCC_ClockConfig+0x256>
 8002d68:	f000 f99e 	bl	80030a8 <RCC_GetSysClockFreqFromPLLSource>
 8002d6c:	6138      	str	r0, [r7, #16]
 8002d6e:	693b      	ldr	r3, [r7, #16]
 8002d70:	4a7c      	ldr	r2, [pc, #496]	@ (8002f64 <HAL_RCC_ClockConfig+0x268>)
 8002d72:	4293      	cmp	r3, r2
 8002d74:	d93f      	bls.n	8002df6 <HAL_RCC_ClockConfig+0xfa>
 8002d76:	4b7a      	ldr	r3, [pc, #488]	@ (8002f60 <HAL_RCC_ClockConfig+0x264>)
 8002d78:	689b      	ldr	r3, [r3, #8]
 8002d7a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d009      	beq.n	8002d96 <HAL_RCC_ClockConfig+0x9a>
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	f003 0302 	and.w	r3, r3, #2
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d033      	beq.n	8002df6 <HAL_RCC_ClockConfig+0xfa>
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	689b      	ldr	r3, [r3, #8]
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d12f      	bne.n	8002df6 <HAL_RCC_ClockConfig+0xfa>
 8002d96:	4b72      	ldr	r3, [pc, #456]	@ (8002f60 <HAL_RCC_ClockConfig+0x264>)
 8002d98:	689b      	ldr	r3, [r3, #8]
 8002d9a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002d9e:	4a70      	ldr	r2, [pc, #448]	@ (8002f60 <HAL_RCC_ClockConfig+0x264>)
 8002da0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002da4:	6093      	str	r3, [r2, #8]
 8002da6:	2380      	movs	r3, #128	@ 0x80
 8002da8:	617b      	str	r3, [r7, #20]
 8002daa:	e024      	b.n	8002df6 <HAL_RCC_ClockConfig+0xfa>
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	685b      	ldr	r3, [r3, #4]
 8002db0:	2b02      	cmp	r3, #2
 8002db2:	d107      	bne.n	8002dc4 <HAL_RCC_ClockConfig+0xc8>
 8002db4:	4b6a      	ldr	r3, [pc, #424]	@ (8002f60 <HAL_RCC_ClockConfig+0x264>)
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d109      	bne.n	8002dd4 <HAL_RCC_ClockConfig+0xd8>
 8002dc0:	2301      	movs	r3, #1
 8002dc2:	e0c6      	b.n	8002f52 <HAL_RCC_ClockConfig+0x256>
 8002dc4:	4b66      	ldr	r3, [pc, #408]	@ (8002f60 <HAL_RCC_ClockConfig+0x264>)
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d101      	bne.n	8002dd4 <HAL_RCC_ClockConfig+0xd8>
 8002dd0:	2301      	movs	r3, #1
 8002dd2:	e0be      	b.n	8002f52 <HAL_RCC_ClockConfig+0x256>
 8002dd4:	f000 f8ce 	bl	8002f74 <HAL_RCC_GetSysClockFreq>
 8002dd8:	6138      	str	r0, [r7, #16]
 8002dda:	693b      	ldr	r3, [r7, #16]
 8002ddc:	4a61      	ldr	r2, [pc, #388]	@ (8002f64 <HAL_RCC_ClockConfig+0x268>)
 8002dde:	4293      	cmp	r3, r2
 8002de0:	d909      	bls.n	8002df6 <HAL_RCC_ClockConfig+0xfa>
 8002de2:	4b5f      	ldr	r3, [pc, #380]	@ (8002f60 <HAL_RCC_ClockConfig+0x264>)
 8002de4:	689b      	ldr	r3, [r3, #8]
 8002de6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002dea:	4a5d      	ldr	r2, [pc, #372]	@ (8002f60 <HAL_RCC_ClockConfig+0x264>)
 8002dec:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002df0:	6093      	str	r3, [r2, #8]
 8002df2:	2380      	movs	r3, #128	@ 0x80
 8002df4:	617b      	str	r3, [r7, #20]
 8002df6:	4b5a      	ldr	r3, [pc, #360]	@ (8002f60 <HAL_RCC_ClockConfig+0x264>)
 8002df8:	689b      	ldr	r3, [r3, #8]
 8002dfa:	f023 0203 	bic.w	r2, r3, #3
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	685b      	ldr	r3, [r3, #4]
 8002e02:	4957      	ldr	r1, [pc, #348]	@ (8002f60 <HAL_RCC_ClockConfig+0x264>)
 8002e04:	4313      	orrs	r3, r2
 8002e06:	608b      	str	r3, [r1, #8]
 8002e08:	f7ff f91e 	bl	8002048 <HAL_GetTick>
 8002e0c:	60f8      	str	r0, [r7, #12]
 8002e0e:	e00a      	b.n	8002e26 <HAL_RCC_ClockConfig+0x12a>
 8002e10:	f7ff f91a 	bl	8002048 <HAL_GetTick>
 8002e14:	4602      	mov	r2, r0
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	1ad3      	subs	r3, r2, r3
 8002e1a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002e1e:	4293      	cmp	r3, r2
 8002e20:	d901      	bls.n	8002e26 <HAL_RCC_ClockConfig+0x12a>
 8002e22:	2303      	movs	r3, #3
 8002e24:	e095      	b.n	8002f52 <HAL_RCC_ClockConfig+0x256>
 8002e26:	4b4e      	ldr	r3, [pc, #312]	@ (8002f60 <HAL_RCC_ClockConfig+0x264>)
 8002e28:	689b      	ldr	r3, [r3, #8]
 8002e2a:	f003 020c 	and.w	r2, r3, #12
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	685b      	ldr	r3, [r3, #4]
 8002e32:	009b      	lsls	r3, r3, #2
 8002e34:	429a      	cmp	r2, r3
 8002e36:	d1eb      	bne.n	8002e10 <HAL_RCC_ClockConfig+0x114>
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	f003 0302 	and.w	r3, r3, #2
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d023      	beq.n	8002e8c <HAL_RCC_ClockConfig+0x190>
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	f003 0304 	and.w	r3, r3, #4
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d005      	beq.n	8002e5c <HAL_RCC_ClockConfig+0x160>
 8002e50:	4b43      	ldr	r3, [pc, #268]	@ (8002f60 <HAL_RCC_ClockConfig+0x264>)
 8002e52:	689b      	ldr	r3, [r3, #8]
 8002e54:	4a42      	ldr	r2, [pc, #264]	@ (8002f60 <HAL_RCC_ClockConfig+0x264>)
 8002e56:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8002e5a:	6093      	str	r3, [r2, #8]
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	f003 0308 	and.w	r3, r3, #8
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d007      	beq.n	8002e78 <HAL_RCC_ClockConfig+0x17c>
 8002e68:	4b3d      	ldr	r3, [pc, #244]	@ (8002f60 <HAL_RCC_ClockConfig+0x264>)
 8002e6a:	689b      	ldr	r3, [r3, #8]
 8002e6c:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8002e70:	4a3b      	ldr	r2, [pc, #236]	@ (8002f60 <HAL_RCC_ClockConfig+0x264>)
 8002e72:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8002e76:	6093      	str	r3, [r2, #8]
 8002e78:	4b39      	ldr	r3, [pc, #228]	@ (8002f60 <HAL_RCC_ClockConfig+0x264>)
 8002e7a:	689b      	ldr	r3, [r3, #8]
 8002e7c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	689b      	ldr	r3, [r3, #8]
 8002e84:	4936      	ldr	r1, [pc, #216]	@ (8002f60 <HAL_RCC_ClockConfig+0x264>)
 8002e86:	4313      	orrs	r3, r2
 8002e88:	608b      	str	r3, [r1, #8]
 8002e8a:	e008      	b.n	8002e9e <HAL_RCC_ClockConfig+0x1a2>
 8002e8c:	697b      	ldr	r3, [r7, #20]
 8002e8e:	2b80      	cmp	r3, #128	@ 0x80
 8002e90:	d105      	bne.n	8002e9e <HAL_RCC_ClockConfig+0x1a2>
 8002e92:	4b33      	ldr	r3, [pc, #204]	@ (8002f60 <HAL_RCC_ClockConfig+0x264>)
 8002e94:	689b      	ldr	r3, [r3, #8]
 8002e96:	4a32      	ldr	r2, [pc, #200]	@ (8002f60 <HAL_RCC_ClockConfig+0x264>)
 8002e98:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002e9c:	6093      	str	r3, [r2, #8]
 8002e9e:	4b2f      	ldr	r3, [pc, #188]	@ (8002f5c <HAL_RCC_ClockConfig+0x260>)
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	f003 030f 	and.w	r3, r3, #15
 8002ea6:	683a      	ldr	r2, [r7, #0]
 8002ea8:	429a      	cmp	r2, r3
 8002eaa:	d21d      	bcs.n	8002ee8 <HAL_RCC_ClockConfig+0x1ec>
 8002eac:	4b2b      	ldr	r3, [pc, #172]	@ (8002f5c <HAL_RCC_ClockConfig+0x260>)
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	f023 020f 	bic.w	r2, r3, #15
 8002eb4:	4929      	ldr	r1, [pc, #164]	@ (8002f5c <HAL_RCC_ClockConfig+0x260>)
 8002eb6:	683b      	ldr	r3, [r7, #0]
 8002eb8:	4313      	orrs	r3, r2
 8002eba:	600b      	str	r3, [r1, #0]
 8002ebc:	f7ff f8c4 	bl	8002048 <HAL_GetTick>
 8002ec0:	60f8      	str	r0, [r7, #12]
 8002ec2:	e00a      	b.n	8002eda <HAL_RCC_ClockConfig+0x1de>
 8002ec4:	f7ff f8c0 	bl	8002048 <HAL_GetTick>
 8002ec8:	4602      	mov	r2, r0
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	1ad3      	subs	r3, r2, r3
 8002ece:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002ed2:	4293      	cmp	r3, r2
 8002ed4:	d901      	bls.n	8002eda <HAL_RCC_ClockConfig+0x1de>
 8002ed6:	2303      	movs	r3, #3
 8002ed8:	e03b      	b.n	8002f52 <HAL_RCC_ClockConfig+0x256>
 8002eda:	4b20      	ldr	r3, [pc, #128]	@ (8002f5c <HAL_RCC_ClockConfig+0x260>)
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	f003 030f 	and.w	r3, r3, #15
 8002ee2:	683a      	ldr	r2, [r7, #0]
 8002ee4:	429a      	cmp	r2, r3
 8002ee6:	d1ed      	bne.n	8002ec4 <HAL_RCC_ClockConfig+0x1c8>
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	f003 0304 	and.w	r3, r3, #4
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d008      	beq.n	8002f06 <HAL_RCC_ClockConfig+0x20a>
 8002ef4:	4b1a      	ldr	r3, [pc, #104]	@ (8002f60 <HAL_RCC_ClockConfig+0x264>)
 8002ef6:	689b      	ldr	r3, [r3, #8]
 8002ef8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	68db      	ldr	r3, [r3, #12]
 8002f00:	4917      	ldr	r1, [pc, #92]	@ (8002f60 <HAL_RCC_ClockConfig+0x264>)
 8002f02:	4313      	orrs	r3, r2
 8002f04:	608b      	str	r3, [r1, #8]
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	f003 0308 	and.w	r3, r3, #8
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d009      	beq.n	8002f26 <HAL_RCC_ClockConfig+0x22a>
 8002f12:	4b13      	ldr	r3, [pc, #76]	@ (8002f60 <HAL_RCC_ClockConfig+0x264>)
 8002f14:	689b      	ldr	r3, [r3, #8]
 8002f16:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	691b      	ldr	r3, [r3, #16]
 8002f1e:	00db      	lsls	r3, r3, #3
 8002f20:	490f      	ldr	r1, [pc, #60]	@ (8002f60 <HAL_RCC_ClockConfig+0x264>)
 8002f22:	4313      	orrs	r3, r2
 8002f24:	608b      	str	r3, [r1, #8]
 8002f26:	f000 f825 	bl	8002f74 <HAL_RCC_GetSysClockFreq>
 8002f2a:	4602      	mov	r2, r0
 8002f2c:	4b0c      	ldr	r3, [pc, #48]	@ (8002f60 <HAL_RCC_ClockConfig+0x264>)
 8002f2e:	689b      	ldr	r3, [r3, #8]
 8002f30:	091b      	lsrs	r3, r3, #4
 8002f32:	f003 030f 	and.w	r3, r3, #15
 8002f36:	490c      	ldr	r1, [pc, #48]	@ (8002f68 <HAL_RCC_ClockConfig+0x26c>)
 8002f38:	5ccb      	ldrb	r3, [r1, r3]
 8002f3a:	f003 031f 	and.w	r3, r3, #31
 8002f3e:	fa22 f303 	lsr.w	r3, r2, r3
 8002f42:	4a0a      	ldr	r2, [pc, #40]	@ (8002f6c <HAL_RCC_ClockConfig+0x270>)
 8002f44:	6013      	str	r3, [r2, #0]
 8002f46:	4b0a      	ldr	r3, [pc, #40]	@ (8002f70 <HAL_RCC_ClockConfig+0x274>)
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	4618      	mov	r0, r3
 8002f4c:	f7ff f830 	bl	8001fb0 <HAL_InitTick>
 8002f50:	4603      	mov	r3, r0
 8002f52:	4618      	mov	r0, r3
 8002f54:	3718      	adds	r7, #24
 8002f56:	46bd      	mov	sp, r7
 8002f58:	bd80      	pop	{r7, pc}
 8002f5a:	bf00      	nop
 8002f5c:	40022000 	.word	0x40022000
 8002f60:	40021000 	.word	0x40021000
 8002f64:	04c4b400 	.word	0x04c4b400
 8002f68:	08005d7c 	.word	0x08005d7c
 8002f6c:	20000000 	.word	0x20000000
 8002f70:	20000004 	.word	0x20000004

08002f74 <HAL_RCC_GetSysClockFreq>:
 8002f74:	b480      	push	{r7}
 8002f76:	b087      	sub	sp, #28
 8002f78:	af00      	add	r7, sp, #0
 8002f7a:	4b2c      	ldr	r3, [pc, #176]	@ (800302c <HAL_RCC_GetSysClockFreq+0xb8>)
 8002f7c:	689b      	ldr	r3, [r3, #8]
 8002f7e:	f003 030c 	and.w	r3, r3, #12
 8002f82:	2b04      	cmp	r3, #4
 8002f84:	d102      	bne.n	8002f8c <HAL_RCC_GetSysClockFreq+0x18>
 8002f86:	4b2a      	ldr	r3, [pc, #168]	@ (8003030 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002f88:	613b      	str	r3, [r7, #16]
 8002f8a:	e047      	b.n	800301c <HAL_RCC_GetSysClockFreq+0xa8>
 8002f8c:	4b27      	ldr	r3, [pc, #156]	@ (800302c <HAL_RCC_GetSysClockFreq+0xb8>)
 8002f8e:	689b      	ldr	r3, [r3, #8]
 8002f90:	f003 030c 	and.w	r3, r3, #12
 8002f94:	2b08      	cmp	r3, #8
 8002f96:	d102      	bne.n	8002f9e <HAL_RCC_GetSysClockFreq+0x2a>
 8002f98:	4b26      	ldr	r3, [pc, #152]	@ (8003034 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002f9a:	613b      	str	r3, [r7, #16]
 8002f9c:	e03e      	b.n	800301c <HAL_RCC_GetSysClockFreq+0xa8>
 8002f9e:	4b23      	ldr	r3, [pc, #140]	@ (800302c <HAL_RCC_GetSysClockFreq+0xb8>)
 8002fa0:	689b      	ldr	r3, [r3, #8]
 8002fa2:	f003 030c 	and.w	r3, r3, #12
 8002fa6:	2b0c      	cmp	r3, #12
 8002fa8:	d136      	bne.n	8003018 <HAL_RCC_GetSysClockFreq+0xa4>
 8002faa:	4b20      	ldr	r3, [pc, #128]	@ (800302c <HAL_RCC_GetSysClockFreq+0xb8>)
 8002fac:	68db      	ldr	r3, [r3, #12]
 8002fae:	f003 0303 	and.w	r3, r3, #3
 8002fb2:	60fb      	str	r3, [r7, #12]
 8002fb4:	4b1d      	ldr	r3, [pc, #116]	@ (800302c <HAL_RCC_GetSysClockFreq+0xb8>)
 8002fb6:	68db      	ldr	r3, [r3, #12]
 8002fb8:	091b      	lsrs	r3, r3, #4
 8002fba:	f003 030f 	and.w	r3, r3, #15
 8002fbe:	3301      	adds	r3, #1
 8002fc0:	60bb      	str	r3, [r7, #8]
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	2b03      	cmp	r3, #3
 8002fc6:	d10c      	bne.n	8002fe2 <HAL_RCC_GetSysClockFreq+0x6e>
 8002fc8:	4a1a      	ldr	r2, [pc, #104]	@ (8003034 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002fca:	68bb      	ldr	r3, [r7, #8]
 8002fcc:	fbb2 f3f3 	udiv	r3, r2, r3
 8002fd0:	4a16      	ldr	r2, [pc, #88]	@ (800302c <HAL_RCC_GetSysClockFreq+0xb8>)
 8002fd2:	68d2      	ldr	r2, [r2, #12]
 8002fd4:	0a12      	lsrs	r2, r2, #8
 8002fd6:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8002fda:	fb02 f303 	mul.w	r3, r2, r3
 8002fde:	617b      	str	r3, [r7, #20]
 8002fe0:	e00c      	b.n	8002ffc <HAL_RCC_GetSysClockFreq+0x88>
 8002fe2:	4a13      	ldr	r2, [pc, #76]	@ (8003030 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002fe4:	68bb      	ldr	r3, [r7, #8]
 8002fe6:	fbb2 f3f3 	udiv	r3, r2, r3
 8002fea:	4a10      	ldr	r2, [pc, #64]	@ (800302c <HAL_RCC_GetSysClockFreq+0xb8>)
 8002fec:	68d2      	ldr	r2, [r2, #12]
 8002fee:	0a12      	lsrs	r2, r2, #8
 8002ff0:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8002ff4:	fb02 f303 	mul.w	r3, r2, r3
 8002ff8:	617b      	str	r3, [r7, #20]
 8002ffa:	bf00      	nop
 8002ffc:	4b0b      	ldr	r3, [pc, #44]	@ (800302c <HAL_RCC_GetSysClockFreq+0xb8>)
 8002ffe:	68db      	ldr	r3, [r3, #12]
 8003000:	0e5b      	lsrs	r3, r3, #25
 8003002:	f003 0303 	and.w	r3, r3, #3
 8003006:	3301      	adds	r3, #1
 8003008:	005b      	lsls	r3, r3, #1
 800300a:	607b      	str	r3, [r7, #4]
 800300c:	697a      	ldr	r2, [r7, #20]
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	fbb2 f3f3 	udiv	r3, r2, r3
 8003014:	613b      	str	r3, [r7, #16]
 8003016:	e001      	b.n	800301c <HAL_RCC_GetSysClockFreq+0xa8>
 8003018:	2300      	movs	r3, #0
 800301a:	613b      	str	r3, [r7, #16]
 800301c:	693b      	ldr	r3, [r7, #16]
 800301e:	4618      	mov	r0, r3
 8003020:	371c      	adds	r7, #28
 8003022:	46bd      	mov	sp, r7
 8003024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003028:	4770      	bx	lr
 800302a:	bf00      	nop
 800302c:	40021000 	.word	0x40021000
 8003030:	00f42400 	.word	0x00f42400
 8003034:	007a1200 	.word	0x007a1200

08003038 <HAL_RCC_GetHCLKFreq>:
 8003038:	b480      	push	{r7}
 800303a:	af00      	add	r7, sp, #0
 800303c:	4b03      	ldr	r3, [pc, #12]	@ (800304c <HAL_RCC_GetHCLKFreq+0x14>)
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	4618      	mov	r0, r3
 8003042:	46bd      	mov	sp, r7
 8003044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003048:	4770      	bx	lr
 800304a:	bf00      	nop
 800304c:	20000000 	.word	0x20000000

08003050 <HAL_RCC_GetPCLK1Freq>:
 8003050:	b580      	push	{r7, lr}
 8003052:	af00      	add	r7, sp, #0
 8003054:	f7ff fff0 	bl	8003038 <HAL_RCC_GetHCLKFreq>
 8003058:	4602      	mov	r2, r0
 800305a:	4b06      	ldr	r3, [pc, #24]	@ (8003074 <HAL_RCC_GetPCLK1Freq+0x24>)
 800305c:	689b      	ldr	r3, [r3, #8]
 800305e:	0a1b      	lsrs	r3, r3, #8
 8003060:	f003 0307 	and.w	r3, r3, #7
 8003064:	4904      	ldr	r1, [pc, #16]	@ (8003078 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003066:	5ccb      	ldrb	r3, [r1, r3]
 8003068:	f003 031f 	and.w	r3, r3, #31
 800306c:	fa22 f303 	lsr.w	r3, r2, r3
 8003070:	4618      	mov	r0, r3
 8003072:	bd80      	pop	{r7, pc}
 8003074:	40021000 	.word	0x40021000
 8003078:	08005d8c 	.word	0x08005d8c

0800307c <HAL_RCC_GetPCLK2Freq>:
 800307c:	b580      	push	{r7, lr}
 800307e:	af00      	add	r7, sp, #0
 8003080:	f7ff ffda 	bl	8003038 <HAL_RCC_GetHCLKFreq>
 8003084:	4602      	mov	r2, r0
 8003086:	4b06      	ldr	r3, [pc, #24]	@ (80030a0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003088:	689b      	ldr	r3, [r3, #8]
 800308a:	0adb      	lsrs	r3, r3, #11
 800308c:	f003 0307 	and.w	r3, r3, #7
 8003090:	4904      	ldr	r1, [pc, #16]	@ (80030a4 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003092:	5ccb      	ldrb	r3, [r1, r3]
 8003094:	f003 031f 	and.w	r3, r3, #31
 8003098:	fa22 f303 	lsr.w	r3, r2, r3
 800309c:	4618      	mov	r0, r3
 800309e:	bd80      	pop	{r7, pc}
 80030a0:	40021000 	.word	0x40021000
 80030a4:	08005d8c 	.word	0x08005d8c

080030a8 <RCC_GetSysClockFreqFromPLLSource>:
 80030a8:	b480      	push	{r7}
 80030aa:	b087      	sub	sp, #28
 80030ac:	af00      	add	r7, sp, #0
 80030ae:	4b1e      	ldr	r3, [pc, #120]	@ (8003128 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80030b0:	68db      	ldr	r3, [r3, #12]
 80030b2:	f003 0303 	and.w	r3, r3, #3
 80030b6:	613b      	str	r3, [r7, #16]
 80030b8:	4b1b      	ldr	r3, [pc, #108]	@ (8003128 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80030ba:	68db      	ldr	r3, [r3, #12]
 80030bc:	091b      	lsrs	r3, r3, #4
 80030be:	f003 030f 	and.w	r3, r3, #15
 80030c2:	3301      	adds	r3, #1
 80030c4:	60fb      	str	r3, [r7, #12]
 80030c6:	693b      	ldr	r3, [r7, #16]
 80030c8:	2b03      	cmp	r3, #3
 80030ca:	d10c      	bne.n	80030e6 <RCC_GetSysClockFreqFromPLLSource+0x3e>
 80030cc:	4a17      	ldr	r2, [pc, #92]	@ (800312c <RCC_GetSysClockFreqFromPLLSource+0x84>)
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80030d4:	4a14      	ldr	r2, [pc, #80]	@ (8003128 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80030d6:	68d2      	ldr	r2, [r2, #12]
 80030d8:	0a12      	lsrs	r2, r2, #8
 80030da:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80030de:	fb02 f303 	mul.w	r3, r2, r3
 80030e2:	617b      	str	r3, [r7, #20]
 80030e4:	e00c      	b.n	8003100 <RCC_GetSysClockFreqFromPLLSource+0x58>
 80030e6:	4a12      	ldr	r2, [pc, #72]	@ (8003130 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80030ee:	4a0e      	ldr	r2, [pc, #56]	@ (8003128 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80030f0:	68d2      	ldr	r2, [r2, #12]
 80030f2:	0a12      	lsrs	r2, r2, #8
 80030f4:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80030f8:	fb02 f303 	mul.w	r3, r2, r3
 80030fc:	617b      	str	r3, [r7, #20]
 80030fe:	bf00      	nop
 8003100:	4b09      	ldr	r3, [pc, #36]	@ (8003128 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003102:	68db      	ldr	r3, [r3, #12]
 8003104:	0e5b      	lsrs	r3, r3, #25
 8003106:	f003 0303 	and.w	r3, r3, #3
 800310a:	3301      	adds	r3, #1
 800310c:	005b      	lsls	r3, r3, #1
 800310e:	60bb      	str	r3, [r7, #8]
 8003110:	697a      	ldr	r2, [r7, #20]
 8003112:	68bb      	ldr	r3, [r7, #8]
 8003114:	fbb2 f3f3 	udiv	r3, r2, r3
 8003118:	607b      	str	r3, [r7, #4]
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	4618      	mov	r0, r3
 800311e:	371c      	adds	r7, #28
 8003120:	46bd      	mov	sp, r7
 8003122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003126:	4770      	bx	lr
 8003128:	40021000 	.word	0x40021000
 800312c:	007a1200 	.word	0x007a1200
 8003130:	00f42400 	.word	0x00f42400

08003134 <HAL_RCCEx_PeriphCLKConfig>:
 8003134:	b580      	push	{r7, lr}
 8003136:	b086      	sub	sp, #24
 8003138:	af00      	add	r7, sp, #0
 800313a:	6078      	str	r0, [r7, #4]
 800313c:	2300      	movs	r3, #0
 800313e:	74fb      	strb	r3, [r7, #19]
 8003140:	2300      	movs	r3, #0
 8003142:	74bb      	strb	r3, [r7, #18]
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800314c:	2b00      	cmp	r3, #0
 800314e:	f000 8098 	beq.w	8003282 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8003152:	2300      	movs	r3, #0
 8003154:	747b      	strb	r3, [r7, #17]
 8003156:	4b43      	ldr	r3, [pc, #268]	@ (8003264 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003158:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800315a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800315e:	2b00      	cmp	r3, #0
 8003160:	d10d      	bne.n	800317e <HAL_RCCEx_PeriphCLKConfig+0x4a>
 8003162:	4b40      	ldr	r3, [pc, #256]	@ (8003264 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003164:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003166:	4a3f      	ldr	r2, [pc, #252]	@ (8003264 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003168:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800316c:	6593      	str	r3, [r2, #88]	@ 0x58
 800316e:	4b3d      	ldr	r3, [pc, #244]	@ (8003264 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003170:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003172:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003176:	60bb      	str	r3, [r7, #8]
 8003178:	68bb      	ldr	r3, [r7, #8]
 800317a:	2301      	movs	r3, #1
 800317c:	747b      	strb	r3, [r7, #17]
 800317e:	4b3a      	ldr	r3, [pc, #232]	@ (8003268 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	4a39      	ldr	r2, [pc, #228]	@ (8003268 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003184:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003188:	6013      	str	r3, [r2, #0]
 800318a:	f7fe ff5d 	bl	8002048 <HAL_GetTick>
 800318e:	60f8      	str	r0, [r7, #12]
 8003190:	e009      	b.n	80031a6 <HAL_RCCEx_PeriphCLKConfig+0x72>
 8003192:	f7fe ff59 	bl	8002048 <HAL_GetTick>
 8003196:	4602      	mov	r2, r0
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	1ad3      	subs	r3, r2, r3
 800319c:	2b02      	cmp	r3, #2
 800319e:	d902      	bls.n	80031a6 <HAL_RCCEx_PeriphCLKConfig+0x72>
 80031a0:	2303      	movs	r3, #3
 80031a2:	74fb      	strb	r3, [r7, #19]
 80031a4:	e005      	b.n	80031b2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
 80031a6:	4b30      	ldr	r3, [pc, #192]	@ (8003268 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d0ef      	beq.n	8003192 <HAL_RCCEx_PeriphCLKConfig+0x5e>
 80031b2:	7cfb      	ldrb	r3, [r7, #19]
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d159      	bne.n	800326c <HAL_RCCEx_PeriphCLKConfig+0x138>
 80031b8:	4b2a      	ldr	r3, [pc, #168]	@ (8003264 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80031ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80031be:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80031c2:	617b      	str	r3, [r7, #20]
 80031c4:	697b      	ldr	r3, [r7, #20]
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d01e      	beq.n	8003208 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031ce:	697a      	ldr	r2, [r7, #20]
 80031d0:	429a      	cmp	r2, r3
 80031d2:	d019      	beq.n	8003208 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80031d4:	4b23      	ldr	r3, [pc, #140]	@ (8003264 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80031d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80031da:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80031de:	617b      	str	r3, [r7, #20]
 80031e0:	4b20      	ldr	r3, [pc, #128]	@ (8003264 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80031e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80031e6:	4a1f      	ldr	r2, [pc, #124]	@ (8003264 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80031e8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80031ec:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80031f0:	4b1c      	ldr	r3, [pc, #112]	@ (8003264 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80031f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80031f6:	4a1b      	ldr	r2, [pc, #108]	@ (8003264 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80031f8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80031fc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003200:	4a18      	ldr	r2, [pc, #96]	@ (8003264 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003202:	697b      	ldr	r3, [r7, #20]
 8003204:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003208:	697b      	ldr	r3, [r7, #20]
 800320a:	f003 0301 	and.w	r3, r3, #1
 800320e:	2b00      	cmp	r3, #0
 8003210:	d016      	beq.n	8003240 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8003212:	f7fe ff19 	bl	8002048 <HAL_GetTick>
 8003216:	60f8      	str	r0, [r7, #12]
 8003218:	e00b      	b.n	8003232 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 800321a:	f7fe ff15 	bl	8002048 <HAL_GetTick>
 800321e:	4602      	mov	r2, r0
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	1ad3      	subs	r3, r2, r3
 8003224:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003228:	4293      	cmp	r3, r2
 800322a:	d902      	bls.n	8003232 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 800322c:	2303      	movs	r3, #3
 800322e:	74fb      	strb	r3, [r7, #19]
 8003230:	e006      	b.n	8003240 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8003232:	4b0c      	ldr	r3, [pc, #48]	@ (8003264 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003234:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003238:	f003 0302 	and.w	r3, r3, #2
 800323c:	2b00      	cmp	r3, #0
 800323e:	d0ec      	beq.n	800321a <HAL_RCCEx_PeriphCLKConfig+0xe6>
 8003240:	7cfb      	ldrb	r3, [r7, #19]
 8003242:	2b00      	cmp	r3, #0
 8003244:	d10b      	bne.n	800325e <HAL_RCCEx_PeriphCLKConfig+0x12a>
 8003246:	4b07      	ldr	r3, [pc, #28]	@ (8003264 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003248:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800324c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003254:	4903      	ldr	r1, [pc, #12]	@ (8003264 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003256:	4313      	orrs	r3, r2
 8003258:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 800325c:	e008      	b.n	8003270 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 800325e:	7cfb      	ldrb	r3, [r7, #19]
 8003260:	74bb      	strb	r3, [r7, #18]
 8003262:	e005      	b.n	8003270 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8003264:	40021000 	.word	0x40021000
 8003268:	40007000 	.word	0x40007000
 800326c:	7cfb      	ldrb	r3, [r7, #19]
 800326e:	74bb      	strb	r3, [r7, #18]
 8003270:	7c7b      	ldrb	r3, [r7, #17]
 8003272:	2b01      	cmp	r3, #1
 8003274:	d105      	bne.n	8003282 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8003276:	4ba6      	ldr	r3, [pc, #664]	@ (8003510 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003278:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800327a:	4aa5      	ldr	r2, [pc, #660]	@ (8003510 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800327c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003280:	6593      	str	r3, [r2, #88]	@ 0x58
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	f003 0301 	and.w	r3, r3, #1
 800328a:	2b00      	cmp	r3, #0
 800328c:	d00a      	beq.n	80032a4 <HAL_RCCEx_PeriphCLKConfig+0x170>
 800328e:	4ba0      	ldr	r3, [pc, #640]	@ (8003510 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003290:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003294:	f023 0203 	bic.w	r2, r3, #3
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	685b      	ldr	r3, [r3, #4]
 800329c:	499c      	ldr	r1, [pc, #624]	@ (8003510 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800329e:	4313      	orrs	r3, r2
 80032a0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	f003 0302 	and.w	r3, r3, #2
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d00a      	beq.n	80032c6 <HAL_RCCEx_PeriphCLKConfig+0x192>
 80032b0:	4b97      	ldr	r3, [pc, #604]	@ (8003510 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80032b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80032b6:	f023 020c 	bic.w	r2, r3, #12
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	689b      	ldr	r3, [r3, #8]
 80032be:	4994      	ldr	r1, [pc, #592]	@ (8003510 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80032c0:	4313      	orrs	r3, r2
 80032c2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	f003 0304 	and.w	r3, r3, #4
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d00a      	beq.n	80032e8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
 80032d2:	4b8f      	ldr	r3, [pc, #572]	@ (8003510 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80032d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80032d8:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	68db      	ldr	r3, [r3, #12]
 80032e0:	498b      	ldr	r1, [pc, #556]	@ (8003510 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80032e2:	4313      	orrs	r3, r2
 80032e4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	f003 0308 	and.w	r3, r3, #8
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d00a      	beq.n	800330a <HAL_RCCEx_PeriphCLKConfig+0x1d6>
 80032f4:	4b86      	ldr	r3, [pc, #536]	@ (8003510 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80032f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80032fa:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	691b      	ldr	r3, [r3, #16]
 8003302:	4983      	ldr	r1, [pc, #524]	@ (8003510 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003304:	4313      	orrs	r3, r2
 8003306:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	f003 0320 	and.w	r3, r3, #32
 8003312:	2b00      	cmp	r3, #0
 8003314:	d00a      	beq.n	800332c <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8003316:	4b7e      	ldr	r3, [pc, #504]	@ (8003510 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003318:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800331c:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	695b      	ldr	r3, [r3, #20]
 8003324:	497a      	ldr	r1, [pc, #488]	@ (8003510 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003326:	4313      	orrs	r3, r2
 8003328:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003334:	2b00      	cmp	r3, #0
 8003336:	d00a      	beq.n	800334e <HAL_RCCEx_PeriphCLKConfig+0x21a>
 8003338:	4b75      	ldr	r3, [pc, #468]	@ (8003510 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800333a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800333e:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	699b      	ldr	r3, [r3, #24]
 8003346:	4972      	ldr	r1, [pc, #456]	@ (8003510 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003348:	4313      	orrs	r3, r2
 800334a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003356:	2b00      	cmp	r3, #0
 8003358:	d00a      	beq.n	8003370 <HAL_RCCEx_PeriphCLKConfig+0x23c>
 800335a:	4b6d      	ldr	r3, [pc, #436]	@ (8003510 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800335c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003360:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	69db      	ldr	r3, [r3, #28]
 8003368:	4969      	ldr	r1, [pc, #420]	@ (8003510 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800336a:	4313      	orrs	r3, r2
 800336c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003378:	2b00      	cmp	r3, #0
 800337a:	d00a      	beq.n	8003392 <HAL_RCCEx_PeriphCLKConfig+0x25e>
 800337c:	4b64      	ldr	r3, [pc, #400]	@ (8003510 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800337e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003382:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	6a1b      	ldr	r3, [r3, #32]
 800338a:	4961      	ldr	r1, [pc, #388]	@ (8003510 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800338c:	4313      	orrs	r3, r2
 800338e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800339a:	2b00      	cmp	r3, #0
 800339c:	d00a      	beq.n	80033b4 <HAL_RCCEx_PeriphCLKConfig+0x280>
 800339e:	4b5c      	ldr	r3, [pc, #368]	@ (8003510 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80033a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80033a4:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033ac:	4958      	ldr	r1, [pc, #352]	@ (8003510 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80033ae:	4313      	orrs	r3, r2
 80033b0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d015      	beq.n	80033ec <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 80033c0:	4b53      	ldr	r3, [pc, #332]	@ (8003510 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80033c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80033c6:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80033ce:	4950      	ldr	r1, [pc, #320]	@ (8003510 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80033d0:	4313      	orrs	r3, r2
 80033d2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80033da:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80033de:	d105      	bne.n	80033ec <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 80033e0:	4b4b      	ldr	r3, [pc, #300]	@ (8003510 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80033e2:	68db      	ldr	r3, [r3, #12]
 80033e4:	4a4a      	ldr	r2, [pc, #296]	@ (8003510 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80033e6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80033ea:	60d3      	str	r3, [r2, #12]
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d015      	beq.n	8003424 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
 80033f8:	4b45      	ldr	r3, [pc, #276]	@ (8003510 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80033fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80033fe:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003406:	4942      	ldr	r1, [pc, #264]	@ (8003510 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003408:	4313      	orrs	r3, r2
 800340a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003412:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003416:	d105      	bne.n	8003424 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
 8003418:	4b3d      	ldr	r3, [pc, #244]	@ (8003510 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800341a:	68db      	ldr	r3, [r3, #12]
 800341c:	4a3c      	ldr	r2, [pc, #240]	@ (8003510 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800341e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003422:	60d3      	str	r3, [r2, #12]
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800342c:	2b00      	cmp	r3, #0
 800342e:	d015      	beq.n	800345c <HAL_RCCEx_PeriphCLKConfig+0x328>
 8003430:	4b37      	ldr	r3, [pc, #220]	@ (8003510 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003432:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003436:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800343e:	4934      	ldr	r1, [pc, #208]	@ (8003510 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003440:	4313      	orrs	r3, r2
 8003442:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800344a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800344e:	d105      	bne.n	800345c <HAL_RCCEx_PeriphCLKConfig+0x328>
 8003450:	4b2f      	ldr	r3, [pc, #188]	@ (8003510 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003452:	68db      	ldr	r3, [r3, #12]
 8003454:	4a2e      	ldr	r2, [pc, #184]	@ (8003510 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003456:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800345a:	60d3      	str	r3, [r2, #12]
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003464:	2b00      	cmp	r3, #0
 8003466:	d015      	beq.n	8003494 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8003468:	4b29      	ldr	r3, [pc, #164]	@ (8003510 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800346a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800346e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003476:	4926      	ldr	r1, [pc, #152]	@ (8003510 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003478:	4313      	orrs	r3, r2
 800347a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003482:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003486:	d105      	bne.n	8003494 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8003488:	4b21      	ldr	r3, [pc, #132]	@ (8003510 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800348a:	68db      	ldr	r3, [r3, #12]
 800348c:	4a20      	ldr	r2, [pc, #128]	@ (8003510 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800348e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003492:	60d3      	str	r3, [r2, #12]
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800349c:	2b00      	cmp	r3, #0
 800349e:	d015      	beq.n	80034cc <HAL_RCCEx_PeriphCLKConfig+0x398>
 80034a0:	4b1b      	ldr	r3, [pc, #108]	@ (8003510 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80034a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80034a6:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80034ae:	4918      	ldr	r1, [pc, #96]	@ (8003510 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80034b0:	4313      	orrs	r3, r2
 80034b2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80034ba:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80034be:	d105      	bne.n	80034cc <HAL_RCCEx_PeriphCLKConfig+0x398>
 80034c0:	4b13      	ldr	r3, [pc, #76]	@ (8003510 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80034c2:	68db      	ldr	r3, [r3, #12]
 80034c4:	4a12      	ldr	r2, [pc, #72]	@ (8003510 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80034c6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80034ca:	60d3      	str	r3, [r2, #12]
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d015      	beq.n	8003504 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
 80034d8:	4b0d      	ldr	r3, [pc, #52]	@ (8003510 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80034da:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80034de:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80034e6:	490a      	ldr	r1, [pc, #40]	@ (8003510 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80034e8:	4313      	orrs	r3, r2
 80034ea:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80034f2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80034f6:	d105      	bne.n	8003504 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
 80034f8:	4b05      	ldr	r3, [pc, #20]	@ (8003510 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80034fa:	68db      	ldr	r3, [r3, #12]
 80034fc:	4a04      	ldr	r2, [pc, #16]	@ (8003510 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80034fe:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003502:	60d3      	str	r3, [r2, #12]
 8003504:	7cbb      	ldrb	r3, [r7, #18]
 8003506:	4618      	mov	r0, r3
 8003508:	3718      	adds	r7, #24
 800350a:	46bd      	mov	sp, r7
 800350c:	bd80      	pop	{r7, pc}
 800350e:	bf00      	nop
 8003510:	40021000 	.word	0x40021000

08003514 <HAL_SPI_Init>:
 8003514:	b580      	push	{r7, lr}
 8003516:	b084      	sub	sp, #16
 8003518:	af00      	add	r7, sp, #0
 800351a:	6078      	str	r0, [r7, #4]
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	2b00      	cmp	r3, #0
 8003520:	d101      	bne.n	8003526 <HAL_SPI_Init+0x12>
 8003522:	2301      	movs	r3, #1
 8003524:	e09d      	b.n	8003662 <HAL_SPI_Init+0x14e>
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800352a:	2b00      	cmp	r3, #0
 800352c:	d108      	bne.n	8003540 <HAL_SPI_Init+0x2c>
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	685b      	ldr	r3, [r3, #4]
 8003532:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003536:	d009      	beq.n	800354c <HAL_SPI_Init+0x38>
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	2200      	movs	r2, #0
 800353c:	61da      	str	r2, [r3, #28]
 800353e:	e005      	b.n	800354c <HAL_SPI_Init+0x38>
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	2200      	movs	r2, #0
 8003544:	611a      	str	r2, [r3, #16]
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	2200      	movs	r2, #0
 800354a:	615a      	str	r2, [r3, #20]
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	2200      	movs	r2, #0
 8003550:	629a      	str	r2, [r3, #40]	@ 0x28
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8003558:	b2db      	uxtb	r3, r3
 800355a:	2b00      	cmp	r3, #0
 800355c:	d106      	bne.n	800356c <HAL_SPI_Init+0x58>
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	2200      	movs	r2, #0
 8003562:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
 8003566:	6878      	ldr	r0, [r7, #4]
 8003568:	f7fe fb70 	bl	8001c4c <HAL_SPI_MspInit>
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	2202      	movs	r2, #2
 8003570:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	681a      	ldr	r2, [r3, #0]
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003582:	601a      	str	r2, [r3, #0]
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	68db      	ldr	r3, [r3, #12]
 8003588:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800358c:	d902      	bls.n	8003594 <HAL_SPI_Init+0x80>
 800358e:	2300      	movs	r3, #0
 8003590:	60fb      	str	r3, [r7, #12]
 8003592:	e002      	b.n	800359a <HAL_SPI_Init+0x86>
 8003594:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003598:	60fb      	str	r3, [r7, #12]
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	68db      	ldr	r3, [r3, #12]
 800359e:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 80035a2:	d007      	beq.n	80035b4 <HAL_SPI_Init+0xa0>
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	68db      	ldr	r3, [r3, #12]
 80035a8:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80035ac:	d002      	beq.n	80035b4 <HAL_SPI_Init+0xa0>
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	2200      	movs	r2, #0
 80035b2:	629a      	str	r2, [r3, #40]	@ 0x28
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	685b      	ldr	r3, [r3, #4]
 80035b8:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	689b      	ldr	r3, [r3, #8]
 80035c0:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80035c4:	431a      	orrs	r2, r3
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	691b      	ldr	r3, [r3, #16]
 80035ca:	f003 0302 	and.w	r3, r3, #2
 80035ce:	431a      	orrs	r2, r3
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	695b      	ldr	r3, [r3, #20]
 80035d4:	f003 0301 	and.w	r3, r3, #1
 80035d8:	431a      	orrs	r2, r3
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	699b      	ldr	r3, [r3, #24]
 80035de:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80035e2:	431a      	orrs	r2, r3
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	69db      	ldr	r3, [r3, #28]
 80035e8:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80035ec:	431a      	orrs	r2, r3
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	6a1b      	ldr	r3, [r3, #32]
 80035f2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80035f6:	ea42 0103 	orr.w	r1, r2, r3
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80035fe:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	430a      	orrs	r2, r1
 8003608:	601a      	str	r2, [r3, #0]
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	699b      	ldr	r3, [r3, #24]
 800360e:	0c1b      	lsrs	r3, r3, #16
 8003610:	f003 0204 	and.w	r2, r3, #4
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003618:	f003 0310 	and.w	r3, r3, #16
 800361c:	431a      	orrs	r2, r3
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003622:	f003 0308 	and.w	r3, r3, #8
 8003626:	431a      	orrs	r2, r3
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	68db      	ldr	r3, [r3, #12]
 800362c:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8003630:	ea42 0103 	orr.w	r1, r2, r3
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	430a      	orrs	r2, r1
 8003640:	605a      	str	r2, [r3, #4]
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	69da      	ldr	r2, [r3, #28]
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003650:	61da      	str	r2, [r3, #28]
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	2200      	movs	r2, #0
 8003656:	661a      	str	r2, [r3, #96]	@ 0x60
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	2201      	movs	r2, #1
 800365c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
 8003660:	2300      	movs	r3, #0
 8003662:	4618      	mov	r0, r3
 8003664:	3710      	adds	r7, #16
 8003666:	46bd      	mov	sp, r7
 8003668:	bd80      	pop	{r7, pc}

0800366a <HAL_SPI_TransmitReceive>:
 800366a:	b580      	push	{r7, lr}
 800366c:	b08a      	sub	sp, #40	@ 0x28
 800366e:	af00      	add	r7, sp, #0
 8003670:	60f8      	str	r0, [r7, #12]
 8003672:	60b9      	str	r1, [r7, #8]
 8003674:	607a      	str	r2, [r7, #4]
 8003676:	807b      	strh	r3, [r7, #2]
 8003678:	2301      	movs	r3, #1
 800367a:	627b      	str	r3, [r7, #36]	@ 0x24
 800367c:	f7fe fce4 	bl	8002048 <HAL_GetTick>
 8003680:	6238      	str	r0, [r7, #32]
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8003688:	77fb      	strb	r3, [r7, #31]
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	685b      	ldr	r3, [r3, #4]
 800368e:	61bb      	str	r3, [r7, #24]
 8003690:	887b      	ldrh	r3, [r7, #2]
 8003692:	82fb      	strh	r3, [r7, #22]
 8003694:	887b      	ldrh	r3, [r7, #2]
 8003696:	82bb      	strh	r3, [r7, #20]
 8003698:	7ffb      	ldrb	r3, [r7, #31]
 800369a:	2b01      	cmp	r3, #1
 800369c:	d00c      	beq.n	80036b8 <HAL_SPI_TransmitReceive+0x4e>
 800369e:	69bb      	ldr	r3, [r7, #24]
 80036a0:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80036a4:	d106      	bne.n	80036b4 <HAL_SPI_TransmitReceive+0x4a>
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	689b      	ldr	r3, [r3, #8]
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d102      	bne.n	80036b4 <HAL_SPI_TransmitReceive+0x4a>
 80036ae:	7ffb      	ldrb	r3, [r7, #31]
 80036b0:	2b04      	cmp	r3, #4
 80036b2:	d001      	beq.n	80036b8 <HAL_SPI_TransmitReceive+0x4e>
 80036b4:	2302      	movs	r3, #2
 80036b6:	e1f3      	b.n	8003aa0 <HAL_SPI_TransmitReceive+0x436>
 80036b8:	68bb      	ldr	r3, [r7, #8]
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d005      	beq.n	80036ca <HAL_SPI_TransmitReceive+0x60>
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d002      	beq.n	80036ca <HAL_SPI_TransmitReceive+0x60>
 80036c4:	887b      	ldrh	r3, [r7, #2]
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d101      	bne.n	80036ce <HAL_SPI_TransmitReceive+0x64>
 80036ca:	2301      	movs	r3, #1
 80036cc:	e1e8      	b.n	8003aa0 <HAL_SPI_TransmitReceive+0x436>
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80036d4:	2b01      	cmp	r3, #1
 80036d6:	d101      	bne.n	80036dc <HAL_SPI_TransmitReceive+0x72>
 80036d8:	2302      	movs	r3, #2
 80036da:	e1e1      	b.n	8003aa0 <HAL_SPI_TransmitReceive+0x436>
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	2201      	movs	r2, #1
 80036e0:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80036ea:	b2db      	uxtb	r3, r3
 80036ec:	2b04      	cmp	r3, #4
 80036ee:	d003      	beq.n	80036f8 <HAL_SPI_TransmitReceive+0x8e>
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	2205      	movs	r2, #5
 80036f4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	2200      	movs	r2, #0
 80036fc:	661a      	str	r2, [r3, #96]	@ 0x60
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	687a      	ldr	r2, [r7, #4]
 8003702:	641a      	str	r2, [r3, #64]	@ 0x40
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	887a      	ldrh	r2, [r7, #2]
 8003708:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	887a      	ldrh	r2, [r7, #2]
 8003710:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	68ba      	ldr	r2, [r7, #8]
 8003718:	639a      	str	r2, [r3, #56]	@ 0x38
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	887a      	ldrh	r2, [r7, #2]
 800371e:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	887a      	ldrh	r2, [r7, #2]
 8003724:	879a      	strh	r2, [r3, #60]	@ 0x3c
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	2200      	movs	r2, #0
 800372a:	64da      	str	r2, [r3, #76]	@ 0x4c
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	2200      	movs	r2, #0
 8003730:	651a      	str	r2, [r3, #80]	@ 0x50
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	68db      	ldr	r3, [r3, #12]
 8003736:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800373a:	d802      	bhi.n	8003742 <HAL_SPI_TransmitReceive+0xd8>
 800373c:	8abb      	ldrh	r3, [r7, #20]
 800373e:	2b01      	cmp	r3, #1
 8003740:	d908      	bls.n	8003754 <HAL_SPI_TransmitReceive+0xea>
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	685a      	ldr	r2, [r3, #4]
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8003750:	605a      	str	r2, [r3, #4]
 8003752:	e007      	b.n	8003764 <HAL_SPI_TransmitReceive+0xfa>
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	685a      	ldr	r2, [r3, #4]
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8003762:	605a      	str	r2, [r3, #4]
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800376e:	2b40      	cmp	r3, #64	@ 0x40
 8003770:	d007      	beq.n	8003782 <HAL_SPI_TransmitReceive+0x118>
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	681a      	ldr	r2, [r3, #0]
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003780:	601a      	str	r2, [r3, #0]
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	68db      	ldr	r3, [r3, #12]
 8003786:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800378a:	f240 8083 	bls.w	8003894 <HAL_SPI_TransmitReceive+0x22a>
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	685b      	ldr	r3, [r3, #4]
 8003792:	2b00      	cmp	r3, #0
 8003794:	d002      	beq.n	800379c <HAL_SPI_TransmitReceive+0x132>
 8003796:	8afb      	ldrh	r3, [r7, #22]
 8003798:	2b01      	cmp	r3, #1
 800379a:	d16f      	bne.n	800387c <HAL_SPI_TransmitReceive+0x212>
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80037a0:	881a      	ldrh	r2, [r3, #0]
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	60da      	str	r2, [r3, #12]
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80037ac:	1c9a      	adds	r2, r3, #2
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	639a      	str	r2, [r3, #56]	@ 0x38
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80037b6:	b29b      	uxth	r3, r3
 80037b8:	3b01      	subs	r3, #1
 80037ba:	b29a      	uxth	r2, r3
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80037c0:	e05c      	b.n	800387c <HAL_SPI_TransmitReceive+0x212>
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	689b      	ldr	r3, [r3, #8]
 80037c8:	f003 0302 	and.w	r3, r3, #2
 80037cc:	2b02      	cmp	r3, #2
 80037ce:	d11b      	bne.n	8003808 <HAL_SPI_TransmitReceive+0x19e>
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80037d4:	b29b      	uxth	r3, r3
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d016      	beq.n	8003808 <HAL_SPI_TransmitReceive+0x19e>
 80037da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037dc:	2b01      	cmp	r3, #1
 80037de:	d113      	bne.n	8003808 <HAL_SPI_TransmitReceive+0x19e>
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80037e4:	881a      	ldrh	r2, [r3, #0]
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	60da      	str	r2, [r3, #12]
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80037f0:	1c9a      	adds	r2, r3, #2
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	639a      	str	r2, [r3, #56]	@ 0x38
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80037fa:	b29b      	uxth	r3, r3
 80037fc:	3b01      	subs	r3, #1
 80037fe:	b29a      	uxth	r2, r3
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003804:	2300      	movs	r3, #0
 8003806:	627b      	str	r3, [r7, #36]	@ 0x24
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	689b      	ldr	r3, [r3, #8]
 800380e:	f003 0301 	and.w	r3, r3, #1
 8003812:	2b01      	cmp	r3, #1
 8003814:	d11c      	bne.n	8003850 <HAL_SPI_TransmitReceive+0x1e6>
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800381c:	b29b      	uxth	r3, r3
 800381e:	2b00      	cmp	r3, #0
 8003820:	d016      	beq.n	8003850 <HAL_SPI_TransmitReceive+0x1e6>
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	68da      	ldr	r2, [r3, #12]
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800382c:	b292      	uxth	r2, r2
 800382e:	801a      	strh	r2, [r3, #0]
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003834:	1c9a      	adds	r2, r3, #2
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	641a      	str	r2, [r3, #64]	@ 0x40
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003840:	b29b      	uxth	r3, r3
 8003842:	3b01      	subs	r3, #1
 8003844:	b29a      	uxth	r2, r3
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 800384c:	2301      	movs	r3, #1
 800384e:	627b      	str	r3, [r7, #36]	@ 0x24
 8003850:	f7fe fbfa 	bl	8002048 <HAL_GetTick>
 8003854:	4602      	mov	r2, r0
 8003856:	6a3b      	ldr	r3, [r7, #32]
 8003858:	1ad3      	subs	r3, r2, r3
 800385a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800385c:	429a      	cmp	r2, r3
 800385e:	d80d      	bhi.n	800387c <HAL_SPI_TransmitReceive+0x212>
 8003860:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003862:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003866:	d009      	beq.n	800387c <HAL_SPI_TransmitReceive+0x212>
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	2201      	movs	r2, #1
 800386c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	2200      	movs	r2, #0
 8003874:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
 8003878:	2303      	movs	r3, #3
 800387a:	e111      	b.n	8003aa0 <HAL_SPI_TransmitReceive+0x436>
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003880:	b29b      	uxth	r3, r3
 8003882:	2b00      	cmp	r3, #0
 8003884:	d19d      	bne.n	80037c2 <HAL_SPI_TransmitReceive+0x158>
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800388c:	b29b      	uxth	r3, r3
 800388e:	2b00      	cmp	r3, #0
 8003890:	d197      	bne.n	80037c2 <HAL_SPI_TransmitReceive+0x158>
 8003892:	e0e5      	b.n	8003a60 <HAL_SPI_TransmitReceive+0x3f6>
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	685b      	ldr	r3, [r3, #4]
 8003898:	2b00      	cmp	r3, #0
 800389a:	d003      	beq.n	80038a4 <HAL_SPI_TransmitReceive+0x23a>
 800389c:	8afb      	ldrh	r3, [r7, #22]
 800389e:	2b01      	cmp	r3, #1
 80038a0:	f040 80d1 	bne.w	8003a46 <HAL_SPI_TransmitReceive+0x3dc>
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80038a8:	b29b      	uxth	r3, r3
 80038aa:	2b01      	cmp	r3, #1
 80038ac:	d912      	bls.n	80038d4 <HAL_SPI_TransmitReceive+0x26a>
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80038b2:	881a      	ldrh	r2, [r3, #0]
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	60da      	str	r2, [r3, #12]
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80038be:	1c9a      	adds	r2, r3, #2
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	639a      	str	r2, [r3, #56]	@ 0x38
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80038c8:	b29b      	uxth	r3, r3
 80038ca:	3b02      	subs	r3, #2
 80038cc:	b29a      	uxth	r2, r3
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80038d2:	e0b8      	b.n	8003a46 <HAL_SPI_TransmitReceive+0x3dc>
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	330c      	adds	r3, #12
 80038de:	7812      	ldrb	r2, [r2, #0]
 80038e0:	701a      	strb	r2, [r3, #0]
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80038e6:	1c5a      	adds	r2, r3, #1
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	639a      	str	r2, [r3, #56]	@ 0x38
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80038f0:	b29b      	uxth	r3, r3
 80038f2:	3b01      	subs	r3, #1
 80038f4:	b29a      	uxth	r2, r3
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80038fa:	e0a4      	b.n	8003a46 <HAL_SPI_TransmitReceive+0x3dc>
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	689b      	ldr	r3, [r3, #8]
 8003902:	f003 0302 	and.w	r3, r3, #2
 8003906:	2b02      	cmp	r3, #2
 8003908:	d134      	bne.n	8003974 <HAL_SPI_TransmitReceive+0x30a>
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800390e:	b29b      	uxth	r3, r3
 8003910:	2b00      	cmp	r3, #0
 8003912:	d02f      	beq.n	8003974 <HAL_SPI_TransmitReceive+0x30a>
 8003914:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003916:	2b01      	cmp	r3, #1
 8003918:	d12c      	bne.n	8003974 <HAL_SPI_TransmitReceive+0x30a>
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800391e:	b29b      	uxth	r3, r3
 8003920:	2b01      	cmp	r3, #1
 8003922:	d912      	bls.n	800394a <HAL_SPI_TransmitReceive+0x2e0>
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003928:	881a      	ldrh	r2, [r3, #0]
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	60da      	str	r2, [r3, #12]
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003934:	1c9a      	adds	r2, r3, #2
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	639a      	str	r2, [r3, #56]	@ 0x38
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800393e:	b29b      	uxth	r3, r3
 8003940:	3b02      	subs	r3, #2
 8003942:	b29a      	uxth	r2, r3
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003948:	e012      	b.n	8003970 <HAL_SPI_TransmitReceive+0x306>
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	330c      	adds	r3, #12
 8003954:	7812      	ldrb	r2, [r2, #0]
 8003956:	701a      	strb	r2, [r3, #0]
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800395c:	1c5a      	adds	r2, r3, #1
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	639a      	str	r2, [r3, #56]	@ 0x38
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003966:	b29b      	uxth	r3, r3
 8003968:	3b01      	subs	r3, #1
 800396a:	b29a      	uxth	r2, r3
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003970:	2300      	movs	r3, #0
 8003972:	627b      	str	r3, [r7, #36]	@ 0x24
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	689b      	ldr	r3, [r3, #8]
 800397a:	f003 0301 	and.w	r3, r3, #1
 800397e:	2b01      	cmp	r3, #1
 8003980:	d148      	bne.n	8003a14 <HAL_SPI_TransmitReceive+0x3aa>
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003988:	b29b      	uxth	r3, r3
 800398a:	2b00      	cmp	r3, #0
 800398c:	d042      	beq.n	8003a14 <HAL_SPI_TransmitReceive+0x3aa>
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003994:	b29b      	uxth	r3, r3
 8003996:	2b01      	cmp	r3, #1
 8003998:	d923      	bls.n	80039e2 <HAL_SPI_TransmitReceive+0x378>
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	68da      	ldr	r2, [r3, #12]
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039a4:	b292      	uxth	r2, r2
 80039a6:	801a      	strh	r2, [r3, #0]
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039ac:	1c9a      	adds	r2, r3, #2
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	641a      	str	r2, [r3, #64]	@ 0x40
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80039b8:	b29b      	uxth	r3, r3
 80039ba:	3b02      	subs	r3, #2
 80039bc:	b29a      	uxth	r2, r3
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80039ca:	b29b      	uxth	r3, r3
 80039cc:	2b01      	cmp	r3, #1
 80039ce:	d81f      	bhi.n	8003a10 <HAL_SPI_TransmitReceive+0x3a6>
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	685a      	ldr	r2, [r3, #4]
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80039de:	605a      	str	r2, [r3, #4]
 80039e0:	e016      	b.n	8003a10 <HAL_SPI_TransmitReceive+0x3a6>
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	f103 020c 	add.w	r2, r3, #12
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039ee:	7812      	ldrb	r2, [r2, #0]
 80039f0:	b2d2      	uxtb	r2, r2
 80039f2:	701a      	strb	r2, [r3, #0]
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039f8:	1c5a      	adds	r2, r3, #1
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	641a      	str	r2, [r3, #64]	@ 0x40
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003a04:	b29b      	uxth	r3, r3
 8003a06:	3b01      	subs	r3, #1
 8003a08:	b29a      	uxth	r2, r3
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 8003a10:	2301      	movs	r3, #1
 8003a12:	627b      	str	r3, [r7, #36]	@ 0x24
 8003a14:	f7fe fb18 	bl	8002048 <HAL_GetTick>
 8003a18:	4602      	mov	r2, r0
 8003a1a:	6a3b      	ldr	r3, [r7, #32]
 8003a1c:	1ad3      	subs	r3, r2, r3
 8003a1e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003a20:	429a      	cmp	r2, r3
 8003a22:	d803      	bhi.n	8003a2c <HAL_SPI_TransmitReceive+0x3c2>
 8003a24:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a26:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a2a:	d102      	bne.n	8003a32 <HAL_SPI_TransmitReceive+0x3c8>
 8003a2c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d109      	bne.n	8003a46 <HAL_SPI_TransmitReceive+0x3dc>
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	2201      	movs	r2, #1
 8003a36:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	2200      	movs	r2, #0
 8003a3e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
 8003a42:	2303      	movs	r3, #3
 8003a44:	e02c      	b.n	8003aa0 <HAL_SPI_TransmitReceive+0x436>
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003a4a:	b29b      	uxth	r3, r3
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	f47f af55 	bne.w	80038fc <HAL_SPI_TransmitReceive+0x292>
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003a58:	b29b      	uxth	r3, r3
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	f47f af4e 	bne.w	80038fc <HAL_SPI_TransmitReceive+0x292>
 8003a60:	6a3a      	ldr	r2, [r7, #32]
 8003a62:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8003a64:	68f8      	ldr	r0, [r7, #12]
 8003a66:	f000 f93d 	bl	8003ce4 <SPI_EndRxTxTransaction>
 8003a6a:	4603      	mov	r3, r0
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d008      	beq.n	8003a82 <HAL_SPI_TransmitReceive+0x418>
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	2220      	movs	r2, #32
 8003a74:	661a      	str	r2, [r3, #96]	@ 0x60
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	2200      	movs	r2, #0
 8003a7a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
 8003a7e:	2301      	movs	r3, #1
 8003a80:	e00e      	b.n	8003aa0 <HAL_SPI_TransmitReceive+0x436>
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	2201      	movs	r2, #1
 8003a86:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	2200      	movs	r2, #0
 8003a8e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d001      	beq.n	8003a9e <HAL_SPI_TransmitReceive+0x434>
 8003a9a:	2301      	movs	r3, #1
 8003a9c:	e000      	b.n	8003aa0 <HAL_SPI_TransmitReceive+0x436>
 8003a9e:	2300      	movs	r3, #0
 8003aa0:	4618      	mov	r0, r3
 8003aa2:	3728      	adds	r7, #40	@ 0x28
 8003aa4:	46bd      	mov	sp, r7
 8003aa6:	bd80      	pop	{r7, pc}

08003aa8 <SPI_WaitFlagStateUntilTimeout>:
 8003aa8:	b580      	push	{r7, lr}
 8003aaa:	b088      	sub	sp, #32
 8003aac:	af00      	add	r7, sp, #0
 8003aae:	60f8      	str	r0, [r7, #12]
 8003ab0:	60b9      	str	r1, [r7, #8]
 8003ab2:	603b      	str	r3, [r7, #0]
 8003ab4:	4613      	mov	r3, r2
 8003ab6:	71fb      	strb	r3, [r7, #7]
 8003ab8:	f7fe fac6 	bl	8002048 <HAL_GetTick>
 8003abc:	4602      	mov	r2, r0
 8003abe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003ac0:	1a9b      	subs	r3, r3, r2
 8003ac2:	683a      	ldr	r2, [r7, #0]
 8003ac4:	4413      	add	r3, r2
 8003ac6:	61fb      	str	r3, [r7, #28]
 8003ac8:	f7fe fabe 	bl	8002048 <HAL_GetTick>
 8003acc:	61b8      	str	r0, [r7, #24]
 8003ace:	4b39      	ldr	r3, [pc, #228]	@ (8003bb4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	015b      	lsls	r3, r3, #5
 8003ad4:	0d1b      	lsrs	r3, r3, #20
 8003ad6:	69fa      	ldr	r2, [r7, #28]
 8003ad8:	fb02 f303 	mul.w	r3, r2, r3
 8003adc:	617b      	str	r3, [r7, #20]
 8003ade:	e054      	b.n	8003b8a <SPI_WaitFlagStateUntilTimeout+0xe2>
 8003ae0:	683b      	ldr	r3, [r7, #0]
 8003ae2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ae6:	d050      	beq.n	8003b8a <SPI_WaitFlagStateUntilTimeout+0xe2>
 8003ae8:	f7fe faae 	bl	8002048 <HAL_GetTick>
 8003aec:	4602      	mov	r2, r0
 8003aee:	69bb      	ldr	r3, [r7, #24]
 8003af0:	1ad3      	subs	r3, r2, r3
 8003af2:	69fa      	ldr	r2, [r7, #28]
 8003af4:	429a      	cmp	r2, r3
 8003af6:	d902      	bls.n	8003afe <SPI_WaitFlagStateUntilTimeout+0x56>
 8003af8:	69fb      	ldr	r3, [r7, #28]
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d13d      	bne.n	8003b7a <SPI_WaitFlagStateUntilTimeout+0xd2>
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	685a      	ldr	r2, [r3, #4]
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8003b0c:	605a      	str	r2, [r3, #4]
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	685b      	ldr	r3, [r3, #4]
 8003b12:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003b16:	d111      	bne.n	8003b3c <SPI_WaitFlagStateUntilTimeout+0x94>
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	689b      	ldr	r3, [r3, #8]
 8003b1c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003b20:	d004      	beq.n	8003b2c <SPI_WaitFlagStateUntilTimeout+0x84>
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	689b      	ldr	r3, [r3, #8]
 8003b26:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003b2a:	d107      	bne.n	8003b3c <SPI_WaitFlagStateUntilTimeout+0x94>
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	681a      	ldr	r2, [r3, #0]
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003b3a:	601a      	str	r2, [r3, #0]
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b40:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003b44:	d10f      	bne.n	8003b66 <SPI_WaitFlagStateUntilTimeout+0xbe>
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	681a      	ldr	r2, [r3, #0]
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003b54:	601a      	str	r2, [r3, #0]
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	681a      	ldr	r2, [r3, #0]
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003b64:	601a      	str	r2, [r3, #0]
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	2201      	movs	r2, #1
 8003b6a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	2200      	movs	r2, #0
 8003b72:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
 8003b76:	2303      	movs	r3, #3
 8003b78:	e017      	b.n	8003baa <SPI_WaitFlagStateUntilTimeout+0x102>
 8003b7a:	697b      	ldr	r3, [r7, #20]
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d101      	bne.n	8003b84 <SPI_WaitFlagStateUntilTimeout+0xdc>
 8003b80:	2300      	movs	r3, #0
 8003b82:	61fb      	str	r3, [r7, #28]
 8003b84:	697b      	ldr	r3, [r7, #20]
 8003b86:	3b01      	subs	r3, #1
 8003b88:	617b      	str	r3, [r7, #20]
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	689a      	ldr	r2, [r3, #8]
 8003b90:	68bb      	ldr	r3, [r7, #8]
 8003b92:	4013      	ands	r3, r2
 8003b94:	68ba      	ldr	r2, [r7, #8]
 8003b96:	429a      	cmp	r2, r3
 8003b98:	bf0c      	ite	eq
 8003b9a:	2301      	moveq	r3, #1
 8003b9c:	2300      	movne	r3, #0
 8003b9e:	b2db      	uxtb	r3, r3
 8003ba0:	461a      	mov	r2, r3
 8003ba2:	79fb      	ldrb	r3, [r7, #7]
 8003ba4:	429a      	cmp	r2, r3
 8003ba6:	d19b      	bne.n	8003ae0 <SPI_WaitFlagStateUntilTimeout+0x38>
 8003ba8:	2300      	movs	r3, #0
 8003baa:	4618      	mov	r0, r3
 8003bac:	3720      	adds	r7, #32
 8003bae:	46bd      	mov	sp, r7
 8003bb0:	bd80      	pop	{r7, pc}
 8003bb2:	bf00      	nop
 8003bb4:	20000000 	.word	0x20000000

08003bb8 <SPI_WaitFifoStateUntilTimeout>:
 8003bb8:	b580      	push	{r7, lr}
 8003bba:	b08a      	sub	sp, #40	@ 0x28
 8003bbc:	af00      	add	r7, sp, #0
 8003bbe:	60f8      	str	r0, [r7, #12]
 8003bc0:	60b9      	str	r1, [r7, #8]
 8003bc2:	607a      	str	r2, [r7, #4]
 8003bc4:	603b      	str	r3, [r7, #0]
 8003bc6:	2300      	movs	r3, #0
 8003bc8:	75fb      	strb	r3, [r7, #23]
 8003bca:	f7fe fa3d 	bl	8002048 <HAL_GetTick>
 8003bce:	4602      	mov	r2, r0
 8003bd0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003bd2:	1a9b      	subs	r3, r3, r2
 8003bd4:	683a      	ldr	r2, [r7, #0]
 8003bd6:	4413      	add	r3, r2
 8003bd8:	627b      	str	r3, [r7, #36]	@ 0x24
 8003bda:	f7fe fa35 	bl	8002048 <HAL_GetTick>
 8003bde:	6238      	str	r0, [r7, #32]
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	330c      	adds	r3, #12
 8003be6:	61fb      	str	r3, [r7, #28]
 8003be8:	4b3d      	ldr	r3, [pc, #244]	@ (8003ce0 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8003bea:	681a      	ldr	r2, [r3, #0]
 8003bec:	4613      	mov	r3, r2
 8003bee:	009b      	lsls	r3, r3, #2
 8003bf0:	4413      	add	r3, r2
 8003bf2:	00da      	lsls	r2, r3, #3
 8003bf4:	1ad3      	subs	r3, r2, r3
 8003bf6:	0d1b      	lsrs	r3, r3, #20
 8003bf8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003bfa:	fb02 f303 	mul.w	r3, r2, r3
 8003bfe:	61bb      	str	r3, [r7, #24]
 8003c00:	e060      	b.n	8003cc4 <SPI_WaitFifoStateUntilTimeout+0x10c>
 8003c02:	68bb      	ldr	r3, [r7, #8]
 8003c04:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8003c08:	d107      	bne.n	8003c1a <SPI_WaitFifoStateUntilTimeout+0x62>
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d104      	bne.n	8003c1a <SPI_WaitFifoStateUntilTimeout+0x62>
 8003c10:	69fb      	ldr	r3, [r7, #28]
 8003c12:	781b      	ldrb	r3, [r3, #0]
 8003c14:	b2db      	uxtb	r3, r3
 8003c16:	75fb      	strb	r3, [r7, #23]
 8003c18:	7dfb      	ldrb	r3, [r7, #23]
 8003c1a:	683b      	ldr	r3, [r7, #0]
 8003c1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c20:	d050      	beq.n	8003cc4 <SPI_WaitFifoStateUntilTimeout+0x10c>
 8003c22:	f7fe fa11 	bl	8002048 <HAL_GetTick>
 8003c26:	4602      	mov	r2, r0
 8003c28:	6a3b      	ldr	r3, [r7, #32]
 8003c2a:	1ad3      	subs	r3, r2, r3
 8003c2c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003c2e:	429a      	cmp	r2, r3
 8003c30:	d902      	bls.n	8003c38 <SPI_WaitFifoStateUntilTimeout+0x80>
 8003c32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d13d      	bne.n	8003cb4 <SPI_WaitFifoStateUntilTimeout+0xfc>
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	685a      	ldr	r2, [r3, #4]
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8003c46:	605a      	str	r2, [r3, #4]
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	685b      	ldr	r3, [r3, #4]
 8003c4c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003c50:	d111      	bne.n	8003c76 <SPI_WaitFifoStateUntilTimeout+0xbe>
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	689b      	ldr	r3, [r3, #8]
 8003c56:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003c5a:	d004      	beq.n	8003c66 <SPI_WaitFifoStateUntilTimeout+0xae>
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	689b      	ldr	r3, [r3, #8]
 8003c60:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003c64:	d107      	bne.n	8003c76 <SPI_WaitFifoStateUntilTimeout+0xbe>
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	681a      	ldr	r2, [r3, #0]
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003c74:	601a      	str	r2, [r3, #0]
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c7a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003c7e:	d10f      	bne.n	8003ca0 <SPI_WaitFifoStateUntilTimeout+0xe8>
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	681a      	ldr	r2, [r3, #0]
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003c8e:	601a      	str	r2, [r3, #0]
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	681a      	ldr	r2, [r3, #0]
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003c9e:	601a      	str	r2, [r3, #0]
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	2201      	movs	r2, #1
 8003ca4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	2200      	movs	r2, #0
 8003cac:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
 8003cb0:	2303      	movs	r3, #3
 8003cb2:	e010      	b.n	8003cd6 <SPI_WaitFifoStateUntilTimeout+0x11e>
 8003cb4:	69bb      	ldr	r3, [r7, #24]
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d101      	bne.n	8003cbe <SPI_WaitFifoStateUntilTimeout+0x106>
 8003cba:	2300      	movs	r3, #0
 8003cbc:	627b      	str	r3, [r7, #36]	@ 0x24
 8003cbe:	69bb      	ldr	r3, [r7, #24]
 8003cc0:	3b01      	subs	r3, #1
 8003cc2:	61bb      	str	r3, [r7, #24]
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	689a      	ldr	r2, [r3, #8]
 8003cca:	68bb      	ldr	r3, [r7, #8]
 8003ccc:	4013      	ands	r3, r2
 8003cce:	687a      	ldr	r2, [r7, #4]
 8003cd0:	429a      	cmp	r2, r3
 8003cd2:	d196      	bne.n	8003c02 <SPI_WaitFifoStateUntilTimeout+0x4a>
 8003cd4:	2300      	movs	r3, #0
 8003cd6:	4618      	mov	r0, r3
 8003cd8:	3728      	adds	r7, #40	@ 0x28
 8003cda:	46bd      	mov	sp, r7
 8003cdc:	bd80      	pop	{r7, pc}
 8003cde:	bf00      	nop
 8003ce0:	20000000 	.word	0x20000000

08003ce4 <SPI_EndRxTxTransaction>:
 8003ce4:	b580      	push	{r7, lr}
 8003ce6:	b086      	sub	sp, #24
 8003ce8:	af02      	add	r7, sp, #8
 8003cea:	60f8      	str	r0, [r7, #12]
 8003cec:	60b9      	str	r1, [r7, #8]
 8003cee:	607a      	str	r2, [r7, #4]
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	9300      	str	r3, [sp, #0]
 8003cf4:	68bb      	ldr	r3, [r7, #8]
 8003cf6:	2200      	movs	r2, #0
 8003cf8:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8003cfc:	68f8      	ldr	r0, [r7, #12]
 8003cfe:	f7ff ff5b 	bl	8003bb8 <SPI_WaitFifoStateUntilTimeout>
 8003d02:	4603      	mov	r3, r0
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d007      	beq.n	8003d18 <SPI_EndRxTxTransaction+0x34>
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003d0c:	f043 0220 	orr.w	r2, r3, #32
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	661a      	str	r2, [r3, #96]	@ 0x60
 8003d14:	2303      	movs	r3, #3
 8003d16:	e027      	b.n	8003d68 <SPI_EndRxTxTransaction+0x84>
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	9300      	str	r3, [sp, #0]
 8003d1c:	68bb      	ldr	r3, [r7, #8]
 8003d1e:	2200      	movs	r2, #0
 8003d20:	2180      	movs	r1, #128	@ 0x80
 8003d22:	68f8      	ldr	r0, [r7, #12]
 8003d24:	f7ff fec0 	bl	8003aa8 <SPI_WaitFlagStateUntilTimeout>
 8003d28:	4603      	mov	r3, r0
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d007      	beq.n	8003d3e <SPI_EndRxTxTransaction+0x5a>
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003d32:	f043 0220 	orr.w	r2, r3, #32
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	661a      	str	r2, [r3, #96]	@ 0x60
 8003d3a:	2303      	movs	r3, #3
 8003d3c:	e014      	b.n	8003d68 <SPI_EndRxTxTransaction+0x84>
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	9300      	str	r3, [sp, #0]
 8003d42:	68bb      	ldr	r3, [r7, #8]
 8003d44:	2200      	movs	r2, #0
 8003d46:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8003d4a:	68f8      	ldr	r0, [r7, #12]
 8003d4c:	f7ff ff34 	bl	8003bb8 <SPI_WaitFifoStateUntilTimeout>
 8003d50:	4603      	mov	r3, r0
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d007      	beq.n	8003d66 <SPI_EndRxTxTransaction+0x82>
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003d5a:	f043 0220 	orr.w	r2, r3, #32
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	661a      	str	r2, [r3, #96]	@ 0x60
 8003d62:	2303      	movs	r3, #3
 8003d64:	e000      	b.n	8003d68 <SPI_EndRxTxTransaction+0x84>
 8003d66:	2300      	movs	r3, #0
 8003d68:	4618      	mov	r0, r3
 8003d6a:	3710      	adds	r7, #16
 8003d6c:	46bd      	mov	sp, r7
 8003d6e:	bd80      	pop	{r7, pc}

08003d70 <HAL_UART_Init>:
 8003d70:	b580      	push	{r7, lr}
 8003d72:	b082      	sub	sp, #8
 8003d74:	af00      	add	r7, sp, #0
 8003d76:	6078      	str	r0, [r7, #4]
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d101      	bne.n	8003d82 <HAL_UART_Init+0x12>
 8003d7e:	2301      	movs	r3, #1
 8003d80:	e042      	b.n	8003e08 <HAL_UART_Init+0x98>
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d106      	bne.n	8003d9a <HAL_UART_Init+0x2a>
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	2200      	movs	r2, #0
 8003d90:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84
 8003d94:	6878      	ldr	r0, [r7, #4]
 8003d96:	f7fd ff9b 	bl	8001cd0 <HAL_UART_MspInit>
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	2224      	movs	r2, #36	@ 0x24
 8003d9e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	681a      	ldr	r2, [r3, #0]
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	f022 0201 	bic.w	r2, r2, #1
 8003db0:	601a      	str	r2, [r3, #0]
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d002      	beq.n	8003dc0 <HAL_UART_Init+0x50>
 8003dba:	6878      	ldr	r0, [r7, #4]
 8003dbc:	f000 fb82 	bl	80044c4 <UART_AdvFeatureConfig>
 8003dc0:	6878      	ldr	r0, [r7, #4]
 8003dc2:	f000 f8b3 	bl	8003f2c <UART_SetConfig>
 8003dc6:	4603      	mov	r3, r0
 8003dc8:	2b01      	cmp	r3, #1
 8003dca:	d101      	bne.n	8003dd0 <HAL_UART_Init+0x60>
 8003dcc:	2301      	movs	r3, #1
 8003dce:	e01b      	b.n	8003e08 <HAL_UART_Init+0x98>
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	685a      	ldr	r2, [r3, #4]
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003dde:	605a      	str	r2, [r3, #4]
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	689a      	ldr	r2, [r3, #8]
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003dee:	609a      	str	r2, [r3, #8]
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	681a      	ldr	r2, [r3, #0]
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	f042 0201 	orr.w	r2, r2, #1
 8003dfe:	601a      	str	r2, [r3, #0]
 8003e00:	6878      	ldr	r0, [r7, #4]
 8003e02:	f000 fc01 	bl	8004608 <UART_CheckIdleState>
 8003e06:	4603      	mov	r3, r0
 8003e08:	4618      	mov	r0, r3
 8003e0a:	3708      	adds	r7, #8
 8003e0c:	46bd      	mov	sp, r7
 8003e0e:	bd80      	pop	{r7, pc}

08003e10 <HAL_UART_Transmit>:
 8003e10:	b580      	push	{r7, lr}
 8003e12:	b08a      	sub	sp, #40	@ 0x28
 8003e14:	af02      	add	r7, sp, #8
 8003e16:	60f8      	str	r0, [r7, #12]
 8003e18:	60b9      	str	r1, [r7, #8]
 8003e1a:	603b      	str	r3, [r7, #0]
 8003e1c:	4613      	mov	r3, r2
 8003e1e:	80fb      	strh	r3, [r7, #6]
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003e26:	2b20      	cmp	r3, #32
 8003e28:	d17b      	bne.n	8003f22 <HAL_UART_Transmit+0x112>
 8003e2a:	68bb      	ldr	r3, [r7, #8]
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d002      	beq.n	8003e36 <HAL_UART_Transmit+0x26>
 8003e30:	88fb      	ldrh	r3, [r7, #6]
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d101      	bne.n	8003e3a <HAL_UART_Transmit+0x2a>
 8003e36:	2301      	movs	r3, #1
 8003e38:	e074      	b.n	8003f24 <HAL_UART_Transmit+0x114>
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	2200      	movs	r2, #0
 8003e3e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	2221      	movs	r2, #33	@ 0x21
 8003e46:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
 8003e4a:	f7fe f8fd 	bl	8002048 <HAL_GetTick>
 8003e4e:	6178      	str	r0, [r7, #20]
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	88fa      	ldrh	r2, [r7, #6]
 8003e54:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	88fa      	ldrh	r2, [r7, #6]
 8003e5c:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	689b      	ldr	r3, [r3, #8]
 8003e64:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003e68:	d108      	bne.n	8003e7c <HAL_UART_Transmit+0x6c>
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	691b      	ldr	r3, [r3, #16]
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d104      	bne.n	8003e7c <HAL_UART_Transmit+0x6c>
 8003e72:	2300      	movs	r3, #0
 8003e74:	61fb      	str	r3, [r7, #28]
 8003e76:	68bb      	ldr	r3, [r7, #8]
 8003e78:	61bb      	str	r3, [r7, #24]
 8003e7a:	e003      	b.n	8003e84 <HAL_UART_Transmit+0x74>
 8003e7c:	68bb      	ldr	r3, [r7, #8]
 8003e7e:	61fb      	str	r3, [r7, #28]
 8003e80:	2300      	movs	r3, #0
 8003e82:	61bb      	str	r3, [r7, #24]
 8003e84:	e030      	b.n	8003ee8 <HAL_UART_Transmit+0xd8>
 8003e86:	683b      	ldr	r3, [r7, #0]
 8003e88:	9300      	str	r3, [sp, #0]
 8003e8a:	697b      	ldr	r3, [r7, #20]
 8003e8c:	2200      	movs	r2, #0
 8003e8e:	2180      	movs	r1, #128	@ 0x80
 8003e90:	68f8      	ldr	r0, [r7, #12]
 8003e92:	f000 fc63 	bl	800475c <UART_WaitOnFlagUntilTimeout>
 8003e96:	4603      	mov	r3, r0
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d005      	beq.n	8003ea8 <HAL_UART_Transmit+0x98>
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	2220      	movs	r2, #32
 8003ea0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
 8003ea4:	2303      	movs	r3, #3
 8003ea6:	e03d      	b.n	8003f24 <HAL_UART_Transmit+0x114>
 8003ea8:	69fb      	ldr	r3, [r7, #28]
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d10b      	bne.n	8003ec6 <HAL_UART_Transmit+0xb6>
 8003eae:	69bb      	ldr	r3, [r7, #24]
 8003eb0:	881b      	ldrh	r3, [r3, #0]
 8003eb2:	461a      	mov	r2, r3
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003ebc:	629a      	str	r2, [r3, #40]	@ 0x28
 8003ebe:	69bb      	ldr	r3, [r7, #24]
 8003ec0:	3302      	adds	r3, #2
 8003ec2:	61bb      	str	r3, [r7, #24]
 8003ec4:	e007      	b.n	8003ed6 <HAL_UART_Transmit+0xc6>
 8003ec6:	69fb      	ldr	r3, [r7, #28]
 8003ec8:	781a      	ldrb	r2, [r3, #0]
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	629a      	str	r2, [r3, #40]	@ 0x28
 8003ed0:	69fb      	ldr	r3, [r7, #28]
 8003ed2:	3301      	adds	r3, #1
 8003ed4:	61fb      	str	r3, [r7, #28]
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8003edc:	b29b      	uxth	r3, r3
 8003ede:	3b01      	subs	r3, #1
 8003ee0:	b29a      	uxth	r2, r3
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8003eee:	b29b      	uxth	r3, r3
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d1c8      	bne.n	8003e86 <HAL_UART_Transmit+0x76>
 8003ef4:	683b      	ldr	r3, [r7, #0]
 8003ef6:	9300      	str	r3, [sp, #0]
 8003ef8:	697b      	ldr	r3, [r7, #20]
 8003efa:	2200      	movs	r2, #0
 8003efc:	2140      	movs	r1, #64	@ 0x40
 8003efe:	68f8      	ldr	r0, [r7, #12]
 8003f00:	f000 fc2c 	bl	800475c <UART_WaitOnFlagUntilTimeout>
 8003f04:	4603      	mov	r3, r0
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d005      	beq.n	8003f16 <HAL_UART_Transmit+0x106>
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	2220      	movs	r2, #32
 8003f0e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
 8003f12:	2303      	movs	r3, #3
 8003f14:	e006      	b.n	8003f24 <HAL_UART_Transmit+0x114>
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	2220      	movs	r2, #32
 8003f1a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
 8003f1e:	2300      	movs	r3, #0
 8003f20:	e000      	b.n	8003f24 <HAL_UART_Transmit+0x114>
 8003f22:	2302      	movs	r3, #2
 8003f24:	4618      	mov	r0, r3
 8003f26:	3720      	adds	r7, #32
 8003f28:	46bd      	mov	sp, r7
 8003f2a:	bd80      	pop	{r7, pc}

08003f2c <UART_SetConfig>:
 8003f2c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003f30:	b08c      	sub	sp, #48	@ 0x30
 8003f32:	af00      	add	r7, sp, #0
 8003f34:	6178      	str	r0, [r7, #20]
 8003f36:	2300      	movs	r3, #0
 8003f38:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8003f3c:	697b      	ldr	r3, [r7, #20]
 8003f3e:	689a      	ldr	r2, [r3, #8]
 8003f40:	697b      	ldr	r3, [r7, #20]
 8003f42:	691b      	ldr	r3, [r3, #16]
 8003f44:	431a      	orrs	r2, r3
 8003f46:	697b      	ldr	r3, [r7, #20]
 8003f48:	695b      	ldr	r3, [r3, #20]
 8003f4a:	431a      	orrs	r2, r3
 8003f4c:	697b      	ldr	r3, [r7, #20]
 8003f4e:	69db      	ldr	r3, [r3, #28]
 8003f50:	4313      	orrs	r3, r2
 8003f52:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003f54:	697b      	ldr	r3, [r7, #20]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	681a      	ldr	r2, [r3, #0]
 8003f5a:	4bab      	ldr	r3, [pc, #684]	@ (8004208 <UART_SetConfig+0x2dc>)
 8003f5c:	4013      	ands	r3, r2
 8003f5e:	697a      	ldr	r2, [r7, #20]
 8003f60:	6812      	ldr	r2, [r2, #0]
 8003f62:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003f64:	430b      	orrs	r3, r1
 8003f66:	6013      	str	r3, [r2, #0]
 8003f68:	697b      	ldr	r3, [r7, #20]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	685b      	ldr	r3, [r3, #4]
 8003f6e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8003f72:	697b      	ldr	r3, [r7, #20]
 8003f74:	68da      	ldr	r2, [r3, #12]
 8003f76:	697b      	ldr	r3, [r7, #20]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	430a      	orrs	r2, r1
 8003f7c:	605a      	str	r2, [r3, #4]
 8003f7e:	697b      	ldr	r3, [r7, #20]
 8003f80:	699b      	ldr	r3, [r3, #24]
 8003f82:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003f84:	697b      	ldr	r3, [r7, #20]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	4aa0      	ldr	r2, [pc, #640]	@ (800420c <UART_SetConfig+0x2e0>)
 8003f8a:	4293      	cmp	r3, r2
 8003f8c:	d004      	beq.n	8003f98 <UART_SetConfig+0x6c>
 8003f8e:	697b      	ldr	r3, [r7, #20]
 8003f90:	6a1b      	ldr	r3, [r3, #32]
 8003f92:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003f94:	4313      	orrs	r3, r2
 8003f96:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003f98:	697b      	ldr	r3, [r7, #20]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	689b      	ldr	r3, [r3, #8]
 8003f9e:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8003fa2:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8003fa6:	697a      	ldr	r2, [r7, #20]
 8003fa8:	6812      	ldr	r2, [r2, #0]
 8003faa:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003fac:	430b      	orrs	r3, r1
 8003fae:	6093      	str	r3, [r2, #8]
 8003fb0:	697b      	ldr	r3, [r7, #20]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003fb6:	f023 010f 	bic.w	r1, r3, #15
 8003fba:	697b      	ldr	r3, [r7, #20]
 8003fbc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003fbe:	697b      	ldr	r3, [r7, #20]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	430a      	orrs	r2, r1
 8003fc4:	62da      	str	r2, [r3, #44]	@ 0x2c
 8003fc6:	697b      	ldr	r3, [r7, #20]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	4a91      	ldr	r2, [pc, #580]	@ (8004210 <UART_SetConfig+0x2e4>)
 8003fcc:	4293      	cmp	r3, r2
 8003fce:	d125      	bne.n	800401c <UART_SetConfig+0xf0>
 8003fd0:	4b90      	ldr	r3, [pc, #576]	@ (8004214 <UART_SetConfig+0x2e8>)
 8003fd2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003fd6:	f003 0303 	and.w	r3, r3, #3
 8003fda:	2b03      	cmp	r3, #3
 8003fdc:	d81a      	bhi.n	8004014 <UART_SetConfig+0xe8>
 8003fde:	a201      	add	r2, pc, #4	@ (adr r2, 8003fe4 <UART_SetConfig+0xb8>)
 8003fe0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003fe4:	08003ff5 	.word	0x08003ff5
 8003fe8:	08004005 	.word	0x08004005
 8003fec:	08003ffd 	.word	0x08003ffd
 8003ff0:	0800400d 	.word	0x0800400d
 8003ff4:	2301      	movs	r3, #1
 8003ff6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003ffa:	e0d6      	b.n	80041aa <UART_SetConfig+0x27e>
 8003ffc:	2302      	movs	r3, #2
 8003ffe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004002:	e0d2      	b.n	80041aa <UART_SetConfig+0x27e>
 8004004:	2304      	movs	r3, #4
 8004006:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800400a:	e0ce      	b.n	80041aa <UART_SetConfig+0x27e>
 800400c:	2308      	movs	r3, #8
 800400e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004012:	e0ca      	b.n	80041aa <UART_SetConfig+0x27e>
 8004014:	2310      	movs	r3, #16
 8004016:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800401a:	e0c6      	b.n	80041aa <UART_SetConfig+0x27e>
 800401c:	697b      	ldr	r3, [r7, #20]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	4a7d      	ldr	r2, [pc, #500]	@ (8004218 <UART_SetConfig+0x2ec>)
 8004022:	4293      	cmp	r3, r2
 8004024:	d138      	bne.n	8004098 <UART_SetConfig+0x16c>
 8004026:	4b7b      	ldr	r3, [pc, #492]	@ (8004214 <UART_SetConfig+0x2e8>)
 8004028:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800402c:	f003 030c 	and.w	r3, r3, #12
 8004030:	2b0c      	cmp	r3, #12
 8004032:	d82d      	bhi.n	8004090 <UART_SetConfig+0x164>
 8004034:	a201      	add	r2, pc, #4	@ (adr r2, 800403c <UART_SetConfig+0x110>)
 8004036:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800403a:	bf00      	nop
 800403c:	08004071 	.word	0x08004071
 8004040:	08004091 	.word	0x08004091
 8004044:	08004091 	.word	0x08004091
 8004048:	08004091 	.word	0x08004091
 800404c:	08004081 	.word	0x08004081
 8004050:	08004091 	.word	0x08004091
 8004054:	08004091 	.word	0x08004091
 8004058:	08004091 	.word	0x08004091
 800405c:	08004079 	.word	0x08004079
 8004060:	08004091 	.word	0x08004091
 8004064:	08004091 	.word	0x08004091
 8004068:	08004091 	.word	0x08004091
 800406c:	08004089 	.word	0x08004089
 8004070:	2300      	movs	r3, #0
 8004072:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004076:	e098      	b.n	80041aa <UART_SetConfig+0x27e>
 8004078:	2302      	movs	r3, #2
 800407a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800407e:	e094      	b.n	80041aa <UART_SetConfig+0x27e>
 8004080:	2304      	movs	r3, #4
 8004082:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004086:	e090      	b.n	80041aa <UART_SetConfig+0x27e>
 8004088:	2308      	movs	r3, #8
 800408a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800408e:	e08c      	b.n	80041aa <UART_SetConfig+0x27e>
 8004090:	2310      	movs	r3, #16
 8004092:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004096:	e088      	b.n	80041aa <UART_SetConfig+0x27e>
 8004098:	697b      	ldr	r3, [r7, #20]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	4a5f      	ldr	r2, [pc, #380]	@ (800421c <UART_SetConfig+0x2f0>)
 800409e:	4293      	cmp	r3, r2
 80040a0:	d125      	bne.n	80040ee <UART_SetConfig+0x1c2>
 80040a2:	4b5c      	ldr	r3, [pc, #368]	@ (8004214 <UART_SetConfig+0x2e8>)
 80040a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80040a8:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80040ac:	2b30      	cmp	r3, #48	@ 0x30
 80040ae:	d016      	beq.n	80040de <UART_SetConfig+0x1b2>
 80040b0:	2b30      	cmp	r3, #48	@ 0x30
 80040b2:	d818      	bhi.n	80040e6 <UART_SetConfig+0x1ba>
 80040b4:	2b20      	cmp	r3, #32
 80040b6:	d00a      	beq.n	80040ce <UART_SetConfig+0x1a2>
 80040b8:	2b20      	cmp	r3, #32
 80040ba:	d814      	bhi.n	80040e6 <UART_SetConfig+0x1ba>
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d002      	beq.n	80040c6 <UART_SetConfig+0x19a>
 80040c0:	2b10      	cmp	r3, #16
 80040c2:	d008      	beq.n	80040d6 <UART_SetConfig+0x1aa>
 80040c4:	e00f      	b.n	80040e6 <UART_SetConfig+0x1ba>
 80040c6:	2300      	movs	r3, #0
 80040c8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80040cc:	e06d      	b.n	80041aa <UART_SetConfig+0x27e>
 80040ce:	2302      	movs	r3, #2
 80040d0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80040d4:	e069      	b.n	80041aa <UART_SetConfig+0x27e>
 80040d6:	2304      	movs	r3, #4
 80040d8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80040dc:	e065      	b.n	80041aa <UART_SetConfig+0x27e>
 80040de:	2308      	movs	r3, #8
 80040e0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80040e4:	e061      	b.n	80041aa <UART_SetConfig+0x27e>
 80040e6:	2310      	movs	r3, #16
 80040e8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80040ec:	e05d      	b.n	80041aa <UART_SetConfig+0x27e>
 80040ee:	697b      	ldr	r3, [r7, #20]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	4a4b      	ldr	r2, [pc, #300]	@ (8004220 <UART_SetConfig+0x2f4>)
 80040f4:	4293      	cmp	r3, r2
 80040f6:	d125      	bne.n	8004144 <UART_SetConfig+0x218>
 80040f8:	4b46      	ldr	r3, [pc, #280]	@ (8004214 <UART_SetConfig+0x2e8>)
 80040fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80040fe:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8004102:	2bc0      	cmp	r3, #192	@ 0xc0
 8004104:	d016      	beq.n	8004134 <UART_SetConfig+0x208>
 8004106:	2bc0      	cmp	r3, #192	@ 0xc0
 8004108:	d818      	bhi.n	800413c <UART_SetConfig+0x210>
 800410a:	2b80      	cmp	r3, #128	@ 0x80
 800410c:	d00a      	beq.n	8004124 <UART_SetConfig+0x1f8>
 800410e:	2b80      	cmp	r3, #128	@ 0x80
 8004110:	d814      	bhi.n	800413c <UART_SetConfig+0x210>
 8004112:	2b00      	cmp	r3, #0
 8004114:	d002      	beq.n	800411c <UART_SetConfig+0x1f0>
 8004116:	2b40      	cmp	r3, #64	@ 0x40
 8004118:	d008      	beq.n	800412c <UART_SetConfig+0x200>
 800411a:	e00f      	b.n	800413c <UART_SetConfig+0x210>
 800411c:	2300      	movs	r3, #0
 800411e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004122:	e042      	b.n	80041aa <UART_SetConfig+0x27e>
 8004124:	2302      	movs	r3, #2
 8004126:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800412a:	e03e      	b.n	80041aa <UART_SetConfig+0x27e>
 800412c:	2304      	movs	r3, #4
 800412e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004132:	e03a      	b.n	80041aa <UART_SetConfig+0x27e>
 8004134:	2308      	movs	r3, #8
 8004136:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800413a:	e036      	b.n	80041aa <UART_SetConfig+0x27e>
 800413c:	2310      	movs	r3, #16
 800413e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004142:	e032      	b.n	80041aa <UART_SetConfig+0x27e>
 8004144:	697b      	ldr	r3, [r7, #20]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	4a30      	ldr	r2, [pc, #192]	@ (800420c <UART_SetConfig+0x2e0>)
 800414a:	4293      	cmp	r3, r2
 800414c:	d12a      	bne.n	80041a4 <UART_SetConfig+0x278>
 800414e:	4b31      	ldr	r3, [pc, #196]	@ (8004214 <UART_SetConfig+0x2e8>)
 8004150:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004154:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8004158:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800415c:	d01a      	beq.n	8004194 <UART_SetConfig+0x268>
 800415e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004162:	d81b      	bhi.n	800419c <UART_SetConfig+0x270>
 8004164:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004168:	d00c      	beq.n	8004184 <UART_SetConfig+0x258>
 800416a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800416e:	d815      	bhi.n	800419c <UART_SetConfig+0x270>
 8004170:	2b00      	cmp	r3, #0
 8004172:	d003      	beq.n	800417c <UART_SetConfig+0x250>
 8004174:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004178:	d008      	beq.n	800418c <UART_SetConfig+0x260>
 800417a:	e00f      	b.n	800419c <UART_SetConfig+0x270>
 800417c:	2300      	movs	r3, #0
 800417e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004182:	e012      	b.n	80041aa <UART_SetConfig+0x27e>
 8004184:	2302      	movs	r3, #2
 8004186:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800418a:	e00e      	b.n	80041aa <UART_SetConfig+0x27e>
 800418c:	2304      	movs	r3, #4
 800418e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004192:	e00a      	b.n	80041aa <UART_SetConfig+0x27e>
 8004194:	2308      	movs	r3, #8
 8004196:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800419a:	e006      	b.n	80041aa <UART_SetConfig+0x27e>
 800419c:	2310      	movs	r3, #16
 800419e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80041a2:	e002      	b.n	80041aa <UART_SetConfig+0x27e>
 80041a4:	2310      	movs	r3, #16
 80041a6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80041aa:	697b      	ldr	r3, [r7, #20]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	4a17      	ldr	r2, [pc, #92]	@ (800420c <UART_SetConfig+0x2e0>)
 80041b0:	4293      	cmp	r3, r2
 80041b2:	f040 80a8 	bne.w	8004306 <UART_SetConfig+0x3da>
 80041b6:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80041ba:	2b08      	cmp	r3, #8
 80041bc:	d834      	bhi.n	8004228 <UART_SetConfig+0x2fc>
 80041be:	a201      	add	r2, pc, #4	@ (adr r2, 80041c4 <UART_SetConfig+0x298>)
 80041c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041c4:	080041e9 	.word	0x080041e9
 80041c8:	08004229 	.word	0x08004229
 80041cc:	080041f1 	.word	0x080041f1
 80041d0:	08004229 	.word	0x08004229
 80041d4:	080041f7 	.word	0x080041f7
 80041d8:	08004229 	.word	0x08004229
 80041dc:	08004229 	.word	0x08004229
 80041e0:	08004229 	.word	0x08004229
 80041e4:	080041ff 	.word	0x080041ff
 80041e8:	f7fe ff32 	bl	8003050 <HAL_RCC_GetPCLK1Freq>
 80041ec:	6278      	str	r0, [r7, #36]	@ 0x24
 80041ee:	e021      	b.n	8004234 <UART_SetConfig+0x308>
 80041f0:	4b0c      	ldr	r3, [pc, #48]	@ (8004224 <UART_SetConfig+0x2f8>)
 80041f2:	627b      	str	r3, [r7, #36]	@ 0x24
 80041f4:	e01e      	b.n	8004234 <UART_SetConfig+0x308>
 80041f6:	f7fe febd 	bl	8002f74 <HAL_RCC_GetSysClockFreq>
 80041fa:	6278      	str	r0, [r7, #36]	@ 0x24
 80041fc:	e01a      	b.n	8004234 <UART_SetConfig+0x308>
 80041fe:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004202:	627b      	str	r3, [r7, #36]	@ 0x24
 8004204:	e016      	b.n	8004234 <UART_SetConfig+0x308>
 8004206:	bf00      	nop
 8004208:	cfff69f3 	.word	0xcfff69f3
 800420c:	40008000 	.word	0x40008000
 8004210:	40013800 	.word	0x40013800
 8004214:	40021000 	.word	0x40021000
 8004218:	40004400 	.word	0x40004400
 800421c:	40004800 	.word	0x40004800
 8004220:	40004c00 	.word	0x40004c00
 8004224:	00f42400 	.word	0x00f42400
 8004228:	2300      	movs	r3, #0
 800422a:	627b      	str	r3, [r7, #36]	@ 0x24
 800422c:	2301      	movs	r3, #1
 800422e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8004232:	bf00      	nop
 8004234:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004236:	2b00      	cmp	r3, #0
 8004238:	f000 812a 	beq.w	8004490 <UART_SetConfig+0x564>
 800423c:	697b      	ldr	r3, [r7, #20]
 800423e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004240:	4a9e      	ldr	r2, [pc, #632]	@ (80044bc <UART_SetConfig+0x590>)
 8004242:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004246:	461a      	mov	r2, r3
 8004248:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800424a:	fbb3 f3f2 	udiv	r3, r3, r2
 800424e:	61bb      	str	r3, [r7, #24]
 8004250:	697b      	ldr	r3, [r7, #20]
 8004252:	685a      	ldr	r2, [r3, #4]
 8004254:	4613      	mov	r3, r2
 8004256:	005b      	lsls	r3, r3, #1
 8004258:	4413      	add	r3, r2
 800425a:	69ba      	ldr	r2, [r7, #24]
 800425c:	429a      	cmp	r2, r3
 800425e:	d305      	bcc.n	800426c <UART_SetConfig+0x340>
 8004260:	697b      	ldr	r3, [r7, #20]
 8004262:	685b      	ldr	r3, [r3, #4]
 8004264:	031b      	lsls	r3, r3, #12
 8004266:	69ba      	ldr	r2, [r7, #24]
 8004268:	429a      	cmp	r2, r3
 800426a:	d903      	bls.n	8004274 <UART_SetConfig+0x348>
 800426c:	2301      	movs	r3, #1
 800426e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8004272:	e10d      	b.n	8004490 <UART_SetConfig+0x564>
 8004274:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004276:	2200      	movs	r2, #0
 8004278:	60bb      	str	r3, [r7, #8]
 800427a:	60fa      	str	r2, [r7, #12]
 800427c:	697b      	ldr	r3, [r7, #20]
 800427e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004280:	4a8e      	ldr	r2, [pc, #568]	@ (80044bc <UART_SetConfig+0x590>)
 8004282:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004286:	b29b      	uxth	r3, r3
 8004288:	2200      	movs	r2, #0
 800428a:	603b      	str	r3, [r7, #0]
 800428c:	607a      	str	r2, [r7, #4]
 800428e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004292:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004296:	f7fc f813 	bl	80002c0 <__aeabi_uldivmod>
 800429a:	4602      	mov	r2, r0
 800429c:	460b      	mov	r3, r1
 800429e:	4610      	mov	r0, r2
 80042a0:	4619      	mov	r1, r3
 80042a2:	f04f 0200 	mov.w	r2, #0
 80042a6:	f04f 0300 	mov.w	r3, #0
 80042aa:	020b      	lsls	r3, r1, #8
 80042ac:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80042b0:	0202      	lsls	r2, r0, #8
 80042b2:	6979      	ldr	r1, [r7, #20]
 80042b4:	6849      	ldr	r1, [r1, #4]
 80042b6:	0849      	lsrs	r1, r1, #1
 80042b8:	2000      	movs	r0, #0
 80042ba:	460c      	mov	r4, r1
 80042bc:	4605      	mov	r5, r0
 80042be:	eb12 0804 	adds.w	r8, r2, r4
 80042c2:	eb43 0905 	adc.w	r9, r3, r5
 80042c6:	697b      	ldr	r3, [r7, #20]
 80042c8:	685b      	ldr	r3, [r3, #4]
 80042ca:	2200      	movs	r2, #0
 80042cc:	469a      	mov	sl, r3
 80042ce:	4693      	mov	fp, r2
 80042d0:	4652      	mov	r2, sl
 80042d2:	465b      	mov	r3, fp
 80042d4:	4640      	mov	r0, r8
 80042d6:	4649      	mov	r1, r9
 80042d8:	f7fb fff2 	bl	80002c0 <__aeabi_uldivmod>
 80042dc:	4602      	mov	r2, r0
 80042de:	460b      	mov	r3, r1
 80042e0:	4613      	mov	r3, r2
 80042e2:	623b      	str	r3, [r7, #32]
 80042e4:	6a3b      	ldr	r3, [r7, #32]
 80042e6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80042ea:	d308      	bcc.n	80042fe <UART_SetConfig+0x3d2>
 80042ec:	6a3b      	ldr	r3, [r7, #32]
 80042ee:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80042f2:	d204      	bcs.n	80042fe <UART_SetConfig+0x3d2>
 80042f4:	697b      	ldr	r3, [r7, #20]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	6a3a      	ldr	r2, [r7, #32]
 80042fa:	60da      	str	r2, [r3, #12]
 80042fc:	e0c8      	b.n	8004490 <UART_SetConfig+0x564>
 80042fe:	2301      	movs	r3, #1
 8004300:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8004304:	e0c4      	b.n	8004490 <UART_SetConfig+0x564>
 8004306:	697b      	ldr	r3, [r7, #20]
 8004308:	69db      	ldr	r3, [r3, #28]
 800430a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800430e:	d167      	bne.n	80043e0 <UART_SetConfig+0x4b4>
 8004310:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8004314:	2b08      	cmp	r3, #8
 8004316:	d828      	bhi.n	800436a <UART_SetConfig+0x43e>
 8004318:	a201      	add	r2, pc, #4	@ (adr r2, 8004320 <UART_SetConfig+0x3f4>)
 800431a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800431e:	bf00      	nop
 8004320:	08004345 	.word	0x08004345
 8004324:	0800434d 	.word	0x0800434d
 8004328:	08004355 	.word	0x08004355
 800432c:	0800436b 	.word	0x0800436b
 8004330:	0800435b 	.word	0x0800435b
 8004334:	0800436b 	.word	0x0800436b
 8004338:	0800436b 	.word	0x0800436b
 800433c:	0800436b 	.word	0x0800436b
 8004340:	08004363 	.word	0x08004363
 8004344:	f7fe fe84 	bl	8003050 <HAL_RCC_GetPCLK1Freq>
 8004348:	6278      	str	r0, [r7, #36]	@ 0x24
 800434a:	e014      	b.n	8004376 <UART_SetConfig+0x44a>
 800434c:	f7fe fe96 	bl	800307c <HAL_RCC_GetPCLK2Freq>
 8004350:	6278      	str	r0, [r7, #36]	@ 0x24
 8004352:	e010      	b.n	8004376 <UART_SetConfig+0x44a>
 8004354:	4b5a      	ldr	r3, [pc, #360]	@ (80044c0 <UART_SetConfig+0x594>)
 8004356:	627b      	str	r3, [r7, #36]	@ 0x24
 8004358:	e00d      	b.n	8004376 <UART_SetConfig+0x44a>
 800435a:	f7fe fe0b 	bl	8002f74 <HAL_RCC_GetSysClockFreq>
 800435e:	6278      	str	r0, [r7, #36]	@ 0x24
 8004360:	e009      	b.n	8004376 <UART_SetConfig+0x44a>
 8004362:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004366:	627b      	str	r3, [r7, #36]	@ 0x24
 8004368:	e005      	b.n	8004376 <UART_SetConfig+0x44a>
 800436a:	2300      	movs	r3, #0
 800436c:	627b      	str	r3, [r7, #36]	@ 0x24
 800436e:	2301      	movs	r3, #1
 8004370:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8004374:	bf00      	nop
 8004376:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004378:	2b00      	cmp	r3, #0
 800437a:	f000 8089 	beq.w	8004490 <UART_SetConfig+0x564>
 800437e:	697b      	ldr	r3, [r7, #20]
 8004380:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004382:	4a4e      	ldr	r2, [pc, #312]	@ (80044bc <UART_SetConfig+0x590>)
 8004384:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004388:	461a      	mov	r2, r3
 800438a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800438c:	fbb3 f3f2 	udiv	r3, r3, r2
 8004390:	005a      	lsls	r2, r3, #1
 8004392:	697b      	ldr	r3, [r7, #20]
 8004394:	685b      	ldr	r3, [r3, #4]
 8004396:	085b      	lsrs	r3, r3, #1
 8004398:	441a      	add	r2, r3
 800439a:	697b      	ldr	r3, [r7, #20]
 800439c:	685b      	ldr	r3, [r3, #4]
 800439e:	fbb2 f3f3 	udiv	r3, r2, r3
 80043a2:	623b      	str	r3, [r7, #32]
 80043a4:	6a3b      	ldr	r3, [r7, #32]
 80043a6:	2b0f      	cmp	r3, #15
 80043a8:	d916      	bls.n	80043d8 <UART_SetConfig+0x4ac>
 80043aa:	6a3b      	ldr	r3, [r7, #32]
 80043ac:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80043b0:	d212      	bcs.n	80043d8 <UART_SetConfig+0x4ac>
 80043b2:	6a3b      	ldr	r3, [r7, #32]
 80043b4:	b29b      	uxth	r3, r3
 80043b6:	f023 030f 	bic.w	r3, r3, #15
 80043ba:	83fb      	strh	r3, [r7, #30]
 80043bc:	6a3b      	ldr	r3, [r7, #32]
 80043be:	085b      	lsrs	r3, r3, #1
 80043c0:	b29b      	uxth	r3, r3
 80043c2:	f003 0307 	and.w	r3, r3, #7
 80043c6:	b29a      	uxth	r2, r3
 80043c8:	8bfb      	ldrh	r3, [r7, #30]
 80043ca:	4313      	orrs	r3, r2
 80043cc:	83fb      	strh	r3, [r7, #30]
 80043ce:	697b      	ldr	r3, [r7, #20]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	8bfa      	ldrh	r2, [r7, #30]
 80043d4:	60da      	str	r2, [r3, #12]
 80043d6:	e05b      	b.n	8004490 <UART_SetConfig+0x564>
 80043d8:	2301      	movs	r3, #1
 80043da:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80043de:	e057      	b.n	8004490 <UART_SetConfig+0x564>
 80043e0:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80043e4:	2b08      	cmp	r3, #8
 80043e6:	d828      	bhi.n	800443a <UART_SetConfig+0x50e>
 80043e8:	a201      	add	r2, pc, #4	@ (adr r2, 80043f0 <UART_SetConfig+0x4c4>)
 80043ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80043ee:	bf00      	nop
 80043f0:	08004415 	.word	0x08004415
 80043f4:	0800441d 	.word	0x0800441d
 80043f8:	08004425 	.word	0x08004425
 80043fc:	0800443b 	.word	0x0800443b
 8004400:	0800442b 	.word	0x0800442b
 8004404:	0800443b 	.word	0x0800443b
 8004408:	0800443b 	.word	0x0800443b
 800440c:	0800443b 	.word	0x0800443b
 8004410:	08004433 	.word	0x08004433
 8004414:	f7fe fe1c 	bl	8003050 <HAL_RCC_GetPCLK1Freq>
 8004418:	6278      	str	r0, [r7, #36]	@ 0x24
 800441a:	e014      	b.n	8004446 <UART_SetConfig+0x51a>
 800441c:	f7fe fe2e 	bl	800307c <HAL_RCC_GetPCLK2Freq>
 8004420:	6278      	str	r0, [r7, #36]	@ 0x24
 8004422:	e010      	b.n	8004446 <UART_SetConfig+0x51a>
 8004424:	4b26      	ldr	r3, [pc, #152]	@ (80044c0 <UART_SetConfig+0x594>)
 8004426:	627b      	str	r3, [r7, #36]	@ 0x24
 8004428:	e00d      	b.n	8004446 <UART_SetConfig+0x51a>
 800442a:	f7fe fda3 	bl	8002f74 <HAL_RCC_GetSysClockFreq>
 800442e:	6278      	str	r0, [r7, #36]	@ 0x24
 8004430:	e009      	b.n	8004446 <UART_SetConfig+0x51a>
 8004432:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004436:	627b      	str	r3, [r7, #36]	@ 0x24
 8004438:	e005      	b.n	8004446 <UART_SetConfig+0x51a>
 800443a:	2300      	movs	r3, #0
 800443c:	627b      	str	r3, [r7, #36]	@ 0x24
 800443e:	2301      	movs	r3, #1
 8004440:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8004444:	bf00      	nop
 8004446:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004448:	2b00      	cmp	r3, #0
 800444a:	d021      	beq.n	8004490 <UART_SetConfig+0x564>
 800444c:	697b      	ldr	r3, [r7, #20]
 800444e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004450:	4a1a      	ldr	r2, [pc, #104]	@ (80044bc <UART_SetConfig+0x590>)
 8004452:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004456:	461a      	mov	r2, r3
 8004458:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800445a:	fbb3 f2f2 	udiv	r2, r3, r2
 800445e:	697b      	ldr	r3, [r7, #20]
 8004460:	685b      	ldr	r3, [r3, #4]
 8004462:	085b      	lsrs	r3, r3, #1
 8004464:	441a      	add	r2, r3
 8004466:	697b      	ldr	r3, [r7, #20]
 8004468:	685b      	ldr	r3, [r3, #4]
 800446a:	fbb2 f3f3 	udiv	r3, r2, r3
 800446e:	623b      	str	r3, [r7, #32]
 8004470:	6a3b      	ldr	r3, [r7, #32]
 8004472:	2b0f      	cmp	r3, #15
 8004474:	d909      	bls.n	800448a <UART_SetConfig+0x55e>
 8004476:	6a3b      	ldr	r3, [r7, #32]
 8004478:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800447c:	d205      	bcs.n	800448a <UART_SetConfig+0x55e>
 800447e:	6a3b      	ldr	r3, [r7, #32]
 8004480:	b29a      	uxth	r2, r3
 8004482:	697b      	ldr	r3, [r7, #20]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	60da      	str	r2, [r3, #12]
 8004488:	e002      	b.n	8004490 <UART_SetConfig+0x564>
 800448a:	2301      	movs	r3, #1
 800448c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8004490:	697b      	ldr	r3, [r7, #20]
 8004492:	2201      	movs	r2, #1
 8004494:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8004498:	697b      	ldr	r3, [r7, #20]
 800449a:	2201      	movs	r2, #1
 800449c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
 80044a0:	697b      	ldr	r3, [r7, #20]
 80044a2:	2200      	movs	r2, #0
 80044a4:	675a      	str	r2, [r3, #116]	@ 0x74
 80044a6:	697b      	ldr	r3, [r7, #20]
 80044a8:	2200      	movs	r2, #0
 80044aa:	679a      	str	r2, [r3, #120]	@ 0x78
 80044ac:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 80044b0:	4618      	mov	r0, r3
 80044b2:	3730      	adds	r7, #48	@ 0x30
 80044b4:	46bd      	mov	sp, r7
 80044b6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80044ba:	bf00      	nop
 80044bc:	08005d94 	.word	0x08005d94
 80044c0:	00f42400 	.word	0x00f42400

080044c4 <UART_AdvFeatureConfig>:
 80044c4:	b480      	push	{r7}
 80044c6:	b083      	sub	sp, #12
 80044c8:	af00      	add	r7, sp, #0
 80044ca:	6078      	str	r0, [r7, #4]
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80044d0:	f003 0308 	and.w	r3, r3, #8
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d00a      	beq.n	80044ee <UART_AdvFeatureConfig+0x2a>
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	685b      	ldr	r3, [r3, #4]
 80044de:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	430a      	orrs	r2, r1
 80044ec:	605a      	str	r2, [r3, #4]
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80044f2:	f003 0301 	and.w	r3, r3, #1
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d00a      	beq.n	8004510 <UART_AdvFeatureConfig+0x4c>
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	685b      	ldr	r3, [r3, #4]
 8004500:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	430a      	orrs	r2, r1
 800450e:	605a      	str	r2, [r3, #4]
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004514:	f003 0302 	and.w	r3, r3, #2
 8004518:	2b00      	cmp	r3, #0
 800451a:	d00a      	beq.n	8004532 <UART_AdvFeatureConfig+0x6e>
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	685b      	ldr	r3, [r3, #4]
 8004522:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	430a      	orrs	r2, r1
 8004530:	605a      	str	r2, [r3, #4]
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004536:	f003 0304 	and.w	r3, r3, #4
 800453a:	2b00      	cmp	r3, #0
 800453c:	d00a      	beq.n	8004554 <UART_AdvFeatureConfig+0x90>
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	685b      	ldr	r3, [r3, #4]
 8004544:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	430a      	orrs	r2, r1
 8004552:	605a      	str	r2, [r3, #4]
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004558:	f003 0310 	and.w	r3, r3, #16
 800455c:	2b00      	cmp	r3, #0
 800455e:	d00a      	beq.n	8004576 <UART_AdvFeatureConfig+0xb2>
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	689b      	ldr	r3, [r3, #8]
 8004566:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	430a      	orrs	r2, r1
 8004574:	609a      	str	r2, [r3, #8]
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800457a:	f003 0320 	and.w	r3, r3, #32
 800457e:	2b00      	cmp	r3, #0
 8004580:	d00a      	beq.n	8004598 <UART_AdvFeatureConfig+0xd4>
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	689b      	ldr	r3, [r3, #8]
 8004588:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	430a      	orrs	r2, r1
 8004596:	609a      	str	r2, [r3, #8]
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800459c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d01a      	beq.n	80045da <UART_AdvFeatureConfig+0x116>
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	685b      	ldr	r3, [r3, #4]
 80045aa:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	430a      	orrs	r2, r1
 80045b8:	605a      	str	r2, [r3, #4]
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80045be:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80045c2:	d10a      	bne.n	80045da <UART_AdvFeatureConfig+0x116>
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	685b      	ldr	r3, [r3, #4]
 80045ca:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	430a      	orrs	r2, r1
 80045d8:	605a      	str	r2, [r3, #4]
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80045de:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d00a      	beq.n	80045fc <UART_AdvFeatureConfig+0x138>
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	685b      	ldr	r3, [r3, #4]
 80045ec:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	430a      	orrs	r2, r1
 80045fa:	605a      	str	r2, [r3, #4]
 80045fc:	bf00      	nop
 80045fe:	370c      	adds	r7, #12
 8004600:	46bd      	mov	sp, r7
 8004602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004606:	4770      	bx	lr

08004608 <UART_CheckIdleState>:
 8004608:	b580      	push	{r7, lr}
 800460a:	b098      	sub	sp, #96	@ 0x60
 800460c:	af02      	add	r7, sp, #8
 800460e:	6078      	str	r0, [r7, #4]
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	2200      	movs	r2, #0
 8004614:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
 8004618:	f7fd fd16 	bl	8002048 <HAL_GetTick>
 800461c:	6578      	str	r0, [r7, #84]	@ 0x54
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	f003 0308 	and.w	r3, r3, #8
 8004628:	2b08      	cmp	r3, #8
 800462a:	d12f      	bne.n	800468c <UART_CheckIdleState+0x84>
 800462c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004630:	9300      	str	r3, [sp, #0]
 8004632:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004634:	2200      	movs	r2, #0
 8004636:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800463a:	6878      	ldr	r0, [r7, #4]
 800463c:	f000 f88e 	bl	800475c <UART_WaitOnFlagUntilTimeout>
 8004640:	4603      	mov	r3, r0
 8004642:	2b00      	cmp	r3, #0
 8004644:	d022      	beq.n	800468c <UART_CheckIdleState+0x84>
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800464c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800464e:	e853 3f00 	ldrex	r3, [r3]
 8004652:	637b      	str	r3, [r7, #52]	@ 0x34
 8004654:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004656:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800465a:	653b      	str	r3, [r7, #80]	@ 0x50
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	461a      	mov	r2, r3
 8004662:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004664:	647b      	str	r3, [r7, #68]	@ 0x44
 8004666:	643a      	str	r2, [r7, #64]	@ 0x40
 8004668:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800466a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800466c:	e841 2300 	strex	r3, r2, [r1]
 8004670:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004672:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004674:	2b00      	cmp	r3, #0
 8004676:	d1e6      	bne.n	8004646 <UART_CheckIdleState+0x3e>
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	2220      	movs	r2, #32
 800467c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	2200      	movs	r2, #0
 8004684:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84
 8004688:	2303      	movs	r3, #3
 800468a:	e063      	b.n	8004754 <UART_CheckIdleState+0x14c>
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	f003 0304 	and.w	r3, r3, #4
 8004696:	2b04      	cmp	r3, #4
 8004698:	d149      	bne.n	800472e <UART_CheckIdleState+0x126>
 800469a:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800469e:	9300      	str	r3, [sp, #0]
 80046a0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80046a2:	2200      	movs	r2, #0
 80046a4:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80046a8:	6878      	ldr	r0, [r7, #4]
 80046aa:	f000 f857 	bl	800475c <UART_WaitOnFlagUntilTimeout>
 80046ae:	4603      	mov	r3, r0
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d03c      	beq.n	800472e <UART_CheckIdleState+0x126>
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	627b      	str	r3, [r7, #36]	@ 0x24
 80046ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046bc:	e853 3f00 	ldrex	r3, [r3]
 80046c0:	623b      	str	r3, [r7, #32]
 80046c2:	6a3b      	ldr	r3, [r7, #32]
 80046c4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80046c8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	461a      	mov	r2, r3
 80046d0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80046d2:	633b      	str	r3, [r7, #48]	@ 0x30
 80046d4:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80046d6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80046d8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80046da:	e841 2300 	strex	r3, r2, [r1]
 80046de:	62bb      	str	r3, [r7, #40]	@ 0x28
 80046e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d1e6      	bne.n	80046b4 <UART_CheckIdleState+0xac>
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	3308      	adds	r3, #8
 80046ec:	613b      	str	r3, [r7, #16]
 80046ee:	693b      	ldr	r3, [r7, #16]
 80046f0:	e853 3f00 	ldrex	r3, [r3]
 80046f4:	60fb      	str	r3, [r7, #12]
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	f023 0301 	bic.w	r3, r3, #1
 80046fc:	64bb      	str	r3, [r7, #72]	@ 0x48
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	3308      	adds	r3, #8
 8004704:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004706:	61fa      	str	r2, [r7, #28]
 8004708:	61bb      	str	r3, [r7, #24]
 800470a:	69b9      	ldr	r1, [r7, #24]
 800470c:	69fa      	ldr	r2, [r7, #28]
 800470e:	e841 2300 	strex	r3, r2, [r1]
 8004712:	617b      	str	r3, [r7, #20]
 8004714:	697b      	ldr	r3, [r7, #20]
 8004716:	2b00      	cmp	r3, #0
 8004718:	d1e5      	bne.n	80046e6 <UART_CheckIdleState+0xde>
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	2220      	movs	r2, #32
 800471e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	2200      	movs	r2, #0
 8004726:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84
 800472a:	2303      	movs	r3, #3
 800472c:	e012      	b.n	8004754 <UART_CheckIdleState+0x14c>
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	2220      	movs	r2, #32
 8004732:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	2220      	movs	r2, #32
 800473a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	2200      	movs	r2, #0
 8004742:	66da      	str	r2, [r3, #108]	@ 0x6c
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	2200      	movs	r2, #0
 8004748:	671a      	str	r2, [r3, #112]	@ 0x70
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	2200      	movs	r2, #0
 800474e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84
 8004752:	2300      	movs	r3, #0
 8004754:	4618      	mov	r0, r3
 8004756:	3758      	adds	r7, #88	@ 0x58
 8004758:	46bd      	mov	sp, r7
 800475a:	bd80      	pop	{r7, pc}

0800475c <UART_WaitOnFlagUntilTimeout>:
 800475c:	b580      	push	{r7, lr}
 800475e:	b084      	sub	sp, #16
 8004760:	af00      	add	r7, sp, #0
 8004762:	60f8      	str	r0, [r7, #12]
 8004764:	60b9      	str	r1, [r7, #8]
 8004766:	603b      	str	r3, [r7, #0]
 8004768:	4613      	mov	r3, r2
 800476a:	71fb      	strb	r3, [r7, #7]
 800476c:	e04f      	b.n	800480e <UART_WaitOnFlagUntilTimeout+0xb2>
 800476e:	69bb      	ldr	r3, [r7, #24]
 8004770:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004774:	d04b      	beq.n	800480e <UART_WaitOnFlagUntilTimeout+0xb2>
 8004776:	f7fd fc67 	bl	8002048 <HAL_GetTick>
 800477a:	4602      	mov	r2, r0
 800477c:	683b      	ldr	r3, [r7, #0]
 800477e:	1ad3      	subs	r3, r2, r3
 8004780:	69ba      	ldr	r2, [r7, #24]
 8004782:	429a      	cmp	r2, r3
 8004784:	d302      	bcc.n	800478c <UART_WaitOnFlagUntilTimeout+0x30>
 8004786:	69bb      	ldr	r3, [r7, #24]
 8004788:	2b00      	cmp	r3, #0
 800478a:	d101      	bne.n	8004790 <UART_WaitOnFlagUntilTimeout+0x34>
 800478c:	2303      	movs	r3, #3
 800478e:	e04e      	b.n	800482e <UART_WaitOnFlagUntilTimeout+0xd2>
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	f003 0304 	and.w	r3, r3, #4
 800479a:	2b00      	cmp	r3, #0
 800479c:	d037      	beq.n	800480e <UART_WaitOnFlagUntilTimeout+0xb2>
 800479e:	68bb      	ldr	r3, [r7, #8]
 80047a0:	2b80      	cmp	r3, #128	@ 0x80
 80047a2:	d034      	beq.n	800480e <UART_WaitOnFlagUntilTimeout+0xb2>
 80047a4:	68bb      	ldr	r3, [r7, #8]
 80047a6:	2b40      	cmp	r3, #64	@ 0x40
 80047a8:	d031      	beq.n	800480e <UART_WaitOnFlagUntilTimeout+0xb2>
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	69db      	ldr	r3, [r3, #28]
 80047b0:	f003 0308 	and.w	r3, r3, #8
 80047b4:	2b08      	cmp	r3, #8
 80047b6:	d110      	bne.n	80047da <UART_WaitOnFlagUntilTimeout+0x7e>
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	2208      	movs	r2, #8
 80047be:	621a      	str	r2, [r3, #32]
 80047c0:	68f8      	ldr	r0, [r7, #12]
 80047c2:	f000 f838 	bl	8004836 <UART_EndRxTransfer>
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	2208      	movs	r2, #8
 80047ca:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	2200      	movs	r2, #0
 80047d2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84
 80047d6:	2301      	movs	r3, #1
 80047d8:	e029      	b.n	800482e <UART_WaitOnFlagUntilTimeout+0xd2>
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	69db      	ldr	r3, [r3, #28]
 80047e0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80047e4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80047e8:	d111      	bne.n	800480e <UART_WaitOnFlagUntilTimeout+0xb2>
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80047f2:	621a      	str	r2, [r3, #32]
 80047f4:	68f8      	ldr	r0, [r7, #12]
 80047f6:	f000 f81e 	bl	8004836 <UART_EndRxTransfer>
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	2220      	movs	r2, #32
 80047fe:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	2200      	movs	r2, #0
 8004806:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84
 800480a:	2303      	movs	r3, #3
 800480c:	e00f      	b.n	800482e <UART_WaitOnFlagUntilTimeout+0xd2>
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	69da      	ldr	r2, [r3, #28]
 8004814:	68bb      	ldr	r3, [r7, #8]
 8004816:	4013      	ands	r3, r2
 8004818:	68ba      	ldr	r2, [r7, #8]
 800481a:	429a      	cmp	r2, r3
 800481c:	bf0c      	ite	eq
 800481e:	2301      	moveq	r3, #1
 8004820:	2300      	movne	r3, #0
 8004822:	b2db      	uxtb	r3, r3
 8004824:	461a      	mov	r2, r3
 8004826:	79fb      	ldrb	r3, [r7, #7]
 8004828:	429a      	cmp	r2, r3
 800482a:	d0a0      	beq.n	800476e <UART_WaitOnFlagUntilTimeout+0x12>
 800482c:	2300      	movs	r3, #0
 800482e:	4618      	mov	r0, r3
 8004830:	3710      	adds	r7, #16
 8004832:	46bd      	mov	sp, r7
 8004834:	bd80      	pop	{r7, pc}

08004836 <UART_EndRxTransfer>:
 8004836:	b480      	push	{r7}
 8004838:	b095      	sub	sp, #84	@ 0x54
 800483a:	af00      	add	r7, sp, #0
 800483c:	6078      	str	r0, [r7, #4]
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	637b      	str	r3, [r7, #52]	@ 0x34
 8004844:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004846:	e853 3f00 	ldrex	r3, [r3]
 800484a:	633b      	str	r3, [r7, #48]	@ 0x30
 800484c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800484e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004852:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	461a      	mov	r2, r3
 800485a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800485c:	643b      	str	r3, [r7, #64]	@ 0x40
 800485e:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8004860:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004862:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004864:	e841 2300 	strex	r3, r2, [r1]
 8004868:	63bb      	str	r3, [r7, #56]	@ 0x38
 800486a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800486c:	2b00      	cmp	r3, #0
 800486e:	d1e6      	bne.n	800483e <UART_EndRxTransfer+0x8>
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	3308      	adds	r3, #8
 8004876:	623b      	str	r3, [r7, #32]
 8004878:	6a3b      	ldr	r3, [r7, #32]
 800487a:	e853 3f00 	ldrex	r3, [r3]
 800487e:	61fb      	str	r3, [r7, #28]
 8004880:	69fb      	ldr	r3, [r7, #28]
 8004882:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004886:	f023 0301 	bic.w	r3, r3, #1
 800488a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	3308      	adds	r3, #8
 8004892:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004894:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004896:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004898:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800489a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800489c:	e841 2300 	strex	r3, r2, [r1]
 80048a0:	627b      	str	r3, [r7, #36]	@ 0x24
 80048a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d1e3      	bne.n	8004870 <UART_EndRxTransfer+0x3a>
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80048ac:	2b01      	cmp	r3, #1
 80048ae:	d118      	bne.n	80048e2 <UART_EndRxTransfer+0xac>
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	60fb      	str	r3, [r7, #12]
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	e853 3f00 	ldrex	r3, [r3]
 80048bc:	60bb      	str	r3, [r7, #8]
 80048be:	68bb      	ldr	r3, [r7, #8]
 80048c0:	f023 0310 	bic.w	r3, r3, #16
 80048c4:	647b      	str	r3, [r7, #68]	@ 0x44
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	461a      	mov	r2, r3
 80048cc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80048ce:	61bb      	str	r3, [r7, #24]
 80048d0:	617a      	str	r2, [r7, #20]
 80048d2:	6979      	ldr	r1, [r7, #20]
 80048d4:	69ba      	ldr	r2, [r7, #24]
 80048d6:	e841 2300 	strex	r3, r2, [r1]
 80048da:	613b      	str	r3, [r7, #16]
 80048dc:	693b      	ldr	r3, [r7, #16]
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d1e6      	bne.n	80048b0 <UART_EndRxTransfer+0x7a>
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	2220      	movs	r2, #32
 80048e6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	2200      	movs	r2, #0
 80048ee:	66da      	str	r2, [r3, #108]	@ 0x6c
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	2200      	movs	r2, #0
 80048f4:	675a      	str	r2, [r3, #116]	@ 0x74
 80048f6:	bf00      	nop
 80048f8:	3754      	adds	r7, #84	@ 0x54
 80048fa:	46bd      	mov	sp, r7
 80048fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004900:	4770      	bx	lr

08004902 <_vsniprintf_r>:
 8004902:	b530      	push	{r4, r5, lr}
 8004904:	4614      	mov	r4, r2
 8004906:	2c00      	cmp	r4, #0
 8004908:	b09b      	sub	sp, #108	@ 0x6c
 800490a:	4605      	mov	r5, r0
 800490c:	461a      	mov	r2, r3
 800490e:	da05      	bge.n	800491c <_vsniprintf_r+0x1a>
 8004910:	238b      	movs	r3, #139	@ 0x8b
 8004912:	6003      	str	r3, [r0, #0]
 8004914:	f04f 30ff 	mov.w	r0, #4294967295
 8004918:	b01b      	add	sp, #108	@ 0x6c
 800491a:	bd30      	pop	{r4, r5, pc}
 800491c:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8004920:	f8ad 300c 	strh.w	r3, [sp, #12]
 8004924:	f04f 0300 	mov.w	r3, #0
 8004928:	9319      	str	r3, [sp, #100]	@ 0x64
 800492a:	bf14      	ite	ne
 800492c:	f104 33ff 	addne.w	r3, r4, #4294967295
 8004930:	4623      	moveq	r3, r4
 8004932:	9302      	str	r3, [sp, #8]
 8004934:	9305      	str	r3, [sp, #20]
 8004936:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800493a:	9100      	str	r1, [sp, #0]
 800493c:	9104      	str	r1, [sp, #16]
 800493e:	f8ad 300e 	strh.w	r3, [sp, #14]
 8004942:	4669      	mov	r1, sp
 8004944:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 8004946:	f000 f9a1 	bl	8004c8c <_svfiprintf_r>
 800494a:	1c43      	adds	r3, r0, #1
 800494c:	bfbc      	itt	lt
 800494e:	238b      	movlt	r3, #139	@ 0x8b
 8004950:	602b      	strlt	r3, [r5, #0]
 8004952:	2c00      	cmp	r4, #0
 8004954:	d0e0      	beq.n	8004918 <_vsniprintf_r+0x16>
 8004956:	9b00      	ldr	r3, [sp, #0]
 8004958:	2200      	movs	r2, #0
 800495a:	701a      	strb	r2, [r3, #0]
 800495c:	e7dc      	b.n	8004918 <_vsniprintf_r+0x16>
	...

08004960 <vsniprintf>:
 8004960:	b507      	push	{r0, r1, r2, lr}
 8004962:	9300      	str	r3, [sp, #0]
 8004964:	4613      	mov	r3, r2
 8004966:	460a      	mov	r2, r1
 8004968:	4601      	mov	r1, r0
 800496a:	4803      	ldr	r0, [pc, #12]	@ (8004978 <vsniprintf+0x18>)
 800496c:	6800      	ldr	r0, [r0, #0]
 800496e:	f7ff ffc8 	bl	8004902 <_vsniprintf_r>
 8004972:	b003      	add	sp, #12
 8004974:	f85d fb04 	ldr.w	pc, [sp], #4
 8004978:	2000000c 	.word	0x2000000c

0800497c <memset>:
 800497c:	4402      	add	r2, r0
 800497e:	4603      	mov	r3, r0
 8004980:	4293      	cmp	r3, r2
 8004982:	d100      	bne.n	8004986 <memset+0xa>
 8004984:	4770      	bx	lr
 8004986:	f803 1b01 	strb.w	r1, [r3], #1
 800498a:	e7f9      	b.n	8004980 <memset+0x4>

0800498c <__errno>:
 800498c:	4b01      	ldr	r3, [pc, #4]	@ (8004994 <__errno+0x8>)
 800498e:	6818      	ldr	r0, [r3, #0]
 8004990:	4770      	bx	lr
 8004992:	bf00      	nop
 8004994:	2000000c 	.word	0x2000000c

08004998 <__libc_init_array>:
 8004998:	b570      	push	{r4, r5, r6, lr}
 800499a:	4d0d      	ldr	r5, [pc, #52]	@ (80049d0 <__libc_init_array+0x38>)
 800499c:	4c0d      	ldr	r4, [pc, #52]	@ (80049d4 <__libc_init_array+0x3c>)
 800499e:	1b64      	subs	r4, r4, r5
 80049a0:	10a4      	asrs	r4, r4, #2
 80049a2:	2600      	movs	r6, #0
 80049a4:	42a6      	cmp	r6, r4
 80049a6:	d109      	bne.n	80049bc <__libc_init_array+0x24>
 80049a8:	4d0b      	ldr	r5, [pc, #44]	@ (80049d8 <__libc_init_array+0x40>)
 80049aa:	4c0c      	ldr	r4, [pc, #48]	@ (80049dc <__libc_init_array+0x44>)
 80049ac:	f000 fc64 	bl	8005278 <_init>
 80049b0:	1b64      	subs	r4, r4, r5
 80049b2:	10a4      	asrs	r4, r4, #2
 80049b4:	2600      	movs	r6, #0
 80049b6:	42a6      	cmp	r6, r4
 80049b8:	d105      	bne.n	80049c6 <__libc_init_array+0x2e>
 80049ba:	bd70      	pop	{r4, r5, r6, pc}
 80049bc:	f855 3b04 	ldr.w	r3, [r5], #4
 80049c0:	4798      	blx	r3
 80049c2:	3601      	adds	r6, #1
 80049c4:	e7ee      	b.n	80049a4 <__libc_init_array+0xc>
 80049c6:	f855 3b04 	ldr.w	r3, [r5], #4
 80049ca:	4798      	blx	r3
 80049cc:	3601      	adds	r6, #1
 80049ce:	e7f2      	b.n	80049b6 <__libc_init_array+0x1e>
 80049d0:	08005de8 	.word	0x08005de8
 80049d4:	08005de8 	.word	0x08005de8
 80049d8:	08005de8 	.word	0x08005de8
 80049dc:	08005dec 	.word	0x08005dec

080049e0 <__retarget_lock_acquire_recursive>:
 80049e0:	4770      	bx	lr

080049e2 <__retarget_lock_release_recursive>:
 80049e2:	4770      	bx	lr

080049e4 <_free_r>:
 80049e4:	b538      	push	{r3, r4, r5, lr}
 80049e6:	4605      	mov	r5, r0
 80049e8:	2900      	cmp	r1, #0
 80049ea:	d041      	beq.n	8004a70 <_free_r+0x8c>
 80049ec:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80049f0:	1f0c      	subs	r4, r1, #4
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	bfb8      	it	lt
 80049f6:	18e4      	addlt	r4, r4, r3
 80049f8:	f000 f8e0 	bl	8004bbc <__malloc_lock>
 80049fc:	4a1d      	ldr	r2, [pc, #116]	@ (8004a74 <_free_r+0x90>)
 80049fe:	6813      	ldr	r3, [r2, #0]
 8004a00:	b933      	cbnz	r3, 8004a10 <_free_r+0x2c>
 8004a02:	6063      	str	r3, [r4, #4]
 8004a04:	6014      	str	r4, [r2, #0]
 8004a06:	4628      	mov	r0, r5
 8004a08:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004a0c:	f000 b8dc 	b.w	8004bc8 <__malloc_unlock>
 8004a10:	42a3      	cmp	r3, r4
 8004a12:	d908      	bls.n	8004a26 <_free_r+0x42>
 8004a14:	6820      	ldr	r0, [r4, #0]
 8004a16:	1821      	adds	r1, r4, r0
 8004a18:	428b      	cmp	r3, r1
 8004a1a:	bf01      	itttt	eq
 8004a1c:	6819      	ldreq	r1, [r3, #0]
 8004a1e:	685b      	ldreq	r3, [r3, #4]
 8004a20:	1809      	addeq	r1, r1, r0
 8004a22:	6021      	streq	r1, [r4, #0]
 8004a24:	e7ed      	b.n	8004a02 <_free_r+0x1e>
 8004a26:	461a      	mov	r2, r3
 8004a28:	685b      	ldr	r3, [r3, #4]
 8004a2a:	b10b      	cbz	r3, 8004a30 <_free_r+0x4c>
 8004a2c:	42a3      	cmp	r3, r4
 8004a2e:	d9fa      	bls.n	8004a26 <_free_r+0x42>
 8004a30:	6811      	ldr	r1, [r2, #0]
 8004a32:	1850      	adds	r0, r2, r1
 8004a34:	42a0      	cmp	r0, r4
 8004a36:	d10b      	bne.n	8004a50 <_free_r+0x6c>
 8004a38:	6820      	ldr	r0, [r4, #0]
 8004a3a:	4401      	add	r1, r0
 8004a3c:	1850      	adds	r0, r2, r1
 8004a3e:	4283      	cmp	r3, r0
 8004a40:	6011      	str	r1, [r2, #0]
 8004a42:	d1e0      	bne.n	8004a06 <_free_r+0x22>
 8004a44:	6818      	ldr	r0, [r3, #0]
 8004a46:	685b      	ldr	r3, [r3, #4]
 8004a48:	6053      	str	r3, [r2, #4]
 8004a4a:	4408      	add	r0, r1
 8004a4c:	6010      	str	r0, [r2, #0]
 8004a4e:	e7da      	b.n	8004a06 <_free_r+0x22>
 8004a50:	d902      	bls.n	8004a58 <_free_r+0x74>
 8004a52:	230c      	movs	r3, #12
 8004a54:	602b      	str	r3, [r5, #0]
 8004a56:	e7d6      	b.n	8004a06 <_free_r+0x22>
 8004a58:	6820      	ldr	r0, [r4, #0]
 8004a5a:	1821      	adds	r1, r4, r0
 8004a5c:	428b      	cmp	r3, r1
 8004a5e:	bf04      	itt	eq
 8004a60:	6819      	ldreq	r1, [r3, #0]
 8004a62:	685b      	ldreq	r3, [r3, #4]
 8004a64:	6063      	str	r3, [r4, #4]
 8004a66:	bf04      	itt	eq
 8004a68:	1809      	addeq	r1, r1, r0
 8004a6a:	6021      	streq	r1, [r4, #0]
 8004a6c:	6054      	str	r4, [r2, #4]
 8004a6e:	e7ca      	b.n	8004a06 <_free_r+0x22>
 8004a70:	bd38      	pop	{r3, r4, r5, pc}
 8004a72:	bf00      	nop
 8004a74:	200003c0 	.word	0x200003c0

08004a78 <sbrk_aligned>:
 8004a78:	b570      	push	{r4, r5, r6, lr}
 8004a7a:	4e0f      	ldr	r6, [pc, #60]	@ (8004ab8 <sbrk_aligned+0x40>)
 8004a7c:	460c      	mov	r4, r1
 8004a7e:	6831      	ldr	r1, [r6, #0]
 8004a80:	4605      	mov	r5, r0
 8004a82:	b911      	cbnz	r1, 8004a8a <sbrk_aligned+0x12>
 8004a84:	f000 fba4 	bl	80051d0 <_sbrk_r>
 8004a88:	6030      	str	r0, [r6, #0]
 8004a8a:	4621      	mov	r1, r4
 8004a8c:	4628      	mov	r0, r5
 8004a8e:	f000 fb9f 	bl	80051d0 <_sbrk_r>
 8004a92:	1c43      	adds	r3, r0, #1
 8004a94:	d103      	bne.n	8004a9e <sbrk_aligned+0x26>
 8004a96:	f04f 34ff 	mov.w	r4, #4294967295
 8004a9a:	4620      	mov	r0, r4
 8004a9c:	bd70      	pop	{r4, r5, r6, pc}
 8004a9e:	1cc4      	adds	r4, r0, #3
 8004aa0:	f024 0403 	bic.w	r4, r4, #3
 8004aa4:	42a0      	cmp	r0, r4
 8004aa6:	d0f8      	beq.n	8004a9a <sbrk_aligned+0x22>
 8004aa8:	1a21      	subs	r1, r4, r0
 8004aaa:	4628      	mov	r0, r5
 8004aac:	f000 fb90 	bl	80051d0 <_sbrk_r>
 8004ab0:	3001      	adds	r0, #1
 8004ab2:	d1f2      	bne.n	8004a9a <sbrk_aligned+0x22>
 8004ab4:	e7ef      	b.n	8004a96 <sbrk_aligned+0x1e>
 8004ab6:	bf00      	nop
 8004ab8:	200003bc 	.word	0x200003bc

08004abc <_malloc_r>:
 8004abc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004ac0:	1ccd      	adds	r5, r1, #3
 8004ac2:	f025 0503 	bic.w	r5, r5, #3
 8004ac6:	3508      	adds	r5, #8
 8004ac8:	2d0c      	cmp	r5, #12
 8004aca:	bf38      	it	cc
 8004acc:	250c      	movcc	r5, #12
 8004ace:	2d00      	cmp	r5, #0
 8004ad0:	4606      	mov	r6, r0
 8004ad2:	db01      	blt.n	8004ad8 <_malloc_r+0x1c>
 8004ad4:	42a9      	cmp	r1, r5
 8004ad6:	d904      	bls.n	8004ae2 <_malloc_r+0x26>
 8004ad8:	230c      	movs	r3, #12
 8004ada:	6033      	str	r3, [r6, #0]
 8004adc:	2000      	movs	r0, #0
 8004ade:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004ae2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8004bb8 <_malloc_r+0xfc>
 8004ae6:	f000 f869 	bl	8004bbc <__malloc_lock>
 8004aea:	f8d8 3000 	ldr.w	r3, [r8]
 8004aee:	461c      	mov	r4, r3
 8004af0:	bb44      	cbnz	r4, 8004b44 <_malloc_r+0x88>
 8004af2:	4629      	mov	r1, r5
 8004af4:	4630      	mov	r0, r6
 8004af6:	f7ff ffbf 	bl	8004a78 <sbrk_aligned>
 8004afa:	1c43      	adds	r3, r0, #1
 8004afc:	4604      	mov	r4, r0
 8004afe:	d158      	bne.n	8004bb2 <_malloc_r+0xf6>
 8004b00:	f8d8 4000 	ldr.w	r4, [r8]
 8004b04:	4627      	mov	r7, r4
 8004b06:	2f00      	cmp	r7, #0
 8004b08:	d143      	bne.n	8004b92 <_malloc_r+0xd6>
 8004b0a:	2c00      	cmp	r4, #0
 8004b0c:	d04b      	beq.n	8004ba6 <_malloc_r+0xea>
 8004b0e:	6823      	ldr	r3, [r4, #0]
 8004b10:	4639      	mov	r1, r7
 8004b12:	4630      	mov	r0, r6
 8004b14:	eb04 0903 	add.w	r9, r4, r3
 8004b18:	f000 fb5a 	bl	80051d0 <_sbrk_r>
 8004b1c:	4581      	cmp	r9, r0
 8004b1e:	d142      	bne.n	8004ba6 <_malloc_r+0xea>
 8004b20:	6821      	ldr	r1, [r4, #0]
 8004b22:	1a6d      	subs	r5, r5, r1
 8004b24:	4629      	mov	r1, r5
 8004b26:	4630      	mov	r0, r6
 8004b28:	f7ff ffa6 	bl	8004a78 <sbrk_aligned>
 8004b2c:	3001      	adds	r0, #1
 8004b2e:	d03a      	beq.n	8004ba6 <_malloc_r+0xea>
 8004b30:	6823      	ldr	r3, [r4, #0]
 8004b32:	442b      	add	r3, r5
 8004b34:	6023      	str	r3, [r4, #0]
 8004b36:	f8d8 3000 	ldr.w	r3, [r8]
 8004b3a:	685a      	ldr	r2, [r3, #4]
 8004b3c:	bb62      	cbnz	r2, 8004b98 <_malloc_r+0xdc>
 8004b3e:	f8c8 7000 	str.w	r7, [r8]
 8004b42:	e00f      	b.n	8004b64 <_malloc_r+0xa8>
 8004b44:	6822      	ldr	r2, [r4, #0]
 8004b46:	1b52      	subs	r2, r2, r5
 8004b48:	d420      	bmi.n	8004b8c <_malloc_r+0xd0>
 8004b4a:	2a0b      	cmp	r2, #11
 8004b4c:	d917      	bls.n	8004b7e <_malloc_r+0xc2>
 8004b4e:	1961      	adds	r1, r4, r5
 8004b50:	42a3      	cmp	r3, r4
 8004b52:	6025      	str	r5, [r4, #0]
 8004b54:	bf18      	it	ne
 8004b56:	6059      	strne	r1, [r3, #4]
 8004b58:	6863      	ldr	r3, [r4, #4]
 8004b5a:	bf08      	it	eq
 8004b5c:	f8c8 1000 	streq.w	r1, [r8]
 8004b60:	5162      	str	r2, [r4, r5]
 8004b62:	604b      	str	r3, [r1, #4]
 8004b64:	4630      	mov	r0, r6
 8004b66:	f000 f82f 	bl	8004bc8 <__malloc_unlock>
 8004b6a:	f104 000b 	add.w	r0, r4, #11
 8004b6e:	1d23      	adds	r3, r4, #4
 8004b70:	f020 0007 	bic.w	r0, r0, #7
 8004b74:	1ac2      	subs	r2, r0, r3
 8004b76:	bf1c      	itt	ne
 8004b78:	1a1b      	subne	r3, r3, r0
 8004b7a:	50a3      	strne	r3, [r4, r2]
 8004b7c:	e7af      	b.n	8004ade <_malloc_r+0x22>
 8004b7e:	6862      	ldr	r2, [r4, #4]
 8004b80:	42a3      	cmp	r3, r4
 8004b82:	bf0c      	ite	eq
 8004b84:	f8c8 2000 	streq.w	r2, [r8]
 8004b88:	605a      	strne	r2, [r3, #4]
 8004b8a:	e7eb      	b.n	8004b64 <_malloc_r+0xa8>
 8004b8c:	4623      	mov	r3, r4
 8004b8e:	6864      	ldr	r4, [r4, #4]
 8004b90:	e7ae      	b.n	8004af0 <_malloc_r+0x34>
 8004b92:	463c      	mov	r4, r7
 8004b94:	687f      	ldr	r7, [r7, #4]
 8004b96:	e7b6      	b.n	8004b06 <_malloc_r+0x4a>
 8004b98:	461a      	mov	r2, r3
 8004b9a:	685b      	ldr	r3, [r3, #4]
 8004b9c:	42a3      	cmp	r3, r4
 8004b9e:	d1fb      	bne.n	8004b98 <_malloc_r+0xdc>
 8004ba0:	2300      	movs	r3, #0
 8004ba2:	6053      	str	r3, [r2, #4]
 8004ba4:	e7de      	b.n	8004b64 <_malloc_r+0xa8>
 8004ba6:	230c      	movs	r3, #12
 8004ba8:	6033      	str	r3, [r6, #0]
 8004baa:	4630      	mov	r0, r6
 8004bac:	f000 f80c 	bl	8004bc8 <__malloc_unlock>
 8004bb0:	e794      	b.n	8004adc <_malloc_r+0x20>
 8004bb2:	6005      	str	r5, [r0, #0]
 8004bb4:	e7d6      	b.n	8004b64 <_malloc_r+0xa8>
 8004bb6:	bf00      	nop
 8004bb8:	200003c0 	.word	0x200003c0

08004bbc <__malloc_lock>:
 8004bbc:	4801      	ldr	r0, [pc, #4]	@ (8004bc4 <__malloc_lock+0x8>)
 8004bbe:	f7ff bf0f 	b.w	80049e0 <__retarget_lock_acquire_recursive>
 8004bc2:	bf00      	nop
 8004bc4:	200003b8 	.word	0x200003b8

08004bc8 <__malloc_unlock>:
 8004bc8:	4801      	ldr	r0, [pc, #4]	@ (8004bd0 <__malloc_unlock+0x8>)
 8004bca:	f7ff bf0a 	b.w	80049e2 <__retarget_lock_release_recursive>
 8004bce:	bf00      	nop
 8004bd0:	200003b8 	.word	0x200003b8

08004bd4 <__ssputs_r>:
 8004bd4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004bd8:	688e      	ldr	r6, [r1, #8]
 8004bda:	461f      	mov	r7, r3
 8004bdc:	42be      	cmp	r6, r7
 8004bde:	680b      	ldr	r3, [r1, #0]
 8004be0:	4682      	mov	sl, r0
 8004be2:	460c      	mov	r4, r1
 8004be4:	4690      	mov	r8, r2
 8004be6:	d82d      	bhi.n	8004c44 <__ssputs_r+0x70>
 8004be8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8004bec:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8004bf0:	d026      	beq.n	8004c40 <__ssputs_r+0x6c>
 8004bf2:	6965      	ldr	r5, [r4, #20]
 8004bf4:	6909      	ldr	r1, [r1, #16]
 8004bf6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004bfa:	eba3 0901 	sub.w	r9, r3, r1
 8004bfe:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004c02:	1c7b      	adds	r3, r7, #1
 8004c04:	444b      	add	r3, r9
 8004c06:	106d      	asrs	r5, r5, #1
 8004c08:	429d      	cmp	r5, r3
 8004c0a:	bf38      	it	cc
 8004c0c:	461d      	movcc	r5, r3
 8004c0e:	0553      	lsls	r3, r2, #21
 8004c10:	d527      	bpl.n	8004c62 <__ssputs_r+0x8e>
 8004c12:	4629      	mov	r1, r5
 8004c14:	f7ff ff52 	bl	8004abc <_malloc_r>
 8004c18:	4606      	mov	r6, r0
 8004c1a:	b360      	cbz	r0, 8004c76 <__ssputs_r+0xa2>
 8004c1c:	6921      	ldr	r1, [r4, #16]
 8004c1e:	464a      	mov	r2, r9
 8004c20:	f000 fae6 	bl	80051f0 <memcpy>
 8004c24:	89a3      	ldrh	r3, [r4, #12]
 8004c26:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8004c2a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004c2e:	81a3      	strh	r3, [r4, #12]
 8004c30:	6126      	str	r6, [r4, #16]
 8004c32:	6165      	str	r5, [r4, #20]
 8004c34:	444e      	add	r6, r9
 8004c36:	eba5 0509 	sub.w	r5, r5, r9
 8004c3a:	6026      	str	r6, [r4, #0]
 8004c3c:	60a5      	str	r5, [r4, #8]
 8004c3e:	463e      	mov	r6, r7
 8004c40:	42be      	cmp	r6, r7
 8004c42:	d900      	bls.n	8004c46 <__ssputs_r+0x72>
 8004c44:	463e      	mov	r6, r7
 8004c46:	6820      	ldr	r0, [r4, #0]
 8004c48:	4632      	mov	r2, r6
 8004c4a:	4641      	mov	r1, r8
 8004c4c:	f000 faa6 	bl	800519c <memmove>
 8004c50:	68a3      	ldr	r3, [r4, #8]
 8004c52:	1b9b      	subs	r3, r3, r6
 8004c54:	60a3      	str	r3, [r4, #8]
 8004c56:	6823      	ldr	r3, [r4, #0]
 8004c58:	4433      	add	r3, r6
 8004c5a:	6023      	str	r3, [r4, #0]
 8004c5c:	2000      	movs	r0, #0
 8004c5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004c62:	462a      	mov	r2, r5
 8004c64:	f000 fad2 	bl	800520c <_realloc_r>
 8004c68:	4606      	mov	r6, r0
 8004c6a:	2800      	cmp	r0, #0
 8004c6c:	d1e0      	bne.n	8004c30 <__ssputs_r+0x5c>
 8004c6e:	6921      	ldr	r1, [r4, #16]
 8004c70:	4650      	mov	r0, sl
 8004c72:	f7ff feb7 	bl	80049e4 <_free_r>
 8004c76:	230c      	movs	r3, #12
 8004c78:	f8ca 3000 	str.w	r3, [sl]
 8004c7c:	89a3      	ldrh	r3, [r4, #12]
 8004c7e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004c82:	81a3      	strh	r3, [r4, #12]
 8004c84:	f04f 30ff 	mov.w	r0, #4294967295
 8004c88:	e7e9      	b.n	8004c5e <__ssputs_r+0x8a>
	...

08004c8c <_svfiprintf_r>:
 8004c8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004c90:	4698      	mov	r8, r3
 8004c92:	898b      	ldrh	r3, [r1, #12]
 8004c94:	061b      	lsls	r3, r3, #24
 8004c96:	b09d      	sub	sp, #116	@ 0x74
 8004c98:	4607      	mov	r7, r0
 8004c9a:	460d      	mov	r5, r1
 8004c9c:	4614      	mov	r4, r2
 8004c9e:	d510      	bpl.n	8004cc2 <_svfiprintf_r+0x36>
 8004ca0:	690b      	ldr	r3, [r1, #16]
 8004ca2:	b973      	cbnz	r3, 8004cc2 <_svfiprintf_r+0x36>
 8004ca4:	2140      	movs	r1, #64	@ 0x40
 8004ca6:	f7ff ff09 	bl	8004abc <_malloc_r>
 8004caa:	6028      	str	r0, [r5, #0]
 8004cac:	6128      	str	r0, [r5, #16]
 8004cae:	b930      	cbnz	r0, 8004cbe <_svfiprintf_r+0x32>
 8004cb0:	230c      	movs	r3, #12
 8004cb2:	603b      	str	r3, [r7, #0]
 8004cb4:	f04f 30ff 	mov.w	r0, #4294967295
 8004cb8:	b01d      	add	sp, #116	@ 0x74
 8004cba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004cbe:	2340      	movs	r3, #64	@ 0x40
 8004cc0:	616b      	str	r3, [r5, #20]
 8004cc2:	2300      	movs	r3, #0
 8004cc4:	9309      	str	r3, [sp, #36]	@ 0x24
 8004cc6:	2320      	movs	r3, #32
 8004cc8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8004ccc:	f8cd 800c 	str.w	r8, [sp, #12]
 8004cd0:	2330      	movs	r3, #48	@ 0x30
 8004cd2:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8004e70 <_svfiprintf_r+0x1e4>
 8004cd6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8004cda:	f04f 0901 	mov.w	r9, #1
 8004cde:	4623      	mov	r3, r4
 8004ce0:	469a      	mov	sl, r3
 8004ce2:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004ce6:	b10a      	cbz	r2, 8004cec <_svfiprintf_r+0x60>
 8004ce8:	2a25      	cmp	r2, #37	@ 0x25
 8004cea:	d1f9      	bne.n	8004ce0 <_svfiprintf_r+0x54>
 8004cec:	ebba 0b04 	subs.w	fp, sl, r4
 8004cf0:	d00b      	beq.n	8004d0a <_svfiprintf_r+0x7e>
 8004cf2:	465b      	mov	r3, fp
 8004cf4:	4622      	mov	r2, r4
 8004cf6:	4629      	mov	r1, r5
 8004cf8:	4638      	mov	r0, r7
 8004cfa:	f7ff ff6b 	bl	8004bd4 <__ssputs_r>
 8004cfe:	3001      	adds	r0, #1
 8004d00:	f000 80a7 	beq.w	8004e52 <_svfiprintf_r+0x1c6>
 8004d04:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004d06:	445a      	add	r2, fp
 8004d08:	9209      	str	r2, [sp, #36]	@ 0x24
 8004d0a:	f89a 3000 	ldrb.w	r3, [sl]
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	f000 809f 	beq.w	8004e52 <_svfiprintf_r+0x1c6>
 8004d14:	2300      	movs	r3, #0
 8004d16:	f04f 32ff 	mov.w	r2, #4294967295
 8004d1a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004d1e:	f10a 0a01 	add.w	sl, sl, #1
 8004d22:	9304      	str	r3, [sp, #16]
 8004d24:	9307      	str	r3, [sp, #28]
 8004d26:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8004d2a:	931a      	str	r3, [sp, #104]	@ 0x68
 8004d2c:	4654      	mov	r4, sl
 8004d2e:	2205      	movs	r2, #5
 8004d30:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004d34:	484e      	ldr	r0, [pc, #312]	@ (8004e70 <_svfiprintf_r+0x1e4>)
 8004d36:	f7fb fa73 	bl	8000220 <memchr>
 8004d3a:	9a04      	ldr	r2, [sp, #16]
 8004d3c:	b9d8      	cbnz	r0, 8004d76 <_svfiprintf_r+0xea>
 8004d3e:	06d0      	lsls	r0, r2, #27
 8004d40:	bf44      	itt	mi
 8004d42:	2320      	movmi	r3, #32
 8004d44:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004d48:	0711      	lsls	r1, r2, #28
 8004d4a:	bf44      	itt	mi
 8004d4c:	232b      	movmi	r3, #43	@ 0x2b
 8004d4e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004d52:	f89a 3000 	ldrb.w	r3, [sl]
 8004d56:	2b2a      	cmp	r3, #42	@ 0x2a
 8004d58:	d015      	beq.n	8004d86 <_svfiprintf_r+0xfa>
 8004d5a:	9a07      	ldr	r2, [sp, #28]
 8004d5c:	4654      	mov	r4, sl
 8004d5e:	2000      	movs	r0, #0
 8004d60:	f04f 0c0a 	mov.w	ip, #10
 8004d64:	4621      	mov	r1, r4
 8004d66:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004d6a:	3b30      	subs	r3, #48	@ 0x30
 8004d6c:	2b09      	cmp	r3, #9
 8004d6e:	d94b      	bls.n	8004e08 <_svfiprintf_r+0x17c>
 8004d70:	b1b0      	cbz	r0, 8004da0 <_svfiprintf_r+0x114>
 8004d72:	9207      	str	r2, [sp, #28]
 8004d74:	e014      	b.n	8004da0 <_svfiprintf_r+0x114>
 8004d76:	eba0 0308 	sub.w	r3, r0, r8
 8004d7a:	fa09 f303 	lsl.w	r3, r9, r3
 8004d7e:	4313      	orrs	r3, r2
 8004d80:	9304      	str	r3, [sp, #16]
 8004d82:	46a2      	mov	sl, r4
 8004d84:	e7d2      	b.n	8004d2c <_svfiprintf_r+0xa0>
 8004d86:	9b03      	ldr	r3, [sp, #12]
 8004d88:	1d19      	adds	r1, r3, #4
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	9103      	str	r1, [sp, #12]
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	bfbb      	ittet	lt
 8004d92:	425b      	neglt	r3, r3
 8004d94:	f042 0202 	orrlt.w	r2, r2, #2
 8004d98:	9307      	strge	r3, [sp, #28]
 8004d9a:	9307      	strlt	r3, [sp, #28]
 8004d9c:	bfb8      	it	lt
 8004d9e:	9204      	strlt	r2, [sp, #16]
 8004da0:	7823      	ldrb	r3, [r4, #0]
 8004da2:	2b2e      	cmp	r3, #46	@ 0x2e
 8004da4:	d10a      	bne.n	8004dbc <_svfiprintf_r+0x130>
 8004da6:	7863      	ldrb	r3, [r4, #1]
 8004da8:	2b2a      	cmp	r3, #42	@ 0x2a
 8004daa:	d132      	bne.n	8004e12 <_svfiprintf_r+0x186>
 8004dac:	9b03      	ldr	r3, [sp, #12]
 8004dae:	1d1a      	adds	r2, r3, #4
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	9203      	str	r2, [sp, #12]
 8004db4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8004db8:	3402      	adds	r4, #2
 8004dba:	9305      	str	r3, [sp, #20]
 8004dbc:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8004e80 <_svfiprintf_r+0x1f4>
 8004dc0:	7821      	ldrb	r1, [r4, #0]
 8004dc2:	2203      	movs	r2, #3
 8004dc4:	4650      	mov	r0, sl
 8004dc6:	f7fb fa2b 	bl	8000220 <memchr>
 8004dca:	b138      	cbz	r0, 8004ddc <_svfiprintf_r+0x150>
 8004dcc:	9b04      	ldr	r3, [sp, #16]
 8004dce:	eba0 000a 	sub.w	r0, r0, sl
 8004dd2:	2240      	movs	r2, #64	@ 0x40
 8004dd4:	4082      	lsls	r2, r0
 8004dd6:	4313      	orrs	r3, r2
 8004dd8:	3401      	adds	r4, #1
 8004dda:	9304      	str	r3, [sp, #16]
 8004ddc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004de0:	4824      	ldr	r0, [pc, #144]	@ (8004e74 <_svfiprintf_r+0x1e8>)
 8004de2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8004de6:	2206      	movs	r2, #6
 8004de8:	f7fb fa1a 	bl	8000220 <memchr>
 8004dec:	2800      	cmp	r0, #0
 8004dee:	d036      	beq.n	8004e5e <_svfiprintf_r+0x1d2>
 8004df0:	4b21      	ldr	r3, [pc, #132]	@ (8004e78 <_svfiprintf_r+0x1ec>)
 8004df2:	bb1b      	cbnz	r3, 8004e3c <_svfiprintf_r+0x1b0>
 8004df4:	9b03      	ldr	r3, [sp, #12]
 8004df6:	3307      	adds	r3, #7
 8004df8:	f023 0307 	bic.w	r3, r3, #7
 8004dfc:	3308      	adds	r3, #8
 8004dfe:	9303      	str	r3, [sp, #12]
 8004e00:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004e02:	4433      	add	r3, r6
 8004e04:	9309      	str	r3, [sp, #36]	@ 0x24
 8004e06:	e76a      	b.n	8004cde <_svfiprintf_r+0x52>
 8004e08:	fb0c 3202 	mla	r2, ip, r2, r3
 8004e0c:	460c      	mov	r4, r1
 8004e0e:	2001      	movs	r0, #1
 8004e10:	e7a8      	b.n	8004d64 <_svfiprintf_r+0xd8>
 8004e12:	2300      	movs	r3, #0
 8004e14:	3401      	adds	r4, #1
 8004e16:	9305      	str	r3, [sp, #20]
 8004e18:	4619      	mov	r1, r3
 8004e1a:	f04f 0c0a 	mov.w	ip, #10
 8004e1e:	4620      	mov	r0, r4
 8004e20:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004e24:	3a30      	subs	r2, #48	@ 0x30
 8004e26:	2a09      	cmp	r2, #9
 8004e28:	d903      	bls.n	8004e32 <_svfiprintf_r+0x1a6>
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d0c6      	beq.n	8004dbc <_svfiprintf_r+0x130>
 8004e2e:	9105      	str	r1, [sp, #20]
 8004e30:	e7c4      	b.n	8004dbc <_svfiprintf_r+0x130>
 8004e32:	fb0c 2101 	mla	r1, ip, r1, r2
 8004e36:	4604      	mov	r4, r0
 8004e38:	2301      	movs	r3, #1
 8004e3a:	e7f0      	b.n	8004e1e <_svfiprintf_r+0x192>
 8004e3c:	ab03      	add	r3, sp, #12
 8004e3e:	9300      	str	r3, [sp, #0]
 8004e40:	462a      	mov	r2, r5
 8004e42:	4b0e      	ldr	r3, [pc, #56]	@ (8004e7c <_svfiprintf_r+0x1f0>)
 8004e44:	a904      	add	r1, sp, #16
 8004e46:	4638      	mov	r0, r7
 8004e48:	f3af 8000 	nop.w
 8004e4c:	1c42      	adds	r2, r0, #1
 8004e4e:	4606      	mov	r6, r0
 8004e50:	d1d6      	bne.n	8004e00 <_svfiprintf_r+0x174>
 8004e52:	89ab      	ldrh	r3, [r5, #12]
 8004e54:	065b      	lsls	r3, r3, #25
 8004e56:	f53f af2d 	bmi.w	8004cb4 <_svfiprintf_r+0x28>
 8004e5a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8004e5c:	e72c      	b.n	8004cb8 <_svfiprintf_r+0x2c>
 8004e5e:	ab03      	add	r3, sp, #12
 8004e60:	9300      	str	r3, [sp, #0]
 8004e62:	462a      	mov	r2, r5
 8004e64:	4b05      	ldr	r3, [pc, #20]	@ (8004e7c <_svfiprintf_r+0x1f0>)
 8004e66:	a904      	add	r1, sp, #16
 8004e68:	4638      	mov	r0, r7
 8004e6a:	f000 f879 	bl	8004f60 <_printf_i>
 8004e6e:	e7ed      	b.n	8004e4c <_svfiprintf_r+0x1c0>
 8004e70:	08005dac 	.word	0x08005dac
 8004e74:	08005db6 	.word	0x08005db6
 8004e78:	00000000 	.word	0x00000000
 8004e7c:	08004bd5 	.word	0x08004bd5
 8004e80:	08005db2 	.word	0x08005db2

08004e84 <_printf_common>:
 8004e84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004e88:	4616      	mov	r6, r2
 8004e8a:	4698      	mov	r8, r3
 8004e8c:	688a      	ldr	r2, [r1, #8]
 8004e8e:	690b      	ldr	r3, [r1, #16]
 8004e90:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8004e94:	4293      	cmp	r3, r2
 8004e96:	bfb8      	it	lt
 8004e98:	4613      	movlt	r3, r2
 8004e9a:	6033      	str	r3, [r6, #0]
 8004e9c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8004ea0:	4607      	mov	r7, r0
 8004ea2:	460c      	mov	r4, r1
 8004ea4:	b10a      	cbz	r2, 8004eaa <_printf_common+0x26>
 8004ea6:	3301      	adds	r3, #1
 8004ea8:	6033      	str	r3, [r6, #0]
 8004eaa:	6823      	ldr	r3, [r4, #0]
 8004eac:	0699      	lsls	r1, r3, #26
 8004eae:	bf42      	ittt	mi
 8004eb0:	6833      	ldrmi	r3, [r6, #0]
 8004eb2:	3302      	addmi	r3, #2
 8004eb4:	6033      	strmi	r3, [r6, #0]
 8004eb6:	6825      	ldr	r5, [r4, #0]
 8004eb8:	f015 0506 	ands.w	r5, r5, #6
 8004ebc:	d106      	bne.n	8004ecc <_printf_common+0x48>
 8004ebe:	f104 0a19 	add.w	sl, r4, #25
 8004ec2:	68e3      	ldr	r3, [r4, #12]
 8004ec4:	6832      	ldr	r2, [r6, #0]
 8004ec6:	1a9b      	subs	r3, r3, r2
 8004ec8:	42ab      	cmp	r3, r5
 8004eca:	dc26      	bgt.n	8004f1a <_printf_common+0x96>
 8004ecc:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8004ed0:	6822      	ldr	r2, [r4, #0]
 8004ed2:	3b00      	subs	r3, #0
 8004ed4:	bf18      	it	ne
 8004ed6:	2301      	movne	r3, #1
 8004ed8:	0692      	lsls	r2, r2, #26
 8004eda:	d42b      	bmi.n	8004f34 <_printf_common+0xb0>
 8004edc:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8004ee0:	4641      	mov	r1, r8
 8004ee2:	4638      	mov	r0, r7
 8004ee4:	47c8      	blx	r9
 8004ee6:	3001      	adds	r0, #1
 8004ee8:	d01e      	beq.n	8004f28 <_printf_common+0xa4>
 8004eea:	6823      	ldr	r3, [r4, #0]
 8004eec:	6922      	ldr	r2, [r4, #16]
 8004eee:	f003 0306 	and.w	r3, r3, #6
 8004ef2:	2b04      	cmp	r3, #4
 8004ef4:	bf02      	ittt	eq
 8004ef6:	68e5      	ldreq	r5, [r4, #12]
 8004ef8:	6833      	ldreq	r3, [r6, #0]
 8004efa:	1aed      	subeq	r5, r5, r3
 8004efc:	68a3      	ldr	r3, [r4, #8]
 8004efe:	bf0c      	ite	eq
 8004f00:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004f04:	2500      	movne	r5, #0
 8004f06:	4293      	cmp	r3, r2
 8004f08:	bfc4      	itt	gt
 8004f0a:	1a9b      	subgt	r3, r3, r2
 8004f0c:	18ed      	addgt	r5, r5, r3
 8004f0e:	2600      	movs	r6, #0
 8004f10:	341a      	adds	r4, #26
 8004f12:	42b5      	cmp	r5, r6
 8004f14:	d11a      	bne.n	8004f4c <_printf_common+0xc8>
 8004f16:	2000      	movs	r0, #0
 8004f18:	e008      	b.n	8004f2c <_printf_common+0xa8>
 8004f1a:	2301      	movs	r3, #1
 8004f1c:	4652      	mov	r2, sl
 8004f1e:	4641      	mov	r1, r8
 8004f20:	4638      	mov	r0, r7
 8004f22:	47c8      	blx	r9
 8004f24:	3001      	adds	r0, #1
 8004f26:	d103      	bne.n	8004f30 <_printf_common+0xac>
 8004f28:	f04f 30ff 	mov.w	r0, #4294967295
 8004f2c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004f30:	3501      	adds	r5, #1
 8004f32:	e7c6      	b.n	8004ec2 <_printf_common+0x3e>
 8004f34:	18e1      	adds	r1, r4, r3
 8004f36:	1c5a      	adds	r2, r3, #1
 8004f38:	2030      	movs	r0, #48	@ 0x30
 8004f3a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8004f3e:	4422      	add	r2, r4
 8004f40:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8004f44:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8004f48:	3302      	adds	r3, #2
 8004f4a:	e7c7      	b.n	8004edc <_printf_common+0x58>
 8004f4c:	2301      	movs	r3, #1
 8004f4e:	4622      	mov	r2, r4
 8004f50:	4641      	mov	r1, r8
 8004f52:	4638      	mov	r0, r7
 8004f54:	47c8      	blx	r9
 8004f56:	3001      	adds	r0, #1
 8004f58:	d0e6      	beq.n	8004f28 <_printf_common+0xa4>
 8004f5a:	3601      	adds	r6, #1
 8004f5c:	e7d9      	b.n	8004f12 <_printf_common+0x8e>
	...

08004f60 <_printf_i>:
 8004f60:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004f64:	7e0f      	ldrb	r7, [r1, #24]
 8004f66:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8004f68:	2f78      	cmp	r7, #120	@ 0x78
 8004f6a:	4691      	mov	r9, r2
 8004f6c:	4680      	mov	r8, r0
 8004f6e:	460c      	mov	r4, r1
 8004f70:	469a      	mov	sl, r3
 8004f72:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8004f76:	d807      	bhi.n	8004f88 <_printf_i+0x28>
 8004f78:	2f62      	cmp	r7, #98	@ 0x62
 8004f7a:	d80a      	bhi.n	8004f92 <_printf_i+0x32>
 8004f7c:	2f00      	cmp	r7, #0
 8004f7e:	f000 80d1 	beq.w	8005124 <_printf_i+0x1c4>
 8004f82:	2f58      	cmp	r7, #88	@ 0x58
 8004f84:	f000 80b8 	beq.w	80050f8 <_printf_i+0x198>
 8004f88:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004f8c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8004f90:	e03a      	b.n	8005008 <_printf_i+0xa8>
 8004f92:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8004f96:	2b15      	cmp	r3, #21
 8004f98:	d8f6      	bhi.n	8004f88 <_printf_i+0x28>
 8004f9a:	a101      	add	r1, pc, #4	@ (adr r1, 8004fa0 <_printf_i+0x40>)
 8004f9c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004fa0:	08004ff9 	.word	0x08004ff9
 8004fa4:	0800500d 	.word	0x0800500d
 8004fa8:	08004f89 	.word	0x08004f89
 8004fac:	08004f89 	.word	0x08004f89
 8004fb0:	08004f89 	.word	0x08004f89
 8004fb4:	08004f89 	.word	0x08004f89
 8004fb8:	0800500d 	.word	0x0800500d
 8004fbc:	08004f89 	.word	0x08004f89
 8004fc0:	08004f89 	.word	0x08004f89
 8004fc4:	08004f89 	.word	0x08004f89
 8004fc8:	08004f89 	.word	0x08004f89
 8004fcc:	0800510b 	.word	0x0800510b
 8004fd0:	08005037 	.word	0x08005037
 8004fd4:	080050c5 	.word	0x080050c5
 8004fd8:	08004f89 	.word	0x08004f89
 8004fdc:	08004f89 	.word	0x08004f89
 8004fe0:	0800512d 	.word	0x0800512d
 8004fe4:	08004f89 	.word	0x08004f89
 8004fe8:	08005037 	.word	0x08005037
 8004fec:	08004f89 	.word	0x08004f89
 8004ff0:	08004f89 	.word	0x08004f89
 8004ff4:	080050cd 	.word	0x080050cd
 8004ff8:	6833      	ldr	r3, [r6, #0]
 8004ffa:	1d1a      	adds	r2, r3, #4
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	6032      	str	r2, [r6, #0]
 8005000:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005004:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8005008:	2301      	movs	r3, #1
 800500a:	e09c      	b.n	8005146 <_printf_i+0x1e6>
 800500c:	6833      	ldr	r3, [r6, #0]
 800500e:	6820      	ldr	r0, [r4, #0]
 8005010:	1d19      	adds	r1, r3, #4
 8005012:	6031      	str	r1, [r6, #0]
 8005014:	0606      	lsls	r6, r0, #24
 8005016:	d501      	bpl.n	800501c <_printf_i+0xbc>
 8005018:	681d      	ldr	r5, [r3, #0]
 800501a:	e003      	b.n	8005024 <_printf_i+0xc4>
 800501c:	0645      	lsls	r5, r0, #25
 800501e:	d5fb      	bpl.n	8005018 <_printf_i+0xb8>
 8005020:	f9b3 5000 	ldrsh.w	r5, [r3]
 8005024:	2d00      	cmp	r5, #0
 8005026:	da03      	bge.n	8005030 <_printf_i+0xd0>
 8005028:	232d      	movs	r3, #45	@ 0x2d
 800502a:	426d      	negs	r5, r5
 800502c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005030:	4858      	ldr	r0, [pc, #352]	@ (8005194 <_printf_i+0x234>)
 8005032:	230a      	movs	r3, #10
 8005034:	e011      	b.n	800505a <_printf_i+0xfa>
 8005036:	6821      	ldr	r1, [r4, #0]
 8005038:	6833      	ldr	r3, [r6, #0]
 800503a:	0608      	lsls	r0, r1, #24
 800503c:	f853 5b04 	ldr.w	r5, [r3], #4
 8005040:	d402      	bmi.n	8005048 <_printf_i+0xe8>
 8005042:	0649      	lsls	r1, r1, #25
 8005044:	bf48      	it	mi
 8005046:	b2ad      	uxthmi	r5, r5
 8005048:	2f6f      	cmp	r7, #111	@ 0x6f
 800504a:	4852      	ldr	r0, [pc, #328]	@ (8005194 <_printf_i+0x234>)
 800504c:	6033      	str	r3, [r6, #0]
 800504e:	bf14      	ite	ne
 8005050:	230a      	movne	r3, #10
 8005052:	2308      	moveq	r3, #8
 8005054:	2100      	movs	r1, #0
 8005056:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800505a:	6866      	ldr	r6, [r4, #4]
 800505c:	60a6      	str	r6, [r4, #8]
 800505e:	2e00      	cmp	r6, #0
 8005060:	db05      	blt.n	800506e <_printf_i+0x10e>
 8005062:	6821      	ldr	r1, [r4, #0]
 8005064:	432e      	orrs	r6, r5
 8005066:	f021 0104 	bic.w	r1, r1, #4
 800506a:	6021      	str	r1, [r4, #0]
 800506c:	d04b      	beq.n	8005106 <_printf_i+0x1a6>
 800506e:	4616      	mov	r6, r2
 8005070:	fbb5 f1f3 	udiv	r1, r5, r3
 8005074:	fb03 5711 	mls	r7, r3, r1, r5
 8005078:	5dc7      	ldrb	r7, [r0, r7]
 800507a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800507e:	462f      	mov	r7, r5
 8005080:	42bb      	cmp	r3, r7
 8005082:	460d      	mov	r5, r1
 8005084:	d9f4      	bls.n	8005070 <_printf_i+0x110>
 8005086:	2b08      	cmp	r3, #8
 8005088:	d10b      	bne.n	80050a2 <_printf_i+0x142>
 800508a:	6823      	ldr	r3, [r4, #0]
 800508c:	07df      	lsls	r7, r3, #31
 800508e:	d508      	bpl.n	80050a2 <_printf_i+0x142>
 8005090:	6923      	ldr	r3, [r4, #16]
 8005092:	6861      	ldr	r1, [r4, #4]
 8005094:	4299      	cmp	r1, r3
 8005096:	bfde      	ittt	le
 8005098:	2330      	movle	r3, #48	@ 0x30
 800509a:	f806 3c01 	strble.w	r3, [r6, #-1]
 800509e:	f106 36ff 	addle.w	r6, r6, #4294967295
 80050a2:	1b92      	subs	r2, r2, r6
 80050a4:	6122      	str	r2, [r4, #16]
 80050a6:	f8cd a000 	str.w	sl, [sp]
 80050aa:	464b      	mov	r3, r9
 80050ac:	aa03      	add	r2, sp, #12
 80050ae:	4621      	mov	r1, r4
 80050b0:	4640      	mov	r0, r8
 80050b2:	f7ff fee7 	bl	8004e84 <_printf_common>
 80050b6:	3001      	adds	r0, #1
 80050b8:	d14a      	bne.n	8005150 <_printf_i+0x1f0>
 80050ba:	f04f 30ff 	mov.w	r0, #4294967295
 80050be:	b004      	add	sp, #16
 80050c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80050c4:	6823      	ldr	r3, [r4, #0]
 80050c6:	f043 0320 	orr.w	r3, r3, #32
 80050ca:	6023      	str	r3, [r4, #0]
 80050cc:	4832      	ldr	r0, [pc, #200]	@ (8005198 <_printf_i+0x238>)
 80050ce:	2778      	movs	r7, #120	@ 0x78
 80050d0:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80050d4:	6823      	ldr	r3, [r4, #0]
 80050d6:	6831      	ldr	r1, [r6, #0]
 80050d8:	061f      	lsls	r7, r3, #24
 80050da:	f851 5b04 	ldr.w	r5, [r1], #4
 80050de:	d402      	bmi.n	80050e6 <_printf_i+0x186>
 80050e0:	065f      	lsls	r7, r3, #25
 80050e2:	bf48      	it	mi
 80050e4:	b2ad      	uxthmi	r5, r5
 80050e6:	6031      	str	r1, [r6, #0]
 80050e8:	07d9      	lsls	r1, r3, #31
 80050ea:	bf44      	itt	mi
 80050ec:	f043 0320 	orrmi.w	r3, r3, #32
 80050f0:	6023      	strmi	r3, [r4, #0]
 80050f2:	b11d      	cbz	r5, 80050fc <_printf_i+0x19c>
 80050f4:	2310      	movs	r3, #16
 80050f6:	e7ad      	b.n	8005054 <_printf_i+0xf4>
 80050f8:	4826      	ldr	r0, [pc, #152]	@ (8005194 <_printf_i+0x234>)
 80050fa:	e7e9      	b.n	80050d0 <_printf_i+0x170>
 80050fc:	6823      	ldr	r3, [r4, #0]
 80050fe:	f023 0320 	bic.w	r3, r3, #32
 8005102:	6023      	str	r3, [r4, #0]
 8005104:	e7f6      	b.n	80050f4 <_printf_i+0x194>
 8005106:	4616      	mov	r6, r2
 8005108:	e7bd      	b.n	8005086 <_printf_i+0x126>
 800510a:	6833      	ldr	r3, [r6, #0]
 800510c:	6825      	ldr	r5, [r4, #0]
 800510e:	6961      	ldr	r1, [r4, #20]
 8005110:	1d18      	adds	r0, r3, #4
 8005112:	6030      	str	r0, [r6, #0]
 8005114:	062e      	lsls	r6, r5, #24
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	d501      	bpl.n	800511e <_printf_i+0x1be>
 800511a:	6019      	str	r1, [r3, #0]
 800511c:	e002      	b.n	8005124 <_printf_i+0x1c4>
 800511e:	0668      	lsls	r0, r5, #25
 8005120:	d5fb      	bpl.n	800511a <_printf_i+0x1ba>
 8005122:	8019      	strh	r1, [r3, #0]
 8005124:	2300      	movs	r3, #0
 8005126:	6123      	str	r3, [r4, #16]
 8005128:	4616      	mov	r6, r2
 800512a:	e7bc      	b.n	80050a6 <_printf_i+0x146>
 800512c:	6833      	ldr	r3, [r6, #0]
 800512e:	1d1a      	adds	r2, r3, #4
 8005130:	6032      	str	r2, [r6, #0]
 8005132:	681e      	ldr	r6, [r3, #0]
 8005134:	6862      	ldr	r2, [r4, #4]
 8005136:	2100      	movs	r1, #0
 8005138:	4630      	mov	r0, r6
 800513a:	f7fb f871 	bl	8000220 <memchr>
 800513e:	b108      	cbz	r0, 8005144 <_printf_i+0x1e4>
 8005140:	1b80      	subs	r0, r0, r6
 8005142:	6060      	str	r0, [r4, #4]
 8005144:	6863      	ldr	r3, [r4, #4]
 8005146:	6123      	str	r3, [r4, #16]
 8005148:	2300      	movs	r3, #0
 800514a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800514e:	e7aa      	b.n	80050a6 <_printf_i+0x146>
 8005150:	6923      	ldr	r3, [r4, #16]
 8005152:	4632      	mov	r2, r6
 8005154:	4649      	mov	r1, r9
 8005156:	4640      	mov	r0, r8
 8005158:	47d0      	blx	sl
 800515a:	3001      	adds	r0, #1
 800515c:	d0ad      	beq.n	80050ba <_printf_i+0x15a>
 800515e:	6823      	ldr	r3, [r4, #0]
 8005160:	079b      	lsls	r3, r3, #30
 8005162:	d413      	bmi.n	800518c <_printf_i+0x22c>
 8005164:	68e0      	ldr	r0, [r4, #12]
 8005166:	9b03      	ldr	r3, [sp, #12]
 8005168:	4298      	cmp	r0, r3
 800516a:	bfb8      	it	lt
 800516c:	4618      	movlt	r0, r3
 800516e:	e7a6      	b.n	80050be <_printf_i+0x15e>
 8005170:	2301      	movs	r3, #1
 8005172:	4632      	mov	r2, r6
 8005174:	4649      	mov	r1, r9
 8005176:	4640      	mov	r0, r8
 8005178:	47d0      	blx	sl
 800517a:	3001      	adds	r0, #1
 800517c:	d09d      	beq.n	80050ba <_printf_i+0x15a>
 800517e:	3501      	adds	r5, #1
 8005180:	68e3      	ldr	r3, [r4, #12]
 8005182:	9903      	ldr	r1, [sp, #12]
 8005184:	1a5b      	subs	r3, r3, r1
 8005186:	42ab      	cmp	r3, r5
 8005188:	dcf2      	bgt.n	8005170 <_printf_i+0x210>
 800518a:	e7eb      	b.n	8005164 <_printf_i+0x204>
 800518c:	2500      	movs	r5, #0
 800518e:	f104 0619 	add.w	r6, r4, #25
 8005192:	e7f5      	b.n	8005180 <_printf_i+0x220>
 8005194:	08005dbd 	.word	0x08005dbd
 8005198:	08005dce 	.word	0x08005dce

0800519c <memmove>:
 800519c:	4288      	cmp	r0, r1
 800519e:	b510      	push	{r4, lr}
 80051a0:	eb01 0402 	add.w	r4, r1, r2
 80051a4:	d902      	bls.n	80051ac <memmove+0x10>
 80051a6:	4284      	cmp	r4, r0
 80051a8:	4623      	mov	r3, r4
 80051aa:	d807      	bhi.n	80051bc <memmove+0x20>
 80051ac:	1e43      	subs	r3, r0, #1
 80051ae:	42a1      	cmp	r1, r4
 80051b0:	d008      	beq.n	80051c4 <memmove+0x28>
 80051b2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80051b6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80051ba:	e7f8      	b.n	80051ae <memmove+0x12>
 80051bc:	4402      	add	r2, r0
 80051be:	4601      	mov	r1, r0
 80051c0:	428a      	cmp	r2, r1
 80051c2:	d100      	bne.n	80051c6 <memmove+0x2a>
 80051c4:	bd10      	pop	{r4, pc}
 80051c6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80051ca:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80051ce:	e7f7      	b.n	80051c0 <memmove+0x24>

080051d0 <_sbrk_r>:
 80051d0:	b538      	push	{r3, r4, r5, lr}
 80051d2:	4d06      	ldr	r5, [pc, #24]	@ (80051ec <_sbrk_r+0x1c>)
 80051d4:	2300      	movs	r3, #0
 80051d6:	4604      	mov	r4, r0
 80051d8:	4608      	mov	r0, r1
 80051da:	602b      	str	r3, [r5, #0]
 80051dc:	f7fc fe5e 	bl	8001e9c <_sbrk>
 80051e0:	1c43      	adds	r3, r0, #1
 80051e2:	d102      	bne.n	80051ea <_sbrk_r+0x1a>
 80051e4:	682b      	ldr	r3, [r5, #0]
 80051e6:	b103      	cbz	r3, 80051ea <_sbrk_r+0x1a>
 80051e8:	6023      	str	r3, [r4, #0]
 80051ea:	bd38      	pop	{r3, r4, r5, pc}
 80051ec:	200003b4 	.word	0x200003b4

080051f0 <memcpy>:
 80051f0:	440a      	add	r2, r1
 80051f2:	4291      	cmp	r1, r2
 80051f4:	f100 33ff 	add.w	r3, r0, #4294967295
 80051f8:	d100      	bne.n	80051fc <memcpy+0xc>
 80051fa:	4770      	bx	lr
 80051fc:	b510      	push	{r4, lr}
 80051fe:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005202:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005206:	4291      	cmp	r1, r2
 8005208:	d1f9      	bne.n	80051fe <memcpy+0xe>
 800520a:	bd10      	pop	{r4, pc}

0800520c <_realloc_r>:
 800520c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005210:	4607      	mov	r7, r0
 8005212:	4614      	mov	r4, r2
 8005214:	460d      	mov	r5, r1
 8005216:	b921      	cbnz	r1, 8005222 <_realloc_r+0x16>
 8005218:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800521c:	4611      	mov	r1, r2
 800521e:	f7ff bc4d 	b.w	8004abc <_malloc_r>
 8005222:	b92a      	cbnz	r2, 8005230 <_realloc_r+0x24>
 8005224:	f7ff fbde 	bl	80049e4 <_free_r>
 8005228:	4625      	mov	r5, r4
 800522a:	4628      	mov	r0, r5
 800522c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005230:	f000 f81a 	bl	8005268 <_malloc_usable_size_r>
 8005234:	4284      	cmp	r4, r0
 8005236:	4606      	mov	r6, r0
 8005238:	d802      	bhi.n	8005240 <_realloc_r+0x34>
 800523a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800523e:	d8f4      	bhi.n	800522a <_realloc_r+0x1e>
 8005240:	4621      	mov	r1, r4
 8005242:	4638      	mov	r0, r7
 8005244:	f7ff fc3a 	bl	8004abc <_malloc_r>
 8005248:	4680      	mov	r8, r0
 800524a:	b908      	cbnz	r0, 8005250 <_realloc_r+0x44>
 800524c:	4645      	mov	r5, r8
 800524e:	e7ec      	b.n	800522a <_realloc_r+0x1e>
 8005250:	42b4      	cmp	r4, r6
 8005252:	4622      	mov	r2, r4
 8005254:	4629      	mov	r1, r5
 8005256:	bf28      	it	cs
 8005258:	4632      	movcs	r2, r6
 800525a:	f7ff ffc9 	bl	80051f0 <memcpy>
 800525e:	4629      	mov	r1, r5
 8005260:	4638      	mov	r0, r7
 8005262:	f7ff fbbf 	bl	80049e4 <_free_r>
 8005266:	e7f1      	b.n	800524c <_realloc_r+0x40>

08005268 <_malloc_usable_size_r>:
 8005268:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800526c:	1f18      	subs	r0, r3, #4
 800526e:	2b00      	cmp	r3, #0
 8005270:	bfbc      	itt	lt
 8005272:	580b      	ldrlt	r3, [r1, r0]
 8005274:	18c0      	addlt	r0, r0, r3
 8005276:	4770      	bx	lr

08005278 <_init>:
 8005278:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800527a:	bf00      	nop
 800527c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800527e:	bc08      	pop	{r3}
 8005280:	469e      	mov	lr, r3
 8005282:	4770      	bx	lr

08005284 <_fini>:
 8005284:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005286:	bf00      	nop
 8005288:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800528a:	bc08      	pop	{r3}
 800528c:	469e      	mov	lr, r3
 800528e:	4770      	bx	lr
