
8_16_master_slave_0.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008db4  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000008fc  08008f98  08008f98  00009f98  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009894  08009894  0000b1d4  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08009894  08009894  0000a894  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800989c  0800989c  0000b1d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800989c  0800989c  0000a89c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080098a0  080098a0  0000a8a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d4  20000000  080098a4  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004dc  200001d4  08009a78  0000b1d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200006b0  08009a78  0000b6b0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000b1d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014f02  00000000  00000000  0000b204  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002f0a  00000000  00000000  00020106  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001190  00000000  00000000  00023010  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000d68  00000000  00000000  000241a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00021756  00000000  00000000  00024f08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00016339  00000000  00000000  0004665e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d11b9  00000000  00000000  0005c997  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0012db50  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005a4c  00000000  00000000  0012db94  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006f  00000000  00000000  001335e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	200001d4 	.word	0x200001d4
 80001fc:	00000000 	.word	0x00000000
 8000200:	08008f7c 	.word	0x08008f7c

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	200001d8 	.word	0x200001d8
 800021c:	08008f7c 	.word	0x08008f7c

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <strlen>:
 80002c0:	4603      	mov	r3, r0
 80002c2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002c6:	2a00      	cmp	r2, #0
 80002c8:	d1fb      	bne.n	80002c2 <strlen+0x2>
 80002ca:	1a18      	subs	r0, r3, r0
 80002cc:	3801      	subs	r0, #1
 80002ce:	4770      	bx	lr

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	@ 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	3c01      	subs	r4, #1
 800040c:	bf28      	it	cs
 800040e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000412:	d2e9      	bcs.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__gedf2>:
 8000a6c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a70:	e006      	b.n	8000a80 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__ledf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	e002      	b.n	8000a80 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__cmpdf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a96:	d01b      	beq.n	8000ad0 <__cmpdf2+0x54>
 8000a98:	b001      	add	sp, #4
 8000a9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a9e:	bf0c      	ite	eq
 8000aa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa4:	ea91 0f03 	teqne	r1, r3
 8000aa8:	bf02      	ittt	eq
 8000aaa:	ea90 0f02 	teqeq	r0, r2
 8000aae:	2000      	moveq	r0, #0
 8000ab0:	4770      	bxeq	lr
 8000ab2:	f110 0f00 	cmn.w	r0, #0
 8000ab6:	ea91 0f03 	teq	r1, r3
 8000aba:	bf58      	it	pl
 8000abc:	4299      	cmppl	r1, r3
 8000abe:	bf08      	it	eq
 8000ac0:	4290      	cmpeq	r0, r2
 8000ac2:	bf2c      	ite	cs
 8000ac4:	17d8      	asrcs	r0, r3, #31
 8000ac6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aca:	f040 0001 	orr.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__cmpdf2+0x64>
 8000ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ade:	d107      	bne.n	8000af0 <__cmpdf2+0x74>
 8000ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d1d6      	bne.n	8000a98 <__cmpdf2+0x1c>
 8000aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aee:	d0d3      	beq.n	8000a98 <__cmpdf2+0x1c>
 8000af0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	4610      	mov	r0, r2
 8000afc:	4662      	mov	r2, ip
 8000afe:	468c      	mov	ip, r1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4663      	mov	r3, ip
 8000b04:	e000      	b.n	8000b08 <__aeabi_cdcmpeq>
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdcmpeq>:
 8000b08:	b501      	push	{r0, lr}
 8000b0a:	f7ff ffb7 	bl	8000a7c <__cmpdf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf48      	it	mi
 8000b12:	f110 0f00 	cmnmi.w	r0, #0
 8000b16:	bd01      	pop	{r0, pc}

08000b18 <__aeabi_dcmpeq>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff fff4 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b20:	bf0c      	ite	eq
 8000b22:	2001      	moveq	r0, #1
 8000b24:	2000      	movne	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmplt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffea 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmple>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffe0 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpge>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffce 	bl	8000af8 <__aeabi_cdrcmple>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpgt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffc4 	bl	8000af8 <__aeabi_cdrcmple>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_dcmpun>:
 8000b7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x10>
 8000b86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8a:	d10a      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x20>
 8000b96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0001 	mov.w	r0, #1
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2iz>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bb0:	d215      	bcs.n	8000bde <__aeabi_d2iz+0x36>
 8000bb2:	d511      	bpl.n	8000bd8 <__aeabi_d2iz+0x30>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d912      	bls.n	8000be4 <__aeabi_d2iz+0x3c>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	bf18      	it	ne
 8000bd4:	4240      	negne	r0, r0
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d105      	bne.n	8000bf0 <__aeabi_d2iz+0x48>
 8000be4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000be8:	bf08      	it	eq
 8000bea:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_uldivmod>:
 8000bf8:	b953      	cbnz	r3, 8000c10 <__aeabi_uldivmod+0x18>
 8000bfa:	b94a      	cbnz	r2, 8000c10 <__aeabi_uldivmod+0x18>
 8000bfc:	2900      	cmp	r1, #0
 8000bfe:	bf08      	it	eq
 8000c00:	2800      	cmpeq	r0, #0
 8000c02:	bf1c      	itt	ne
 8000c04:	f04f 31ff 	movne.w	r1, #4294967295
 8000c08:	f04f 30ff 	movne.w	r0, #4294967295
 8000c0c:	f000 b988 	b.w	8000f20 <__aeabi_idiv0>
 8000c10:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c14:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c18:	f000 f806 	bl	8000c28 <__udivmoddi4>
 8000c1c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c20:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c24:	b004      	add	sp, #16
 8000c26:	4770      	bx	lr

08000c28 <__udivmoddi4>:
 8000c28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c2c:	9d08      	ldr	r5, [sp, #32]
 8000c2e:	468e      	mov	lr, r1
 8000c30:	4604      	mov	r4, r0
 8000c32:	4688      	mov	r8, r1
 8000c34:	2b00      	cmp	r3, #0
 8000c36:	d14a      	bne.n	8000cce <__udivmoddi4+0xa6>
 8000c38:	428a      	cmp	r2, r1
 8000c3a:	4617      	mov	r7, r2
 8000c3c:	d962      	bls.n	8000d04 <__udivmoddi4+0xdc>
 8000c3e:	fab2 f682 	clz	r6, r2
 8000c42:	b14e      	cbz	r6, 8000c58 <__udivmoddi4+0x30>
 8000c44:	f1c6 0320 	rsb	r3, r6, #32
 8000c48:	fa01 f806 	lsl.w	r8, r1, r6
 8000c4c:	fa20 f303 	lsr.w	r3, r0, r3
 8000c50:	40b7      	lsls	r7, r6
 8000c52:	ea43 0808 	orr.w	r8, r3, r8
 8000c56:	40b4      	lsls	r4, r6
 8000c58:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c5c:	fa1f fc87 	uxth.w	ip, r7
 8000c60:	fbb8 f1fe 	udiv	r1, r8, lr
 8000c64:	0c23      	lsrs	r3, r4, #16
 8000c66:	fb0e 8811 	mls	r8, lr, r1, r8
 8000c6a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c6e:	fb01 f20c 	mul.w	r2, r1, ip
 8000c72:	429a      	cmp	r2, r3
 8000c74:	d909      	bls.n	8000c8a <__udivmoddi4+0x62>
 8000c76:	18fb      	adds	r3, r7, r3
 8000c78:	f101 30ff 	add.w	r0, r1, #4294967295
 8000c7c:	f080 80ea 	bcs.w	8000e54 <__udivmoddi4+0x22c>
 8000c80:	429a      	cmp	r2, r3
 8000c82:	f240 80e7 	bls.w	8000e54 <__udivmoddi4+0x22c>
 8000c86:	3902      	subs	r1, #2
 8000c88:	443b      	add	r3, r7
 8000c8a:	1a9a      	subs	r2, r3, r2
 8000c8c:	b2a3      	uxth	r3, r4
 8000c8e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c92:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c96:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000c9a:	fb00 fc0c 	mul.w	ip, r0, ip
 8000c9e:	459c      	cmp	ip, r3
 8000ca0:	d909      	bls.n	8000cb6 <__udivmoddi4+0x8e>
 8000ca2:	18fb      	adds	r3, r7, r3
 8000ca4:	f100 32ff 	add.w	r2, r0, #4294967295
 8000ca8:	f080 80d6 	bcs.w	8000e58 <__udivmoddi4+0x230>
 8000cac:	459c      	cmp	ip, r3
 8000cae:	f240 80d3 	bls.w	8000e58 <__udivmoddi4+0x230>
 8000cb2:	443b      	add	r3, r7
 8000cb4:	3802      	subs	r0, #2
 8000cb6:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000cba:	eba3 030c 	sub.w	r3, r3, ip
 8000cbe:	2100      	movs	r1, #0
 8000cc0:	b11d      	cbz	r5, 8000cca <__udivmoddi4+0xa2>
 8000cc2:	40f3      	lsrs	r3, r6
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	e9c5 3200 	strd	r3, r2, [r5]
 8000cca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cce:	428b      	cmp	r3, r1
 8000cd0:	d905      	bls.n	8000cde <__udivmoddi4+0xb6>
 8000cd2:	b10d      	cbz	r5, 8000cd8 <__udivmoddi4+0xb0>
 8000cd4:	e9c5 0100 	strd	r0, r1, [r5]
 8000cd8:	2100      	movs	r1, #0
 8000cda:	4608      	mov	r0, r1
 8000cdc:	e7f5      	b.n	8000cca <__udivmoddi4+0xa2>
 8000cde:	fab3 f183 	clz	r1, r3
 8000ce2:	2900      	cmp	r1, #0
 8000ce4:	d146      	bne.n	8000d74 <__udivmoddi4+0x14c>
 8000ce6:	4573      	cmp	r3, lr
 8000ce8:	d302      	bcc.n	8000cf0 <__udivmoddi4+0xc8>
 8000cea:	4282      	cmp	r2, r0
 8000cec:	f200 8105 	bhi.w	8000efa <__udivmoddi4+0x2d2>
 8000cf0:	1a84      	subs	r4, r0, r2
 8000cf2:	eb6e 0203 	sbc.w	r2, lr, r3
 8000cf6:	2001      	movs	r0, #1
 8000cf8:	4690      	mov	r8, r2
 8000cfa:	2d00      	cmp	r5, #0
 8000cfc:	d0e5      	beq.n	8000cca <__udivmoddi4+0xa2>
 8000cfe:	e9c5 4800 	strd	r4, r8, [r5]
 8000d02:	e7e2      	b.n	8000cca <__udivmoddi4+0xa2>
 8000d04:	2a00      	cmp	r2, #0
 8000d06:	f000 8090 	beq.w	8000e2a <__udivmoddi4+0x202>
 8000d0a:	fab2 f682 	clz	r6, r2
 8000d0e:	2e00      	cmp	r6, #0
 8000d10:	f040 80a4 	bne.w	8000e5c <__udivmoddi4+0x234>
 8000d14:	1a8a      	subs	r2, r1, r2
 8000d16:	0c03      	lsrs	r3, r0, #16
 8000d18:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d1c:	b280      	uxth	r0, r0
 8000d1e:	b2bc      	uxth	r4, r7
 8000d20:	2101      	movs	r1, #1
 8000d22:	fbb2 fcfe 	udiv	ip, r2, lr
 8000d26:	fb0e 221c 	mls	r2, lr, ip, r2
 8000d2a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000d2e:	fb04 f20c 	mul.w	r2, r4, ip
 8000d32:	429a      	cmp	r2, r3
 8000d34:	d907      	bls.n	8000d46 <__udivmoddi4+0x11e>
 8000d36:	18fb      	adds	r3, r7, r3
 8000d38:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000d3c:	d202      	bcs.n	8000d44 <__udivmoddi4+0x11c>
 8000d3e:	429a      	cmp	r2, r3
 8000d40:	f200 80e0 	bhi.w	8000f04 <__udivmoddi4+0x2dc>
 8000d44:	46c4      	mov	ip, r8
 8000d46:	1a9b      	subs	r3, r3, r2
 8000d48:	fbb3 f2fe 	udiv	r2, r3, lr
 8000d4c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000d50:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000d54:	fb02 f404 	mul.w	r4, r2, r4
 8000d58:	429c      	cmp	r4, r3
 8000d5a:	d907      	bls.n	8000d6c <__udivmoddi4+0x144>
 8000d5c:	18fb      	adds	r3, r7, r3
 8000d5e:	f102 30ff 	add.w	r0, r2, #4294967295
 8000d62:	d202      	bcs.n	8000d6a <__udivmoddi4+0x142>
 8000d64:	429c      	cmp	r4, r3
 8000d66:	f200 80ca 	bhi.w	8000efe <__udivmoddi4+0x2d6>
 8000d6a:	4602      	mov	r2, r0
 8000d6c:	1b1b      	subs	r3, r3, r4
 8000d6e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000d72:	e7a5      	b.n	8000cc0 <__udivmoddi4+0x98>
 8000d74:	f1c1 0620 	rsb	r6, r1, #32
 8000d78:	408b      	lsls	r3, r1
 8000d7a:	fa22 f706 	lsr.w	r7, r2, r6
 8000d7e:	431f      	orrs	r7, r3
 8000d80:	fa0e f401 	lsl.w	r4, lr, r1
 8000d84:	fa20 f306 	lsr.w	r3, r0, r6
 8000d88:	fa2e fe06 	lsr.w	lr, lr, r6
 8000d8c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000d90:	4323      	orrs	r3, r4
 8000d92:	fa00 f801 	lsl.w	r8, r0, r1
 8000d96:	fa1f fc87 	uxth.w	ip, r7
 8000d9a:	fbbe f0f9 	udiv	r0, lr, r9
 8000d9e:	0c1c      	lsrs	r4, r3, #16
 8000da0:	fb09 ee10 	mls	lr, r9, r0, lr
 8000da4:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000da8:	fb00 fe0c 	mul.w	lr, r0, ip
 8000dac:	45a6      	cmp	lr, r4
 8000dae:	fa02 f201 	lsl.w	r2, r2, r1
 8000db2:	d909      	bls.n	8000dc8 <__udivmoddi4+0x1a0>
 8000db4:	193c      	adds	r4, r7, r4
 8000db6:	f100 3aff 	add.w	sl, r0, #4294967295
 8000dba:	f080 809c 	bcs.w	8000ef6 <__udivmoddi4+0x2ce>
 8000dbe:	45a6      	cmp	lr, r4
 8000dc0:	f240 8099 	bls.w	8000ef6 <__udivmoddi4+0x2ce>
 8000dc4:	3802      	subs	r0, #2
 8000dc6:	443c      	add	r4, r7
 8000dc8:	eba4 040e 	sub.w	r4, r4, lr
 8000dcc:	fa1f fe83 	uxth.w	lr, r3
 8000dd0:	fbb4 f3f9 	udiv	r3, r4, r9
 8000dd4:	fb09 4413 	mls	r4, r9, r3, r4
 8000dd8:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000ddc:	fb03 fc0c 	mul.w	ip, r3, ip
 8000de0:	45a4      	cmp	ip, r4
 8000de2:	d908      	bls.n	8000df6 <__udivmoddi4+0x1ce>
 8000de4:	193c      	adds	r4, r7, r4
 8000de6:	f103 3eff 	add.w	lr, r3, #4294967295
 8000dea:	f080 8082 	bcs.w	8000ef2 <__udivmoddi4+0x2ca>
 8000dee:	45a4      	cmp	ip, r4
 8000df0:	d97f      	bls.n	8000ef2 <__udivmoddi4+0x2ca>
 8000df2:	3b02      	subs	r3, #2
 8000df4:	443c      	add	r4, r7
 8000df6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000dfa:	eba4 040c 	sub.w	r4, r4, ip
 8000dfe:	fba0 ec02 	umull	lr, ip, r0, r2
 8000e02:	4564      	cmp	r4, ip
 8000e04:	4673      	mov	r3, lr
 8000e06:	46e1      	mov	r9, ip
 8000e08:	d362      	bcc.n	8000ed0 <__udivmoddi4+0x2a8>
 8000e0a:	d05f      	beq.n	8000ecc <__udivmoddi4+0x2a4>
 8000e0c:	b15d      	cbz	r5, 8000e26 <__udivmoddi4+0x1fe>
 8000e0e:	ebb8 0203 	subs.w	r2, r8, r3
 8000e12:	eb64 0409 	sbc.w	r4, r4, r9
 8000e16:	fa04 f606 	lsl.w	r6, r4, r6
 8000e1a:	fa22 f301 	lsr.w	r3, r2, r1
 8000e1e:	431e      	orrs	r6, r3
 8000e20:	40cc      	lsrs	r4, r1
 8000e22:	e9c5 6400 	strd	r6, r4, [r5]
 8000e26:	2100      	movs	r1, #0
 8000e28:	e74f      	b.n	8000cca <__udivmoddi4+0xa2>
 8000e2a:	fbb1 fcf2 	udiv	ip, r1, r2
 8000e2e:	0c01      	lsrs	r1, r0, #16
 8000e30:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000e34:	b280      	uxth	r0, r0
 8000e36:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000e3a:	463b      	mov	r3, r7
 8000e3c:	4638      	mov	r0, r7
 8000e3e:	463c      	mov	r4, r7
 8000e40:	46b8      	mov	r8, r7
 8000e42:	46be      	mov	lr, r7
 8000e44:	2620      	movs	r6, #32
 8000e46:	fbb1 f1f7 	udiv	r1, r1, r7
 8000e4a:	eba2 0208 	sub.w	r2, r2, r8
 8000e4e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000e52:	e766      	b.n	8000d22 <__udivmoddi4+0xfa>
 8000e54:	4601      	mov	r1, r0
 8000e56:	e718      	b.n	8000c8a <__udivmoddi4+0x62>
 8000e58:	4610      	mov	r0, r2
 8000e5a:	e72c      	b.n	8000cb6 <__udivmoddi4+0x8e>
 8000e5c:	f1c6 0220 	rsb	r2, r6, #32
 8000e60:	fa2e f302 	lsr.w	r3, lr, r2
 8000e64:	40b7      	lsls	r7, r6
 8000e66:	40b1      	lsls	r1, r6
 8000e68:	fa20 f202 	lsr.w	r2, r0, r2
 8000e6c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e70:	430a      	orrs	r2, r1
 8000e72:	fbb3 f8fe 	udiv	r8, r3, lr
 8000e76:	b2bc      	uxth	r4, r7
 8000e78:	fb0e 3318 	mls	r3, lr, r8, r3
 8000e7c:	0c11      	lsrs	r1, r2, #16
 8000e7e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e82:	fb08 f904 	mul.w	r9, r8, r4
 8000e86:	40b0      	lsls	r0, r6
 8000e88:	4589      	cmp	r9, r1
 8000e8a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000e8e:	b280      	uxth	r0, r0
 8000e90:	d93e      	bls.n	8000f10 <__udivmoddi4+0x2e8>
 8000e92:	1879      	adds	r1, r7, r1
 8000e94:	f108 3cff 	add.w	ip, r8, #4294967295
 8000e98:	d201      	bcs.n	8000e9e <__udivmoddi4+0x276>
 8000e9a:	4589      	cmp	r9, r1
 8000e9c:	d81f      	bhi.n	8000ede <__udivmoddi4+0x2b6>
 8000e9e:	eba1 0109 	sub.w	r1, r1, r9
 8000ea2:	fbb1 f9fe 	udiv	r9, r1, lr
 8000ea6:	fb09 f804 	mul.w	r8, r9, r4
 8000eaa:	fb0e 1119 	mls	r1, lr, r9, r1
 8000eae:	b292      	uxth	r2, r2
 8000eb0:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000eb4:	4542      	cmp	r2, r8
 8000eb6:	d229      	bcs.n	8000f0c <__udivmoddi4+0x2e4>
 8000eb8:	18ba      	adds	r2, r7, r2
 8000eba:	f109 31ff 	add.w	r1, r9, #4294967295
 8000ebe:	d2c4      	bcs.n	8000e4a <__udivmoddi4+0x222>
 8000ec0:	4542      	cmp	r2, r8
 8000ec2:	d2c2      	bcs.n	8000e4a <__udivmoddi4+0x222>
 8000ec4:	f1a9 0102 	sub.w	r1, r9, #2
 8000ec8:	443a      	add	r2, r7
 8000eca:	e7be      	b.n	8000e4a <__udivmoddi4+0x222>
 8000ecc:	45f0      	cmp	r8, lr
 8000ece:	d29d      	bcs.n	8000e0c <__udivmoddi4+0x1e4>
 8000ed0:	ebbe 0302 	subs.w	r3, lr, r2
 8000ed4:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000ed8:	3801      	subs	r0, #1
 8000eda:	46e1      	mov	r9, ip
 8000edc:	e796      	b.n	8000e0c <__udivmoddi4+0x1e4>
 8000ede:	eba7 0909 	sub.w	r9, r7, r9
 8000ee2:	4449      	add	r1, r9
 8000ee4:	f1a8 0c02 	sub.w	ip, r8, #2
 8000ee8:	fbb1 f9fe 	udiv	r9, r1, lr
 8000eec:	fb09 f804 	mul.w	r8, r9, r4
 8000ef0:	e7db      	b.n	8000eaa <__udivmoddi4+0x282>
 8000ef2:	4673      	mov	r3, lr
 8000ef4:	e77f      	b.n	8000df6 <__udivmoddi4+0x1ce>
 8000ef6:	4650      	mov	r0, sl
 8000ef8:	e766      	b.n	8000dc8 <__udivmoddi4+0x1a0>
 8000efa:	4608      	mov	r0, r1
 8000efc:	e6fd      	b.n	8000cfa <__udivmoddi4+0xd2>
 8000efe:	443b      	add	r3, r7
 8000f00:	3a02      	subs	r2, #2
 8000f02:	e733      	b.n	8000d6c <__udivmoddi4+0x144>
 8000f04:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f08:	443b      	add	r3, r7
 8000f0a:	e71c      	b.n	8000d46 <__udivmoddi4+0x11e>
 8000f0c:	4649      	mov	r1, r9
 8000f0e:	e79c      	b.n	8000e4a <__udivmoddi4+0x222>
 8000f10:	eba1 0109 	sub.w	r1, r1, r9
 8000f14:	46c4      	mov	ip, r8
 8000f16:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f1a:	fb09 f804 	mul.w	r8, r9, r4
 8000f1e:	e7c4      	b.n	8000eaa <__udivmoddi4+0x282>

08000f20 <__aeabi_idiv0>:
 8000f20:	4770      	bx	lr
 8000f22:	bf00      	nop

08000f24 <app_log>:
 * @brief wrapper around vsnprintf and hal_uart_transmit.
 * @param fmt the printf-style format string.
 * @param ... variable arguments for the format string.
 * @return void.
 */
void app_log(const char *fmt, ...) {
 8000f24:	b40f      	push	{r0, r1, r2, r3}
 8000f26:	b580      	push	{r7, lr}
 8000f28:	b084      	sub	sp, #16
 8000f2a:	af00      	add	r7, sp, #0
    static char buf[256];
    va_list ap;

    va_start(ap, fmt);
 8000f2c:	f107 031c 	add.w	r3, r7, #28
 8000f30:	607b      	str	r3, [r7, #4]
    int n = vsnprintf(buf, sizeof(buf), fmt, ap);
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	69ba      	ldr	r2, [r7, #24]
 8000f36:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000f3a:	480d      	ldr	r0, [pc, #52]	@ (8000f70 <app_log+0x4c>)
 8000f3c:	f005 ff22 	bl	8006d84 <vsniprintf>
 8000f40:	60f8      	str	r0, [r7, #12]
    va_end(ap);

    if (n > 0) {
 8000f42:	68fb      	ldr	r3, [r7, #12]
 8000f44:	2b00      	cmp	r3, #0
 8000f46:	dd0c      	ble.n	8000f62 <app_log+0x3e>
        UART_HandleTypeDef* huart = get_debug_uart();
 8000f48:	f000 fb64 	bl	8001614 <get_debug_uart>
 8000f4c:	60b8      	str	r0, [r7, #8]
        if (huart) {
 8000f4e:	68bb      	ldr	r3, [r7, #8]
 8000f50:	2b00      	cmp	r3, #0
 8000f52:	d006      	beq.n	8000f62 <app_log+0x3e>
            HAL_UART_Transmit(huart, (uint8_t*)buf, n, 100);
 8000f54:	68fb      	ldr	r3, [r7, #12]
 8000f56:	b29a      	uxth	r2, r3
 8000f58:	2364      	movs	r3, #100	@ 0x64
 8000f5a:	4905      	ldr	r1, [pc, #20]	@ (8000f70 <app_log+0x4c>)
 8000f5c:	68b8      	ldr	r0, [r7, #8]
 8000f5e:	f004 fb0b 	bl	8005578 <HAL_UART_Transmit>
        }
    }
}
 8000f62:	bf00      	nop
 8000f64:	3710      	adds	r7, #16
 8000f66:	46bd      	mov	sp, r7
 8000f68:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000f6c:	b004      	add	sp, #16
 8000f6e:	4770      	bx	lr
 8000f70:	200001f0 	.word	0x200001f0

08000f74 <fpga_init>:

// need role definition (master/slave) to configure fpga accordingly
#include "main.h"


void fpga_init(SPI_HandleTypeDef *hspi) {
 8000f74:	b580      	push	{r7, lr}
 8000f76:	b082      	sub	sp, #8
 8000f78:	af00      	add	r7, sp, #0
 8000f7a:	6078      	str	r0, [r7, #4]
    fpga_comms_init(hspi);
 8000f7c:	6878      	ldr	r0, [r7, #4]
 8000f7e:	f000 ff95 	bl	8001eac <fpga_comms_init>
}
 8000f82:	bf00      	nop
 8000f84:	3708      	adds	r7, #8
 8000f86:	46bd      	mov	sp, r7
 8000f88:	bd80      	pop	{r7, pc}
	...

08000f8c <reg_write>:

void reg_write(uint8_t addr, uint16_t val) {
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	b084      	sub	sp, #16
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	4603      	mov	r3, r0
 8000f94:	460a      	mov	r2, r1
 8000f96:	71fb      	strb	r3, [r7, #7]
 8000f98:	4613      	mov	r3, r2
 8000f9a:	80bb      	strh	r3, [r7, #4]
    reg_rw_status_t status = fpga_comms_write(addr, val);
 8000f9c:	88ba      	ldrh	r2, [r7, #4]
 8000f9e:	79fb      	ldrb	r3, [r7, #7]
 8000fa0:	4611      	mov	r1, r2
 8000fa2:	4618      	mov	r0, r3
 8000fa4:	f000 ff92 	bl	8001ecc <fpga_comms_write>
 8000fa8:	4603      	mov	r3, r0
 8000faa:	73fb      	strb	r3, [r7, #15]
    if (status != REG_RW_OK) {
 8000fac:	7bfb      	ldrb	r3, [r7, #15]
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	d005      	beq.n	8000fbe <reg_write+0x32>
        app_log("err: reg_write(0x%02X) failed, status=%d\r\n", addr, status);
 8000fb2:	79fb      	ldrb	r3, [r7, #7]
 8000fb4:	7bfa      	ldrb	r2, [r7, #15]
 8000fb6:	4619      	mov	r1, r3
 8000fb8:	4804      	ldr	r0, [pc, #16]	@ (8000fcc <reg_write+0x40>)
 8000fba:	f7ff ffb3 	bl	8000f24 <app_log>
    }
    HAL_Delay(1);
 8000fbe:	2001      	movs	r0, #1
 8000fc0:	f001 fbd6 	bl	8002770 <HAL_Delay>
}
 8000fc4:	bf00      	nop
 8000fc6:	3710      	adds	r7, #16
 8000fc8:	46bd      	mov	sp, r7
 8000fca:	bd80      	pop	{r7, pc}
 8000fcc:	08008f98 	.word	0x08008f98

08000fd0 <reg_read>:

uint16_t reg_read(uint8_t addr) {
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	b084      	sub	sp, #16
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	4603      	mov	r3, r0
 8000fd8:	71fb      	strb	r3, [r7, #7]
    uint16_t read_data = 0;
 8000fda:	2300      	movs	r3, #0
 8000fdc:	81bb      	strh	r3, [r7, #12]
    reg_rw_status_t status = fpga_comms_read(addr, &read_data);
 8000fde:	f107 020c 	add.w	r2, r7, #12
 8000fe2:	79fb      	ldrb	r3, [r7, #7]
 8000fe4:	4611      	mov	r1, r2
 8000fe6:	4618      	mov	r0, r3
 8000fe8:	f000 ffe6 	bl	8001fb8 <fpga_comms_read>
 8000fec:	4603      	mov	r3, r0
 8000fee:	73fb      	strb	r3, [r7, #15]
    if (status != REG_RW_OK) {
 8000ff0:	7bfb      	ldrb	r3, [r7, #15]
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	d008      	beq.n	8001008 <reg_read+0x38>
        app_log("err: reg_read(0x%02X) failed, status=%d\r\n", addr, status);
 8000ff6:	79fb      	ldrb	r3, [r7, #7]
 8000ff8:	7bfa      	ldrb	r2, [r7, #15]
 8000ffa:	4619      	mov	r1, r3
 8000ffc:	4805      	ldr	r0, [pc, #20]	@ (8001014 <reg_read+0x44>)
 8000ffe:	f7ff ff91 	bl	8000f24 <app_log>
        return 0xFFFF;
 8001002:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001006:	e000      	b.n	800100a <reg_read+0x3a>
    }
    return read_data;
 8001008:	89bb      	ldrh	r3, [r7, #12]
}
 800100a:	4618      	mov	r0, r3
 800100c:	3710      	adds	r7, #16
 800100e:	46bd      	mov	sp, r7
 8001010:	bd80      	pop	{r7, pc}
 8001012:	bf00      	nop
 8001014:	08008fc4 	.word	0x08008fc4

08001018 <setup_reg>:

void setup_reg(void) {
 8001018:	b580      	push	{r7, lr}
 800101a:	b084      	sub	sp, #16
 800101c:	af00      	add	r7, sp, #0
    app_log("- checking FPGA SPI com...\r\n");
 800101e:	4818      	ldr	r0, [pc, #96]	@ (8001080 <setup_reg+0x68>)
 8001020:	f7ff ff80 	bl	8000f24 <app_log>
    const int max_attempts = 5;
 8001024:	2305      	movs	r3, #5
 8001026:	60bb      	str	r3, [r7, #8]
    for (int i = 0; i < max_attempts; ++i) {
 8001028:	2300      	movs	r3, #0
 800102a:	60fb      	str	r3, [r7, #12]
 800102c:	e01c      	b.n	8001068 <setup_reg+0x50>
        uint16_t magic_number = reg_read(0x03);
 800102e:	2003      	movs	r0, #3
 8001030:	f7ff ffce 	bl	8000fd0 <reg_read>
 8001034:	4603      	mov	r3, r0
 8001036:	80fb      	strh	r3, [r7, #6]
        if (magic_number == 0x5678) {
 8001038:	88fb      	ldrh	r3, [r7, #6]
 800103a:	f245 6278 	movw	r2, #22136	@ 0x5678
 800103e:	4293      	cmp	r3, r2
 8001040:	d105      	bne.n	800104e <setup_reg+0x36>
            app_log("- com verified (magic=0x%04X)\r\n", magic_number);
 8001042:	88fb      	ldrh	r3, [r7, #6]
 8001044:	4619      	mov	r1, r3
 8001046:	480f      	ldr	r0, [pc, #60]	@ (8001084 <setup_reg+0x6c>)
 8001048:	f7ff ff6c 	bl	8000f24 <app_log>
            return;
 800104c:	e014      	b.n	8001078 <setup_reg+0x60>
        }
        app_log("[Bad read]: attempt %d, reading reg 0x03... got 0x%04X\r\n", i + 1, magic_number);
 800104e:	68fb      	ldr	r3, [r7, #12]
 8001050:	3301      	adds	r3, #1
 8001052:	88fa      	ldrh	r2, [r7, #6]
 8001054:	4619      	mov	r1, r3
 8001056:	480c      	ldr	r0, [pc, #48]	@ (8001088 <setup_reg+0x70>)
 8001058:	f7ff ff64 	bl	8000f24 <app_log>
        HAL_Delay(250);
 800105c:	20fa      	movs	r0, #250	@ 0xfa
 800105e:	f001 fb87 	bl	8002770 <HAL_Delay>
    for (int i = 0; i < max_attempts; ++i) {
 8001062:	68fb      	ldr	r3, [r7, #12]
 8001064:	3301      	adds	r3, #1
 8001066:	60fb      	str	r3, [r7, #12]
 8001068:	68fa      	ldr	r2, [r7, #12]
 800106a:	68bb      	ldr	r3, [r7, #8]
 800106c:	429a      	cmp	r2, r3
 800106e:	dbde      	blt.n	800102e <setup_reg+0x16>
    }
    app_log("- Failed to verify FPGA SPI com after %d attempts.\r\n", max_attempts);
 8001070:	68b9      	ldr	r1, [r7, #8]
 8001072:	4806      	ldr	r0, [pc, #24]	@ (800108c <setup_reg+0x74>)
 8001074:	f7ff ff56 	bl	8000f24 <app_log>
}
 8001078:	3710      	adds	r7, #16
 800107a:	46bd      	mov	sp, r7
 800107c:	bd80      	pop	{r7, pc}
 800107e:	bf00      	nop
 8001080:	08008ff0 	.word	0x08008ff0
 8001084:	08009010 	.word	0x08009010
 8001088:	08009030 	.word	0x08009030
 800108c:	0800906c 	.word	0x0800906c

08001090 <fpga_reg>:

void fpga_reg(){
 8001090:	b580      	push	{r7, lr}
 8001092:	b082      	sub	sp, #8
 8001094:	af00      	add	r7, sp, #0
	// sets the master/slave role based on the DEVICE_ROLE define.

	int CHANNEL_RX = 1; // This was hardcoded in the Teensy code for the slave.
 8001096:	2301      	movs	r3, #1
 8001098:	607b      	str	r3, [r7, #4]
	reg_write(0x23, 0x02);  // mod in reset in case PLL is in weird state
 800109a:	2102      	movs	r1, #2
 800109c:	2023      	movs	r0, #35	@ 0x23
 800109e:	f7ff ff75 	bl	8000f8c <reg_write>
	reg_write(0x23, 0x00);
 80010a2:	2100      	movs	r1, #0
 80010a4:	2023      	movs	r0, #35	@ 0x23
 80010a6:	f7ff ff71 	bl	8000f8c <reg_write>

    #if (DEVICE_ROLE == ROLE_MASTER)
        reg_write(0x01, 0x02); // TDD disabled, master
        app_log("- FPGA configured as MASTER\r\n");
    #else
        reg_write(0x01, 0x00); // TDD disabled, slave
 80010aa:	2100      	movs	r1, #0
 80010ac:	2001      	movs	r0, #1
 80010ae:	f7ff ff6d 	bl	8000f8c <reg_write>
        app_log("- FPGA configured as SLAVE\r\n");
 80010b2:	4819      	ldr	r0, [pc, #100]	@ (8001118 <fpga_reg+0x88>)
 80010b4:	f7ff ff36 	bl	8000f24 <app_log>
    #endif

	set_Rx(0);
 80010b8:	2000      	movs	r0, #0
 80010ba:	f000 fc61 	bl	8001980 <set_Rx>
	reg_write(0x65, 0);				// ensure loopback disabled
 80010be:	2100      	movs	r1, #0
 80010c0:	2065      	movs	r0, #101	@ 0x65
 80010c2:	f7ff ff63 	bl	8000f8c <reg_write>
	reg_write(0x22, CHANNEL_RX);	// set Rx MUX
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	b29b      	uxth	r3, r3
 80010ca:	4619      	mov	r1, r3
 80010cc:	2022      	movs	r0, #34	@ 0x22
 80010ce:	f7ff ff5d 	bl	8000f8c <reg_write>
	reg_write(0x66, 2);				// choose to read the rx register that tx increments for frame count
 80010d2:	2102      	movs	r1, #2
 80010d4:	2066      	movs	r0, #102	@ 0x66
 80010d6:	f7ff ff59 	bl	8000f8c <reg_write>
	reg_write(0x4D, 1);				// trigger a capture to clear out
 80010da:	2101      	movs	r1, #1
 80010dc:	204d      	movs	r0, #77	@ 0x4d
 80010de:	f7ff ff55 	bl	8000f8c <reg_write>
	reg_write(0x62, 0);				// no disable rx sd fb
 80010e2:	2100      	movs	r1, #0
 80010e4:	2062      	movs	r0, #98	@ 0x62
 80010e6:	f7ff ff51 	bl	8000f8c <reg_write>
	reg_write(0x51, 90);			// RSSI set point
 80010ea:	215a      	movs	r1, #90	@ 0x5a
 80010ec:	2051      	movs	r0, #81	@ 0x51
 80010ee:	f7ff ff4d 	bl	8000f8c <reg_write>
	reg_write(0x23, 0x00);			// Force CW off
 80010f2:	2100      	movs	r1, #0
 80010f4:	2023      	movs	r0, #35	@ 0x23
 80010f6:	f7ff ff49 	bl	8000f8c <reg_write>
	reg_write(0x25, 0x00);			// disable qec correlation
 80010fa:	2100      	movs	r1, #0
 80010fc:	2025      	movs	r0, #37	@ 0x25
 80010fe:	f7ff ff45 	bl	8000f8c <reg_write>
	reg_write(0x64, 32);			// digital rx gain of unity
 8001102:	2120      	movs	r1, #32
 8001104:	2064      	movs	r0, #100	@ 0x64
 8001106:	f7ff ff41 	bl	8000f8c <reg_write>
	app_log("- FPGA regs setup complete\r\n");
 800110a:	4804      	ldr	r0, [pc, #16]	@ (800111c <fpga_reg+0x8c>)
 800110c:	f7ff ff0a 	bl	8000f24 <app_log>
}
 8001110:	bf00      	nop
 8001112:	3708      	adds	r7, #8
 8001114:	46bd      	mov	sp, r7
 8001116:	bd80      	pop	{r7, pc}
 8001118:	080090a4 	.word	0x080090a4
 800111c:	080090c4 	.word	0x080090c4

08001120 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8001120:	b580      	push	{r7, lr}
 8001122:	b082      	sub	sp, #8
 8001124:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8001126:	f001 fab2 	bl	800268e <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 800112a:	f000 f835 	bl	8001198 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 800112e:	f000 fa27 	bl	8001580 <MX_GPIO_Init>
	MX_ADC1_Init();
 8001132:	f000 f871 	bl	8001218 <MX_ADC1_Init>
	MX_ADC2_Init();
 8001136:	f000 f8e7 	bl	8001308 <MX_ADC2_Init>
	MX_SPI1_Init();
 800113a:	f000 f94b 	bl	80013d4 <MX_SPI1_Init>
	MX_USART1_UART_Init();
 800113e:	f000 f987 	bl	8001450 <MX_USART1_UART_Init>
	MX_USART2_UART_Init();
 8001142:	f000 f9d1 	bl	80014e8 <MX_USART2_UART_Init>
	/* USER CODE BEGIN 2 */
	app_log("\r\n- peripheral init\r\n");
 8001146:	4811      	ldr	r0, [pc, #68]	@ (800118c <main+0x6c>)
 8001148:	f7ff feec 	bl	8000f24 <app_log>
	fpga_init(&hspi1); // initialize SPI for FPGA
 800114c:	4810      	ldr	r0, [pc, #64]	@ (8001190 <main+0x70>)
 800114e:	f7ff ff11 	bl	8000f74 <fpga_init>
	setup_reg(); // verify SPI com
 8001152:	f7ff ff61 	bl	8001018 <setup_reg>
	write_max2851_base_regs();
 8001156:	f000 fb47 	bl	80017e8 <write_max2851_base_regs>
	write_max2850_base_regs();
 800115a:	f000 fa6b 	bl	8001634 <write_max2850_base_regs>
	fpga_reg(); // This now sets the master/slave role
 800115e:	f7ff ff97 	bl	8001090 <fpga_reg>

	HAL_Delay(1000); // Delay to let things settle. Necessary?
 8001162:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001166:	f001 fb03 	bl	8002770 <HAL_Delay>
                app_log("- VGA Test complete. Repeating in 5 seconds. -\r\n");
                HAL_Delay(5000);
            #endif
        #elif (RUN_GAIN_TRACK_TEST == 1)
#if (DEVICE_ROLE == ROLE_SLAVE)
		app_log("\r\n- Starting Gain Track Test -\r\n");
 800116a:	480a      	ldr	r0, [pc, #40]	@ (8001194 <main+0x74>)
 800116c:	f7ff feda 	bl	8000f24 <app_log>
		set_Rx(0);
 8001170:	2000      	movs	r0, #0
 8001172:	f000 fc05 	bl	8001980 <set_Rx>
		int16_t initial_gain = find_best_rx_vga();
 8001176:	f000 fc37 	bl	80019e8 <find_best_rx_vga>
 800117a:	4603      	mov	r3, r0
 800117c:	80fb      	strh	r3, [r7, #6]
		gain_track(initial_gain); // This function runs forever
 800117e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001182:	4618      	mov	r0, r3
 8001184:	f000 fc7c 	bl	8001a80 <gain_track>
	while (1) {
 8001188:	bf00      	nop
 800118a:	e7ee      	b.n	800116a <main+0x4a>
 800118c:	080090e4 	.word	0x080090e4
 8001190:	200003c8 	.word	0x200003c8
 8001194:	080090fc 	.word	0x080090fc

08001198 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8001198:	b580      	push	{r7, lr}
 800119a:	b094      	sub	sp, #80	@ 0x50
 800119c:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 800119e:	f107 0318 	add.w	r3, r7, #24
 80011a2:	2238      	movs	r2, #56	@ 0x38
 80011a4:	2100      	movs	r1, #0
 80011a6:	4618      	mov	r0, r3
 80011a8:	f005 fdfa 	bl	8006da0 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 80011ac:	1d3b      	adds	r3, r7, #4
 80011ae:	2200      	movs	r2, #0
 80011b0:	601a      	str	r2, [r3, #0]
 80011b2:	605a      	str	r2, [r3, #4]
 80011b4:	609a      	str	r2, [r3, #8]
 80011b6:	60da      	str	r2, [r3, #12]
 80011b8:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 80011ba:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80011be:	f002 fd8b 	bl	8003cd8 <HAL_PWREx_ControlVoltageScaling>

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80011c2:	2302      	movs	r3, #2
 80011c4:	61bb      	str	r3, [r7, #24]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80011c6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80011ca:	627b      	str	r3, [r7, #36]	@ 0x24
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80011cc:	2340      	movs	r3, #64	@ 0x40
 80011ce:	62bb      	str	r3, [r7, #40]	@ 0x28
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80011d0:	2300      	movs	r3, #0
 80011d2:	637b      	str	r3, [r7, #52]	@ 0x34
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 80011d4:	f107 0318 	add.w	r3, r7, #24
 80011d8:	4618      	mov	r0, r3
 80011da:	f002 fe31 	bl	8003e40 <HAL_RCC_OscConfig>
 80011de:	4603      	mov	r3, r0
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d001      	beq.n	80011e8 <SystemClock_Config+0x50>
		Error_Handler();
 80011e4:	f000 fa20 	bl	8001628 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 80011e8:	230f      	movs	r3, #15
 80011ea:	607b      	str	r3, [r7, #4]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80011ec:	2301      	movs	r3, #1
 80011ee:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80011f0:	2300      	movs	r3, #0
 80011f2:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80011f4:	2300      	movs	r3, #0
 80011f6:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80011f8:	2300      	movs	r3, #0
 80011fa:	617b      	str	r3, [r7, #20]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK) {
 80011fc:	1d3b      	adds	r3, r7, #4
 80011fe:	2100      	movs	r1, #0
 8001200:	4618      	mov	r0, r3
 8001202:	f003 f92f 	bl	8004464 <HAL_RCC_ClockConfig>
 8001206:	4603      	mov	r3, r0
 8001208:	2b00      	cmp	r3, #0
 800120a:	d001      	beq.n	8001210 <SystemClock_Config+0x78>
		Error_Handler();
 800120c:	f000 fa0c 	bl	8001628 <Error_Handler>
	}
}
 8001210:	bf00      	nop
 8001212:	3750      	adds	r7, #80	@ 0x50
 8001214:	46bd      	mov	sp, r7
 8001216:	bd80      	pop	{r7, pc}

08001218 <MX_ADC1_Init>:
/**
 * @brief ADC1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC1_Init(void) {
 8001218:	b580      	push	{r7, lr}
 800121a:	b08c      	sub	sp, #48	@ 0x30
 800121c:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN ADC1_Init 0 */

	/* USER CODE END ADC1_Init 0 */

	ADC_MultiModeTypeDef multimode = { 0 };
 800121e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001222:	2200      	movs	r2, #0
 8001224:	601a      	str	r2, [r3, #0]
 8001226:	605a      	str	r2, [r3, #4]
 8001228:	609a      	str	r2, [r3, #8]
	ADC_ChannelConfTypeDef sConfig = { 0 };
 800122a:	1d3b      	adds	r3, r7, #4
 800122c:	2220      	movs	r2, #32
 800122e:	2100      	movs	r1, #0
 8001230:	4618      	mov	r0, r3
 8001232:	f005 fdb5 	bl	8006da0 <memset>

	/* USER CODE END ADC1_Init 1 */

	/** Common config
	 */
	hadc1.Instance = ADC1;
 8001236:	4b32      	ldr	r3, [pc, #200]	@ (8001300 <MX_ADC1_Init+0xe8>)
 8001238:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800123c:	601a      	str	r2, [r3, #0]
	hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 800123e:	4b30      	ldr	r3, [pc, #192]	@ (8001300 <MX_ADC1_Init+0xe8>)
 8001240:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001244:	605a      	str	r2, [r3, #4]
	hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001246:	4b2e      	ldr	r3, [pc, #184]	@ (8001300 <MX_ADC1_Init+0xe8>)
 8001248:	2200      	movs	r2, #0
 800124a:	609a      	str	r2, [r3, #8]
	hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800124c:	4b2c      	ldr	r3, [pc, #176]	@ (8001300 <MX_ADC1_Init+0xe8>)
 800124e:	2200      	movs	r2, #0
 8001250:	60da      	str	r2, [r3, #12]
	hadc1.Init.GainCompensation = 0;
 8001252:	4b2b      	ldr	r3, [pc, #172]	@ (8001300 <MX_ADC1_Init+0xe8>)
 8001254:	2200      	movs	r2, #0
 8001256:	611a      	str	r2, [r3, #16]
	hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001258:	4b29      	ldr	r3, [pc, #164]	@ (8001300 <MX_ADC1_Init+0xe8>)
 800125a:	2200      	movs	r2, #0
 800125c:	615a      	str	r2, [r3, #20]
	hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800125e:	4b28      	ldr	r3, [pc, #160]	@ (8001300 <MX_ADC1_Init+0xe8>)
 8001260:	2204      	movs	r2, #4
 8001262:	619a      	str	r2, [r3, #24]
	hadc1.Init.LowPowerAutoWait = DISABLE;
 8001264:	4b26      	ldr	r3, [pc, #152]	@ (8001300 <MX_ADC1_Init+0xe8>)
 8001266:	2200      	movs	r2, #0
 8001268:	771a      	strb	r2, [r3, #28]
	hadc1.Init.ContinuousConvMode = DISABLE;
 800126a:	4b25      	ldr	r3, [pc, #148]	@ (8001300 <MX_ADC1_Init+0xe8>)
 800126c:	2200      	movs	r2, #0
 800126e:	775a      	strb	r2, [r3, #29]
	hadc1.Init.NbrOfConversion = 1;
 8001270:	4b23      	ldr	r3, [pc, #140]	@ (8001300 <MX_ADC1_Init+0xe8>)
 8001272:	2201      	movs	r2, #1
 8001274:	621a      	str	r2, [r3, #32]
	hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001276:	4b22      	ldr	r3, [pc, #136]	@ (8001300 <MX_ADC1_Init+0xe8>)
 8001278:	2200      	movs	r2, #0
 800127a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
	hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800127e:	4b20      	ldr	r3, [pc, #128]	@ (8001300 <MX_ADC1_Init+0xe8>)
 8001280:	2200      	movs	r2, #0
 8001282:	62da      	str	r2, [r3, #44]	@ 0x2c
	hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001284:	4b1e      	ldr	r3, [pc, #120]	@ (8001300 <MX_ADC1_Init+0xe8>)
 8001286:	2200      	movs	r2, #0
 8001288:	631a      	str	r2, [r3, #48]	@ 0x30
	hadc1.Init.DMAContinuousRequests = DISABLE;
 800128a:	4b1d      	ldr	r3, [pc, #116]	@ (8001300 <MX_ADC1_Init+0xe8>)
 800128c:	2200      	movs	r2, #0
 800128e:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
	hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001292:	4b1b      	ldr	r3, [pc, #108]	@ (8001300 <MX_ADC1_Init+0xe8>)
 8001294:	2200      	movs	r2, #0
 8001296:	63da      	str	r2, [r3, #60]	@ 0x3c
	hadc1.Init.OversamplingMode = DISABLE;
 8001298:	4b19      	ldr	r3, [pc, #100]	@ (8001300 <MX_ADC1_Init+0xe8>)
 800129a:	2200      	movs	r2, #0
 800129c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
	if (HAL_ADC_Init(&hadc1) != HAL_OK) {
 80012a0:	4817      	ldr	r0, [pc, #92]	@ (8001300 <MX_ADC1_Init+0xe8>)
 80012a2:	f001 fc5d 	bl	8002b60 <HAL_ADC_Init>
 80012a6:	4603      	mov	r3, r0
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d001      	beq.n	80012b0 <MX_ADC1_Init+0x98>
		Error_Handler();
 80012ac:	f000 f9bc 	bl	8001628 <Error_Handler>
	}

	/** Configure the ADC multi-mode
	 */
	multimode.Mode = ADC_MODE_INDEPENDENT;
 80012b0:	2300      	movs	r3, #0
 80012b2:	627b      	str	r3, [r7, #36]	@ 0x24
	if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK) {
 80012b4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80012b8:	4619      	mov	r1, r3
 80012ba:	4811      	ldr	r0, [pc, #68]	@ (8001300 <MX_ADC1_Init+0xe8>)
 80012bc:	f002 f9ea 	bl	8003694 <HAL_ADCEx_MultiModeConfigChannel>
 80012c0:	4603      	mov	r3, r0
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d001      	beq.n	80012ca <MX_ADC1_Init+0xb2>
		Error_Handler();
 80012c6:	f000 f9af 	bl	8001628 <Error_Handler>
	}

	/** Configure Regular Channel
	 */
	sConfig.Channel = ADC_CHANNEL_3;
 80012ca:	4b0e      	ldr	r3, [pc, #56]	@ (8001304 <MX_ADC1_Init+0xec>)
 80012cc:	607b      	str	r3, [r7, #4]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 80012ce:	2306      	movs	r3, #6
 80012d0:	60bb      	str	r3, [r7, #8]
	sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80012d2:	2300      	movs	r3, #0
 80012d4:	60fb      	str	r3, [r7, #12]
	sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80012d6:	237f      	movs	r3, #127	@ 0x7f
 80012d8:	613b      	str	r3, [r7, #16]
	sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80012da:	2304      	movs	r3, #4
 80012dc:	617b      	str	r3, [r7, #20]
	sConfig.Offset = 0;
 80012de:	2300      	movs	r3, #0
 80012e0:	61bb      	str	r3, [r7, #24]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 80012e2:	1d3b      	adds	r3, r7, #4
 80012e4:	4619      	mov	r1, r3
 80012e6:	4806      	ldr	r0, [pc, #24]	@ (8001300 <MX_ADC1_Init+0xe8>)
 80012e8:	f001 fdbe 	bl	8002e68 <HAL_ADC_ConfigChannel>
 80012ec:	4603      	mov	r3, r0
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d001      	beq.n	80012f6 <MX_ADC1_Init+0xde>
		Error_Handler();
 80012f2:	f000 f999 	bl	8001628 <Error_Handler>
	}
	/* USER CODE BEGIN ADC1_Init 2 */

	/* USER CODE END ADC1_Init 2 */

}
 80012f6:	bf00      	nop
 80012f8:	3730      	adds	r7, #48	@ 0x30
 80012fa:	46bd      	mov	sp, r7
 80012fc:	bd80      	pop	{r7, pc}
 80012fe:	bf00      	nop
 8001300:	200002f0 	.word	0x200002f0
 8001304:	0c900008 	.word	0x0c900008

08001308 <MX_ADC2_Init>:
/**
 * @brief ADC2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC2_Init(void) {
 8001308:	b580      	push	{r7, lr}
 800130a:	b088      	sub	sp, #32
 800130c:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN ADC2_Init 0 */

	/* USER CODE END ADC2_Init 0 */

	ADC_ChannelConfTypeDef sConfig = { 0 };
 800130e:	463b      	mov	r3, r7
 8001310:	2220      	movs	r2, #32
 8001312:	2100      	movs	r1, #0
 8001314:	4618      	mov	r0, r3
 8001316:	f005 fd43 	bl	8006da0 <memset>

	/* USER CODE END ADC2_Init 1 */

	/** Common config
	 */
	hadc2.Instance = ADC2;
 800131a:	4b2b      	ldr	r3, [pc, #172]	@ (80013c8 <MX_ADC2_Init+0xc0>)
 800131c:	4a2b      	ldr	r2, [pc, #172]	@ (80013cc <MX_ADC2_Init+0xc4>)
 800131e:	601a      	str	r2, [r3, #0]
	hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8001320:	4b29      	ldr	r3, [pc, #164]	@ (80013c8 <MX_ADC2_Init+0xc0>)
 8001322:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001326:	605a      	str	r2, [r3, #4]
	hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8001328:	4b27      	ldr	r3, [pc, #156]	@ (80013c8 <MX_ADC2_Init+0xc0>)
 800132a:	2200      	movs	r2, #0
 800132c:	609a      	str	r2, [r3, #8]
	hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800132e:	4b26      	ldr	r3, [pc, #152]	@ (80013c8 <MX_ADC2_Init+0xc0>)
 8001330:	2200      	movs	r2, #0
 8001332:	60da      	str	r2, [r3, #12]
	hadc2.Init.GainCompensation = 0;
 8001334:	4b24      	ldr	r3, [pc, #144]	@ (80013c8 <MX_ADC2_Init+0xc0>)
 8001336:	2200      	movs	r2, #0
 8001338:	611a      	str	r2, [r3, #16]
	hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800133a:	4b23      	ldr	r3, [pc, #140]	@ (80013c8 <MX_ADC2_Init+0xc0>)
 800133c:	2200      	movs	r2, #0
 800133e:	615a      	str	r2, [r3, #20]
	hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001340:	4b21      	ldr	r3, [pc, #132]	@ (80013c8 <MX_ADC2_Init+0xc0>)
 8001342:	2204      	movs	r2, #4
 8001344:	619a      	str	r2, [r3, #24]
	hadc2.Init.LowPowerAutoWait = DISABLE;
 8001346:	4b20      	ldr	r3, [pc, #128]	@ (80013c8 <MX_ADC2_Init+0xc0>)
 8001348:	2200      	movs	r2, #0
 800134a:	771a      	strb	r2, [r3, #28]
	hadc2.Init.ContinuousConvMode = DISABLE;
 800134c:	4b1e      	ldr	r3, [pc, #120]	@ (80013c8 <MX_ADC2_Init+0xc0>)
 800134e:	2200      	movs	r2, #0
 8001350:	775a      	strb	r2, [r3, #29]
	hadc2.Init.NbrOfConversion = 1;
 8001352:	4b1d      	ldr	r3, [pc, #116]	@ (80013c8 <MX_ADC2_Init+0xc0>)
 8001354:	2201      	movs	r2, #1
 8001356:	621a      	str	r2, [r3, #32]
	hadc2.Init.DiscontinuousConvMode = DISABLE;
 8001358:	4b1b      	ldr	r3, [pc, #108]	@ (80013c8 <MX_ADC2_Init+0xc0>)
 800135a:	2200      	movs	r2, #0
 800135c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
	hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001360:	4b19      	ldr	r3, [pc, #100]	@ (80013c8 <MX_ADC2_Init+0xc0>)
 8001362:	2200      	movs	r2, #0
 8001364:	62da      	str	r2, [r3, #44]	@ 0x2c
	hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001366:	4b18      	ldr	r3, [pc, #96]	@ (80013c8 <MX_ADC2_Init+0xc0>)
 8001368:	2200      	movs	r2, #0
 800136a:	631a      	str	r2, [r3, #48]	@ 0x30
	hadc2.Init.DMAContinuousRequests = DISABLE;
 800136c:	4b16      	ldr	r3, [pc, #88]	@ (80013c8 <MX_ADC2_Init+0xc0>)
 800136e:	2200      	movs	r2, #0
 8001370:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
	hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001374:	4b14      	ldr	r3, [pc, #80]	@ (80013c8 <MX_ADC2_Init+0xc0>)
 8001376:	2200      	movs	r2, #0
 8001378:	63da      	str	r2, [r3, #60]	@ 0x3c
	hadc2.Init.OversamplingMode = DISABLE;
 800137a:	4b13      	ldr	r3, [pc, #76]	@ (80013c8 <MX_ADC2_Init+0xc0>)
 800137c:	2200      	movs	r2, #0
 800137e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
	if (HAL_ADC_Init(&hadc2) != HAL_OK) {
 8001382:	4811      	ldr	r0, [pc, #68]	@ (80013c8 <MX_ADC2_Init+0xc0>)
 8001384:	f001 fbec 	bl	8002b60 <HAL_ADC_Init>
 8001388:	4603      	mov	r3, r0
 800138a:	2b00      	cmp	r3, #0
 800138c:	d001      	beq.n	8001392 <MX_ADC2_Init+0x8a>
		Error_Handler();
 800138e:	f000 f94b 	bl	8001628 <Error_Handler>
	}

	/** Configure Regular Channel
	 */
	sConfig.Channel = ADC_CHANNEL_2;
 8001392:	4b0f      	ldr	r3, [pc, #60]	@ (80013d0 <MX_ADC2_Init+0xc8>)
 8001394:	603b      	str	r3, [r7, #0]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 8001396:	2306      	movs	r3, #6
 8001398:	607b      	str	r3, [r7, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 800139a:	2300      	movs	r3, #0
 800139c:	60bb      	str	r3, [r7, #8]
	sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800139e:	237f      	movs	r3, #127	@ 0x7f
 80013a0:	60fb      	str	r3, [r7, #12]
	sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80013a2:	2304      	movs	r3, #4
 80013a4:	613b      	str	r3, [r7, #16]
	sConfig.Offset = 0;
 80013a6:	2300      	movs	r3, #0
 80013a8:	617b      	str	r3, [r7, #20]
	if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK) {
 80013aa:	463b      	mov	r3, r7
 80013ac:	4619      	mov	r1, r3
 80013ae:	4806      	ldr	r0, [pc, #24]	@ (80013c8 <MX_ADC2_Init+0xc0>)
 80013b0:	f001 fd5a 	bl	8002e68 <HAL_ADC_ConfigChannel>
 80013b4:	4603      	mov	r3, r0
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d001      	beq.n	80013be <MX_ADC2_Init+0xb6>
		Error_Handler();
 80013ba:	f000 f935 	bl	8001628 <Error_Handler>
	}
	/* USER CODE BEGIN ADC2_Init 2 */

	/* USER CODE END ADC2_Init 2 */

}
 80013be:	bf00      	nop
 80013c0:	3720      	adds	r7, #32
 80013c2:	46bd      	mov	sp, r7
 80013c4:	bd80      	pop	{r7, pc}
 80013c6:	bf00      	nop
 80013c8:	2000035c 	.word	0x2000035c
 80013cc:	50000100 	.word	0x50000100
 80013d0:	08600004 	.word	0x08600004

080013d4 <MX_SPI1_Init>:
/**
 * @brief SPI1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI1_Init(void) {
 80013d4:	b580      	push	{r7, lr}
 80013d6:	af00      	add	r7, sp, #0
	hspi1.Instance = SPI1;
 80013d8:	4b1b      	ldr	r3, [pc, #108]	@ (8001448 <MX_SPI1_Init+0x74>)
 80013da:	4a1c      	ldr	r2, [pc, #112]	@ (800144c <MX_SPI1_Init+0x78>)
 80013dc:	601a      	str	r2, [r3, #0]
	hspi1.Init.Mode = SPI_MODE_MASTER;
 80013de:	4b1a      	ldr	r3, [pc, #104]	@ (8001448 <MX_SPI1_Init+0x74>)
 80013e0:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80013e4:	605a      	str	r2, [r3, #4]
	hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80013e6:	4b18      	ldr	r3, [pc, #96]	@ (8001448 <MX_SPI1_Init+0x74>)
 80013e8:	2200      	movs	r2, #0
 80013ea:	609a      	str	r2, [r3, #8]
	hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80013ec:	4b16      	ldr	r3, [pc, #88]	@ (8001448 <MX_SPI1_Init+0x74>)
 80013ee:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 80013f2:	60da      	str	r2, [r3, #12]
	hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80013f4:	4b14      	ldr	r3, [pc, #80]	@ (8001448 <MX_SPI1_Init+0x74>)
 80013f6:	2200      	movs	r2, #0
 80013f8:	611a      	str	r2, [r3, #16]
	hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80013fa:	4b13      	ldr	r3, [pc, #76]	@ (8001448 <MX_SPI1_Init+0x74>)
 80013fc:	2200      	movs	r2, #0
 80013fe:	615a      	str	r2, [r3, #20]
	hspi1.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8001400:	4b11      	ldr	r3, [pc, #68]	@ (8001448 <MX_SPI1_Init+0x74>)
 8001402:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8001406:	619a      	str	r2, [r3, #24]
	hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8001408:	4b0f      	ldr	r3, [pc, #60]	@ (8001448 <MX_SPI1_Init+0x74>)
 800140a:	2210      	movs	r2, #16
 800140c:	61da      	str	r2, [r3, #28]
	hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800140e:	4b0e      	ldr	r3, [pc, #56]	@ (8001448 <MX_SPI1_Init+0x74>)
 8001410:	2200      	movs	r2, #0
 8001412:	621a      	str	r2, [r3, #32]
	hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001414:	4b0c      	ldr	r3, [pc, #48]	@ (8001448 <MX_SPI1_Init+0x74>)
 8001416:	2200      	movs	r2, #0
 8001418:	625a      	str	r2, [r3, #36]	@ 0x24
	hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800141a:	4b0b      	ldr	r3, [pc, #44]	@ (8001448 <MX_SPI1_Init+0x74>)
 800141c:	2200      	movs	r2, #0
 800141e:	629a      	str	r2, [r3, #40]	@ 0x28
	hspi1.Init.CRCPolynomial = 7;
 8001420:	4b09      	ldr	r3, [pc, #36]	@ (8001448 <MX_SPI1_Init+0x74>)
 8001422:	2207      	movs	r2, #7
 8001424:	62da      	str	r2, [r3, #44]	@ 0x2c
	hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001426:	4b08      	ldr	r3, [pc, #32]	@ (8001448 <MX_SPI1_Init+0x74>)
 8001428:	2200      	movs	r2, #0
 800142a:	631a      	str	r2, [r3, #48]	@ 0x30
	hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800142c:	4b06      	ldr	r3, [pc, #24]	@ (8001448 <MX_SPI1_Init+0x74>)
 800142e:	2208      	movs	r2, #8
 8001430:	635a      	str	r2, [r3, #52]	@ 0x34
	if (HAL_SPI_Init(&hspi1) != HAL_OK) {
 8001432:	4805      	ldr	r0, [pc, #20]	@ (8001448 <MX_SPI1_Init+0x74>)
 8001434:	f003 fc22 	bl	8004c7c <HAL_SPI_Init>
 8001438:	4603      	mov	r3, r0
 800143a:	2b00      	cmp	r3, #0
 800143c:	d001      	beq.n	8001442 <MX_SPI1_Init+0x6e>
		Error_Handler();
 800143e:	f000 f8f3 	bl	8001628 <Error_Handler>
	}
}
 8001442:	bf00      	nop
 8001444:	bd80      	pop	{r7, pc}
 8001446:	bf00      	nop
 8001448:	200003c8 	.word	0x200003c8
 800144c:	40013000 	.word	0x40013000

08001450 <MX_USART1_UART_Init>:
/**
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void) {
 8001450:	b580      	push	{r7, lr}
 8001452:	af00      	add	r7, sp, #0
	/* USER CODE END USART1_Init 0 */

	/* USER CODE BEGIN USART1_Init 1 */

	/* USER CODE END USART1_Init 1 */
	huart1.Instance = USART1;
 8001454:	4b22      	ldr	r3, [pc, #136]	@ (80014e0 <MX_USART1_UART_Init+0x90>)
 8001456:	4a23      	ldr	r2, [pc, #140]	@ (80014e4 <MX_USART1_UART_Init+0x94>)
 8001458:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 115200;
 800145a:	4b21      	ldr	r3, [pc, #132]	@ (80014e0 <MX_USART1_UART_Init+0x90>)
 800145c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001460:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001462:	4b1f      	ldr	r3, [pc, #124]	@ (80014e0 <MX_USART1_UART_Init+0x90>)
 8001464:	2200      	movs	r2, #0
 8001466:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 8001468:	4b1d      	ldr	r3, [pc, #116]	@ (80014e0 <MX_USART1_UART_Init+0x90>)
 800146a:	2200      	movs	r2, #0
 800146c:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 800146e:	4b1c      	ldr	r3, [pc, #112]	@ (80014e0 <MX_USART1_UART_Init+0x90>)
 8001470:	2200      	movs	r2, #0
 8001472:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 8001474:	4b1a      	ldr	r3, [pc, #104]	@ (80014e0 <MX_USART1_UART_Init+0x90>)
 8001476:	220c      	movs	r2, #12
 8001478:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800147a:	4b19      	ldr	r3, [pc, #100]	@ (80014e0 <MX_USART1_UART_Init+0x90>)
 800147c:	2200      	movs	r2, #0
 800147e:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001480:	4b17      	ldr	r3, [pc, #92]	@ (80014e0 <MX_USART1_UART_Init+0x90>)
 8001482:	2200      	movs	r2, #0
 8001484:	61da      	str	r2, [r3, #28]
	huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001486:	4b16      	ldr	r3, [pc, #88]	@ (80014e0 <MX_USART1_UART_Init+0x90>)
 8001488:	2200      	movs	r2, #0
 800148a:	621a      	str	r2, [r3, #32]
	huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800148c:	4b14      	ldr	r3, [pc, #80]	@ (80014e0 <MX_USART1_UART_Init+0x90>)
 800148e:	2200      	movs	r2, #0
 8001490:	625a      	str	r2, [r3, #36]	@ 0x24
	huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001492:	4b13      	ldr	r3, [pc, #76]	@ (80014e0 <MX_USART1_UART_Init+0x90>)
 8001494:	2200      	movs	r2, #0
 8001496:	629a      	str	r2, [r3, #40]	@ 0x28
	if (HAL_UART_Init(&huart1) != HAL_OK) {
 8001498:	4811      	ldr	r0, [pc, #68]	@ (80014e0 <MX_USART1_UART_Init+0x90>)
 800149a:	f004 f81d 	bl	80054d8 <HAL_UART_Init>
 800149e:	4603      	mov	r3, r0
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d001      	beq.n	80014a8 <MX_USART1_UART_Init+0x58>
		Error_Handler();
 80014a4:	f000 f8c0 	bl	8001628 <Error_Handler>
	}
	if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8)
 80014a8:	2100      	movs	r1, #0
 80014aa:	480d      	ldr	r0, [pc, #52]	@ (80014e0 <MX_USART1_UART_Init+0x90>)
 80014ac:	f004 fe16 	bl	80060dc <HAL_UARTEx_SetTxFifoThreshold>
 80014b0:	4603      	mov	r3, r0
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d001      	beq.n	80014ba <MX_USART1_UART_Init+0x6a>
			!= HAL_OK) {
		Error_Handler();
 80014b6:	f000 f8b7 	bl	8001628 <Error_Handler>
	}
	if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8)
 80014ba:	2100      	movs	r1, #0
 80014bc:	4808      	ldr	r0, [pc, #32]	@ (80014e0 <MX_USART1_UART_Init+0x90>)
 80014be:	f004 fe4b 	bl	8006158 <HAL_UARTEx_SetRxFifoThreshold>
 80014c2:	4603      	mov	r3, r0
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	d001      	beq.n	80014cc <MX_USART1_UART_Init+0x7c>
			!= HAL_OK) {
		Error_Handler();
 80014c8:	f000 f8ae 	bl	8001628 <Error_Handler>
	}
	if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK) {
 80014cc:	4804      	ldr	r0, [pc, #16]	@ (80014e0 <MX_USART1_UART_Init+0x90>)
 80014ce:	f004 fdcc 	bl	800606a <HAL_UARTEx_DisableFifoMode>
 80014d2:	4603      	mov	r3, r0
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d001      	beq.n	80014dc <MX_USART1_UART_Init+0x8c>
		Error_Handler();
 80014d8:	f000 f8a6 	bl	8001628 <Error_Handler>
	}
	/* USER CODE BEGIN USART1_Init 2 */

	/* USER CODE END USART1_Init 2 */

}
 80014dc:	bf00      	nop
 80014de:	bd80      	pop	{r7, pc}
 80014e0:	2000042c 	.word	0x2000042c
 80014e4:	40013800 	.word	0x40013800

080014e8 <MX_USART2_UART_Init>:
/**
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void) {
 80014e8:	b580      	push	{r7, lr}
 80014ea:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 80014ec:	4b22      	ldr	r3, [pc, #136]	@ (8001578 <MX_USART2_UART_Init+0x90>)
 80014ee:	4a23      	ldr	r2, [pc, #140]	@ (800157c <MX_USART2_UART_Init+0x94>)
 80014f0:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 80014f2:	4b21      	ldr	r3, [pc, #132]	@ (8001578 <MX_USART2_UART_Init+0x90>)
 80014f4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80014f8:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80014fa:	4b1f      	ldr	r3, [pc, #124]	@ (8001578 <MX_USART2_UART_Init+0x90>)
 80014fc:	2200      	movs	r2, #0
 80014fe:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 8001500:	4b1d      	ldr	r3, [pc, #116]	@ (8001578 <MX_USART2_UART_Init+0x90>)
 8001502:	2200      	movs	r2, #0
 8001504:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 8001506:	4b1c      	ldr	r3, [pc, #112]	@ (8001578 <MX_USART2_UART_Init+0x90>)
 8001508:	2200      	movs	r2, #0
 800150a:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 800150c:	4b1a      	ldr	r3, [pc, #104]	@ (8001578 <MX_USART2_UART_Init+0x90>)
 800150e:	220c      	movs	r2, #12
 8001510:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001512:	4b19      	ldr	r3, [pc, #100]	@ (8001578 <MX_USART2_UART_Init+0x90>)
 8001514:	2200      	movs	r2, #0
 8001516:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001518:	4b17      	ldr	r3, [pc, #92]	@ (8001578 <MX_USART2_UART_Init+0x90>)
 800151a:	2200      	movs	r2, #0
 800151c:	61da      	str	r2, [r3, #28]
	huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800151e:	4b16      	ldr	r3, [pc, #88]	@ (8001578 <MX_USART2_UART_Init+0x90>)
 8001520:	2200      	movs	r2, #0
 8001522:	621a      	str	r2, [r3, #32]
	huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001524:	4b14      	ldr	r3, [pc, #80]	@ (8001578 <MX_USART2_UART_Init+0x90>)
 8001526:	2200      	movs	r2, #0
 8001528:	625a      	str	r2, [r3, #36]	@ 0x24
	huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800152a:	4b13      	ldr	r3, [pc, #76]	@ (8001578 <MX_USART2_UART_Init+0x90>)
 800152c:	2200      	movs	r2, #0
 800152e:	629a      	str	r2, [r3, #40]	@ 0x28
	if (HAL_UART_Init(&huart2) != HAL_OK) {
 8001530:	4811      	ldr	r0, [pc, #68]	@ (8001578 <MX_USART2_UART_Init+0x90>)
 8001532:	f003 ffd1 	bl	80054d8 <HAL_UART_Init>
 8001536:	4603      	mov	r3, r0
 8001538:	2b00      	cmp	r3, #0
 800153a:	d001      	beq.n	8001540 <MX_USART2_UART_Init+0x58>
		Error_Handler();
 800153c:	f000 f874 	bl	8001628 <Error_Handler>
	}
	if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8)
 8001540:	2100      	movs	r1, #0
 8001542:	480d      	ldr	r0, [pc, #52]	@ (8001578 <MX_USART2_UART_Init+0x90>)
 8001544:	f004 fdca 	bl	80060dc <HAL_UARTEx_SetTxFifoThreshold>
 8001548:	4603      	mov	r3, r0
 800154a:	2b00      	cmp	r3, #0
 800154c:	d001      	beq.n	8001552 <MX_USART2_UART_Init+0x6a>
			!= HAL_OK) {
		Error_Handler();
 800154e:	f000 f86b 	bl	8001628 <Error_Handler>
	}
	if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8)
 8001552:	2100      	movs	r1, #0
 8001554:	4808      	ldr	r0, [pc, #32]	@ (8001578 <MX_USART2_UART_Init+0x90>)
 8001556:	f004 fdff 	bl	8006158 <HAL_UARTEx_SetRxFifoThreshold>
 800155a:	4603      	mov	r3, r0
 800155c:	2b00      	cmp	r3, #0
 800155e:	d001      	beq.n	8001564 <MX_USART2_UART_Init+0x7c>
			!= HAL_OK) {
		Error_Handler();
 8001560:	f000 f862 	bl	8001628 <Error_Handler>
	}
	if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK) {
 8001564:	4804      	ldr	r0, [pc, #16]	@ (8001578 <MX_USART2_UART_Init+0x90>)
 8001566:	f004 fd80 	bl	800606a <HAL_UARTEx_DisableFifoMode>
 800156a:	4603      	mov	r3, r0
 800156c:	2b00      	cmp	r3, #0
 800156e:	d001      	beq.n	8001574 <MX_USART2_UART_Init+0x8c>
		Error_Handler();
 8001570:	f000 f85a 	bl	8001628 <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 8001574:	bf00      	nop
 8001576:	bd80      	pop	{r7, pc}
 8001578:	200004c0 	.word	0x200004c0
 800157c:	40004400 	.word	0x40004400

08001580 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8001580:	b580      	push	{r7, lr}
 8001582:	b088      	sub	sp, #32
 8001584:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8001586:	f107 030c 	add.w	r3, r7, #12
 800158a:	2200      	movs	r2, #0
 800158c:	601a      	str	r2, [r3, #0]
 800158e:	605a      	str	r2, [r3, #4]
 8001590:	609a      	str	r2, [r3, #8]
 8001592:	60da      	str	r2, [r3, #12]
 8001594:	611a      	str	r2, [r3, #16]
	/* USER CODE BEGIN MX_GPIO_Init_1 */

	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOF_CLK_ENABLE();
 8001596:	4b1e      	ldr	r3, [pc, #120]	@ (8001610 <MX_GPIO_Init+0x90>)
 8001598:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800159a:	4a1d      	ldr	r2, [pc, #116]	@ (8001610 <MX_GPIO_Init+0x90>)
 800159c:	f043 0320 	orr.w	r3, r3, #32
 80015a0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80015a2:	4b1b      	ldr	r3, [pc, #108]	@ (8001610 <MX_GPIO_Init+0x90>)
 80015a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80015a6:	f003 0320 	and.w	r3, r3, #32
 80015aa:	60bb      	str	r3, [r7, #8]
 80015ac:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80015ae:	4b18      	ldr	r3, [pc, #96]	@ (8001610 <MX_GPIO_Init+0x90>)
 80015b0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80015b2:	4a17      	ldr	r2, [pc, #92]	@ (8001610 <MX_GPIO_Init+0x90>)
 80015b4:	f043 0301 	orr.w	r3, r3, #1
 80015b8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80015ba:	4b15      	ldr	r3, [pc, #84]	@ (8001610 <MX_GPIO_Init+0x90>)
 80015bc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80015be:	f003 0301 	and.w	r3, r3, #1
 80015c2:	607b      	str	r3, [r7, #4]
 80015c4:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 80015c6:	4b12      	ldr	r3, [pc, #72]	@ (8001610 <MX_GPIO_Init+0x90>)
 80015c8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80015ca:	4a11      	ldr	r2, [pc, #68]	@ (8001610 <MX_GPIO_Init+0x90>)
 80015cc:	f043 0302 	orr.w	r3, r3, #2
 80015d0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80015d2:	4b0f      	ldr	r3, [pc, #60]	@ (8001610 <MX_GPIO_Init+0x90>)
 80015d4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80015d6:	f003 0302 	and.w	r3, r3, #2
 80015da:	603b      	str	r3, [r7, #0]
 80015dc:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_RESET);
 80015de:	2200      	movs	r2, #0
 80015e0:	2101      	movs	r1, #1
 80015e2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80015e6:	f002 fb5f 	bl	8003ca8 <HAL_GPIO_WritePin>

	/*Configure GPIO pin : PA0 */
	GPIO_InitStruct.Pin = GPIO_PIN_0;
 80015ea:	2301      	movs	r3, #1
 80015ec:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015ee:	2301      	movs	r3, #1
 80015f0:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015f2:	2300      	movs	r3, #0
 80015f4:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015f6:	2300      	movs	r3, #0
 80015f8:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015fa:	f107 030c 	add.w	r3, r7, #12
 80015fe:	4619      	mov	r1, r3
 8001600:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001604:	f002 f9ce 	bl	80039a4 <HAL_GPIO_Init>

	/* USER CODE BEGIN MX_GPIO_Init_2 */

	/* USER CODE END MX_GPIO_Init_2 */
}
 8001608:	bf00      	nop
 800160a:	3720      	adds	r7, #32
 800160c:	46bd      	mov	sp, r7
 800160e:	bd80      	pop	{r7, pc}
 8001610:	40021000 	.word	0x40021000

08001614 <get_debug_uart>:
/* USER CODE BEGIN 4 */
// for app_log use
void print_message(const char *message) {
	HAL_UART_Transmit(&huart1, (uint8_t*) message, strlen(message), 100);
}
UART_HandleTypeDef* get_debug_uart(void) {
 8001614:	b480      	push	{r7}
 8001616:	af00      	add	r7, sp, #0
	return &huart1;
 8001618:	4b02      	ldr	r3, [pc, #8]	@ (8001624 <get_debug_uart+0x10>)
}
 800161a:	4618      	mov	r0, r3
 800161c:	46bd      	mov	sp, r7
 800161e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001622:	4770      	bx	lr
 8001624:	2000042c 	.word	0x2000042c

08001628 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8001628:	b480      	push	{r7}
 800162a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800162c:	b672      	cpsid	i
}
 800162e:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8001630:	bf00      	nop
 8001632:	e7fd      	b.n	8001630 <Error_Handler+0x8>

08001634 <write_max2850_base_regs>:
#include "fpga.h"
#include "fpga_regs.h"
#include "app_log.h"
#include "main.h"

void write_max2850_base_regs(void) {
 8001634:	b5b0      	push	{r4, r5, r7, lr}
 8001636:	b0a4      	sub	sp, #144	@ 0x90
 8001638:	af00      	add	r7, sp, #0
	app_log("- configuring max2850 (tx) base regs...\r\n");
 800163a:	4864      	ldr	r0, [pc, #400]	@ (80017cc <write_max2850_base_regs+0x198>)
 800163c:	f7ff fc72 	bl	8000f24 <app_log>
	// (Apparently) when writing registers, always need to restart at beginning and can end at any point.
	const int16_t max2850_main_reg[32] = {
 8001640:	4b63      	ldr	r3, [pc, #396]	@ (80017d0 <write_max2850_base_regs+0x19c>)
 8001642:	f107 0444 	add.w	r4, r7, #68	@ 0x44
 8001646:	461d      	mov	r5, r3
 8001648:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800164a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800164c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800164e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001650:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001652:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001654:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8001658:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	};
	//
	//max2850_main_reg[1] = rx_gain_setting;

	// write main registers
	app_log("- max2850 writing main regs...\r\n");
 800165c:	485d      	ldr	r0, [pc, #372]	@ (80017d4 <write_max2850_base_regs+0x1a0>)
 800165e:	f7ff fc61 	bl	8000f24 <app_log>
	for (int k = 0; k < 32; k++) {
 8001662:	2300      	movs	r3, #0
 8001664:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8001668:	e020      	b.n	80016ac <write_max2850_base_regs+0x78>
		if (k == 12)
 800166a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800166e:	2b0c      	cmp	r3, #12
 8001670:	d016      	beq.n	80016a0 <write_max2850_base_regs+0x6c>
			continue; // skipped in reg map
		reg_write(REG_SPI_MAX2850, (k << 10) | max2850_main_reg[k]);
 8001672:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001676:	b21b      	sxth	r3, r3
 8001678:	029b      	lsls	r3, r3, #10
 800167a:	b21a      	sxth	r2, r3
 800167c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001680:	005b      	lsls	r3, r3, #1
 8001682:	3390      	adds	r3, #144	@ 0x90
 8001684:	443b      	add	r3, r7
 8001686:	f933 3c4c 	ldrsh.w	r3, [r3, #-76]
 800168a:	4313      	orrs	r3, r2
 800168c:	b21b      	sxth	r3, r3
 800168e:	b29b      	uxth	r3, r3
 8001690:	4619      	mov	r1, r3
 8001692:	2042      	movs	r0, #66	@ 0x42
 8001694:	f7ff fc7a 	bl	8000f8c <reg_write>
		HAL_Delay(10); // pacing delay from Teensy code is 50, 10 seems to work
 8001698:	200a      	movs	r0, #10
 800169a:	f001 f869 	bl	8002770 <HAL_Delay>
 800169e:	e000      	b.n	80016a2 <write_max2850_base_regs+0x6e>
			continue; // skipped in reg map
 80016a0:	bf00      	nop
	for (int k = 0; k < 32; k++) {
 80016a2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80016a6:	3301      	adds	r3, #1
 80016a8:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80016ac:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80016b0:	2b1f      	cmp	r3, #31
 80016b2:	ddda      	ble.n	800166a <write_max2850_base_regs+0x36>
	}

	uint16_t readback = reg_read(REG_SPI_MAX2850);
 80016b4:	2042      	movs	r0, #66	@ 0x42
 80016b6:	f7ff fc8b 	bl	8000fd0 <reg_read>
 80016ba:	4603      	mov	r3, r0
 80016bc:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86
	if (readback != 0xffff) {
 80016c0:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 80016c4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80016c8:	4293      	cmp	r3, r2
 80016ca:	d006      	beq.n	80016da <write_max2850_base_regs+0xa6>
		app_log(
 80016cc:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 80016d0:	4619      	mov	r1, r3
 80016d2:	4841      	ldr	r0, [pc, #260]	@ (80017d8 <write_max2850_base_regs+0x1a4>)
 80016d4:	f7ff fc26 	bl	8000f24 <app_log>
 80016d8:	e002      	b.n	80016e0 <write_max2850_base_regs+0xac>
				"- max2850 (tx) failed lock after main regs, status=0x%04X\r\n",
				readback);
	} else {
		app_log("- max2850 (tx) pll locked after main regs\r\n");
 80016da:	4840      	ldr	r0, [pc, #256]	@ (80017dc <write_max2850_base_regs+0x1a8>)
 80016dc:	f7ff fc22 	bl	8000f24 <app_log>
	}

	// write local regs
	app_log("- max2850 writing local regs...\r\n");
 80016e0:	483f      	ldr	r0, [pc, #252]	@ (80017e0 <write_max2850_base_regs+0x1ac>)
 80016e2:	f7ff fc1f 	bl	8000f24 <app_log>

	// enable local reg programming mode
	reg_write(REG_SPI_MAX2850, (0 << 10) | max2850_main_reg[0] | 0x01);
 80016e6:	f9b7 3044 	ldrsh.w	r3, [r7, #68]	@ 0x44
 80016ea:	f043 0301 	orr.w	r3, r3, #1
 80016ee:	b21b      	sxth	r3, r3
 80016f0:	b29b      	uxth	r3, r3
 80016f2:	4619      	mov	r1, r3
 80016f4:	2042      	movs	r0, #66	@ 0x42
 80016f6:	f7ff fc49 	bl	8000f8c <reg_write>
	HAL_Delay(10);
 80016fa:	200a      	movs	r0, #10
 80016fc:	f001 f838 	bl	8002770 <HAL_Delay>

	const int16_t max2850_local_reg[32] = {
 8001700:	1d3b      	adds	r3, r7, #4
 8001702:	2240      	movs	r2, #64	@ 0x40
 8001704:	2100      	movs	r1, #0
 8001706:	4618      	mov	r0, r3
 8001708:	f005 fb4a 	bl	8006da0 <memset>
 800170c:	f44f 7360 	mov.w	r3, #896	@ 0x380
 8001710:	817b      	strh	r3, [r7, #10]
 8001712:	f44f 73d5 	mov.w	r3, #426	@ 0x1aa
 8001716:	827b      	strh	r3, [r7, #18]
 8001718:	f44f 738a 	mov.w	r3, #276	@ 0x114
 800171c:	82bb      	strh	r3, [r7, #20]
 800171e:	f44f 7355 	mov.w	r3, #852	@ 0x354
 8001722:	82fb      	strh	r3, [r7, #22]
 8001724:	2373      	movs	r3, #115	@ 0x73
 8001726:	833b      	strh	r3, [r7, #24]
 8001728:	23c4      	movs	r3, #196	@ 0xc4
 800172a:	867b      	strh	r3, [r7, #50]	@ 0x32
 800172c:	f240 132b 	movw	r3, #299	@ 0x12b
 8001730:	86bb      	strh	r3, [r7, #52]	@ 0x34
 8001732:	f240 1365 	movw	r3, #357	@ 0x165
 8001736:	86fb      	strh	r3, [r7, #54]	@ 0x36
 8001738:	2302      	movs	r3, #2
 800173a:	873b      	strh	r3, [r7, #56]	@ 0x38
 800173c:	2304      	movs	r3, #4
 800173e:	877b      	strh	r3, [r7, #58]	@ 0x3a
 8001740:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001744:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
	/* 29:*/0x0,
	/* 30:*/0x0,
	/* 31:*/0x200 /* charge pump trim */
	};

	for (int k = 0; k < 32; k++) {
 8001748:	2300      	movs	r3, #0
 800174a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800174e:	e028      	b.n	80017a2 <write_max2850_base_regs+0x16e>
		if (k == 0 || k == 29 || k == 30)
 8001750:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8001754:	2b00      	cmp	r3, #0
 8001756:	d01e      	beq.n	8001796 <write_max2850_base_regs+0x162>
 8001758:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800175c:	2b1d      	cmp	r3, #29
 800175e:	d01a      	beq.n	8001796 <write_max2850_base_regs+0x162>
 8001760:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8001764:	2b1e      	cmp	r3, #30
 8001766:	d016      	beq.n	8001796 <write_max2850_base_regs+0x162>
			continue;
		reg_write(REG_SPI_MAX2850, (k << 10) | max2850_local_reg[k]);
 8001768:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800176c:	b21b      	sxth	r3, r3
 800176e:	029b      	lsls	r3, r3, #10
 8001770:	b21a      	sxth	r2, r3
 8001772:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8001776:	005b      	lsls	r3, r3, #1
 8001778:	3390      	adds	r3, #144	@ 0x90
 800177a:	443b      	add	r3, r7
 800177c:	f933 3c8c 	ldrsh.w	r3, [r3, #-140]
 8001780:	4313      	orrs	r3, r2
 8001782:	b21b      	sxth	r3, r3
 8001784:	b29b      	uxth	r3, r3
 8001786:	4619      	mov	r1, r3
 8001788:	2042      	movs	r0, #66	@ 0x42
 800178a:	f7ff fbff 	bl	8000f8c <reg_write>
		HAL_Delay(10); // teensy delay 50
 800178e:	200a      	movs	r0, #10
 8001790:	f000 ffee 	bl	8002770 <HAL_Delay>
 8001794:	e000      	b.n	8001798 <write_max2850_base_regs+0x164>
			continue;
 8001796:	bf00      	nop
	for (int k = 0; k < 32; k++) {
 8001798:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800179c:	3301      	adds	r3, #1
 800179e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80017a2:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80017a6:	2b1f      	cmp	r3, #31
 80017a8:	ddd2      	ble.n	8001750 <write_max2850_base_regs+0x11c>
	}

	// return to main reg programming mode
	reg_write(REG_SPI_MAX2850, (0 << 10) | max2850_main_reg[0] | 0x00);
 80017aa:	f9b7 3044 	ldrsh.w	r3, [r7, #68]	@ 0x44
 80017ae:	b29b      	uxth	r3, r3
 80017b0:	4619      	mov	r1, r3
 80017b2:	2042      	movs	r0, #66	@ 0x42
 80017b4:	f7ff fbea 	bl	8000f8c <reg_write>
	HAL_Delay(10);
 80017b8:	200a      	movs	r0, #10
 80017ba:	f000 ffd9 	bl	8002770 <HAL_Delay>

	app_log("- max2850 config complete\r\n");
 80017be:	4809      	ldr	r0, [pc, #36]	@ (80017e4 <write_max2850_base_regs+0x1b0>)
 80017c0:	f7ff fbb0 	bl	8000f24 <app_log>
}
 80017c4:	bf00      	nop
 80017c6:	3790      	adds	r7, #144	@ 0x90
 80017c8:	46bd      	mov	sp, r7
 80017ca:	bdb0      	pop	{r4, r5, r7, pc}
 80017cc:	08009120 	.word	0x08009120
 80017d0:	08009218 	.word	0x08009218
 80017d4:	0800914c 	.word	0x0800914c
 80017d8:	08009170 	.word	0x08009170
 80017dc:	080091ac 	.word	0x080091ac
 80017e0:	080091d8 	.word	0x080091d8
 80017e4:	080091fc 	.word	0x080091fc

080017e8 <write_max2851_base_regs>:
#include "fpga_regs.h"
#include "app_log.h"
#include "main.h"
#include "modem.h" // For get_modem_metric

void write_max2851_base_regs(void) {
 80017e8:	b5b0      	push	{r4, r5, r7, lr}
 80017ea:	b0a4      	sub	sp, #144	@ 0x90
 80017ec:	af00      	add	r7, sp, #0
	app_log("- configuring max2851 (rx) base regs...\r\n");
 80017ee:	485e      	ldr	r0, [pc, #376]	@ (8001968 <write_max2851_base_regs+0x180>)
 80017f0:	f7ff fb98 	bl	8000f24 <app_log>

	const int16_t max2851_main_reg[32] = {
 80017f4:	4b5d      	ldr	r3, [pc, #372]	@ (800196c <write_max2851_base_regs+0x184>)
 80017f6:	f107 0444 	add.w	r4, r7, #68	@ 0x44
 80017fa:	461d      	mov	r5, r3
 80017fc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80017fe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001800:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001802:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001804:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001806:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001808:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800180c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	/* 29:*/0x000, /* Reserved BUT (Tx mode) Eval Kit 0x1ee ?? */
	/* 30:*/0x000, /* Reserved BUT (Tx mode) Eval Kit 0x1ee ?? */
	/* 31:*/0x000 /* Reserved */
	};

	app_log("- max2851 writing main registers...\r\n");
 8001810:	4857      	ldr	r0, [pc, #348]	@ (8001970 <write_max2851_base_regs+0x188>)
 8001812:	f7ff fb87 	bl	8000f24 <app_log>
	for (int k = 0; k < 32; k++) {
 8001816:	2300      	movs	r3, #0
 8001818:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800181c:	e020      	b.n	8001860 <write_max2851_base_regs+0x78>
		if (k == 12)
 800181e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001822:	2b0c      	cmp	r3, #12
 8001824:	d016      	beq.n	8001854 <write_max2851_base_regs+0x6c>
			continue;
		reg_write(REG_SPI_MAX2851, (k << 10) | max2851_main_reg[k]);
 8001826:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800182a:	b21b      	sxth	r3, r3
 800182c:	029b      	lsls	r3, r3, #10
 800182e:	b21a      	sxth	r2, r3
 8001830:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001834:	005b      	lsls	r3, r3, #1
 8001836:	3390      	adds	r3, #144	@ 0x90
 8001838:	443b      	add	r3, r7
 800183a:	f933 3c4c 	ldrsh.w	r3, [r3, #-76]
 800183e:	4313      	orrs	r3, r2
 8001840:	b21b      	sxth	r3, r3
 8001842:	b29b      	uxth	r3, r3
 8001844:	4619      	mov	r1, r3
 8001846:	2043      	movs	r0, #67	@ 0x43
 8001848:	f7ff fba0 	bl	8000f8c <reg_write>
		HAL_Delay(10);
 800184c:	200a      	movs	r0, #10
 800184e:	f000 ff8f 	bl	8002770 <HAL_Delay>
 8001852:	e000      	b.n	8001856 <write_max2851_base_regs+0x6e>
			continue;
 8001854:	bf00      	nop
	for (int k = 0; k < 32; k++) {
 8001856:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800185a:	3301      	adds	r3, #1
 800185c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8001860:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001864:	2b1f      	cmp	r3, #31
 8001866:	ddda      	ble.n	800181e <write_max2851_base_regs+0x36>
	}

	uint16_t readback = reg_read(REG_SPI_MAX2851);
 8001868:	2043      	movs	r0, #67	@ 0x43
 800186a:	f7ff fbb1 	bl	8000fd0 <reg_read>
 800186e:	4603      	mov	r3, r0
 8001870:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86
	if (readback != 0xffff) {
 8001874:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8001878:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800187c:	4293      	cmp	r3, r2
 800187e:	d005      	beq.n	800188c <write_max2851_base_regs+0xa4>
		app_log(
 8001880:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8001884:	4619      	mov	r1, r3
 8001886:	483b      	ldr	r0, [pc, #236]	@ (8001974 <write_max2851_base_regs+0x18c>)
 8001888:	f7ff fb4c 	bl	8000f24 <app_log>
				"- max2851 (rx) failed lock after main regs, status=0x%04X\r\n",
				readback);
	}

	app_log("- max2851 writing local regs...\r\n");
 800188c:	483a      	ldr	r0, [pc, #232]	@ (8001978 <write_max2851_base_regs+0x190>)
 800188e:	f7ff fb49 	bl	8000f24 <app_log>
	reg_write(REG_SPI_MAX2851, (0 << 10) | max2851_main_reg[0] | 0x01);
 8001892:	f9b7 3044 	ldrsh.w	r3, [r7, #68]	@ 0x44
 8001896:	f043 0301 	orr.w	r3, r3, #1
 800189a:	b21b      	sxth	r3, r3
 800189c:	b29b      	uxth	r3, r3
 800189e:	4619      	mov	r1, r3
 80018a0:	2043      	movs	r0, #67	@ 0x43
 80018a2:	f7ff fb73 	bl	8000f8c <reg_write>

	const int16_t max2851_local_reg[32] = {
 80018a6:	1d3b      	adds	r3, r7, #4
 80018a8:	2240      	movs	r2, #64	@ 0x40
 80018aa:	2100      	movs	r1, #0
 80018ac:	4618      	mov	r0, r3
 80018ae:	f005 fa77 	bl	8006da0 <memset>
 80018b2:	f44f 7360 	mov.w	r3, #896	@ 0x380
 80018b6:	817b      	strh	r3, [r7, #10]
 80018b8:	f44f 73d5 	mov.w	r3, #426	@ 0x1aa
 80018bc:	827b      	strh	r3, [r7, #18]
 80018be:	f44f 738a 	mov.w	r3, #276	@ 0x114
 80018c2:	82bb      	strh	r3, [r7, #20]
 80018c4:	f44f 7355 	mov.w	r3, #852	@ 0x354
 80018c8:	82fb      	strh	r3, [r7, #22]
 80018ca:	2373      	movs	r3, #115	@ 0x73
 80018cc:	833b      	strh	r3, [r7, #24]
 80018ce:	f44f 73e2 	mov.w	r3, #452	@ 0x1c4
 80018d2:	867b      	strh	r3, [r7, #50]	@ 0x32
 80018d4:	f240 132b 	movw	r3, #299	@ 0x12b
 80018d8:	86bb      	strh	r3, [r7, #52]	@ 0x34
 80018da:	f240 1365 	movw	r3, #357	@ 0x165
 80018de:	86fb      	strh	r3, [r7, #54]	@ 0x36
 80018e0:	2302      	movs	r3, #2
 80018e2:	873b      	strh	r3, [r7, #56]	@ 0x38
 80018e4:	2304      	movs	r3, #4
 80018e6:	877b      	strh	r3, [r7, #58]	@ 0x3a
 80018e8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80018ec:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
	/* 21:*/0x000, /* 22:*/0x000, /* 23:*/0x000, /* 24:*/0x1C4, /* 25:*/0x12B,
	/* 26:*/0x165, /* 27:*/0x002, /* 28:*/0x004, /* 29:*/0x0,   /* 30:*/0x0,
	/* 31:*/0x200
	};

	for (int k = 0; k < 32; k++) {
 80018f0:	2300      	movs	r3, #0
 80018f2:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80018f6:	e025      	b.n	8001944 <write_max2851_base_regs+0x15c>
		if (k == 0 || k == 29 || k == 30)
 80018f8:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d01b      	beq.n	8001938 <write_max2851_base_regs+0x150>
 8001900:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8001904:	2b1d      	cmp	r3, #29
 8001906:	d017      	beq.n	8001938 <write_max2851_base_regs+0x150>
 8001908:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800190c:	2b1e      	cmp	r3, #30
 800190e:	d013      	beq.n	8001938 <write_max2851_base_regs+0x150>
			continue;
		reg_write(REG_SPI_MAX2851, (k << 10) | max2851_local_reg[k]);
 8001910:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8001914:	b21b      	sxth	r3, r3
 8001916:	029b      	lsls	r3, r3, #10
 8001918:	b21a      	sxth	r2, r3
 800191a:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800191e:	005b      	lsls	r3, r3, #1
 8001920:	3390      	adds	r3, #144	@ 0x90
 8001922:	443b      	add	r3, r7
 8001924:	f933 3c8c 	ldrsh.w	r3, [r3, #-140]
 8001928:	4313      	orrs	r3, r2
 800192a:	b21b      	sxth	r3, r3
 800192c:	b29b      	uxth	r3, r3
 800192e:	4619      	mov	r1, r3
 8001930:	2043      	movs	r0, #67	@ 0x43
 8001932:	f7ff fb2b 	bl	8000f8c <reg_write>
 8001936:	e000      	b.n	800193a <write_max2851_base_regs+0x152>
			continue;
 8001938:	bf00      	nop
	for (int k = 0; k < 32; k++) {
 800193a:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800193e:	3301      	adds	r3, #1
 8001940:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8001944:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8001948:	2b1f      	cmp	r3, #31
 800194a:	ddd5      	ble.n	80018f8 <write_max2851_base_regs+0x110>
	}

	reg_write(REG_SPI_MAX2851, (0 << 10) | max2851_main_reg[0] | 0x00);
 800194c:	f9b7 3044 	ldrsh.w	r3, [r7, #68]	@ 0x44
 8001950:	b29b      	uxth	r3, r3
 8001952:	4619      	mov	r1, r3
 8001954:	2043      	movs	r0, #67	@ 0x43
 8001956:	f7ff fb19 	bl	8000f8c <reg_write>
	app_log("- max2851 config complete\r\n");
 800195a:	4808      	ldr	r0, [pc, #32]	@ (800197c <write_max2851_base_regs+0x194>)
 800195c:	f7ff fae2 	bl	8000f24 <app_log>
}
 8001960:	bf00      	nop
 8001962:	3790      	adds	r7, #144	@ 0x90
 8001964:	46bd      	mov	sp, r7
 8001966:	bdb0      	pop	{r4, r5, r7, pc}
 8001968:	08009258 	.word	0x08009258
 800196c:	08009328 	.word	0x08009328
 8001970:	08009284 	.word	0x08009284
 8001974:	080092ac 	.word	0x080092ac
 8001978:	080092e8 	.word	0x080092e8
 800197c:	0800930c 	.word	0x0800930c

08001980 <set_Rx>:

void set_Rx(int16_t rx_gain_setting) {
 8001980:	b580      	push	{r7, lr}
 8001982:	b082      	sub	sp, #8
 8001984:	af00      	add	r7, sp, #0
 8001986:	4603      	mov	r3, r0
 8001988:	80fb      	strh	r3, [r7, #6]
	reg_write(REG_SPI_MAX2851, (0 << 10) | 0x00A);
 800198a:	210a      	movs	r1, #10
 800198c:	2043      	movs	r0, #67	@ 0x43
 800198e:	f7ff fafd 	bl	8000f8c <reg_write>
	if (rx_gain_setting) {
 8001992:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001996:	2b00      	cmp	r3, #0
 8001998:	d004      	beq.n	80019a4 <set_Rx+0x24>
		set_Rx_gain(rx_gain_setting);
 800199a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800199e:	4618      	mov	r0, r3
 80019a0:	f000 f814 	bl	80019cc <set_Rx_gain>
	}
	reg_write(REG_CTRL, reg_read(REG_CTRL) | CTRL_TX_DISABLE_LVDS);
 80019a4:	2023      	movs	r0, #35	@ 0x23
 80019a6:	f7ff fb13 	bl	8000fd0 <reg_read>
 80019aa:	4603      	mov	r3, r0
 80019ac:	f043 0301 	orr.w	r3, r3, #1
 80019b0:	b29b      	uxth	r3, r3
 80019b2:	4619      	mov	r1, r3
 80019b4:	2023      	movs	r0, #35	@ 0x23
 80019b6:	f7ff fae9 	bl	8000f8c <reg_write>
	reg_write(REG_SPI_MAX2850, (10 << 10) | 0x00);
 80019ba:	f44f 5120 	mov.w	r1, #10240	@ 0x2800
 80019be:	2042      	movs	r0, #66	@ 0x42
 80019c0:	f7ff fae4 	bl	8000f8c <reg_write>
}
 80019c4:	bf00      	nop
 80019c6:	3708      	adds	r7, #8
 80019c8:	46bd      	mov	sp, r7
 80019ca:	bd80      	pop	{r7, pc}

080019cc <set_Rx_gain>:

void set_Rx_gain(int16_t rx_gain_setting) {
 80019cc:	b580      	push	{r7, lr}
 80019ce:	b082      	sub	sp, #8
 80019d0:	af00      	add	r7, sp, #0
 80019d2:	4603      	mov	r3, r0
 80019d4:	80fb      	strh	r3, [r7, #6]
	reg_write(0x6A, rx_gain_setting);
 80019d6:	88fb      	ldrh	r3, [r7, #6]
 80019d8:	4619      	mov	r1, r3
 80019da:	206a      	movs	r0, #106	@ 0x6a
 80019dc:	f7ff fad6 	bl	8000f8c <reg_write>
}
 80019e0:	bf00      	nop
 80019e2:	3708      	adds	r7, #8
 80019e4:	46bd      	mov	sp, r7
 80019e6:	bd80      	pop	{r7, pc}

080019e8 <find_best_rx_vga>:
void set_RxIdle(void) {
	reg_write(REG_SPI_MAX2851, (0 << 10) | 0x022);
}

int16_t find_best_rx_vga(void)
{
 80019e8:	b580      	push	{r7, lr}
 80019ea:	b086      	sub	sp, #24
 80019ec:	af00      	add	r7, sp, #0
  app_log("- Finding best RX VGA gain...\r\n");
 80019ee:	4821      	ldr	r0, [pc, #132]	@ (8001a74 <find_best_rx_vga+0x8c>)
 80019f0:	f7ff fa98 	bl	8000f24 <app_log>
  int best_gain = 11;
 80019f4:	230b      	movs	r3, #11
 80019f6:	617b      	str	r3, [r7, #20]
  float best_metric = 0.0;
 80019f8:	f04f 0300 	mov.w	r3, #0
 80019fc:	613b      	str	r3, [r7, #16]
  float new_metric;
  for (int k=1; k<20; k++){
 80019fe:	2301      	movs	r3, #1
 8001a00:	60fb      	str	r3, [r7, #12]
 8001a02:	e025      	b.n	8001a50 <find_best_rx_vga+0x68>
    int test_gain = k*2;
 8001a04:	68fb      	ldr	r3, [r7, #12]
 8001a06:	005b      	lsls	r3, r3, #1
 8001a08:	60bb      	str	r3, [r7, #8]
    set_Rx_gain(test_gain);
 8001a0a:	68bb      	ldr	r3, [r7, #8]
 8001a0c:	b21b      	sxth	r3, r3
 8001a0e:	4618      	mov	r0, r3
 8001a10:	f7ff ffdc 	bl	80019cc <set_Rx_gain>
    app_log("Gain %d: ", test_gain);
 8001a14:	68b9      	ldr	r1, [r7, #8]
 8001a16:	4818      	ldr	r0, [pc, #96]	@ (8001a78 <find_best_rx_vga+0x90>)
 8001a18:	f7ff fa84 	bl	8000f24 <app_log>
    HAL_Delay(1);
 8001a1c:	2001      	movs	r0, #1
 8001a1e:	f000 fea7 	bl	8002770 <HAL_Delay>
    new_metric = get_modem_metric(0);
 8001a22:	2000      	movs	r0, #0
 8001a24:	f000 f8be 	bl	8001ba4 <get_modem_metric>
 8001a28:	ed87 0a01 	vstr	s0, [r7, #4]
    rx_telem();
 8001a2c:	f000 f9a0 	bl	8001d70 <rx_telem>

    if(new_metric > best_metric)
 8001a30:	ed97 7a01 	vldr	s14, [r7, #4]
 8001a34:	edd7 7a04 	vldr	s15, [r7, #16]
 8001a38:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001a3c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a40:	dd03      	ble.n	8001a4a <find_best_rx_vga+0x62>
    {
      best_metric = new_metric;
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	613b      	str	r3, [r7, #16]
      best_gain = test_gain;
 8001a46:	68bb      	ldr	r3, [r7, #8]
 8001a48:	617b      	str	r3, [r7, #20]
  for (int k=1; k<20; k++){
 8001a4a:	68fb      	ldr	r3, [r7, #12]
 8001a4c:	3301      	adds	r3, #1
 8001a4e:	60fb      	str	r3, [r7, #12]
 8001a50:	68fb      	ldr	r3, [r7, #12]
 8001a52:	2b13      	cmp	r3, #19
 8001a54:	ddd6      	ble.n	8001a04 <find_best_rx_vga+0x1c>
    }
  }
  set_Rx_gain(best_gain);
 8001a56:	697b      	ldr	r3, [r7, #20]
 8001a58:	b21b      	sxth	r3, r3
 8001a5a:	4618      	mov	r0, r3
 8001a5c:	f7ff ffb6 	bl	80019cc <set_Rx_gain>
  app_log("- Best gain found: %d\r\n", best_gain);
 8001a60:	6979      	ldr	r1, [r7, #20]
 8001a62:	4806      	ldr	r0, [pc, #24]	@ (8001a7c <find_best_rx_vga+0x94>)
 8001a64:	f7ff fa5e 	bl	8000f24 <app_log>
  return best_gain;
 8001a68:	697b      	ldr	r3, [r7, #20]
 8001a6a:	b21b      	sxth	r3, r3
}
 8001a6c:	4618      	mov	r0, r3
 8001a6e:	3718      	adds	r7, #24
 8001a70:	46bd      	mov	sp, r7
 8001a72:	bd80      	pop	{r7, pc}
 8001a74:	08009368 	.word	0x08009368
 8001a78:	08009388 	.word	0x08009388
 8001a7c:	08009394 	.word	0x08009394

08001a80 <gain_track>:

void gain_track(int16_t initial_gain) {
 8001a80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001a84:	b08c      	sub	sp, #48	@ 0x30
 8001a86:	af04      	add	r7, sp, #16
 8001a88:	4603      	mov	r3, r0
 8001a8a:	80fb      	strh	r3, [r7, #6]
    // - It "dithers" the gain up and down, keeping any change that improves the checksum count.
    // - If the checksum drops to zero for 3 consecutive reads, it assumes the link is lost
    //   and re-runs the full find_best_rx_vga search to re-acquire the signal.
	// Note: does not work great, but better than keeping one gain.

    int16_t current_gain = initial_gain;
 8001a8c:	88fb      	ldrh	r3, [r7, #6]
 8001a8e:	83fb      	strh	r3, [r7, #30]
    float current_checksum = 0;
 8001a90:	f04f 0300 	mov.w	r3, #0
 8001a94:	60fb      	str	r3, [r7, #12]
    int zero_count = 0;
 8001a96:	2300      	movs	r3, #0
 8001a98:	61bb      	str	r3, [r7, #24]
    int direction = 1; // 1 for up, -1 for down
 8001a9a:	2301      	movs	r3, #1
 8001a9c:	617b      	str	r3, [r7, #20]

    app_log("--- Starting Gain Tracking ---\r\n");
 8001a9e:	483e      	ldr	r0, [pc, #248]	@ (8001b98 <gain_track+0x118>)
 8001aa0:	f7ff fa40 	bl	8000f24 <app_log>
    set_Rx_gain(current_gain);
 8001aa4:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8001aa8:	4618      	mov	r0, r3
 8001aaa:	f7ff ff8f 	bl	80019cc <set_Rx_gain>

    while(1) {
        current_checksum = get_modem_metric(1); // Get checksum at current gain
 8001aae:	2001      	movs	r0, #1
 8001ab0:	f000 f878 	bl	8001ba4 <get_modem_metric>
 8001ab4:	ed87 0a03 	vstr	s0, [r7, #12]

        int16_t next_gain = current_gain + (direction * 2); // Propose next gain
 8001ab8:	697b      	ldr	r3, [r7, #20]
 8001aba:	b29b      	uxth	r3, r3
 8001abc:	005b      	lsls	r3, r3, #1
 8001abe:	b29a      	uxth	r2, r3
 8001ac0:	8bfb      	ldrh	r3, [r7, #30]
 8001ac2:	4413      	add	r3, r2
 8001ac4:	b29b      	uxth	r3, r3
 8001ac6:	827b      	strh	r3, [r7, #18]
        if (next_gain < 0) next_gain = 0;
 8001ac8:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	da01      	bge.n	8001ad4 <gain_track+0x54>
 8001ad0:	2300      	movs	r3, #0
 8001ad2:	827b      	strh	r3, [r7, #18]
        if (next_gain > 38) next_gain = 38;
 8001ad4:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8001ad8:	2b26      	cmp	r3, #38	@ 0x26
 8001ada:	dd01      	ble.n	8001ae0 <gain_track+0x60>
 8001adc:	2326      	movs	r3, #38	@ 0x26
 8001ade:	827b      	strh	r3, [r7, #18]

        set_Rx_gain(next_gain);
 8001ae0:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8001ae4:	4618      	mov	r0, r3
 8001ae6:	f7ff ff71 	bl	80019cc <set_Rx_gain>
        HAL_Delay(50);
 8001aea:	2032      	movs	r0, #50	@ 0x32
 8001aec:	f000 fe40 	bl	8002770 <HAL_Delay>
        float next_checksum = get_modem_metric(1);
 8001af0:	2001      	movs	r0, #1
 8001af2:	f000 f857 	bl	8001ba4 <get_modem_metric>
 8001af6:	ed87 0a02 	vstr	s0, [r7, #8]

        app_log("Gain: %d -> %d, Checksum: %.0f -> %.0f\r\n", current_gain, next_gain, current_checksum, next_checksum);
 8001afa:	f9b7 601e 	ldrsh.w	r6, [r7, #30]
 8001afe:	f9b7 8012 	ldrsh.w	r8, [r7, #18]
 8001b02:	68f8      	ldr	r0, [r7, #12]
 8001b04:	f7fe fd48 	bl	8000598 <__aeabi_f2d>
 8001b08:	4604      	mov	r4, r0
 8001b0a:	460d      	mov	r5, r1
 8001b0c:	68b8      	ldr	r0, [r7, #8]
 8001b0e:	f7fe fd43 	bl	8000598 <__aeabi_f2d>
 8001b12:	4602      	mov	r2, r0
 8001b14:	460b      	mov	r3, r1
 8001b16:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8001b1a:	e9cd 4500 	strd	r4, r5, [sp]
 8001b1e:	4642      	mov	r2, r8
 8001b20:	4631      	mov	r1, r6
 8001b22:	481e      	ldr	r0, [pc, #120]	@ (8001b9c <gain_track+0x11c>)
 8001b24:	f7ff f9fe 	bl	8000f24 <app_log>

        if (next_checksum > current_checksum) {
 8001b28:	ed97 7a02 	vldr	s14, [r7, #8]
 8001b2c:	edd7 7a03 	vldr	s15, [r7, #12]
 8001b30:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001b34:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b38:	dd02      	ble.n	8001b40 <gain_track+0xc0>
            // Improvement, keep the new gain and continue in the same direction
            current_gain = next_gain;
 8001b3a:	8a7b      	ldrh	r3, [r7, #18]
 8001b3c:	83fb      	strh	r3, [r7, #30]
 8001b3e:	e007      	b.n	8001b50 <gain_track+0xd0>
        } else {
            // No improvement, revert gain and change direction
            set_Rx_gain(current_gain);
 8001b40:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8001b44:	4618      	mov	r0, r3
 8001b46:	f7ff ff41 	bl	80019cc <set_Rx_gain>
            direction *= -1;
 8001b4a:	697b      	ldr	r3, [r7, #20]
 8001b4c:	425b      	negs	r3, r3
 8001b4e:	617b      	str	r3, [r7, #20]
        }

        // Check for lost link
        if (next_checksum == 0) {
 8001b50:	edd7 7a02 	vldr	s15, [r7, #8]
 8001b54:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001b58:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b5c:	d103      	bne.n	8001b66 <gain_track+0xe6>
            zero_count++;
 8001b5e:	69bb      	ldr	r3, [r7, #24]
 8001b60:	3301      	adds	r3, #1
 8001b62:	61bb      	str	r3, [r7, #24]
 8001b64:	e001      	b.n	8001b6a <gain_track+0xea>
        } else {
            zero_count = 0;
 8001b66:	2300      	movs	r3, #0
 8001b68:	61bb      	str	r3, [r7, #24]
        }

        if (zero_count >= 3) {
 8001b6a:	69bb      	ldr	r3, [r7, #24]
 8001b6c:	2b02      	cmp	r3, #2
 8001b6e:	dd0f      	ble.n	8001b90 <gain_track+0x110>
            app_log("--- Link lost, re-running gain search ---\r\n");
 8001b70:	480b      	ldr	r0, [pc, #44]	@ (8001ba0 <gain_track+0x120>)
 8001b72:	f7ff f9d7 	bl	8000f24 <app_log>
            current_gain = find_best_rx_vga();
 8001b76:	f7ff ff37 	bl	80019e8 <find_best_rx_vga>
 8001b7a:	4603      	mov	r3, r0
 8001b7c:	83fb      	strh	r3, [r7, #30]
            set_Rx_gain(current_gain);
 8001b7e:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8001b82:	4618      	mov	r0, r3
 8001b84:	f7ff ff22 	bl	80019cc <set_Rx_gain>
            zero_count = 0;
 8001b88:	2300      	movs	r3, #0
 8001b8a:	61bb      	str	r3, [r7, #24]
            direction = 1; // Reset direction
 8001b8c:	2301      	movs	r3, #1
 8001b8e:	617b      	str	r3, [r7, #20]
        }

        HAL_Delay(200);
 8001b90:	20c8      	movs	r0, #200	@ 0xc8
 8001b92:	f000 fded 	bl	8002770 <HAL_Delay>
    while(1) {
 8001b96:	e78a      	b.n	8001aae <gain_track+0x2e>
 8001b98:	080093ac 	.word	0x080093ac
 8001b9c:	080093d0 	.word	0x080093d0
 8001ba0:	080093fc 	.word	0x080093fc

08001ba4 <get_modem_metric>:
#include "fpga_regs.h"
#include "app_log.h"
#include "main.h" // For HAL_Delay
#include <math.h> // For sqrtf

float get_modem_metric(int quiet) {
 8001ba4:	b590      	push	{r4, r7, lr}
 8001ba6:	b091      	sub	sp, #68	@ 0x44
 8001ba8:	af00      	add	r7, sp, #0
 8001baa:	6078      	str	r0, [r7, #4]
    const uint16_t interval_count = 100;
 8001bac:	2364      	movs	r3, #100	@ 0x64
 8001bae:	87fb      	strh	r3, [r7, #62]	@ 0x3e
    reg_write(REG_MM_INTERVAL, interval_count);
 8001bb0:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8001bb2:	4619      	mov	r1, r3
 8001bb4:	2067      	movs	r0, #103	@ 0x67
 8001bb6:	f7ff f9e9 	bl	8000f8c <reg_write>

    reg_write(REG_MM_TRIGGER, 0);
 8001bba:	2100      	movs	r1, #0
 8001bbc:	2068      	movs	r0, #104	@ 0x68
 8001bbe:	f7ff f9e5 	bl	8000f8c <reg_write>
    reg_write(REG_MM_TRIGGER, 1);
 8001bc2:	2101      	movs	r1, #1
 8001bc4:	2068      	movs	r0, #104	@ 0x68
 8001bc6:	f7ff f9e1 	bl	8000f8c <reg_write>

    reg_write(REG_MM_MUX_LS, MM_SEL_EVM_START);
 8001bca:	2100      	movs	r1, #0
 8001bcc:	2069      	movs	r0, #105	@ 0x69
 8001bce:	f7ff f9dd 	bl	8000f8c <reg_write>
    uint32_t evm_acc_start = ((uint32_t)reg_read(REG_MM_TRIGGER) << 16) | reg_read(REG_MM_MUX_LS);
 8001bd2:	2068      	movs	r0, #104	@ 0x68
 8001bd4:	f7ff f9fc 	bl	8000fd0 <reg_read>
 8001bd8:	4603      	mov	r3, r0
 8001bda:	041c      	lsls	r4, r3, #16
 8001bdc:	2069      	movs	r0, #105	@ 0x69
 8001bde:	f7ff f9f7 	bl	8000fd0 <reg_read>
 8001be2:	4603      	mov	r3, r0
 8001be4:	4323      	orrs	r3, r4
 8001be6:	63bb      	str	r3, [r7, #56]	@ 0x38
    reg_write(REG_MM_MUX_LS, MM_SEL_CHECK_START);
 8001be8:	2102      	movs	r1, #2
 8001bea:	2069      	movs	r0, #105	@ 0x69
 8001bec:	f7ff f9ce 	bl	8000f8c <reg_write>
    uint32_t check_count_start = ((uint32_t)reg_read(REG_MM_TRIGGER) << 16) | reg_read(REG_MM_MUX_LS);
 8001bf0:	2068      	movs	r0, #104	@ 0x68
 8001bf2:	f7ff f9ed 	bl	8000fd0 <reg_read>
 8001bf6:	4603      	mov	r3, r0
 8001bf8:	041c      	lsls	r4, r3, #16
 8001bfa:	2069      	movs	r0, #105	@ 0x69
 8001bfc:	f7ff f9e8 	bl	8000fd0 <reg_read>
 8001c00:	4603      	mov	r3, r0
 8001c02:	4323      	orrs	r3, r4
 8001c04:	637b      	str	r3, [r7, #52]	@ 0x34
    reg_write(REG_MM_MUX_LS, MM_SEL_DETECT_START);
 8001c06:	2104      	movs	r1, #4
 8001c08:	2069      	movs	r0, #105	@ 0x69
 8001c0a:	f7ff f9bf 	bl	8000f8c <reg_write>
    uint32_t detect_count_start = ((uint32_t)reg_read(REG_MM_TRIGGER) << 16) | reg_read(REG_MM_MUX_LS);
 8001c0e:	2068      	movs	r0, #104	@ 0x68
 8001c10:	f7ff f9de 	bl	8000fd0 <reg_read>
 8001c14:	4603      	mov	r3, r0
 8001c16:	041c      	lsls	r4, r3, #16
 8001c18:	2069      	movs	r0, #105	@ 0x69
 8001c1a:	f7ff f9d9 	bl	8000fd0 <reg_read>
 8001c1e:	4603      	mov	r3, r0
 8001c20:	4323      	orrs	r3, r4
 8001c22:	633b      	str	r3, [r7, #48]	@ 0x30
    reg_write(REG_MM_MUX_LS, MM_SEL_SENT_START);
 8001c24:	2106      	movs	r1, #6
 8001c26:	2069      	movs	r0, #105	@ 0x69
 8001c28:	f7ff f9b0 	bl	8000f8c <reg_write>
    uint32_t sent_count_start = ((uint32_t)reg_read(REG_MM_TRIGGER) << 16) | reg_read(REG_MM_MUX_LS);
 8001c2c:	2068      	movs	r0, #104	@ 0x68
 8001c2e:	f7ff f9cf 	bl	8000fd0 <reg_read>
 8001c32:	4603      	mov	r3, r0
 8001c34:	041c      	lsls	r4, r3, #16
 8001c36:	2069      	movs	r0, #105	@ 0x69
 8001c38:	f7ff f9ca 	bl	8000fd0 <reg_read>
 8001c3c:	4603      	mov	r3, r0
 8001c3e:	4323      	orrs	r3, r4
 8001c40:	62fb      	str	r3, [r7, #44]	@ 0x2c

    uint32_t timeout_start = HAL_GetTick();
 8001c42:	f000 fd89 	bl	8002758 <HAL_GetTick>
 8001c46:	62b8      	str	r0, [r7, #40]	@ 0x28
    while (reg_read(REG_MM_INTERVAL) != 0) {
 8001c48:	e00f      	b.n	8001c6a <get_modem_metric+0xc6>
        if (HAL_GetTick() - timeout_start > 200) {
 8001c4a:	f000 fd85 	bl	8002758 <HAL_GetTick>
 8001c4e:	4602      	mov	r2, r0
 8001c50:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001c52:	1ad3      	subs	r3, r2, r3
 8001c54:	2bc8      	cmp	r3, #200	@ 0xc8
 8001c56:	d905      	bls.n	8001c64 <get_modem_metric+0xc0>
            app_log("- Error: Timed out waiting for modem metric capture.\r\n");
 8001c58:	4842      	ldr	r0, [pc, #264]	@ (8001d64 <get_modem_metric+0x1c0>)
 8001c5a:	f7ff f963 	bl	8000f24 <app_log>
            return 0.0f;
 8001c5e:	eddf 7a42 	vldr	s15, [pc, #264]	@ 8001d68 <get_modem_metric+0x1c4>
 8001c62:	e079      	b.n	8001d58 <get_modem_metric+0x1b4>
        }
        HAL_Delay(1);
 8001c64:	2001      	movs	r0, #1
 8001c66:	f000 fd83 	bl	8002770 <HAL_Delay>
    while (reg_read(REG_MM_INTERVAL) != 0) {
 8001c6a:	2067      	movs	r0, #103	@ 0x67
 8001c6c:	f7ff f9b0 	bl	8000fd0 <reg_read>
 8001c70:	4603      	mov	r3, r0
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d1e9      	bne.n	8001c4a <get_modem_metric+0xa6>
    }

    reg_write(REG_MM_MUX_LS, MM_SEL_EVM_STOP);
 8001c76:	2101      	movs	r1, #1
 8001c78:	2069      	movs	r0, #105	@ 0x69
 8001c7a:	f7ff f987 	bl	8000f8c <reg_write>
    uint32_t evm_acc_stop = ((uint32_t)reg_read(REG_MM_TRIGGER) << 16) | reg_read(REG_MM_MUX_LS);
 8001c7e:	2068      	movs	r0, #104	@ 0x68
 8001c80:	f7ff f9a6 	bl	8000fd0 <reg_read>
 8001c84:	4603      	mov	r3, r0
 8001c86:	041c      	lsls	r4, r3, #16
 8001c88:	2069      	movs	r0, #105	@ 0x69
 8001c8a:	f7ff f9a1 	bl	8000fd0 <reg_read>
 8001c8e:	4603      	mov	r3, r0
 8001c90:	4323      	orrs	r3, r4
 8001c92:	627b      	str	r3, [r7, #36]	@ 0x24
    reg_write(REG_MM_MUX_LS, MM_SEL_CHECK_STOP);
 8001c94:	2103      	movs	r1, #3
 8001c96:	2069      	movs	r0, #105	@ 0x69
 8001c98:	f7ff f978 	bl	8000f8c <reg_write>
    uint32_t check_count_stop = ((uint32_t)reg_read(REG_MM_TRIGGER) << 16) | reg_read(REG_MM_MUX_LS);
 8001c9c:	2068      	movs	r0, #104	@ 0x68
 8001c9e:	f7ff f997 	bl	8000fd0 <reg_read>
 8001ca2:	4603      	mov	r3, r0
 8001ca4:	041c      	lsls	r4, r3, #16
 8001ca6:	2069      	movs	r0, #105	@ 0x69
 8001ca8:	f7ff f992 	bl	8000fd0 <reg_read>
 8001cac:	4603      	mov	r3, r0
 8001cae:	4323      	orrs	r3, r4
 8001cb0:	623b      	str	r3, [r7, #32]
    reg_write(REG_MM_MUX_LS, MM_SEL_DETECT_STOP);
 8001cb2:	2105      	movs	r1, #5
 8001cb4:	2069      	movs	r0, #105	@ 0x69
 8001cb6:	f7ff f969 	bl	8000f8c <reg_write>
    uint32_t detect_count_stop = ((uint32_t)reg_read(REG_MM_TRIGGER) << 16) | reg_read(REG_MM_MUX_LS);
 8001cba:	2068      	movs	r0, #104	@ 0x68
 8001cbc:	f7ff f988 	bl	8000fd0 <reg_read>
 8001cc0:	4603      	mov	r3, r0
 8001cc2:	041c      	lsls	r4, r3, #16
 8001cc4:	2069      	movs	r0, #105	@ 0x69
 8001cc6:	f7ff f983 	bl	8000fd0 <reg_read>
 8001cca:	4603      	mov	r3, r0
 8001ccc:	4323      	orrs	r3, r4
 8001cce:	61fb      	str	r3, [r7, #28]
    reg_write(REG_MM_MUX_LS, MM_SEL_SENT_STOP);
 8001cd0:	2107      	movs	r1, #7
 8001cd2:	2069      	movs	r0, #105	@ 0x69
 8001cd4:	f7ff f95a 	bl	8000f8c <reg_write>
    uint32_t sent_count_stop = ((uint32_t)reg_read(REG_MM_TRIGGER) << 16) | reg_read(REG_MM_MUX_LS);
 8001cd8:	2068      	movs	r0, #104	@ 0x68
 8001cda:	f7ff f979 	bl	8000fd0 <reg_read>
 8001cde:	4603      	mov	r3, r0
 8001ce0:	041c      	lsls	r4, r3, #16
 8001ce2:	2069      	movs	r0, #105	@ 0x69
 8001ce4:	f7ff f974 	bl	8000fd0 <reg_read>
 8001ce8:	4603      	mov	r3, r0
 8001cea:	4323      	orrs	r3, r4
 8001cec:	61bb      	str	r3, [r7, #24]

    uint32_t sent_increase = (sent_count_stop >= sent_count_start) ? sent_count_stop - sent_count_start : sent_count_stop - sent_count_start + 0xFFFFFFFF;
 8001cee:	69ba      	ldr	r2, [r7, #24]
 8001cf0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001cf2:	429a      	cmp	r2, r3
 8001cf4:	d303      	bcc.n	8001cfe <get_modem_metric+0x15a>
 8001cf6:	69ba      	ldr	r2, [r7, #24]
 8001cf8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001cfa:	1ad3      	subs	r3, r2, r3
 8001cfc:	e003      	b.n	8001d06 <get_modem_metric+0x162>
 8001cfe:	69ba      	ldr	r2, [r7, #24]
 8001d00:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001d02:	1ad3      	subs	r3, r2, r3
 8001d04:	3b01      	subs	r3, #1
 8001d06:	617b      	str	r3, [r7, #20]
    uint32_t detect_increase = (detect_count_stop >= detect_count_start) ? detect_count_stop - detect_count_start : detect_count_stop - detect_count_start + 0xFFFFFFFF;
 8001d08:	69fa      	ldr	r2, [r7, #28]
 8001d0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001d0c:	429a      	cmp	r2, r3
 8001d0e:	d303      	bcc.n	8001d18 <get_modem_metric+0x174>
 8001d10:	69fa      	ldr	r2, [r7, #28]
 8001d12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001d14:	1ad3      	subs	r3, r2, r3
 8001d16:	e003      	b.n	8001d20 <get_modem_metric+0x17c>
 8001d18:	69fa      	ldr	r2, [r7, #28]
 8001d1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001d1c:	1ad3      	subs	r3, r2, r3
 8001d1e:	3b01      	subs	r3, #1
 8001d20:	613b      	str	r3, [r7, #16]
    uint32_t check_increase = (check_count_stop >= check_count_start) ? check_count_stop - check_count_start : check_count_stop - check_count_start + 0xFFFFFFFF;
 8001d22:	6a3a      	ldr	r2, [r7, #32]
 8001d24:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001d26:	429a      	cmp	r2, r3
 8001d28:	d303      	bcc.n	8001d32 <get_modem_metric+0x18e>
 8001d2a:	6a3a      	ldr	r2, [r7, #32]
 8001d2c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001d2e:	1ad3      	subs	r3, r2, r3
 8001d30:	e003      	b.n	8001d3a <get_modem_metric+0x196>
 8001d32:	6a3a      	ldr	r2, [r7, #32]
 8001d34:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001d36:	1ad3      	subs	r3, r2, r3
 8001d38:	3b01      	subs	r3, #1
 8001d3a:	60fb      	str	r3, [r7, #12]
    // evm calculation removed from log to match teensy code
    // uint32_t evm = (evm_acc_stop >= evm_acc_start) ? evm_acc_stop - evm_acc_start : evm_acc_stop - evm_acc_start + 0xFFFFFFFF;

    if (!quiet) {
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d105      	bne.n	8001d4e <get_modem_metric+0x1aa>
        app_log("checksum:%lu, detects:%lu, sent:%lu\r\n", check_increase, detect_increase, sent_increase);
 8001d42:	697b      	ldr	r3, [r7, #20]
 8001d44:	693a      	ldr	r2, [r7, #16]
 8001d46:	68f9      	ldr	r1, [r7, #12]
 8001d48:	4808      	ldr	r0, [pc, #32]	@ (8001d6c <get_modem_metric+0x1c8>)
 8001d4a:	f7ff f8eb 	bl	8000f24 <app_log>
        // calculates difference using unsigned arithmetic (stop_count - start_count)
        // can give large numbers near max 32-bit int
        // way to fix this?
    }

    return (float)check_increase;
 8001d4e:	68fb      	ldr	r3, [r7, #12]
 8001d50:	ee07 3a90 	vmov	s15, r3
 8001d54:	eef8 7a67 	vcvt.f32.u32	s15, s15
}
 8001d58:	eeb0 0a67 	vmov.f32	s0, s15
 8001d5c:	3744      	adds	r7, #68	@ 0x44
 8001d5e:	46bd      	mov	sp, r7
 8001d60:	bd90      	pop	{r4, r7, pc}
 8001d62:	bf00      	nop
 8001d64:	08009428 	.word	0x08009428
 8001d68:	00000000 	.word	0x00000000
 8001d6c:	08009460 	.word	0x08009460

08001d70 <rx_telem>:

void rx_telem(void)
{
 8001d70:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001d74:	b08c      	sub	sp, #48	@ 0x30
 8001d76:	af04      	add	r7, sp, #16
    reg_write(REG_TLM_MUX, TELEM_SEL_DC_IQ);
 8001d78:	2101      	movs	r1, #1
 8001d7a:	204f      	movs	r0, #79	@ 0x4f
 8001d7c:	f7ff f906 	bl	8000f8c <reg_write>
    uint16_t dc_iq = reg_read(REG_TLM_MUX);
 8001d80:	204f      	movs	r0, #79	@ 0x4f
 8001d82:	f7ff f925 	bl	8000fd0 <reg_read>
 8001d86:	4603      	mov	r3, r0
 8001d88:	83fb      	strh	r3, [r7, #30]
    float dc_i = (float)(int8_t)(dc_iq >> 8);
 8001d8a:	8bfb      	ldrh	r3, [r7, #30]
 8001d8c:	0a1b      	lsrs	r3, r3, #8
 8001d8e:	b29b      	uxth	r3, r3
 8001d90:	b25b      	sxtb	r3, r3
 8001d92:	ee07 3a90 	vmov	s15, r3
 8001d96:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001d9a:	edc7 7a06 	vstr	s15, [r7, #24]
    float dc_q = (float)(int8_t)(dc_iq & 0xFF);
 8001d9e:	8bfb      	ldrh	r3, [r7, #30]
 8001da0:	b25b      	sxtb	r3, r3
 8001da2:	ee07 3a90 	vmov	s15, r3
 8001da6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001daa:	edc7 7a05 	vstr	s15, [r7, #20]
    float dc_mag = sqrtf(dc_i*dc_i + dc_q*dc_q);
 8001dae:	edd7 7a06 	vldr	s15, [r7, #24]
 8001db2:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8001db6:	edd7 7a05 	vldr	s15, [r7, #20]
 8001dba:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8001dbe:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001dc2:	eeb0 0a67 	vmov.f32	s0, s15
 8001dc6:	f007 f8b7 	bl	8008f38 <sqrtf>
 8001dca:	ed87 0a04 	vstr	s0, [r7, #16]
    app_log("dc_i:%.1f, dc_q:%.1f, dc:%.1f,", dc_i, dc_q, dc_mag);
 8001dce:	69b8      	ldr	r0, [r7, #24]
 8001dd0:	f7fe fbe2 	bl	8000598 <__aeabi_f2d>
 8001dd4:	4680      	mov	r8, r0
 8001dd6:	4689      	mov	r9, r1
 8001dd8:	6978      	ldr	r0, [r7, #20]
 8001dda:	f7fe fbdd 	bl	8000598 <__aeabi_f2d>
 8001dde:	4604      	mov	r4, r0
 8001de0:	460d      	mov	r5, r1
 8001de2:	6938      	ldr	r0, [r7, #16]
 8001de4:	f7fe fbd8 	bl	8000598 <__aeabi_f2d>
 8001de8:	4602      	mov	r2, r0
 8001dea:	460b      	mov	r3, r1
 8001dec:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8001df0:	e9cd 4500 	strd	r4, r5, [sp]
 8001df4:	4642      	mov	r2, r8
 8001df6:	464b      	mov	r3, r9
 8001df8:	4826      	ldr	r0, [pc, #152]	@ (8001e94 <rx_telem+0x124>)
 8001dfa:	f7ff f893 	bl	8000f24 <app_log>

    reg_write(REG_TLM_MUX, TELEM_SEL_RSSI_D_IN);
 8001dfe:	2102      	movs	r1, #2
 8001e00:	204f      	movs	r0, #79	@ 0x4f
 8001e02:	f7ff f8c3 	bl	8000f8c <reg_write>
    uint16_t rssi_in = reg_read(REG_TLM_MUX);
 8001e06:	204f      	movs	r0, #79	@ 0x4f
 8001e08:	f7ff f8e2 	bl	8000fd0 <reg_read>
 8001e0c:	4603      	mov	r3, r0
 8001e0e:	81fb      	strh	r3, [r7, #14]
    app_log("rssin:%u,", rssi_in);
 8001e10:	89fb      	ldrh	r3, [r7, #14]
 8001e12:	4619      	mov	r1, r3
 8001e14:	4820      	ldr	r0, [pc, #128]	@ (8001e98 <rx_telem+0x128>)
 8001e16:	f7ff f885 	bl	8000f24 <app_log>

    reg_write(REG_TLM_MUX, TELEM_SEL_RSSI_RESAMPLED);
 8001e1a:	2103      	movs	r1, #3
 8001e1c:	204f      	movs	r0, #79	@ 0x4f
 8001e1e:	f7ff f8b5 	bl	8000f8c <reg_write>
    uint16_t rssi_res = reg_read(REG_TLM_MUX);
 8001e22:	204f      	movs	r0, #79	@ 0x4f
 8001e24:	f7ff f8d4 	bl	8000fd0 <reg_read>
 8001e28:	4603      	mov	r3, r0
 8001e2a:	81bb      	strh	r3, [r7, #12]
    app_log("rssres:%u,", rssi_res);
 8001e2c:	89bb      	ldrh	r3, [r7, #12]
 8001e2e:	4619      	mov	r1, r3
 8001e30:	481a      	ldr	r0, [pc, #104]	@ (8001e9c <rx_telem+0x12c>)
 8001e32:	f7ff f877 	bl	8000f24 <app_log>

    reg_write(REG_TLM_MUX, TELEM_SEL_EVM_LEAKY);
 8001e36:	2104      	movs	r1, #4
 8001e38:	204f      	movs	r0, #79	@ 0x4f
 8001e3a:	f7ff f8a7 	bl	8000f8c <reg_write>
    uint16_t evm = reg_read(REG_TLM_MUX);
 8001e3e:	204f      	movs	r0, #79	@ 0x4f
 8001e40:	f7ff f8c6 	bl	8000fd0 <reg_read>
 8001e44:	4603      	mov	r3, r0
 8001e46:	817b      	strh	r3, [r7, #10]
    app_log("evm:%u,", evm);
 8001e48:	897b      	ldrh	r3, [r7, #10]
 8001e4a:	4619      	mov	r1, r3
 8001e4c:	4814      	ldr	r0, [pc, #80]	@ (8001ea0 <rx_telem+0x130>)
 8001e4e:	f7ff f869 	bl	8000f24 <app_log>

    reg_write(REG_TLM_MUX, TELEM_SEL_RX_PERIOD_HI);
 8001e52:	2105      	movs	r1, #5
 8001e54:	204f      	movs	r0, #79	@ 0x4f
 8001e56:	f7ff f899 	bl	8000f8c <reg_write>
    uint16_t rxp = reg_read(REG_TLM_MUX);
 8001e5a:	204f      	movs	r0, #79	@ 0x4f
 8001e5c:	f7ff f8b8 	bl	8000fd0 <reg_read>
 8001e60:	4603      	mov	r3, r0
 8001e62:	813b      	strh	r3, [r7, #8]
    app_log("rxp:%u,", rxp);
 8001e64:	893b      	ldrh	r3, [r7, #8]
 8001e66:	4619      	mov	r1, r3
 8001e68:	480e      	ldr	r0, [pc, #56]	@ (8001ea4 <rx_telem+0x134>)
 8001e6a:	f7ff f85b 	bl	8000f24 <app_log>

    reg_write(REG_TLM_MUX, TELEM_SEL_ADJUST_NEEDED);
 8001e6e:	2106      	movs	r1, #6
 8001e70:	204f      	movs	r0, #79	@ 0x4f
 8001e72:	f7ff f88b 	bl	8000f8c <reg_write>
    uint16_t adj = reg_read(REG_TLM_MUX);
 8001e76:	204f      	movs	r0, #79	@ 0x4f
 8001e78:	f7ff f8aa 	bl	8000fd0 <reg_read>
 8001e7c:	4603      	mov	r3, r0
 8001e7e:	80fb      	strh	r3, [r7, #6]
    app_log("adj:%u\r\n", adj);
 8001e80:	88fb      	ldrh	r3, [r7, #6]
 8001e82:	4619      	mov	r1, r3
 8001e84:	4808      	ldr	r0, [pc, #32]	@ (8001ea8 <rx_telem+0x138>)
 8001e86:	f7ff f84d 	bl	8000f24 <app_log>
}
 8001e8a:	bf00      	nop
 8001e8c:	3720      	adds	r7, #32
 8001e8e:	46bd      	mov	sp, r7
 8001e90:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001e94:	08009488 	.word	0x08009488
 8001e98:	080094a8 	.word	0x080094a8
 8001e9c:	080094b4 	.word	0x080094b4
 8001ea0:	080094c0 	.word	0x080094c0
 8001ea4:	080094c8 	.word	0x080094c8
 8001ea8:	080094d0 	.word	0x080094d0

08001eac <fpga_comms_init>:
 * @brief initializes SPI for FPGA
 * @param hspi pointer to the configured hal spi handle.
 * @return void.
 * // test: fpga_comms_init(&hspi1); in main.c
 */
void fpga_comms_init(SPI_HandleTypeDef *hspi) {
 8001eac:	b480      	push	{r7}
 8001eae:	b083      	sub	sp, #12
 8001eb0:	af00      	add	r7, sp, #0
 8001eb2:	6078      	str	r0, [r7, #4]
    g_hspi = hspi;
 8001eb4:	4a04      	ldr	r2, [pc, #16]	@ (8001ec8 <fpga_comms_init+0x1c>)
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	6013      	str	r3, [r2, #0]
}
 8001eba:	bf00      	nop
 8001ebc:	370c      	adds	r7, #12
 8001ebe:	46bd      	mov	sp, r7
 8001ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec4:	4770      	bx	lr
 8001ec6:	bf00      	nop
 8001ec8:	20000554 	.word	0x20000554

08001ecc <fpga_comms_write>:
 * @param addr the 7-bit register address (0x00 to 0x7f)
 * @param data the 16-bit data to write
 * @return reg_rw_status_t status code indicating the outcome
 * // test: fpga_comms_write(0x03, 0x5678);
 */
reg_rw_status_t fpga_comms_write(uint8_t addr, uint16_t data) {
 8001ecc:	b580      	push	{r7, lr}
 8001ece:	b086      	sub	sp, #24
 8001ed0:	af02      	add	r7, sp, #8
 8001ed2:	4603      	mov	r3, r0
 8001ed4:	460a      	mov	r2, r1
 8001ed6:	71fb      	strb	r3, [r7, #7]
 8001ed8:	4613      	mov	r3, r2
 8001eda:	80bb      	strh	r3, [r7, #4]
    if (addr > ADDR_MASK) {
 8001edc:	227f      	movs	r2, #127	@ 0x7f
 8001ede:	79fb      	ldrb	r3, [r7, #7]
 8001ee0:	4293      	cmp	r3, r2
 8001ee2:	d901      	bls.n	8001ee8 <fpga_comms_write+0x1c>
        return REG_RW_ERR_INVALID_ADDR;
 8001ee4:	2302      	movs	r3, #2
 8001ee6:	e061      	b.n	8001fac <fpga_comms_write+0xe0>
    }
    if (g_hspi == NULL) {
 8001ee8:	4b32      	ldr	r3, [pc, #200]	@ (8001fb4 <fpga_comms_write+0xe8>)
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d101      	bne.n	8001ef4 <fpga_comms_write+0x28>
        return REG_RW_ERROR;
 8001ef0:	2301      	movs	r3, #1
 8001ef2:	e05b      	b.n	8001fac <fpga_comms_write+0xe0>

    uint8_t rx_byte;
    uint8_t tx_byte;

    // transaction 1: send command byte (write flag  + addr)
    tx_byte = WRITE_FLAG | addr;
 8001ef4:	2280      	movs	r2, #128	@ 0x80
 8001ef6:	79fb      	ldrb	r3, [r7, #7]
 8001ef8:	4313      	orrs	r3, r2
 8001efa:	b2db      	uxtb	r3, r3
 8001efc:	73bb      	strb	r3, [r7, #14]
    if (HAL_SPI_TransmitReceive(g_hspi, &tx_byte, &rx_byte, 1, SPI_BYTE_TIMEOUT_MS) != HAL_OK) {
 8001efe:	4b2d      	ldr	r3, [pc, #180]	@ (8001fb4 <fpga_comms_write+0xe8>)
 8001f00:	6818      	ldr	r0, [r3, #0]
 8001f02:	f107 020f 	add.w	r2, r7, #15
 8001f06:	f107 010e 	add.w	r1, r7, #14
 8001f0a:	2364      	movs	r3, #100	@ 0x64
 8001f0c:	9300      	str	r3, [sp, #0]
 8001f0e:	2301      	movs	r3, #1
 8001f10:	f002 ff5f 	bl	8004dd2 <HAL_SPI_TransmitReceive>
 8001f14:	4603      	mov	r3, r0
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d001      	beq.n	8001f1e <fpga_comms_write+0x52>
        return REG_RW_ERR_SPI_TIMEOUT;
 8001f1a:	2303      	movs	r3, #3
 8001f1c:	e046      	b.n	8001fac <fpga_comms_write+0xe0>
    }

    // transaction 2: send MSByte of data
    tx_byte = (data >> 8) & 0xFF;
 8001f1e:	88bb      	ldrh	r3, [r7, #4]
 8001f20:	0a1b      	lsrs	r3, r3, #8
 8001f22:	b29b      	uxth	r3, r3
 8001f24:	b2db      	uxtb	r3, r3
 8001f26:	73bb      	strb	r3, [r7, #14]
    if (HAL_SPI_TransmitReceive(g_hspi, &tx_byte, &rx_byte, 1, SPI_BYTE_TIMEOUT_MS) != HAL_OK) {
 8001f28:	4b22      	ldr	r3, [pc, #136]	@ (8001fb4 <fpga_comms_write+0xe8>)
 8001f2a:	6818      	ldr	r0, [r3, #0]
 8001f2c:	f107 020f 	add.w	r2, r7, #15
 8001f30:	f107 010e 	add.w	r1, r7, #14
 8001f34:	2364      	movs	r3, #100	@ 0x64
 8001f36:	9300      	str	r3, [sp, #0]
 8001f38:	2301      	movs	r3, #1
 8001f3a:	f002 ff4a 	bl	8004dd2 <HAL_SPI_TransmitReceive>
 8001f3e:	4603      	mov	r3, r0
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d001      	beq.n	8001f48 <fpga_comms_write+0x7c>
        return REG_RW_ERR_SPI_TIMEOUT;
 8001f44:	2303      	movs	r3, #3
 8001f46:	e031      	b.n	8001fac <fpga_comms_write+0xe0>
    }

    // transaction 3: send LSByte of data
    tx_byte = data & 0xFF;
 8001f48:	88bb      	ldrh	r3, [r7, #4]
 8001f4a:	b2db      	uxtb	r3, r3
 8001f4c:	73bb      	strb	r3, [r7, #14]
    if (HAL_SPI_TransmitReceive(g_hspi, &tx_byte, &rx_byte, 1, SPI_BYTE_TIMEOUT_MS) != HAL_OK) {
 8001f4e:	4b19      	ldr	r3, [pc, #100]	@ (8001fb4 <fpga_comms_write+0xe8>)
 8001f50:	6818      	ldr	r0, [r3, #0]
 8001f52:	f107 020f 	add.w	r2, r7, #15
 8001f56:	f107 010e 	add.w	r1, r7, #14
 8001f5a:	2364      	movs	r3, #100	@ 0x64
 8001f5c:	9300      	str	r3, [sp, #0]
 8001f5e:	2301      	movs	r3, #1
 8001f60:	f002 ff37 	bl	8004dd2 <HAL_SPI_TransmitReceive>
 8001f64:	4603      	mov	r3, r0
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d001      	beq.n	8001f6e <fpga_comms_write+0xa2>
        return REG_RW_ERR_SPI_TIMEOUT;
 8001f6a:	2303      	movs	r3, #3
 8001f6c:	e01e      	b.n	8001fac <fpga_comms_write+0xe0>
    }

    // check for first ACK (0x01) which should have been received during the LSB transmission
    if (rx_byte != WRITE_ACK1) {
 8001f6e:	7bfb      	ldrb	r3, [r7, #15]
 8001f70:	2201      	movs	r2, #1
 8001f72:	4293      	cmp	r3, r2
 8001f74:	d001      	beq.n	8001f7a <fpga_comms_write+0xae>
        return REG_RW_ERR_WRITE_VERIFY;
 8001f76:	2305      	movs	r3, #5
 8001f78:	e018      	b.n	8001fac <fpga_comms_write+0xe0>
    }

    // transaction 4: send dummy byte to clock out the second ACK (0x02)
    tx_byte = DUMMY_BYTE;
 8001f7a:	2300      	movs	r3, #0
 8001f7c:	73bb      	strb	r3, [r7, #14]
    if (HAL_SPI_TransmitReceive(g_hspi, &tx_byte, &rx_byte, 1, SPI_BYTE_TIMEOUT_MS) != HAL_OK) {
 8001f7e:	4b0d      	ldr	r3, [pc, #52]	@ (8001fb4 <fpga_comms_write+0xe8>)
 8001f80:	6818      	ldr	r0, [r3, #0]
 8001f82:	f107 020f 	add.w	r2, r7, #15
 8001f86:	f107 010e 	add.w	r1, r7, #14
 8001f8a:	2364      	movs	r3, #100	@ 0x64
 8001f8c:	9300      	str	r3, [sp, #0]
 8001f8e:	2301      	movs	r3, #1
 8001f90:	f002 ff1f 	bl	8004dd2 <HAL_SPI_TransmitReceive>
 8001f94:	4603      	mov	r3, r0
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d001      	beq.n	8001f9e <fpga_comms_write+0xd2>
        return REG_RW_ERR_SPI_TIMEOUT;
 8001f9a:	2303      	movs	r3, #3
 8001f9c:	e006      	b.n	8001fac <fpga_comms_write+0xe0>
    }

    // check for second ACK
    if (rx_byte != WRITE_ACK2) {
 8001f9e:	7bfb      	ldrb	r3, [r7, #15]
 8001fa0:	2202      	movs	r2, #2
 8001fa2:	4293      	cmp	r3, r2
 8001fa4:	d001      	beq.n	8001faa <fpga_comms_write+0xde>
        return REG_RW_ERR_WRITE_VERIFY;
 8001fa6:	2305      	movs	r3, #5
 8001fa8:	e000      	b.n	8001fac <fpga_comms_write+0xe0>
    }

    return REG_RW_OK;
 8001faa:	2300      	movs	r3, #0
}
 8001fac:	4618      	mov	r0, r3
 8001fae:	3710      	adds	r7, #16
 8001fb0:	46bd      	mov	sp, r7
 8001fb2:	bd80      	pop	{r7, pc}
 8001fb4:	20000554 	.word	0x20000554

08001fb8 <fpga_comms_read>:
 * @param addr the 7-bit register address (0x00 to 0x7f)
 * @param read_data pointer to a uint16_t variable where the read data will be stored
 * @return reg_rw_status_t status code indicating the outcome
 * // test: uint16_t data; fpga_comms_read(0x03, &data);
 */
reg_rw_status_t fpga_comms_read(uint8_t addr, uint16_t *read_data) {
 8001fb8:	b580      	push	{r7, lr}
 8001fba:	b086      	sub	sp, #24
 8001fbc:	af02      	add	r7, sp, #8
 8001fbe:	4603      	mov	r3, r0
 8001fc0:	6039      	str	r1, [r7, #0]
 8001fc2:	71fb      	strb	r3, [r7, #7]
    if (addr > ADDR_MASK) {
 8001fc4:	227f      	movs	r2, #127	@ 0x7f
 8001fc6:	79fb      	ldrb	r3, [r7, #7]
 8001fc8:	4293      	cmp	r3, r2
 8001fca:	d901      	bls.n	8001fd0 <fpga_comms_read+0x18>
        return REG_RW_ERR_INVALID_ADDR;
 8001fcc:	2302      	movs	r3, #2
 8001fce:	e065      	b.n	800209c <fpga_comms_read+0xe4>
    }
    if (read_data == NULL || g_hspi == NULL) {
 8001fd0:	683b      	ldr	r3, [r7, #0]
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d003      	beq.n	8001fde <fpga_comms_read+0x26>
 8001fd6:	4b33      	ldr	r3, [pc, #204]	@ (80020a4 <fpga_comms_read+0xec>)
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d101      	bne.n	8001fe2 <fpga_comms_read+0x2a>
        return REG_RW_ERROR;
 8001fde:	2301      	movs	r3, #1
 8001fe0:	e05c      	b.n	800209c <fpga_comms_read+0xe4>
    }

    uint8_t rx_byte;
    uint8_t command_byte = addr & ADDR_MASK;
 8001fe2:	227f      	movs	r2, #127	@ 0x7f
 8001fe4:	79fb      	ldrb	r3, [r7, #7]
 8001fe6:	4013      	ands	r3, r2
 8001fe8:	b2db      	uxtb	r3, r3
 8001fea:	72bb      	strb	r3, [r7, #10]

    // send the read request command
    if (HAL_SPI_TransmitReceive(g_hspi, &command_byte, &rx_byte, 1, SPI_BYTE_TIMEOUT_MS) != HAL_OK) {
 8001fec:	4b2d      	ldr	r3, [pc, #180]	@ (80020a4 <fpga_comms_read+0xec>)
 8001fee:	6818      	ldr	r0, [r3, #0]
 8001ff0:	f107 020b 	add.w	r2, r7, #11
 8001ff4:	f107 010a 	add.w	r1, r7, #10
 8001ff8:	2364      	movs	r3, #100	@ 0x64
 8001ffa:	9300      	str	r3, [sp, #0]
 8001ffc:	2301      	movs	r3, #1
 8001ffe:	f002 fee8 	bl	8004dd2 <HAL_SPI_TransmitReceive>
 8002002:	4603      	mov	r3, r0
 8002004:	2b00      	cmp	r3, #0
 8002006:	d001      	beq.n	800200c <fpga_comms_read+0x54>
		return REG_RW_ERR_SPI_TIMEOUT;
 8002008:	2303      	movs	r3, #3
 800200a:	e047      	b.n	800209c <fpga_comms_read+0xe4>
	}

    // poll with dummy bytes until we receive the preamble (0x00)
    int attempts = 0;
 800200c:	2300      	movs	r3, #0
 800200e:	60fb      	str	r3, [r7, #12]
    do {
        if (HAL_SPI_TransmitReceive(g_hspi, (uint8_t*)&DUMMY_BYTE, &rx_byte, 1, SPI_BYTE_TIMEOUT_MS) != HAL_OK) {
 8002010:	4b24      	ldr	r3, [pc, #144]	@ (80020a4 <fpga_comms_read+0xec>)
 8002012:	6818      	ldr	r0, [r3, #0]
 8002014:	f107 020b 	add.w	r2, r7, #11
 8002018:	2364      	movs	r3, #100	@ 0x64
 800201a:	9300      	str	r3, [sp, #0]
 800201c:	2301      	movs	r3, #1
 800201e:	4922      	ldr	r1, [pc, #136]	@ (80020a8 <fpga_comms_read+0xf0>)
 8002020:	f002 fed7 	bl	8004dd2 <HAL_SPI_TransmitReceive>
 8002024:	4603      	mov	r3, r0
 8002026:	2b00      	cmp	r3, #0
 8002028:	d001      	beq.n	800202e <fpga_comms_read+0x76>
			return REG_RW_ERR_SPI_TIMEOUT;
 800202a:	2303      	movs	r3, #3
 800202c:	e036      	b.n	800209c <fpga_comms_read+0xe4>
		}

        if (rx_byte == READ_PREAMBLE) {
 800202e:	7afb      	ldrb	r3, [r7, #11]
 8002030:	2200      	movs	r2, #0
 8002032:	4293      	cmp	r3, r2
 8002034:	d007      	beq.n	8002046 <fpga_comms_read+0x8e>
            break; // preamble found
        }

        if (++attempts > PROTOCOL_MAX_POLL_ATTEMPTS) {
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	3301      	adds	r3, #1
 800203a:	60fb      	str	r3, [r7, #12]
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	2b64      	cmp	r3, #100	@ 0x64
 8002040:	dde6      	ble.n	8002010 <fpga_comms_read+0x58>
            return REG_RW_ERR_POLL_TIMEOUT;
 8002042:	2306      	movs	r3, #6
 8002044:	e02a      	b.n	800209c <fpga_comms_read+0xe4>
            break; // preamble found
 8002046:	bf00      	nop
    } while (1);

    // next two bytes clocked in are the data
    uint8_t data_msb, data_lsb;

    if (HAL_SPI_TransmitReceive(g_hspi, (uint8_t*)&DUMMY_BYTE, &data_msb, 1, SPI_BYTE_TIMEOUT_MS) != HAL_OK) {
 8002048:	4b16      	ldr	r3, [pc, #88]	@ (80020a4 <fpga_comms_read+0xec>)
 800204a:	6818      	ldr	r0, [r3, #0]
 800204c:	f107 0209 	add.w	r2, r7, #9
 8002050:	2364      	movs	r3, #100	@ 0x64
 8002052:	9300      	str	r3, [sp, #0]
 8002054:	2301      	movs	r3, #1
 8002056:	4914      	ldr	r1, [pc, #80]	@ (80020a8 <fpga_comms_read+0xf0>)
 8002058:	f002 febb 	bl	8004dd2 <HAL_SPI_TransmitReceive>
 800205c:	4603      	mov	r3, r0
 800205e:	2b00      	cmp	r3, #0
 8002060:	d001      	beq.n	8002066 <fpga_comms_read+0xae>
		return REG_RW_ERR_SPI_TIMEOUT;
 8002062:	2303      	movs	r3, #3
 8002064:	e01a      	b.n	800209c <fpga_comms_read+0xe4>
	}
    if (HAL_SPI_TransmitReceive(g_hspi, (uint8_t*)&DUMMY_BYTE, &data_lsb, 1, SPI_BYTE_TIMEOUT_MS) != HAL_OK) {
 8002066:	4b0f      	ldr	r3, [pc, #60]	@ (80020a4 <fpga_comms_read+0xec>)
 8002068:	6818      	ldr	r0, [r3, #0]
 800206a:	f107 0208 	add.w	r2, r7, #8
 800206e:	2364      	movs	r3, #100	@ 0x64
 8002070:	9300      	str	r3, [sp, #0]
 8002072:	2301      	movs	r3, #1
 8002074:	490c      	ldr	r1, [pc, #48]	@ (80020a8 <fpga_comms_read+0xf0>)
 8002076:	f002 feac 	bl	8004dd2 <HAL_SPI_TransmitReceive>
 800207a:	4603      	mov	r3, r0
 800207c:	2b00      	cmp	r3, #0
 800207e:	d001      	beq.n	8002084 <fpga_comms_read+0xcc>
		return REG_RW_ERR_SPI_TIMEOUT;
 8002080:	2303      	movs	r3, #3
 8002082:	e00b      	b.n	800209c <fpga_comms_read+0xe4>
	}

    *read_data = ((uint16_t)data_msb << 8) | data_lsb;
 8002084:	7a7b      	ldrb	r3, [r7, #9]
 8002086:	b21b      	sxth	r3, r3
 8002088:	021b      	lsls	r3, r3, #8
 800208a:	b21a      	sxth	r2, r3
 800208c:	7a3b      	ldrb	r3, [r7, #8]
 800208e:	b21b      	sxth	r3, r3
 8002090:	4313      	orrs	r3, r2
 8002092:	b21b      	sxth	r3, r3
 8002094:	b29a      	uxth	r2, r3
 8002096:	683b      	ldr	r3, [r7, #0]
 8002098:	801a      	strh	r2, [r3, #0]

    return REG_RW_OK;
 800209a:	2300      	movs	r3, #0
}
 800209c:	4618      	mov	r0, r3
 800209e:	3710      	adds	r7, #16
 80020a0:	46bd      	mov	sp, r7
 80020a2:	bd80      	pop	{r7, pc}
 80020a4:	20000554 	.word	0x20000554
 80020a8:	080094d9 	.word	0x080094d9

080020ac <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80020ac:	b580      	push	{r7, lr}
 80020ae:	b082      	sub	sp, #8
 80020b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80020b2:	4b0f      	ldr	r3, [pc, #60]	@ (80020f0 <HAL_MspInit+0x44>)
 80020b4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80020b6:	4a0e      	ldr	r2, [pc, #56]	@ (80020f0 <HAL_MspInit+0x44>)
 80020b8:	f043 0301 	orr.w	r3, r3, #1
 80020bc:	6613      	str	r3, [r2, #96]	@ 0x60
 80020be:	4b0c      	ldr	r3, [pc, #48]	@ (80020f0 <HAL_MspInit+0x44>)
 80020c0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80020c2:	f003 0301 	and.w	r3, r3, #1
 80020c6:	607b      	str	r3, [r7, #4]
 80020c8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80020ca:	4b09      	ldr	r3, [pc, #36]	@ (80020f0 <HAL_MspInit+0x44>)
 80020cc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80020ce:	4a08      	ldr	r2, [pc, #32]	@ (80020f0 <HAL_MspInit+0x44>)
 80020d0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80020d4:	6593      	str	r3, [r2, #88]	@ 0x58
 80020d6:	4b06      	ldr	r3, [pc, #24]	@ (80020f0 <HAL_MspInit+0x44>)
 80020d8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80020da:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80020de:	603b      	str	r3, [r7, #0]
 80020e0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 80020e2:	f001 fe9d 	bl	8003e20 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80020e6:	bf00      	nop
 80020e8:	3708      	adds	r7, #8
 80020ea:	46bd      	mov	sp, r7
 80020ec:	bd80      	pop	{r7, pc}
 80020ee:	bf00      	nop
 80020f0:	40021000 	.word	0x40021000

080020f4 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80020f4:	b580      	push	{r7, lr}
 80020f6:	b09c      	sub	sp, #112	@ 0x70
 80020f8:	af00      	add	r7, sp, #0
 80020fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020fc:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8002100:	2200      	movs	r2, #0
 8002102:	601a      	str	r2, [r3, #0]
 8002104:	605a      	str	r2, [r3, #4]
 8002106:	609a      	str	r2, [r3, #8]
 8002108:	60da      	str	r2, [r3, #12]
 800210a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800210c:	f107 0318 	add.w	r3, r7, #24
 8002110:	2244      	movs	r2, #68	@ 0x44
 8002112:	2100      	movs	r1, #0
 8002114:	4618      	mov	r0, r3
 8002116:	f004 fe43 	bl	8006da0 <memset>
  if(hadc->Instance==ADC1)
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002122:	d13e      	bne.n	80021a2 <HAL_ADC_MspInit+0xae>

    /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8002124:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002128:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 800212a:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 800212e:	657b      	str	r3, [r7, #84]	@ 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002130:	f107 0318 	add.w	r3, r7, #24
 8002134:	4618      	mov	r0, r3
 8002136:	f002 fbb1 	bl	800489c <HAL_RCCEx_PeriphCLKConfig>
 800213a:	4603      	mov	r3, r0
 800213c:	2b00      	cmp	r3, #0
 800213e:	d001      	beq.n	8002144 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8002140:	f7ff fa72 	bl	8001628 <Error_Handler>
    }

    /* Peripheral clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 8002144:	4b3a      	ldr	r3, [pc, #232]	@ (8002230 <HAL_ADC_MspInit+0x13c>)
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	3301      	adds	r3, #1
 800214a:	4a39      	ldr	r2, [pc, #228]	@ (8002230 <HAL_ADC_MspInit+0x13c>)
 800214c:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 800214e:	4b38      	ldr	r3, [pc, #224]	@ (8002230 <HAL_ADC_MspInit+0x13c>)
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	2b01      	cmp	r3, #1
 8002154:	d10b      	bne.n	800216e <HAL_ADC_MspInit+0x7a>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8002156:	4b37      	ldr	r3, [pc, #220]	@ (8002234 <HAL_ADC_MspInit+0x140>)
 8002158:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800215a:	4a36      	ldr	r2, [pc, #216]	@ (8002234 <HAL_ADC_MspInit+0x140>)
 800215c:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8002160:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002162:	4b34      	ldr	r3, [pc, #208]	@ (8002234 <HAL_ADC_MspInit+0x140>)
 8002164:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002166:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800216a:	617b      	str	r3, [r7, #20]
 800216c:	697b      	ldr	r3, [r7, #20]
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800216e:	4b31      	ldr	r3, [pc, #196]	@ (8002234 <HAL_ADC_MspInit+0x140>)
 8002170:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002172:	4a30      	ldr	r2, [pc, #192]	@ (8002234 <HAL_ADC_MspInit+0x140>)
 8002174:	f043 0301 	orr.w	r3, r3, #1
 8002178:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800217a:	4b2e      	ldr	r3, [pc, #184]	@ (8002234 <HAL_ADC_MspInit+0x140>)
 800217c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800217e:	f003 0301 	and.w	r3, r3, #1
 8002182:	613b      	str	r3, [r7, #16]
 8002184:	693b      	ldr	r3, [r7, #16]
    /**ADC1 GPIO Configuration
    PA2     ------> ADC1_IN3
    PA3     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002186:	230c      	movs	r3, #12
 8002188:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800218a:	2303      	movs	r3, #3
 800218c:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800218e:	2300      	movs	r3, #0
 8002190:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002192:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8002196:	4619      	mov	r1, r3
 8002198:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800219c:	f001 fc02 	bl	80039a4 <HAL_GPIO_Init>
    /* USER CODE BEGIN ADC2_MspInit 1 */

    /* USER CODE END ADC2_MspInit 1 */
  }

}
 80021a0:	e042      	b.n	8002228 <HAL_ADC_MspInit+0x134>
  else if(hadc->Instance==ADC2)
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	4a24      	ldr	r2, [pc, #144]	@ (8002238 <HAL_ADC_MspInit+0x144>)
 80021a8:	4293      	cmp	r3, r2
 80021aa:	d13d      	bne.n	8002228 <HAL_ADC_MspInit+0x134>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 80021ac:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80021b0:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 80021b2:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 80021b6:	657b      	str	r3, [r7, #84]	@ 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80021b8:	f107 0318 	add.w	r3, r7, #24
 80021bc:	4618      	mov	r0, r3
 80021be:	f002 fb6d 	bl	800489c <HAL_RCCEx_PeriphCLKConfig>
 80021c2:	4603      	mov	r3, r0
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d001      	beq.n	80021cc <HAL_ADC_MspInit+0xd8>
      Error_Handler();
 80021c8:	f7ff fa2e 	bl	8001628 <Error_Handler>
    HAL_RCC_ADC12_CLK_ENABLED++;
 80021cc:	4b18      	ldr	r3, [pc, #96]	@ (8002230 <HAL_ADC_MspInit+0x13c>)
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	3301      	adds	r3, #1
 80021d2:	4a17      	ldr	r2, [pc, #92]	@ (8002230 <HAL_ADC_MspInit+0x13c>)
 80021d4:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 80021d6:	4b16      	ldr	r3, [pc, #88]	@ (8002230 <HAL_ADC_MspInit+0x13c>)
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	2b01      	cmp	r3, #1
 80021dc:	d10b      	bne.n	80021f6 <HAL_ADC_MspInit+0x102>
      __HAL_RCC_ADC12_CLK_ENABLE();
 80021de:	4b15      	ldr	r3, [pc, #84]	@ (8002234 <HAL_ADC_MspInit+0x140>)
 80021e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80021e2:	4a14      	ldr	r2, [pc, #80]	@ (8002234 <HAL_ADC_MspInit+0x140>)
 80021e4:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80021e8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80021ea:	4b12      	ldr	r3, [pc, #72]	@ (8002234 <HAL_ADC_MspInit+0x140>)
 80021ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80021ee:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80021f2:	60fb      	str	r3, [r7, #12]
 80021f4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80021f6:	4b0f      	ldr	r3, [pc, #60]	@ (8002234 <HAL_ADC_MspInit+0x140>)
 80021f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80021fa:	4a0e      	ldr	r2, [pc, #56]	@ (8002234 <HAL_ADC_MspInit+0x140>)
 80021fc:	f043 0301 	orr.w	r3, r3, #1
 8002200:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002202:	4b0c      	ldr	r3, [pc, #48]	@ (8002234 <HAL_ADC_MspInit+0x140>)
 8002204:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002206:	f003 0301 	and.w	r3, r3, #1
 800220a:	60bb      	str	r3, [r7, #8]
 800220c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800220e:	2302      	movs	r3, #2
 8002210:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002212:	2303      	movs	r3, #3
 8002214:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002216:	2300      	movs	r3, #0
 8002218:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800221a:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 800221e:	4619      	mov	r1, r3
 8002220:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002224:	f001 fbbe 	bl	80039a4 <HAL_GPIO_Init>
}
 8002228:	bf00      	nop
 800222a:	3770      	adds	r7, #112	@ 0x70
 800222c:	46bd      	mov	sp, r7
 800222e:	bd80      	pop	{r7, pc}
 8002230:	20000558 	.word	0x20000558
 8002234:	40021000 	.word	0x40021000
 8002238:	50000100 	.word	0x50000100

0800223c <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800223c:	b580      	push	{r7, lr}
 800223e:	b08a      	sub	sp, #40	@ 0x28
 8002240:	af00      	add	r7, sp, #0
 8002242:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002244:	f107 0314 	add.w	r3, r7, #20
 8002248:	2200      	movs	r2, #0
 800224a:	601a      	str	r2, [r3, #0]
 800224c:	605a      	str	r2, [r3, #4]
 800224e:	609a      	str	r2, [r3, #8]
 8002250:	60da      	str	r2, [r3, #12]
 8002252:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	4a17      	ldr	r2, [pc, #92]	@ (80022b8 <HAL_SPI_MspInit+0x7c>)
 800225a:	4293      	cmp	r3, r2
 800225c:	d128      	bne.n	80022b0 <HAL_SPI_MspInit+0x74>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800225e:	4b17      	ldr	r3, [pc, #92]	@ (80022bc <HAL_SPI_MspInit+0x80>)
 8002260:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002262:	4a16      	ldr	r2, [pc, #88]	@ (80022bc <HAL_SPI_MspInit+0x80>)
 8002264:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002268:	6613      	str	r3, [r2, #96]	@ 0x60
 800226a:	4b14      	ldr	r3, [pc, #80]	@ (80022bc <HAL_SPI_MspInit+0x80>)
 800226c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800226e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002272:	613b      	str	r3, [r7, #16]
 8002274:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002276:	4b11      	ldr	r3, [pc, #68]	@ (80022bc <HAL_SPI_MspInit+0x80>)
 8002278:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800227a:	4a10      	ldr	r2, [pc, #64]	@ (80022bc <HAL_SPI_MspInit+0x80>)
 800227c:	f043 0301 	orr.w	r3, r3, #1
 8002280:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002282:	4b0e      	ldr	r3, [pc, #56]	@ (80022bc <HAL_SPI_MspInit+0x80>)
 8002284:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002286:	f003 0301 	and.w	r3, r3, #1
 800228a:	60fb      	str	r3, [r7, #12]
 800228c:	68fb      	ldr	r3, [r7, #12]
    PA4     ------> SPI1_NSS
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800228e:	23f0      	movs	r3, #240	@ 0xf0
 8002290:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002292:	2302      	movs	r3, #2
 8002294:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002296:	2300      	movs	r3, #0
 8002298:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800229a:	2300      	movs	r3, #0
 800229c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800229e:	2305      	movs	r3, #5
 80022a0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80022a2:	f107 0314 	add.w	r3, r7, #20
 80022a6:	4619      	mov	r1, r3
 80022a8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80022ac:	f001 fb7a 	bl	80039a4 <HAL_GPIO_Init>

    /* USER CODE END SPI1_MspInit 1 */

  }

}
 80022b0:	bf00      	nop
 80022b2:	3728      	adds	r7, #40	@ 0x28
 80022b4:	46bd      	mov	sp, r7
 80022b6:	bd80      	pop	{r7, pc}
 80022b8:	40013000 	.word	0x40013000
 80022bc:	40021000 	.word	0x40021000

080022c0 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80022c0:	b580      	push	{r7, lr}
 80022c2:	b09e      	sub	sp, #120	@ 0x78
 80022c4:	af00      	add	r7, sp, #0
 80022c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022c8:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80022cc:	2200      	movs	r2, #0
 80022ce:	601a      	str	r2, [r3, #0]
 80022d0:	605a      	str	r2, [r3, #4]
 80022d2:	609a      	str	r2, [r3, #8]
 80022d4:	60da      	str	r2, [r3, #12]
 80022d6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80022d8:	f107 0320 	add.w	r3, r7, #32
 80022dc:	2244      	movs	r2, #68	@ 0x44
 80022de:	2100      	movs	r1, #0
 80022e0:	4618      	mov	r0, r3
 80022e2:	f004 fd5d 	bl	8006da0 <memset>
  if(huart->Instance==USART1)
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	4a4c      	ldr	r2, [pc, #304]	@ (800241c <HAL_UART_MspInit+0x15c>)
 80022ec:	4293      	cmp	r3, r2
 80022ee:	d138      	bne.n	8002362 <HAL_UART_MspInit+0xa2>

    /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80022f0:	2301      	movs	r3, #1
 80022f2:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80022f4:	2300      	movs	r3, #0
 80022f6:	627b      	str	r3, [r7, #36]	@ 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80022f8:	f107 0320 	add.w	r3, r7, #32
 80022fc:	4618      	mov	r0, r3
 80022fe:	f002 facd 	bl	800489c <HAL_RCCEx_PeriphCLKConfig>
 8002302:	4603      	mov	r3, r0
 8002304:	2b00      	cmp	r3, #0
 8002306:	d001      	beq.n	800230c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8002308:	f7ff f98e 	bl	8001628 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800230c:	4b44      	ldr	r3, [pc, #272]	@ (8002420 <HAL_UART_MspInit+0x160>)
 800230e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002310:	4a43      	ldr	r2, [pc, #268]	@ (8002420 <HAL_UART_MspInit+0x160>)
 8002312:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002316:	6613      	str	r3, [r2, #96]	@ 0x60
 8002318:	4b41      	ldr	r3, [pc, #260]	@ (8002420 <HAL_UART_MspInit+0x160>)
 800231a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800231c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002320:	61fb      	str	r3, [r7, #28]
 8002322:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002324:	4b3e      	ldr	r3, [pc, #248]	@ (8002420 <HAL_UART_MspInit+0x160>)
 8002326:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002328:	4a3d      	ldr	r2, [pc, #244]	@ (8002420 <HAL_UART_MspInit+0x160>)
 800232a:	f043 0301 	orr.w	r3, r3, #1
 800232e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002330:	4b3b      	ldr	r3, [pc, #236]	@ (8002420 <HAL_UART_MspInit+0x160>)
 8002332:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002334:	f003 0301 	and.w	r3, r3, #1
 8002338:	61bb      	str	r3, [r7, #24]
 800233a:	69bb      	ldr	r3, [r7, #24]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800233c:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8002340:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002342:	2302      	movs	r3, #2
 8002344:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002346:	2300      	movs	r3, #0
 8002348:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800234a:	2300      	movs	r3, #0
 800234c:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800234e:	2307      	movs	r3, #7
 8002350:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002352:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8002356:	4619      	mov	r1, r3
 8002358:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800235c:	f001 fb22 	bl	80039a4 <HAL_GPIO_Init>
    /* USER CODE BEGIN USART2_MspInit 1 */

    /* USER CODE END USART2_MspInit 1 */
  }

}
 8002360:	e058      	b.n	8002414 <HAL_UART_MspInit+0x154>
  else if(huart->Instance==USART2)
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	4a2f      	ldr	r2, [pc, #188]	@ (8002424 <HAL_UART_MspInit+0x164>)
 8002368:	4293      	cmp	r3, r2
 800236a:	d153      	bne.n	8002414 <HAL_UART_MspInit+0x154>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800236c:	2302      	movs	r3, #2
 800236e:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8002370:	2300      	movs	r3, #0
 8002372:	62bb      	str	r3, [r7, #40]	@ 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002374:	f107 0320 	add.w	r3, r7, #32
 8002378:	4618      	mov	r0, r3
 800237a:	f002 fa8f 	bl	800489c <HAL_RCCEx_PeriphCLKConfig>
 800237e:	4603      	mov	r3, r0
 8002380:	2b00      	cmp	r3, #0
 8002382:	d001      	beq.n	8002388 <HAL_UART_MspInit+0xc8>
      Error_Handler();
 8002384:	f7ff f950 	bl	8001628 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002388:	4b25      	ldr	r3, [pc, #148]	@ (8002420 <HAL_UART_MspInit+0x160>)
 800238a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800238c:	4a24      	ldr	r2, [pc, #144]	@ (8002420 <HAL_UART_MspInit+0x160>)
 800238e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002392:	6593      	str	r3, [r2, #88]	@ 0x58
 8002394:	4b22      	ldr	r3, [pc, #136]	@ (8002420 <HAL_UART_MspInit+0x160>)
 8002396:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002398:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800239c:	617b      	str	r3, [r7, #20]
 800239e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80023a0:	4b1f      	ldr	r3, [pc, #124]	@ (8002420 <HAL_UART_MspInit+0x160>)
 80023a2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80023a4:	4a1e      	ldr	r2, [pc, #120]	@ (8002420 <HAL_UART_MspInit+0x160>)
 80023a6:	f043 0301 	orr.w	r3, r3, #1
 80023aa:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80023ac:	4b1c      	ldr	r3, [pc, #112]	@ (8002420 <HAL_UART_MspInit+0x160>)
 80023ae:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80023b0:	f003 0301 	and.w	r3, r3, #1
 80023b4:	613b      	str	r3, [r7, #16]
 80023b6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80023b8:	4b19      	ldr	r3, [pc, #100]	@ (8002420 <HAL_UART_MspInit+0x160>)
 80023ba:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80023bc:	4a18      	ldr	r2, [pc, #96]	@ (8002420 <HAL_UART_MspInit+0x160>)
 80023be:	f043 0302 	orr.w	r3, r3, #2
 80023c2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80023c4:	4b16      	ldr	r3, [pc, #88]	@ (8002420 <HAL_UART_MspInit+0x160>)
 80023c6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80023c8:	f003 0302 	and.w	r3, r3, #2
 80023cc:	60fb      	str	r3, [r7, #12]
 80023ce:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 80023d0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80023d4:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023d6:	2302      	movs	r3, #2
 80023d8:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023da:	2300      	movs	r3, #0
 80023dc:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023de:	2300      	movs	r3, #0
 80023e0:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80023e2:	2307      	movs	r3, #7
 80023e4:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80023e6:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80023ea:	4619      	mov	r1, r3
 80023ec:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80023f0:	f001 fad8 	bl	80039a4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80023f4:	2308      	movs	r3, #8
 80023f6:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023f8:	2302      	movs	r3, #2
 80023fa:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023fc:	2300      	movs	r3, #0
 80023fe:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002400:	2300      	movs	r3, #0
 8002402:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002404:	2307      	movs	r3, #7
 8002406:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002408:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 800240c:	4619      	mov	r1, r3
 800240e:	4806      	ldr	r0, [pc, #24]	@ (8002428 <HAL_UART_MspInit+0x168>)
 8002410:	f001 fac8 	bl	80039a4 <HAL_GPIO_Init>
}
 8002414:	bf00      	nop
 8002416:	3778      	adds	r7, #120	@ 0x78
 8002418:	46bd      	mov	sp, r7
 800241a:	bd80      	pop	{r7, pc}
 800241c:	40013800 	.word	0x40013800
 8002420:	40021000 	.word	0x40021000
 8002424:	40004400 	.word	0x40004400
 8002428:	48000400 	.word	0x48000400

0800242c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800242c:	b480      	push	{r7}
 800242e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002430:	bf00      	nop
 8002432:	e7fd      	b.n	8002430 <NMI_Handler+0x4>

08002434 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002434:	b480      	push	{r7}
 8002436:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002438:	bf00      	nop
 800243a:	e7fd      	b.n	8002438 <HardFault_Handler+0x4>

0800243c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800243c:	b480      	push	{r7}
 800243e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002440:	bf00      	nop
 8002442:	e7fd      	b.n	8002440 <MemManage_Handler+0x4>

08002444 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002444:	b480      	push	{r7}
 8002446:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002448:	bf00      	nop
 800244a:	e7fd      	b.n	8002448 <BusFault_Handler+0x4>

0800244c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800244c:	b480      	push	{r7}
 800244e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002450:	bf00      	nop
 8002452:	e7fd      	b.n	8002450 <UsageFault_Handler+0x4>

08002454 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002454:	b480      	push	{r7}
 8002456:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002458:	bf00      	nop
 800245a:	46bd      	mov	sp, r7
 800245c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002460:	4770      	bx	lr

08002462 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002462:	b480      	push	{r7}
 8002464:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002466:	bf00      	nop
 8002468:	46bd      	mov	sp, r7
 800246a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800246e:	4770      	bx	lr

08002470 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002470:	b480      	push	{r7}
 8002472:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002474:	bf00      	nop
 8002476:	46bd      	mov	sp, r7
 8002478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800247c:	4770      	bx	lr

0800247e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800247e:	b580      	push	{r7, lr}
 8002480:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002482:	f000 f957 	bl	8002734 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002486:	bf00      	nop
 8002488:	bd80      	pop	{r7, pc}

0800248a <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800248a:	b480      	push	{r7}
 800248c:	af00      	add	r7, sp, #0
  return 1;
 800248e:	2301      	movs	r3, #1
}
 8002490:	4618      	mov	r0, r3
 8002492:	46bd      	mov	sp, r7
 8002494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002498:	4770      	bx	lr

0800249a <_kill>:

int _kill(int pid, int sig)
{
 800249a:	b580      	push	{r7, lr}
 800249c:	b082      	sub	sp, #8
 800249e:	af00      	add	r7, sp, #0
 80024a0:	6078      	str	r0, [r7, #4]
 80024a2:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80024a4:	f004 fcce 	bl	8006e44 <__errno>
 80024a8:	4603      	mov	r3, r0
 80024aa:	2216      	movs	r2, #22
 80024ac:	601a      	str	r2, [r3, #0]
  return -1;
 80024ae:	f04f 33ff 	mov.w	r3, #4294967295
}
 80024b2:	4618      	mov	r0, r3
 80024b4:	3708      	adds	r7, #8
 80024b6:	46bd      	mov	sp, r7
 80024b8:	bd80      	pop	{r7, pc}

080024ba <_exit>:

void _exit (int status)
{
 80024ba:	b580      	push	{r7, lr}
 80024bc:	b082      	sub	sp, #8
 80024be:	af00      	add	r7, sp, #0
 80024c0:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80024c2:	f04f 31ff 	mov.w	r1, #4294967295
 80024c6:	6878      	ldr	r0, [r7, #4]
 80024c8:	f7ff ffe7 	bl	800249a <_kill>
  while (1) {}    /* Make sure we hang here */
 80024cc:	bf00      	nop
 80024ce:	e7fd      	b.n	80024cc <_exit+0x12>

080024d0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80024d0:	b580      	push	{r7, lr}
 80024d2:	b086      	sub	sp, #24
 80024d4:	af00      	add	r7, sp, #0
 80024d6:	60f8      	str	r0, [r7, #12]
 80024d8:	60b9      	str	r1, [r7, #8]
 80024da:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80024dc:	2300      	movs	r3, #0
 80024de:	617b      	str	r3, [r7, #20]
 80024e0:	e00a      	b.n	80024f8 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80024e2:	f3af 8000 	nop.w
 80024e6:	4601      	mov	r1, r0
 80024e8:	68bb      	ldr	r3, [r7, #8]
 80024ea:	1c5a      	adds	r2, r3, #1
 80024ec:	60ba      	str	r2, [r7, #8]
 80024ee:	b2ca      	uxtb	r2, r1
 80024f0:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80024f2:	697b      	ldr	r3, [r7, #20]
 80024f4:	3301      	adds	r3, #1
 80024f6:	617b      	str	r3, [r7, #20]
 80024f8:	697a      	ldr	r2, [r7, #20]
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	429a      	cmp	r2, r3
 80024fe:	dbf0      	blt.n	80024e2 <_read+0x12>
  }

  return len;
 8002500:	687b      	ldr	r3, [r7, #4]
}
 8002502:	4618      	mov	r0, r3
 8002504:	3718      	adds	r7, #24
 8002506:	46bd      	mov	sp, r7
 8002508:	bd80      	pop	{r7, pc}

0800250a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800250a:	b580      	push	{r7, lr}
 800250c:	b086      	sub	sp, #24
 800250e:	af00      	add	r7, sp, #0
 8002510:	60f8      	str	r0, [r7, #12]
 8002512:	60b9      	str	r1, [r7, #8]
 8002514:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002516:	2300      	movs	r3, #0
 8002518:	617b      	str	r3, [r7, #20]
 800251a:	e009      	b.n	8002530 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800251c:	68bb      	ldr	r3, [r7, #8]
 800251e:	1c5a      	adds	r2, r3, #1
 8002520:	60ba      	str	r2, [r7, #8]
 8002522:	781b      	ldrb	r3, [r3, #0]
 8002524:	4618      	mov	r0, r3
 8002526:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800252a:	697b      	ldr	r3, [r7, #20]
 800252c:	3301      	adds	r3, #1
 800252e:	617b      	str	r3, [r7, #20]
 8002530:	697a      	ldr	r2, [r7, #20]
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	429a      	cmp	r2, r3
 8002536:	dbf1      	blt.n	800251c <_write+0x12>
  }
  return len;
 8002538:	687b      	ldr	r3, [r7, #4]
}
 800253a:	4618      	mov	r0, r3
 800253c:	3718      	adds	r7, #24
 800253e:	46bd      	mov	sp, r7
 8002540:	bd80      	pop	{r7, pc}

08002542 <_close>:

int _close(int file)
{
 8002542:	b480      	push	{r7}
 8002544:	b083      	sub	sp, #12
 8002546:	af00      	add	r7, sp, #0
 8002548:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800254a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800254e:	4618      	mov	r0, r3
 8002550:	370c      	adds	r7, #12
 8002552:	46bd      	mov	sp, r7
 8002554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002558:	4770      	bx	lr

0800255a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800255a:	b480      	push	{r7}
 800255c:	b083      	sub	sp, #12
 800255e:	af00      	add	r7, sp, #0
 8002560:	6078      	str	r0, [r7, #4]
 8002562:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002564:	683b      	ldr	r3, [r7, #0]
 8002566:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800256a:	605a      	str	r2, [r3, #4]
  return 0;
 800256c:	2300      	movs	r3, #0
}
 800256e:	4618      	mov	r0, r3
 8002570:	370c      	adds	r7, #12
 8002572:	46bd      	mov	sp, r7
 8002574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002578:	4770      	bx	lr

0800257a <_isatty>:

int _isatty(int file)
{
 800257a:	b480      	push	{r7}
 800257c:	b083      	sub	sp, #12
 800257e:	af00      	add	r7, sp, #0
 8002580:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002582:	2301      	movs	r3, #1
}
 8002584:	4618      	mov	r0, r3
 8002586:	370c      	adds	r7, #12
 8002588:	46bd      	mov	sp, r7
 800258a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800258e:	4770      	bx	lr

08002590 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002590:	b480      	push	{r7}
 8002592:	b085      	sub	sp, #20
 8002594:	af00      	add	r7, sp, #0
 8002596:	60f8      	str	r0, [r7, #12]
 8002598:	60b9      	str	r1, [r7, #8]
 800259a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800259c:	2300      	movs	r3, #0
}
 800259e:	4618      	mov	r0, r3
 80025a0:	3714      	adds	r7, #20
 80025a2:	46bd      	mov	sp, r7
 80025a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a8:	4770      	bx	lr
	...

080025ac <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80025ac:	b580      	push	{r7, lr}
 80025ae:	b086      	sub	sp, #24
 80025b0:	af00      	add	r7, sp, #0
 80025b2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80025b4:	4a14      	ldr	r2, [pc, #80]	@ (8002608 <_sbrk+0x5c>)
 80025b6:	4b15      	ldr	r3, [pc, #84]	@ (800260c <_sbrk+0x60>)
 80025b8:	1ad3      	subs	r3, r2, r3
 80025ba:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80025bc:	697b      	ldr	r3, [r7, #20]
 80025be:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80025c0:	4b13      	ldr	r3, [pc, #76]	@ (8002610 <_sbrk+0x64>)
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d102      	bne.n	80025ce <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80025c8:	4b11      	ldr	r3, [pc, #68]	@ (8002610 <_sbrk+0x64>)
 80025ca:	4a12      	ldr	r2, [pc, #72]	@ (8002614 <_sbrk+0x68>)
 80025cc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80025ce:	4b10      	ldr	r3, [pc, #64]	@ (8002610 <_sbrk+0x64>)
 80025d0:	681a      	ldr	r2, [r3, #0]
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	4413      	add	r3, r2
 80025d6:	693a      	ldr	r2, [r7, #16]
 80025d8:	429a      	cmp	r2, r3
 80025da:	d207      	bcs.n	80025ec <_sbrk+0x40>
  {
    errno = ENOMEM;
 80025dc:	f004 fc32 	bl	8006e44 <__errno>
 80025e0:	4603      	mov	r3, r0
 80025e2:	220c      	movs	r2, #12
 80025e4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80025e6:	f04f 33ff 	mov.w	r3, #4294967295
 80025ea:	e009      	b.n	8002600 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80025ec:	4b08      	ldr	r3, [pc, #32]	@ (8002610 <_sbrk+0x64>)
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80025f2:	4b07      	ldr	r3, [pc, #28]	@ (8002610 <_sbrk+0x64>)
 80025f4:	681a      	ldr	r2, [r3, #0]
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	4413      	add	r3, r2
 80025fa:	4a05      	ldr	r2, [pc, #20]	@ (8002610 <_sbrk+0x64>)
 80025fc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80025fe:	68fb      	ldr	r3, [r7, #12]
}
 8002600:	4618      	mov	r0, r3
 8002602:	3718      	adds	r7, #24
 8002604:	46bd      	mov	sp, r7
 8002606:	bd80      	pop	{r7, pc}
 8002608:	20008000 	.word	0x20008000
 800260c:	00000400 	.word	0x00000400
 8002610:	2000055c 	.word	0x2000055c
 8002614:	200006b0 	.word	0x200006b0

08002618 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8002618:	b480      	push	{r7}
 800261a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800261c:	4b06      	ldr	r3, [pc, #24]	@ (8002638 <SystemInit+0x20>)
 800261e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002622:	4a05      	ldr	r2, [pc, #20]	@ (8002638 <SystemInit+0x20>)
 8002624:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002628:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800262c:	bf00      	nop
 800262e:	46bd      	mov	sp, r7
 8002630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002634:	4770      	bx	lr
 8002636:	bf00      	nop
 8002638:	e000ed00 	.word	0xe000ed00

0800263c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800263c:	480d      	ldr	r0, [pc, #52]	@ (8002674 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800263e:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8002640:	f7ff ffea 	bl	8002618 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002644:	480c      	ldr	r0, [pc, #48]	@ (8002678 <LoopForever+0x6>)
  ldr r1, =_edata
 8002646:	490d      	ldr	r1, [pc, #52]	@ (800267c <LoopForever+0xa>)
  ldr r2, =_sidata
 8002648:	4a0d      	ldr	r2, [pc, #52]	@ (8002680 <LoopForever+0xe>)
  movs r3, #0
 800264a:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 800264c:	e002      	b.n	8002654 <LoopCopyDataInit>

0800264e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800264e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002650:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002652:	3304      	adds	r3, #4

08002654 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002654:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002656:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002658:	d3f9      	bcc.n	800264e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800265a:	4a0a      	ldr	r2, [pc, #40]	@ (8002684 <LoopForever+0x12>)
  ldr r4, =_ebss
 800265c:	4c0a      	ldr	r4, [pc, #40]	@ (8002688 <LoopForever+0x16>)
  movs r3, #0
 800265e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002660:	e001      	b.n	8002666 <LoopFillZerobss>

08002662 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002662:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002664:	3204      	adds	r2, #4

08002666 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002666:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002668:	d3fb      	bcc.n	8002662 <FillZerobss>
/* Call static constructors */
    bl __libc_init_array
 800266a:	f004 fbf1 	bl	8006e50 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800266e:	f7fe fd57 	bl	8001120 <main>

08002672 <LoopForever>:

LoopForever:
    b LoopForever
 8002672:	e7fe      	b.n	8002672 <LoopForever>
  ldr   r0, =_estack
 8002674:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8002678:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800267c:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 8002680:	080098a4 	.word	0x080098a4
  ldr r2, =_sbss
 8002684:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 8002688:	200006b0 	.word	0x200006b0

0800268c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800268c:	e7fe      	b.n	800268c <ADC1_2_IRQHandler>

0800268e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800268e:	b580      	push	{r7, lr}
 8002690:	b082      	sub	sp, #8
 8002692:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002694:	2300      	movs	r3, #0
 8002696:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002698:	2003      	movs	r0, #3
 800269a:	f001 f951 	bl	8003940 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800269e:	200f      	movs	r0, #15
 80026a0:	f000 f80e 	bl	80026c0 <HAL_InitTick>
 80026a4:	4603      	mov	r3, r0
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d002      	beq.n	80026b0 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80026aa:	2301      	movs	r3, #1
 80026ac:	71fb      	strb	r3, [r7, #7]
 80026ae:	e001      	b.n	80026b4 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80026b0:	f7ff fcfc 	bl	80020ac <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80026b4:	79fb      	ldrb	r3, [r7, #7]

}
 80026b6:	4618      	mov	r0, r3
 80026b8:	3708      	adds	r7, #8
 80026ba:	46bd      	mov	sp, r7
 80026bc:	bd80      	pop	{r7, pc}
	...

080026c0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80026c0:	b580      	push	{r7, lr}
 80026c2:	b084      	sub	sp, #16
 80026c4:	af00      	add	r7, sp, #0
 80026c6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80026c8:	2300      	movs	r3, #0
 80026ca:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 80026cc:	4b16      	ldr	r3, [pc, #88]	@ (8002728 <HAL_InitTick+0x68>)
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d022      	beq.n	800271a <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80026d4:	4b15      	ldr	r3, [pc, #84]	@ (800272c <HAL_InitTick+0x6c>)
 80026d6:	681a      	ldr	r2, [r3, #0]
 80026d8:	4b13      	ldr	r3, [pc, #76]	@ (8002728 <HAL_InitTick+0x68>)
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80026e0:	fbb1 f3f3 	udiv	r3, r1, r3
 80026e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80026e8:	4618      	mov	r0, r3
 80026ea:	f001 f94e 	bl	800398a <HAL_SYSTICK_Config>
 80026ee:	4603      	mov	r3, r0
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d10f      	bne.n	8002714 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	2b0f      	cmp	r3, #15
 80026f8:	d809      	bhi.n	800270e <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80026fa:	2200      	movs	r2, #0
 80026fc:	6879      	ldr	r1, [r7, #4]
 80026fe:	f04f 30ff 	mov.w	r0, #4294967295
 8002702:	f001 f928 	bl	8003956 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002706:	4a0a      	ldr	r2, [pc, #40]	@ (8002730 <HAL_InitTick+0x70>)
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	6013      	str	r3, [r2, #0]
 800270c:	e007      	b.n	800271e <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 800270e:	2301      	movs	r3, #1
 8002710:	73fb      	strb	r3, [r7, #15]
 8002712:	e004      	b.n	800271e <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002714:	2301      	movs	r3, #1
 8002716:	73fb      	strb	r3, [r7, #15]
 8002718:	e001      	b.n	800271e <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 800271a:	2301      	movs	r3, #1
 800271c:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800271e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002720:	4618      	mov	r0, r3
 8002722:	3710      	adds	r7, #16
 8002724:	46bd      	mov	sp, r7
 8002726:	bd80      	pop	{r7, pc}
 8002728:	20000008 	.word	0x20000008
 800272c:	20000000 	.word	0x20000000
 8002730:	20000004 	.word	0x20000004

08002734 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002734:	b480      	push	{r7}
 8002736:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002738:	4b05      	ldr	r3, [pc, #20]	@ (8002750 <HAL_IncTick+0x1c>)
 800273a:	681a      	ldr	r2, [r3, #0]
 800273c:	4b05      	ldr	r3, [pc, #20]	@ (8002754 <HAL_IncTick+0x20>)
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	4413      	add	r3, r2
 8002742:	4a03      	ldr	r2, [pc, #12]	@ (8002750 <HAL_IncTick+0x1c>)
 8002744:	6013      	str	r3, [r2, #0]
}
 8002746:	bf00      	nop
 8002748:	46bd      	mov	sp, r7
 800274a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800274e:	4770      	bx	lr
 8002750:	20000560 	.word	0x20000560
 8002754:	20000008 	.word	0x20000008

08002758 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002758:	b480      	push	{r7}
 800275a:	af00      	add	r7, sp, #0
  return uwTick;
 800275c:	4b03      	ldr	r3, [pc, #12]	@ (800276c <HAL_GetTick+0x14>)
 800275e:	681b      	ldr	r3, [r3, #0]
}
 8002760:	4618      	mov	r0, r3
 8002762:	46bd      	mov	sp, r7
 8002764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002768:	4770      	bx	lr
 800276a:	bf00      	nop
 800276c:	20000560 	.word	0x20000560

08002770 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002770:	b580      	push	{r7, lr}
 8002772:	b084      	sub	sp, #16
 8002774:	af00      	add	r7, sp, #0
 8002776:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002778:	f7ff ffee 	bl	8002758 <HAL_GetTick>
 800277c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002788:	d004      	beq.n	8002794 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 800278a:	4b09      	ldr	r3, [pc, #36]	@ (80027b0 <HAL_Delay+0x40>)
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	68fa      	ldr	r2, [r7, #12]
 8002790:	4413      	add	r3, r2
 8002792:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002794:	bf00      	nop
 8002796:	f7ff ffdf 	bl	8002758 <HAL_GetTick>
 800279a:	4602      	mov	r2, r0
 800279c:	68bb      	ldr	r3, [r7, #8]
 800279e:	1ad3      	subs	r3, r2, r3
 80027a0:	68fa      	ldr	r2, [r7, #12]
 80027a2:	429a      	cmp	r2, r3
 80027a4:	d8f7      	bhi.n	8002796 <HAL_Delay+0x26>
  {
  }
}
 80027a6:	bf00      	nop
 80027a8:	bf00      	nop
 80027aa:	3710      	adds	r7, #16
 80027ac:	46bd      	mov	sp, r7
 80027ae:	bd80      	pop	{r7, pc}
 80027b0:	20000008 	.word	0x20000008

080027b4 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80027b4:	b480      	push	{r7}
 80027b6:	b083      	sub	sp, #12
 80027b8:	af00      	add	r7, sp, #0
 80027ba:	6078      	str	r0, [r7, #4]
 80027bc:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	689b      	ldr	r3, [r3, #8]
 80027c2:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 80027c6:	683b      	ldr	r3, [r7, #0]
 80027c8:	431a      	orrs	r2, r3
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	609a      	str	r2, [r3, #8]
}
 80027ce:	bf00      	nop
 80027d0:	370c      	adds	r7, #12
 80027d2:	46bd      	mov	sp, r7
 80027d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d8:	4770      	bx	lr

080027da <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80027da:	b480      	push	{r7}
 80027dc:	b083      	sub	sp, #12
 80027de:	af00      	add	r7, sp, #0
 80027e0:	6078      	str	r0, [r7, #4]
 80027e2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	689b      	ldr	r3, [r3, #8]
 80027e8:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 80027ec:	683b      	ldr	r3, [r7, #0]
 80027ee:	431a      	orrs	r2, r3
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	609a      	str	r2, [r3, #8]
}
 80027f4:	bf00      	nop
 80027f6:	370c      	adds	r7, #12
 80027f8:	46bd      	mov	sp, r7
 80027fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027fe:	4770      	bx	lr

08002800 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002800:	b480      	push	{r7}
 8002802:	b083      	sub	sp, #12
 8002804:	af00      	add	r7, sp, #0
 8002806:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	689b      	ldr	r3, [r3, #8]
 800280c:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8002810:	4618      	mov	r0, r3
 8002812:	370c      	adds	r7, #12
 8002814:	46bd      	mov	sp, r7
 8002816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800281a:	4770      	bx	lr

0800281c <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 800281c:	b480      	push	{r7}
 800281e:	b087      	sub	sp, #28
 8002820:	af00      	add	r7, sp, #0
 8002822:	60f8      	str	r0, [r7, #12]
 8002824:	60b9      	str	r1, [r7, #8]
 8002826:	607a      	str	r2, [r7, #4]
 8002828:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	3360      	adds	r3, #96	@ 0x60
 800282e:	461a      	mov	r2, r3
 8002830:	68bb      	ldr	r3, [r7, #8]
 8002832:	009b      	lsls	r3, r3, #2
 8002834:	4413      	add	r3, r2
 8002836:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002838:	697b      	ldr	r3, [r7, #20]
 800283a:	681a      	ldr	r2, [r3, #0]
 800283c:	4b08      	ldr	r3, [pc, #32]	@ (8002860 <LL_ADC_SetOffset+0x44>)
 800283e:	4013      	ands	r3, r2
 8002840:	687a      	ldr	r2, [r7, #4]
 8002842:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 8002846:	683a      	ldr	r2, [r7, #0]
 8002848:	430a      	orrs	r2, r1
 800284a:	4313      	orrs	r3, r2
 800284c:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8002850:	697b      	ldr	r3, [r7, #20]
 8002852:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8002854:	bf00      	nop
 8002856:	371c      	adds	r7, #28
 8002858:	46bd      	mov	sp, r7
 800285a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800285e:	4770      	bx	lr
 8002860:	03fff000 	.word	0x03fff000

08002864 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8002864:	b480      	push	{r7}
 8002866:	b085      	sub	sp, #20
 8002868:	af00      	add	r7, sp, #0
 800286a:	6078      	str	r0, [r7, #4]
 800286c:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	3360      	adds	r3, #96	@ 0x60
 8002872:	461a      	mov	r2, r3
 8002874:	683b      	ldr	r3, [r7, #0]
 8002876:	009b      	lsls	r3, r3, #2
 8002878:	4413      	add	r3, r2
 800287a:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8002884:	4618      	mov	r0, r3
 8002886:	3714      	adds	r7, #20
 8002888:	46bd      	mov	sp, r7
 800288a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800288e:	4770      	bx	lr

08002890 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8002890:	b480      	push	{r7}
 8002892:	b087      	sub	sp, #28
 8002894:	af00      	add	r7, sp, #0
 8002896:	60f8      	str	r0, [r7, #12]
 8002898:	60b9      	str	r1, [r7, #8]
 800289a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	3360      	adds	r3, #96	@ 0x60
 80028a0:	461a      	mov	r2, r3
 80028a2:	68bb      	ldr	r3, [r7, #8]
 80028a4:	009b      	lsls	r3, r3, #2
 80028a6:	4413      	add	r3, r2
 80028a8:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80028aa:	697b      	ldr	r3, [r7, #20]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	431a      	orrs	r2, r3
 80028b6:	697b      	ldr	r3, [r7, #20]
 80028b8:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80028ba:	bf00      	nop
 80028bc:	371c      	adds	r7, #28
 80028be:	46bd      	mov	sp, r7
 80028c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c4:	4770      	bx	lr

080028c6 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 80028c6:	b480      	push	{r7}
 80028c8:	b087      	sub	sp, #28
 80028ca:	af00      	add	r7, sp, #0
 80028cc:	60f8      	str	r0, [r7, #12]
 80028ce:	60b9      	str	r1, [r7, #8]
 80028d0:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	3360      	adds	r3, #96	@ 0x60
 80028d6:	461a      	mov	r2, r3
 80028d8:	68bb      	ldr	r3, [r7, #8]
 80028da:	009b      	lsls	r3, r3, #2
 80028dc:	4413      	add	r3, r2
 80028de:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80028e0:	697b      	ldr	r3, [r7, #20]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	431a      	orrs	r2, r3
 80028ec:	697b      	ldr	r3, [r7, #20]
 80028ee:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 80028f0:	bf00      	nop
 80028f2:	371c      	adds	r7, #28
 80028f4:	46bd      	mov	sp, r7
 80028f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028fa:	4770      	bx	lr

080028fc <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 80028fc:	b480      	push	{r7}
 80028fe:	b087      	sub	sp, #28
 8002900:	af00      	add	r7, sp, #0
 8002902:	60f8      	str	r0, [r7, #12]
 8002904:	60b9      	str	r1, [r7, #8]
 8002906:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	3360      	adds	r3, #96	@ 0x60
 800290c:	461a      	mov	r2, r3
 800290e:	68bb      	ldr	r3, [r7, #8]
 8002910:	009b      	lsls	r3, r3, #2
 8002912:	4413      	add	r3, r2
 8002914:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002916:	697b      	ldr	r3, [r7, #20]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	431a      	orrs	r2, r3
 8002922:	697b      	ldr	r3, [r7, #20]
 8002924:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8002926:	bf00      	nop
 8002928:	371c      	adds	r7, #28
 800292a:	46bd      	mov	sp, r7
 800292c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002930:	4770      	bx	lr

08002932 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8002932:	b480      	push	{r7}
 8002934:	b083      	sub	sp, #12
 8002936:	af00      	add	r7, sp, #0
 8002938:	6078      	str	r0, [r7, #4]
 800293a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	695b      	ldr	r3, [r3, #20]
 8002940:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002944:	683b      	ldr	r3, [r7, #0]
 8002946:	431a      	orrs	r2, r3
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	615a      	str	r2, [r3, #20]
}
 800294c:	bf00      	nop
 800294e:	370c      	adds	r7, #12
 8002950:	46bd      	mov	sp, r7
 8002952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002956:	4770      	bx	lr

08002958 <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002958:	b480      	push	{r7}
 800295a:	b087      	sub	sp, #28
 800295c:	af00      	add	r7, sp, #0
 800295e:	60f8      	str	r0, [r7, #12]
 8002960:	60b9      	str	r1, [r7, #8]
 8002962:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	3330      	adds	r3, #48	@ 0x30
 8002968:	461a      	mov	r2, r3
 800296a:	68bb      	ldr	r3, [r7, #8]
 800296c:	0a1b      	lsrs	r3, r3, #8
 800296e:	009b      	lsls	r3, r3, #2
 8002970:	f003 030c 	and.w	r3, r3, #12
 8002974:	4413      	add	r3, r2
 8002976:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8002978:	697b      	ldr	r3, [r7, #20]
 800297a:	681a      	ldr	r2, [r3, #0]
 800297c:	68bb      	ldr	r3, [r7, #8]
 800297e:	f003 031f 	and.w	r3, r3, #31
 8002982:	211f      	movs	r1, #31
 8002984:	fa01 f303 	lsl.w	r3, r1, r3
 8002988:	43db      	mvns	r3, r3
 800298a:	401a      	ands	r2, r3
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	0e9b      	lsrs	r3, r3, #26
 8002990:	f003 011f 	and.w	r1, r3, #31
 8002994:	68bb      	ldr	r3, [r7, #8]
 8002996:	f003 031f 	and.w	r3, r3, #31
 800299a:	fa01 f303 	lsl.w	r3, r1, r3
 800299e:	431a      	orrs	r2, r3
 80029a0:	697b      	ldr	r3, [r7, #20]
 80029a2:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80029a4:	bf00      	nop
 80029a6:	371c      	adds	r7, #28
 80029a8:	46bd      	mov	sp, r7
 80029aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ae:	4770      	bx	lr

080029b0 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80029b0:	b480      	push	{r7}
 80029b2:	b087      	sub	sp, #28
 80029b4:	af00      	add	r7, sp, #0
 80029b6:	60f8      	str	r0, [r7, #12]
 80029b8:	60b9      	str	r1, [r7, #8]
 80029ba:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	3314      	adds	r3, #20
 80029c0:	461a      	mov	r2, r3
 80029c2:	68bb      	ldr	r3, [r7, #8]
 80029c4:	0e5b      	lsrs	r3, r3, #25
 80029c6:	009b      	lsls	r3, r3, #2
 80029c8:	f003 0304 	and.w	r3, r3, #4
 80029cc:	4413      	add	r3, r2
 80029ce:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80029d0:	697b      	ldr	r3, [r7, #20]
 80029d2:	681a      	ldr	r2, [r3, #0]
 80029d4:	68bb      	ldr	r3, [r7, #8]
 80029d6:	0d1b      	lsrs	r3, r3, #20
 80029d8:	f003 031f 	and.w	r3, r3, #31
 80029dc:	2107      	movs	r1, #7
 80029de:	fa01 f303 	lsl.w	r3, r1, r3
 80029e2:	43db      	mvns	r3, r3
 80029e4:	401a      	ands	r2, r3
 80029e6:	68bb      	ldr	r3, [r7, #8]
 80029e8:	0d1b      	lsrs	r3, r3, #20
 80029ea:	f003 031f 	and.w	r3, r3, #31
 80029ee:	6879      	ldr	r1, [r7, #4]
 80029f0:	fa01 f303 	lsl.w	r3, r1, r3
 80029f4:	431a      	orrs	r2, r3
 80029f6:	697b      	ldr	r3, [r7, #20]
 80029f8:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80029fa:	bf00      	nop
 80029fc:	371c      	adds	r7, #28
 80029fe:	46bd      	mov	sp, r7
 8002a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a04:	4770      	bx	lr
	...

08002a08 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002a08:	b480      	push	{r7}
 8002a0a:	b085      	sub	sp, #20
 8002a0c:	af00      	add	r7, sp, #0
 8002a0e:	60f8      	str	r0, [r7, #12]
 8002a10:	60b9      	str	r1, [r7, #8]
 8002a12:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8002a1a:	68bb      	ldr	r3, [r7, #8]
 8002a1c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a20:	43db      	mvns	r3, r3
 8002a22:	401a      	ands	r2, r3
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	f003 0318 	and.w	r3, r3, #24
 8002a2a:	4908      	ldr	r1, [pc, #32]	@ (8002a4c <LL_ADC_SetChannelSingleDiff+0x44>)
 8002a2c:	40d9      	lsrs	r1, r3
 8002a2e:	68bb      	ldr	r3, [r7, #8]
 8002a30:	400b      	ands	r3, r1
 8002a32:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a36:	431a      	orrs	r2, r3
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8002a3e:	bf00      	nop
 8002a40:	3714      	adds	r7, #20
 8002a42:	46bd      	mov	sp, r7
 8002a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a48:	4770      	bx	lr
 8002a4a:	bf00      	nop
 8002a4c:	0007ffff 	.word	0x0007ffff

08002a50 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002a50:	b480      	push	{r7}
 8002a52:	b083      	sub	sp, #12
 8002a54:	af00      	add	r7, sp, #0
 8002a56:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	689b      	ldr	r3, [r3, #8]
 8002a5c:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8002a60:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002a64:	687a      	ldr	r2, [r7, #4]
 8002a66:	6093      	str	r3, [r2, #8]
}
 8002a68:	bf00      	nop
 8002a6a:	370c      	adds	r7, #12
 8002a6c:	46bd      	mov	sp, r7
 8002a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a72:	4770      	bx	lr

08002a74 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8002a74:	b480      	push	{r7}
 8002a76:	b083      	sub	sp, #12
 8002a78:	af00      	add	r7, sp, #0
 8002a7a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	689b      	ldr	r3, [r3, #8]
 8002a80:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002a84:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002a88:	d101      	bne.n	8002a8e <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8002a8a:	2301      	movs	r3, #1
 8002a8c:	e000      	b.n	8002a90 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8002a8e:	2300      	movs	r3, #0
}
 8002a90:	4618      	mov	r0, r3
 8002a92:	370c      	adds	r7, #12
 8002a94:	46bd      	mov	sp, r7
 8002a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a9a:	4770      	bx	lr

08002a9c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002a9c:	b480      	push	{r7}
 8002a9e:	b083      	sub	sp, #12
 8002aa0:	af00      	add	r7, sp, #0
 8002aa2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	689b      	ldr	r3, [r3, #8]
 8002aa8:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8002aac:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002ab0:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002ab8:	bf00      	nop
 8002aba:	370c      	adds	r7, #12
 8002abc:	46bd      	mov	sp, r7
 8002abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac2:	4770      	bx	lr

08002ac4 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8002ac4:	b480      	push	{r7}
 8002ac6:	b083      	sub	sp, #12
 8002ac8:	af00      	add	r7, sp, #0
 8002aca:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	689b      	ldr	r3, [r3, #8]
 8002ad0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002ad4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002ad8:	d101      	bne.n	8002ade <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8002ada:	2301      	movs	r3, #1
 8002adc:	e000      	b.n	8002ae0 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8002ade:	2300      	movs	r3, #0
}
 8002ae0:	4618      	mov	r0, r3
 8002ae2:	370c      	adds	r7, #12
 8002ae4:	46bd      	mov	sp, r7
 8002ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aea:	4770      	bx	lr

08002aec <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8002aec:	b480      	push	{r7}
 8002aee:	b083      	sub	sp, #12
 8002af0:	af00      	add	r7, sp, #0
 8002af2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	689b      	ldr	r3, [r3, #8]
 8002af8:	f003 0301 	and.w	r3, r3, #1
 8002afc:	2b01      	cmp	r3, #1
 8002afe:	d101      	bne.n	8002b04 <LL_ADC_IsEnabled+0x18>
 8002b00:	2301      	movs	r3, #1
 8002b02:	e000      	b.n	8002b06 <LL_ADC_IsEnabled+0x1a>
 8002b04:	2300      	movs	r3, #0
}
 8002b06:	4618      	mov	r0, r3
 8002b08:	370c      	adds	r7, #12
 8002b0a:	46bd      	mov	sp, r7
 8002b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b10:	4770      	bx	lr

08002b12 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8002b12:	b480      	push	{r7}
 8002b14:	b083      	sub	sp, #12
 8002b16:	af00      	add	r7, sp, #0
 8002b18:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	689b      	ldr	r3, [r3, #8]
 8002b1e:	f003 0304 	and.w	r3, r3, #4
 8002b22:	2b04      	cmp	r3, #4
 8002b24:	d101      	bne.n	8002b2a <LL_ADC_REG_IsConversionOngoing+0x18>
 8002b26:	2301      	movs	r3, #1
 8002b28:	e000      	b.n	8002b2c <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002b2a:	2300      	movs	r3, #0
}
 8002b2c:	4618      	mov	r0, r3
 8002b2e:	370c      	adds	r7, #12
 8002b30:	46bd      	mov	sp, r7
 8002b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b36:	4770      	bx	lr

08002b38 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8002b38:	b480      	push	{r7}
 8002b3a:	b083      	sub	sp, #12
 8002b3c:	af00      	add	r7, sp, #0
 8002b3e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	689b      	ldr	r3, [r3, #8]
 8002b44:	f003 0308 	and.w	r3, r3, #8
 8002b48:	2b08      	cmp	r3, #8
 8002b4a:	d101      	bne.n	8002b50 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002b4c:	2301      	movs	r3, #1
 8002b4e:	e000      	b.n	8002b52 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002b50:	2300      	movs	r3, #0
}
 8002b52:	4618      	mov	r0, r3
 8002b54:	370c      	adds	r7, #12
 8002b56:	46bd      	mov	sp, r7
 8002b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b5c:	4770      	bx	lr
	...

08002b60 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002b60:	b590      	push	{r4, r7, lr}
 8002b62:	b089      	sub	sp, #36	@ 0x24
 8002b64:	af00      	add	r7, sp, #0
 8002b66:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002b68:	2300      	movs	r3, #0
 8002b6a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8002b6c:	2300      	movs	r3, #0
 8002b6e:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d101      	bne.n	8002b7a <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8002b76:	2301      	movs	r3, #1
 8002b78:	e167      	b.n	8002e4a <HAL_ADC_Init+0x2ea>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	695b      	ldr	r3, [r3, #20]
 8002b7e:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d109      	bne.n	8002b9c <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002b88:	6878      	ldr	r0, [r7, #4]
 8002b8a:	f7ff fab3 	bl	80020f4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	2200      	movs	r2, #0
 8002b92:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	2200      	movs	r2, #0
 8002b98:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	4618      	mov	r0, r3
 8002ba2:	f7ff ff67 	bl	8002a74 <LL_ADC_IsDeepPowerDownEnabled>
 8002ba6:	4603      	mov	r3, r0
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d004      	beq.n	8002bb6 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	4618      	mov	r0, r3
 8002bb2:	f7ff ff4d 	bl	8002a50 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	4618      	mov	r0, r3
 8002bbc:	f7ff ff82 	bl	8002ac4 <LL_ADC_IsInternalRegulatorEnabled>
 8002bc0:	4603      	mov	r3, r0
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d115      	bne.n	8002bf2 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	4618      	mov	r0, r3
 8002bcc:	f7ff ff66 	bl	8002a9c <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002bd0:	4ba0      	ldr	r3, [pc, #640]	@ (8002e54 <HAL_ADC_Init+0x2f4>)
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	099b      	lsrs	r3, r3, #6
 8002bd6:	4aa0      	ldr	r2, [pc, #640]	@ (8002e58 <HAL_ADC_Init+0x2f8>)
 8002bd8:	fba2 2303 	umull	r2, r3, r2, r3
 8002bdc:	099b      	lsrs	r3, r3, #6
 8002bde:	3301      	adds	r3, #1
 8002be0:	005b      	lsls	r3, r3, #1
 8002be2:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002be4:	e002      	b.n	8002bec <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	3b01      	subs	r3, #1
 8002bea:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d1f9      	bne.n	8002be6 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	4618      	mov	r0, r3
 8002bf8:	f7ff ff64 	bl	8002ac4 <LL_ADC_IsInternalRegulatorEnabled>
 8002bfc:	4603      	mov	r3, r0
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d10d      	bne.n	8002c1e <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002c06:	f043 0210 	orr.w	r2, r3, #16
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002c12:	f043 0201 	orr.w	r2, r3, #1
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 8002c1a:	2301      	movs	r3, #1
 8002c1c:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	4618      	mov	r0, r3
 8002c24:	f7ff ff75 	bl	8002b12 <LL_ADC_REG_IsConversionOngoing>
 8002c28:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002c2e:	f003 0310 	and.w	r3, r3, #16
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	f040 8100 	bne.w	8002e38 <HAL_ADC_Init+0x2d8>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8002c38:	697b      	ldr	r3, [r7, #20]
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	f040 80fc 	bne.w	8002e38 <HAL_ADC_Init+0x2d8>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002c44:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8002c48:	f043 0202 	orr.w	r2, r3, #2
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	4618      	mov	r0, r3
 8002c56:	f7ff ff49 	bl	8002aec <LL_ADC_IsEnabled>
 8002c5a:	4603      	mov	r3, r0
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d111      	bne.n	8002c84 <HAL_ADC_Init+0x124>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002c60:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8002c64:	f7ff ff42 	bl	8002aec <LL_ADC_IsEnabled>
 8002c68:	4604      	mov	r4, r0
 8002c6a:	487c      	ldr	r0, [pc, #496]	@ (8002e5c <HAL_ADC_Init+0x2fc>)
 8002c6c:	f7ff ff3e 	bl	8002aec <LL_ADC_IsEnabled>
 8002c70:	4603      	mov	r3, r0
 8002c72:	4323      	orrs	r3, r4
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d105      	bne.n	8002c84 <HAL_ADC_Init+0x124>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	685b      	ldr	r3, [r3, #4]
 8002c7c:	4619      	mov	r1, r3
 8002c7e:	4878      	ldr	r0, [pc, #480]	@ (8002e60 <HAL_ADC_Init+0x300>)
 8002c80:	f7ff fd98 	bl	80027b4 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	7f5b      	ldrb	r3, [r3, #29]
 8002c88:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002c8e:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8002c94:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8002c9a:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002ca2:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002ca4:	4313      	orrs	r3, r2
 8002ca6:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002cae:	2b01      	cmp	r3, #1
 8002cb0:	d106      	bne.n	8002cc0 <HAL_ADC_Init+0x160>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002cb6:	3b01      	subs	r3, #1
 8002cb8:	045b      	lsls	r3, r3, #17
 8002cba:	69ba      	ldr	r2, [r7, #24]
 8002cbc:	4313      	orrs	r3, r2
 8002cbe:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d009      	beq.n	8002cdc <HAL_ADC_Init+0x17c>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ccc:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002cd4:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002cd6:	69ba      	ldr	r2, [r7, #24]
 8002cd8:	4313      	orrs	r3, r2
 8002cda:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	68da      	ldr	r2, [r3, #12]
 8002ce2:	4b60      	ldr	r3, [pc, #384]	@ (8002e64 <HAL_ADC_Init+0x304>)
 8002ce4:	4013      	ands	r3, r2
 8002ce6:	687a      	ldr	r2, [r7, #4]
 8002ce8:	6812      	ldr	r2, [r2, #0]
 8002cea:	69b9      	ldr	r1, [r7, #24]
 8002cec:	430b      	orrs	r3, r1
 8002cee:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	691b      	ldr	r3, [r3, #16]
 8002cf6:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	430a      	orrs	r2, r1
 8002d04:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	4618      	mov	r0, r3
 8002d0c:	f7ff ff14 	bl	8002b38 <LL_ADC_INJ_IsConversionOngoing>
 8002d10:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002d12:	697b      	ldr	r3, [r7, #20]
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d16d      	bne.n	8002df4 <HAL_ADC_Init+0x294>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002d18:	693b      	ldr	r3, [r7, #16]
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d16a      	bne.n	8002df4 <HAL_ADC_Init+0x294>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8002d22:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8002d2a:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8002d2c:	4313      	orrs	r3, r2
 8002d2e:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	68db      	ldr	r3, [r3, #12]
 8002d36:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002d3a:	f023 0302 	bic.w	r3, r3, #2
 8002d3e:	687a      	ldr	r2, [r7, #4]
 8002d40:	6812      	ldr	r2, [r2, #0]
 8002d42:	69b9      	ldr	r1, [r7, #24]
 8002d44:	430b      	orrs	r3, r1
 8002d46:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	691b      	ldr	r3, [r3, #16]
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d017      	beq.n	8002d80 <HAL_ADC_Init+0x220>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	691a      	ldr	r2, [r3, #16]
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8002d5e:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8002d68:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8002d6c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002d70:	687a      	ldr	r2, [r7, #4]
 8002d72:	6911      	ldr	r1, [r2, #16]
 8002d74:	687a      	ldr	r2, [r7, #4]
 8002d76:	6812      	ldr	r2, [r2, #0]
 8002d78:	430b      	orrs	r3, r1
 8002d7a:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
 8002d7e:	e013      	b.n	8002da8 <HAL_ADC_Init+0x248>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	691a      	ldr	r2, [r3, #16]
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8002d8e:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8002d98:	687a      	ldr	r2, [r7, #4]
 8002d9a:	6812      	ldr	r2, [r2, #0]
 8002d9c:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8002da0:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002da4:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002dae:	2b01      	cmp	r3, #1
 8002db0:	d118      	bne.n	8002de4 <HAL_ADC_Init+0x284>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	691b      	ldr	r3, [r3, #16]
 8002db8:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8002dbc:	f023 0304 	bic.w	r3, r3, #4
 8002dc0:	687a      	ldr	r2, [r7, #4]
 8002dc2:	6c51      	ldr	r1, [r2, #68]	@ 0x44
 8002dc4:	687a      	ldr	r2, [r7, #4]
 8002dc6:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8002dc8:	4311      	orrs	r1, r2
 8002dca:	687a      	ldr	r2, [r7, #4]
 8002dcc:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8002dce:	4311      	orrs	r1, r2
 8002dd0:	687a      	ldr	r2, [r7, #4]
 8002dd2:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8002dd4:	430a      	orrs	r2, r1
 8002dd6:	431a      	orrs	r2, r3
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	f042 0201 	orr.w	r2, r2, #1
 8002de0:	611a      	str	r2, [r3, #16]
 8002de2:	e007      	b.n	8002df4 <HAL_ADC_Init+0x294>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	691a      	ldr	r2, [r3, #16]
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	f022 0201 	bic.w	r2, r2, #1
 8002df2:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	695b      	ldr	r3, [r3, #20]
 8002df8:	2b01      	cmp	r3, #1
 8002dfa:	d10c      	bne.n	8002e16 <HAL_ADC_Init+0x2b6>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e02:	f023 010f 	bic.w	r1, r3, #15
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	6a1b      	ldr	r3, [r3, #32]
 8002e0a:	1e5a      	subs	r2, r3, #1
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	430a      	orrs	r2, r1
 8002e12:	631a      	str	r2, [r3, #48]	@ 0x30
 8002e14:	e007      	b.n	8002e26 <HAL_ADC_Init+0x2c6>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	f022 020f 	bic.w	r2, r2, #15
 8002e24:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002e2a:	f023 0303 	bic.w	r3, r3, #3
 8002e2e:	f043 0201 	orr.w	r2, r3, #1
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002e36:	e007      	b.n	8002e48 <HAL_ADC_Init+0x2e8>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002e3c:	f043 0210 	orr.w	r2, r3, #16
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8002e44:	2301      	movs	r3, #1
 8002e46:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002e48:	7ffb      	ldrb	r3, [r7, #31]
}
 8002e4a:	4618      	mov	r0, r3
 8002e4c:	3724      	adds	r7, #36	@ 0x24
 8002e4e:	46bd      	mov	sp, r7
 8002e50:	bd90      	pop	{r4, r7, pc}
 8002e52:	bf00      	nop
 8002e54:	20000000 	.word	0x20000000
 8002e58:	053e2d63 	.word	0x053e2d63
 8002e5c:	50000100 	.word	0x50000100
 8002e60:	50000300 	.word	0x50000300
 8002e64:	fff04007 	.word	0xfff04007

08002e68 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8002e68:	b580      	push	{r7, lr}
 8002e6a:	b0b6      	sub	sp, #216	@ 0xd8
 8002e6c:	af00      	add	r7, sp, #0
 8002e6e:	6078      	str	r0, [r7, #4]
 8002e70:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002e72:	2300      	movs	r3, #0
 8002e74:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8002e78:	2300      	movs	r3, #0
 8002e7a:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8002e82:	2b01      	cmp	r3, #1
 8002e84:	d101      	bne.n	8002e8a <HAL_ADC_ConfigChannel+0x22>
 8002e86:	2302      	movs	r3, #2
 8002e88:	e3c8      	b.n	800361c <HAL_ADC_ConfigChannel+0x7b4>
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	2201      	movs	r2, #1
 8002e8e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	4618      	mov	r0, r3
 8002e98:	f7ff fe3b 	bl	8002b12 <LL_ADC_REG_IsConversionOngoing>
 8002e9c:	4603      	mov	r3, r0
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	f040 83ad 	bne.w	80035fe <HAL_ADC_ConfigChannel+0x796>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	6818      	ldr	r0, [r3, #0]
 8002ea8:	683b      	ldr	r3, [r7, #0]
 8002eaa:	6859      	ldr	r1, [r3, #4]
 8002eac:	683b      	ldr	r3, [r7, #0]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	461a      	mov	r2, r3
 8002eb2:	f7ff fd51 	bl	8002958 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	4618      	mov	r0, r3
 8002ebc:	f7ff fe29 	bl	8002b12 <LL_ADC_REG_IsConversionOngoing>
 8002ec0:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	4618      	mov	r0, r3
 8002eca:	f7ff fe35 	bl	8002b38 <LL_ADC_INJ_IsConversionOngoing>
 8002ece:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002ed2:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	f040 81d9 	bne.w	800328e <HAL_ADC_ConfigChannel+0x426>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002edc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	f040 81d4 	bne.w	800328e <HAL_ADC_ConfigChannel+0x426>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8002ee6:	683b      	ldr	r3, [r7, #0]
 8002ee8:	689b      	ldr	r3, [r3, #8]
 8002eea:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8002eee:	d10f      	bne.n	8002f10 <HAL_ADC_ConfigChannel+0xa8>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	6818      	ldr	r0, [r3, #0]
 8002ef4:	683b      	ldr	r3, [r7, #0]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	2200      	movs	r2, #0
 8002efa:	4619      	mov	r1, r3
 8002efc:	f7ff fd58 	bl	80029b0 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 8002f08:	4618      	mov	r0, r3
 8002f0a:	f7ff fd12 	bl	8002932 <LL_ADC_SetSamplingTimeCommonConfig>
 8002f0e:	e00e      	b.n	8002f2e <HAL_ADC_ConfigChannel+0xc6>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	6818      	ldr	r0, [r3, #0]
 8002f14:	683b      	ldr	r3, [r7, #0]
 8002f16:	6819      	ldr	r1, [r3, #0]
 8002f18:	683b      	ldr	r3, [r7, #0]
 8002f1a:	689b      	ldr	r3, [r3, #8]
 8002f1c:	461a      	mov	r2, r3
 8002f1e:	f7ff fd47 	bl	80029b0 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	2100      	movs	r1, #0
 8002f28:	4618      	mov	r0, r3
 8002f2a:	f7ff fd02 	bl	8002932 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8002f2e:	683b      	ldr	r3, [r7, #0]
 8002f30:	695a      	ldr	r2, [r3, #20]
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	68db      	ldr	r3, [r3, #12]
 8002f38:	08db      	lsrs	r3, r3, #3
 8002f3a:	f003 0303 	and.w	r3, r3, #3
 8002f3e:	005b      	lsls	r3, r3, #1
 8002f40:	fa02 f303 	lsl.w	r3, r2, r3
 8002f44:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002f48:	683b      	ldr	r3, [r7, #0]
 8002f4a:	691b      	ldr	r3, [r3, #16]
 8002f4c:	2b04      	cmp	r3, #4
 8002f4e:	d022      	beq.n	8002f96 <HAL_ADC_ConfigChannel+0x12e>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	6818      	ldr	r0, [r3, #0]
 8002f54:	683b      	ldr	r3, [r7, #0]
 8002f56:	6919      	ldr	r1, [r3, #16]
 8002f58:	683b      	ldr	r3, [r7, #0]
 8002f5a:	681a      	ldr	r2, [r3, #0]
 8002f5c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8002f60:	f7ff fc5c 	bl	800281c <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	6818      	ldr	r0, [r3, #0]
 8002f68:	683b      	ldr	r3, [r7, #0]
 8002f6a:	6919      	ldr	r1, [r3, #16]
 8002f6c:	683b      	ldr	r3, [r7, #0]
 8002f6e:	699b      	ldr	r3, [r3, #24]
 8002f70:	461a      	mov	r2, r3
 8002f72:	f7ff fca8 	bl	80028c6 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	6818      	ldr	r0, [r3, #0]
 8002f7a:	683b      	ldr	r3, [r7, #0]
 8002f7c:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 8002f7e:	683b      	ldr	r3, [r7, #0]
 8002f80:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8002f82:	2b01      	cmp	r3, #1
 8002f84:	d102      	bne.n	8002f8c <HAL_ADC_ConfigChannel+0x124>
 8002f86:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002f8a:	e000      	b.n	8002f8e <HAL_ADC_ConfigChannel+0x126>
 8002f8c:	2300      	movs	r3, #0
 8002f8e:	461a      	mov	r2, r3
 8002f90:	f7ff fcb4 	bl	80028fc <LL_ADC_SetOffsetSaturation>
 8002f94:	e17b      	b.n	800328e <HAL_ADC_ConfigChannel+0x426>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	2100      	movs	r1, #0
 8002f9c:	4618      	mov	r0, r3
 8002f9e:	f7ff fc61 	bl	8002864 <LL_ADC_GetOffsetChannel>
 8002fa2:	4603      	mov	r3, r0
 8002fa4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d10a      	bne.n	8002fc2 <HAL_ADC_ConfigChannel+0x15a>
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	2100      	movs	r1, #0
 8002fb2:	4618      	mov	r0, r3
 8002fb4:	f7ff fc56 	bl	8002864 <LL_ADC_GetOffsetChannel>
 8002fb8:	4603      	mov	r3, r0
 8002fba:	0e9b      	lsrs	r3, r3, #26
 8002fbc:	f003 021f 	and.w	r2, r3, #31
 8002fc0:	e01e      	b.n	8003000 <HAL_ADC_ConfigChannel+0x198>
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	2100      	movs	r1, #0
 8002fc8:	4618      	mov	r0, r3
 8002fca:	f7ff fc4b 	bl	8002864 <LL_ADC_GetOffsetChannel>
 8002fce:	4603      	mov	r3, r0
 8002fd0:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fd4:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8002fd8:	fa93 f3a3 	rbit	r3, r3
 8002fdc:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002fe0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002fe4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002fe8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d101      	bne.n	8002ff4 <HAL_ADC_ConfigChannel+0x18c>
  {
    return 32U;
 8002ff0:	2320      	movs	r3, #32
 8002ff2:	e004      	b.n	8002ffe <HAL_ADC_ConfigChannel+0x196>
  }
  return __builtin_clz(value);
 8002ff4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8002ff8:	fab3 f383 	clz	r3, r3
 8002ffc:	b2db      	uxtb	r3, r3
 8002ffe:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003000:	683b      	ldr	r3, [r7, #0]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003008:	2b00      	cmp	r3, #0
 800300a:	d105      	bne.n	8003018 <HAL_ADC_ConfigChannel+0x1b0>
 800300c:	683b      	ldr	r3, [r7, #0]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	0e9b      	lsrs	r3, r3, #26
 8003012:	f003 031f 	and.w	r3, r3, #31
 8003016:	e018      	b.n	800304a <HAL_ADC_ConfigChannel+0x1e2>
 8003018:	683b      	ldr	r3, [r7, #0]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003020:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8003024:	fa93 f3a3 	rbit	r3, r3
 8003028:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 800302c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003030:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 8003034:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8003038:	2b00      	cmp	r3, #0
 800303a:	d101      	bne.n	8003040 <HAL_ADC_ConfigChannel+0x1d8>
    return 32U;
 800303c:	2320      	movs	r3, #32
 800303e:	e004      	b.n	800304a <HAL_ADC_ConfigChannel+0x1e2>
  return __builtin_clz(value);
 8003040:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8003044:	fab3 f383 	clz	r3, r3
 8003048:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800304a:	429a      	cmp	r2, r3
 800304c:	d106      	bne.n	800305c <HAL_ADC_ConfigChannel+0x1f4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	2200      	movs	r2, #0
 8003054:	2100      	movs	r1, #0
 8003056:	4618      	mov	r0, r3
 8003058:	f7ff fc1a 	bl	8002890 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	2101      	movs	r1, #1
 8003062:	4618      	mov	r0, r3
 8003064:	f7ff fbfe 	bl	8002864 <LL_ADC_GetOffsetChannel>
 8003068:	4603      	mov	r3, r0
 800306a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800306e:	2b00      	cmp	r3, #0
 8003070:	d10a      	bne.n	8003088 <HAL_ADC_ConfigChannel+0x220>
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	2101      	movs	r1, #1
 8003078:	4618      	mov	r0, r3
 800307a:	f7ff fbf3 	bl	8002864 <LL_ADC_GetOffsetChannel>
 800307e:	4603      	mov	r3, r0
 8003080:	0e9b      	lsrs	r3, r3, #26
 8003082:	f003 021f 	and.w	r2, r3, #31
 8003086:	e01e      	b.n	80030c6 <HAL_ADC_ConfigChannel+0x25e>
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	2101      	movs	r1, #1
 800308e:	4618      	mov	r0, r3
 8003090:	f7ff fbe8 	bl	8002864 <LL_ADC_GetOffsetChannel>
 8003094:	4603      	mov	r3, r0
 8003096:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800309a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800309e:	fa93 f3a3 	rbit	r3, r3
 80030a2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 80030a6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80030aa:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 80030ae:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d101      	bne.n	80030ba <HAL_ADC_ConfigChannel+0x252>
    return 32U;
 80030b6:	2320      	movs	r3, #32
 80030b8:	e004      	b.n	80030c4 <HAL_ADC_ConfigChannel+0x25c>
  return __builtin_clz(value);
 80030ba:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80030be:	fab3 f383 	clz	r3, r3
 80030c2:	b2db      	uxtb	r3, r3
 80030c4:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80030c6:	683b      	ldr	r3, [r7, #0]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d105      	bne.n	80030de <HAL_ADC_ConfigChannel+0x276>
 80030d2:	683b      	ldr	r3, [r7, #0]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	0e9b      	lsrs	r3, r3, #26
 80030d8:	f003 031f 	and.w	r3, r3, #31
 80030dc:	e018      	b.n	8003110 <HAL_ADC_ConfigChannel+0x2a8>
 80030de:	683b      	ldr	r3, [r7, #0]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030e6:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80030ea:	fa93 f3a3 	rbit	r3, r3
 80030ee:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 80030f2:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80030f6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 80030fa:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d101      	bne.n	8003106 <HAL_ADC_ConfigChannel+0x29e>
    return 32U;
 8003102:	2320      	movs	r3, #32
 8003104:	e004      	b.n	8003110 <HAL_ADC_ConfigChannel+0x2a8>
  return __builtin_clz(value);
 8003106:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800310a:	fab3 f383 	clz	r3, r3
 800310e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8003110:	429a      	cmp	r2, r3
 8003112:	d106      	bne.n	8003122 <HAL_ADC_ConfigChannel+0x2ba>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	2200      	movs	r2, #0
 800311a:	2101      	movs	r1, #1
 800311c:	4618      	mov	r0, r3
 800311e:	f7ff fbb7 	bl	8002890 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	2102      	movs	r1, #2
 8003128:	4618      	mov	r0, r3
 800312a:	f7ff fb9b 	bl	8002864 <LL_ADC_GetOffsetChannel>
 800312e:	4603      	mov	r3, r0
 8003130:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003134:	2b00      	cmp	r3, #0
 8003136:	d10a      	bne.n	800314e <HAL_ADC_ConfigChannel+0x2e6>
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	2102      	movs	r1, #2
 800313e:	4618      	mov	r0, r3
 8003140:	f7ff fb90 	bl	8002864 <LL_ADC_GetOffsetChannel>
 8003144:	4603      	mov	r3, r0
 8003146:	0e9b      	lsrs	r3, r3, #26
 8003148:	f003 021f 	and.w	r2, r3, #31
 800314c:	e01e      	b.n	800318c <HAL_ADC_ConfigChannel+0x324>
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	2102      	movs	r1, #2
 8003154:	4618      	mov	r0, r3
 8003156:	f7ff fb85 	bl	8002864 <LL_ADC_GetOffsetChannel>
 800315a:	4603      	mov	r3, r0
 800315c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003160:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003164:	fa93 f3a3 	rbit	r3, r3
 8003168:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 800316c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003170:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 8003174:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8003178:	2b00      	cmp	r3, #0
 800317a:	d101      	bne.n	8003180 <HAL_ADC_ConfigChannel+0x318>
    return 32U;
 800317c:	2320      	movs	r3, #32
 800317e:	e004      	b.n	800318a <HAL_ADC_ConfigChannel+0x322>
  return __builtin_clz(value);
 8003180:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8003184:	fab3 f383 	clz	r3, r3
 8003188:	b2db      	uxtb	r3, r3
 800318a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800318c:	683b      	ldr	r3, [r7, #0]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003194:	2b00      	cmp	r3, #0
 8003196:	d105      	bne.n	80031a4 <HAL_ADC_ConfigChannel+0x33c>
 8003198:	683b      	ldr	r3, [r7, #0]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	0e9b      	lsrs	r3, r3, #26
 800319e:	f003 031f 	and.w	r3, r3, #31
 80031a2:	e016      	b.n	80031d2 <HAL_ADC_ConfigChannel+0x36a>
 80031a4:	683b      	ldr	r3, [r7, #0]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031ac:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80031b0:	fa93 f3a3 	rbit	r3, r3
 80031b4:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 80031b6:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80031b8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 80031bc:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d101      	bne.n	80031c8 <HAL_ADC_ConfigChannel+0x360>
    return 32U;
 80031c4:	2320      	movs	r3, #32
 80031c6:	e004      	b.n	80031d2 <HAL_ADC_ConfigChannel+0x36a>
  return __builtin_clz(value);
 80031c8:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80031cc:	fab3 f383 	clz	r3, r3
 80031d0:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80031d2:	429a      	cmp	r2, r3
 80031d4:	d106      	bne.n	80031e4 <HAL_ADC_ConfigChannel+0x37c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	2200      	movs	r2, #0
 80031dc:	2102      	movs	r1, #2
 80031de:	4618      	mov	r0, r3
 80031e0:	f7ff fb56 	bl	8002890 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	2103      	movs	r1, #3
 80031ea:	4618      	mov	r0, r3
 80031ec:	f7ff fb3a 	bl	8002864 <LL_ADC_GetOffsetChannel>
 80031f0:	4603      	mov	r3, r0
 80031f2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d10a      	bne.n	8003210 <HAL_ADC_ConfigChannel+0x3a8>
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	2103      	movs	r1, #3
 8003200:	4618      	mov	r0, r3
 8003202:	f7ff fb2f 	bl	8002864 <LL_ADC_GetOffsetChannel>
 8003206:	4603      	mov	r3, r0
 8003208:	0e9b      	lsrs	r3, r3, #26
 800320a:	f003 021f 	and.w	r2, r3, #31
 800320e:	e017      	b.n	8003240 <HAL_ADC_ConfigChannel+0x3d8>
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	2103      	movs	r1, #3
 8003216:	4618      	mov	r0, r3
 8003218:	f7ff fb24 	bl	8002864 <LL_ADC_GetOffsetChannel>
 800321c:	4603      	mov	r3, r0
 800321e:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003220:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003222:	fa93 f3a3 	rbit	r3, r3
 8003226:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 8003228:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800322a:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 800322c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800322e:	2b00      	cmp	r3, #0
 8003230:	d101      	bne.n	8003236 <HAL_ADC_ConfigChannel+0x3ce>
    return 32U;
 8003232:	2320      	movs	r3, #32
 8003234:	e003      	b.n	800323e <HAL_ADC_ConfigChannel+0x3d6>
  return __builtin_clz(value);
 8003236:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003238:	fab3 f383 	clz	r3, r3
 800323c:	b2db      	uxtb	r3, r3
 800323e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003240:	683b      	ldr	r3, [r7, #0]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003248:	2b00      	cmp	r3, #0
 800324a:	d105      	bne.n	8003258 <HAL_ADC_ConfigChannel+0x3f0>
 800324c:	683b      	ldr	r3, [r7, #0]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	0e9b      	lsrs	r3, r3, #26
 8003252:	f003 031f 	and.w	r3, r3, #31
 8003256:	e011      	b.n	800327c <HAL_ADC_ConfigChannel+0x414>
 8003258:	683b      	ldr	r3, [r7, #0]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800325e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003260:	fa93 f3a3 	rbit	r3, r3
 8003264:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 8003266:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003268:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 800326a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800326c:	2b00      	cmp	r3, #0
 800326e:	d101      	bne.n	8003274 <HAL_ADC_ConfigChannel+0x40c>
    return 32U;
 8003270:	2320      	movs	r3, #32
 8003272:	e003      	b.n	800327c <HAL_ADC_ConfigChannel+0x414>
  return __builtin_clz(value);
 8003274:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003276:	fab3 f383 	clz	r3, r3
 800327a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800327c:	429a      	cmp	r2, r3
 800327e:	d106      	bne.n	800328e <HAL_ADC_ConfigChannel+0x426>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	2200      	movs	r2, #0
 8003286:	2103      	movs	r1, #3
 8003288:	4618      	mov	r0, r3
 800328a:	f7ff fb01 	bl	8002890 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	4618      	mov	r0, r3
 8003294:	f7ff fc2a 	bl	8002aec <LL_ADC_IsEnabled>
 8003298:	4603      	mov	r3, r0
 800329a:	2b00      	cmp	r3, #0
 800329c:	f040 8140 	bne.w	8003520 <HAL_ADC_ConfigChannel+0x6b8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	6818      	ldr	r0, [r3, #0]
 80032a4:	683b      	ldr	r3, [r7, #0]
 80032a6:	6819      	ldr	r1, [r3, #0]
 80032a8:	683b      	ldr	r3, [r7, #0]
 80032aa:	68db      	ldr	r3, [r3, #12]
 80032ac:	461a      	mov	r2, r3
 80032ae:	f7ff fbab 	bl	8002a08 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80032b2:	683b      	ldr	r3, [r7, #0]
 80032b4:	68db      	ldr	r3, [r3, #12]
 80032b6:	4a8f      	ldr	r2, [pc, #572]	@ (80034f4 <HAL_ADC_ConfigChannel+0x68c>)
 80032b8:	4293      	cmp	r3, r2
 80032ba:	f040 8131 	bne.w	8003520 <HAL_ADC_ConfigChannel+0x6b8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80032c2:	683b      	ldr	r3, [r7, #0]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d10b      	bne.n	80032e6 <HAL_ADC_ConfigChannel+0x47e>
 80032ce:	683b      	ldr	r3, [r7, #0]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	0e9b      	lsrs	r3, r3, #26
 80032d4:	3301      	adds	r3, #1
 80032d6:	f003 031f 	and.w	r3, r3, #31
 80032da:	2b09      	cmp	r3, #9
 80032dc:	bf94      	ite	ls
 80032de:	2301      	movls	r3, #1
 80032e0:	2300      	movhi	r3, #0
 80032e2:	b2db      	uxtb	r3, r3
 80032e4:	e019      	b.n	800331a <HAL_ADC_ConfigChannel+0x4b2>
 80032e6:	683b      	ldr	r3, [r7, #0]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032ec:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80032ee:	fa93 f3a3 	rbit	r3, r3
 80032f2:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 80032f4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80032f6:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 80032f8:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d101      	bne.n	8003302 <HAL_ADC_ConfigChannel+0x49a>
    return 32U;
 80032fe:	2320      	movs	r3, #32
 8003300:	e003      	b.n	800330a <HAL_ADC_ConfigChannel+0x4a2>
  return __builtin_clz(value);
 8003302:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003304:	fab3 f383 	clz	r3, r3
 8003308:	b2db      	uxtb	r3, r3
 800330a:	3301      	adds	r3, #1
 800330c:	f003 031f 	and.w	r3, r3, #31
 8003310:	2b09      	cmp	r3, #9
 8003312:	bf94      	ite	ls
 8003314:	2301      	movls	r3, #1
 8003316:	2300      	movhi	r3, #0
 8003318:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800331a:	2b00      	cmp	r3, #0
 800331c:	d079      	beq.n	8003412 <HAL_ADC_ConfigChannel+0x5aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800331e:	683b      	ldr	r3, [r7, #0]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003326:	2b00      	cmp	r3, #0
 8003328:	d107      	bne.n	800333a <HAL_ADC_ConfigChannel+0x4d2>
 800332a:	683b      	ldr	r3, [r7, #0]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	0e9b      	lsrs	r3, r3, #26
 8003330:	3301      	adds	r3, #1
 8003332:	069b      	lsls	r3, r3, #26
 8003334:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003338:	e015      	b.n	8003366 <HAL_ADC_ConfigChannel+0x4fe>
 800333a:	683b      	ldr	r3, [r7, #0]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003340:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003342:	fa93 f3a3 	rbit	r3, r3
 8003346:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8003348:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800334a:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 800334c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800334e:	2b00      	cmp	r3, #0
 8003350:	d101      	bne.n	8003356 <HAL_ADC_ConfigChannel+0x4ee>
    return 32U;
 8003352:	2320      	movs	r3, #32
 8003354:	e003      	b.n	800335e <HAL_ADC_ConfigChannel+0x4f6>
  return __builtin_clz(value);
 8003356:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003358:	fab3 f383 	clz	r3, r3
 800335c:	b2db      	uxtb	r3, r3
 800335e:	3301      	adds	r3, #1
 8003360:	069b      	lsls	r3, r3, #26
 8003362:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003366:	683b      	ldr	r3, [r7, #0]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800336e:	2b00      	cmp	r3, #0
 8003370:	d109      	bne.n	8003386 <HAL_ADC_ConfigChannel+0x51e>
 8003372:	683b      	ldr	r3, [r7, #0]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	0e9b      	lsrs	r3, r3, #26
 8003378:	3301      	adds	r3, #1
 800337a:	f003 031f 	and.w	r3, r3, #31
 800337e:	2101      	movs	r1, #1
 8003380:	fa01 f303 	lsl.w	r3, r1, r3
 8003384:	e017      	b.n	80033b6 <HAL_ADC_ConfigChannel+0x54e>
 8003386:	683b      	ldr	r3, [r7, #0]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800338c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800338e:	fa93 f3a3 	rbit	r3, r3
 8003392:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 8003394:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003396:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 8003398:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800339a:	2b00      	cmp	r3, #0
 800339c:	d101      	bne.n	80033a2 <HAL_ADC_ConfigChannel+0x53a>
    return 32U;
 800339e:	2320      	movs	r3, #32
 80033a0:	e003      	b.n	80033aa <HAL_ADC_ConfigChannel+0x542>
  return __builtin_clz(value);
 80033a2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80033a4:	fab3 f383 	clz	r3, r3
 80033a8:	b2db      	uxtb	r3, r3
 80033aa:	3301      	adds	r3, #1
 80033ac:	f003 031f 	and.w	r3, r3, #31
 80033b0:	2101      	movs	r1, #1
 80033b2:	fa01 f303 	lsl.w	r3, r1, r3
 80033b6:	ea42 0103 	orr.w	r1, r2, r3
 80033ba:	683b      	ldr	r3, [r7, #0]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d10a      	bne.n	80033dc <HAL_ADC_ConfigChannel+0x574>
 80033c6:	683b      	ldr	r3, [r7, #0]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	0e9b      	lsrs	r3, r3, #26
 80033cc:	3301      	adds	r3, #1
 80033ce:	f003 021f 	and.w	r2, r3, #31
 80033d2:	4613      	mov	r3, r2
 80033d4:	005b      	lsls	r3, r3, #1
 80033d6:	4413      	add	r3, r2
 80033d8:	051b      	lsls	r3, r3, #20
 80033da:	e018      	b.n	800340e <HAL_ADC_ConfigChannel+0x5a6>
 80033dc:	683b      	ldr	r3, [r7, #0]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80033e4:	fa93 f3a3 	rbit	r3, r3
 80033e8:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 80033ea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80033ec:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 80033ee:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d101      	bne.n	80033f8 <HAL_ADC_ConfigChannel+0x590>
    return 32U;
 80033f4:	2320      	movs	r3, #32
 80033f6:	e003      	b.n	8003400 <HAL_ADC_ConfigChannel+0x598>
  return __builtin_clz(value);
 80033f8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80033fa:	fab3 f383 	clz	r3, r3
 80033fe:	b2db      	uxtb	r3, r3
 8003400:	3301      	adds	r3, #1
 8003402:	f003 021f 	and.w	r2, r3, #31
 8003406:	4613      	mov	r3, r2
 8003408:	005b      	lsls	r3, r3, #1
 800340a:	4413      	add	r3, r2
 800340c:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800340e:	430b      	orrs	r3, r1
 8003410:	e081      	b.n	8003516 <HAL_ADC_ConfigChannel+0x6ae>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8003412:	683b      	ldr	r3, [r7, #0]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800341a:	2b00      	cmp	r3, #0
 800341c:	d107      	bne.n	800342e <HAL_ADC_ConfigChannel+0x5c6>
 800341e:	683b      	ldr	r3, [r7, #0]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	0e9b      	lsrs	r3, r3, #26
 8003424:	3301      	adds	r3, #1
 8003426:	069b      	lsls	r3, r3, #26
 8003428:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800342c:	e015      	b.n	800345a <HAL_ADC_ConfigChannel+0x5f2>
 800342e:	683b      	ldr	r3, [r7, #0]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003434:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003436:	fa93 f3a3 	rbit	r3, r3
 800343a:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 800343c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800343e:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 8003440:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003442:	2b00      	cmp	r3, #0
 8003444:	d101      	bne.n	800344a <HAL_ADC_ConfigChannel+0x5e2>
    return 32U;
 8003446:	2320      	movs	r3, #32
 8003448:	e003      	b.n	8003452 <HAL_ADC_ConfigChannel+0x5ea>
  return __builtin_clz(value);
 800344a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800344c:	fab3 f383 	clz	r3, r3
 8003450:	b2db      	uxtb	r3, r3
 8003452:	3301      	adds	r3, #1
 8003454:	069b      	lsls	r3, r3, #26
 8003456:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800345a:	683b      	ldr	r3, [r7, #0]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003462:	2b00      	cmp	r3, #0
 8003464:	d109      	bne.n	800347a <HAL_ADC_ConfigChannel+0x612>
 8003466:	683b      	ldr	r3, [r7, #0]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	0e9b      	lsrs	r3, r3, #26
 800346c:	3301      	adds	r3, #1
 800346e:	f003 031f 	and.w	r3, r3, #31
 8003472:	2101      	movs	r1, #1
 8003474:	fa01 f303 	lsl.w	r3, r1, r3
 8003478:	e017      	b.n	80034aa <HAL_ADC_ConfigChannel+0x642>
 800347a:	683b      	ldr	r3, [r7, #0]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003480:	6a3b      	ldr	r3, [r7, #32]
 8003482:	fa93 f3a3 	rbit	r3, r3
 8003486:	61fb      	str	r3, [r7, #28]
  return result;
 8003488:	69fb      	ldr	r3, [r7, #28]
 800348a:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 800348c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800348e:	2b00      	cmp	r3, #0
 8003490:	d101      	bne.n	8003496 <HAL_ADC_ConfigChannel+0x62e>
    return 32U;
 8003492:	2320      	movs	r3, #32
 8003494:	e003      	b.n	800349e <HAL_ADC_ConfigChannel+0x636>
  return __builtin_clz(value);
 8003496:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003498:	fab3 f383 	clz	r3, r3
 800349c:	b2db      	uxtb	r3, r3
 800349e:	3301      	adds	r3, #1
 80034a0:	f003 031f 	and.w	r3, r3, #31
 80034a4:	2101      	movs	r1, #1
 80034a6:	fa01 f303 	lsl.w	r3, r1, r3
 80034aa:	ea42 0103 	orr.w	r1, r2, r3
 80034ae:	683b      	ldr	r3, [r7, #0]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d10d      	bne.n	80034d6 <HAL_ADC_ConfigChannel+0x66e>
 80034ba:	683b      	ldr	r3, [r7, #0]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	0e9b      	lsrs	r3, r3, #26
 80034c0:	3301      	adds	r3, #1
 80034c2:	f003 021f 	and.w	r2, r3, #31
 80034c6:	4613      	mov	r3, r2
 80034c8:	005b      	lsls	r3, r3, #1
 80034ca:	4413      	add	r3, r2
 80034cc:	3b1e      	subs	r3, #30
 80034ce:	051b      	lsls	r3, r3, #20
 80034d0:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80034d4:	e01e      	b.n	8003514 <HAL_ADC_ConfigChannel+0x6ac>
 80034d6:	683b      	ldr	r3, [r7, #0]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034dc:	697b      	ldr	r3, [r7, #20]
 80034de:	fa93 f3a3 	rbit	r3, r3
 80034e2:	613b      	str	r3, [r7, #16]
  return result;
 80034e4:	693b      	ldr	r3, [r7, #16]
 80034e6:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80034e8:	69bb      	ldr	r3, [r7, #24]
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d104      	bne.n	80034f8 <HAL_ADC_ConfigChannel+0x690>
    return 32U;
 80034ee:	2320      	movs	r3, #32
 80034f0:	e006      	b.n	8003500 <HAL_ADC_ConfigChannel+0x698>
 80034f2:	bf00      	nop
 80034f4:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 80034f8:	69bb      	ldr	r3, [r7, #24]
 80034fa:	fab3 f383 	clz	r3, r3
 80034fe:	b2db      	uxtb	r3, r3
 8003500:	3301      	adds	r3, #1
 8003502:	f003 021f 	and.w	r2, r3, #31
 8003506:	4613      	mov	r3, r2
 8003508:	005b      	lsls	r3, r3, #1
 800350a:	4413      	add	r3, r2
 800350c:	3b1e      	subs	r3, #30
 800350e:	051b      	lsls	r3, r3, #20
 8003510:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003514:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8003516:	683a      	ldr	r2, [r7, #0]
 8003518:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800351a:	4619      	mov	r1, r3
 800351c:	f7ff fa48 	bl	80029b0 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8003520:	683b      	ldr	r3, [r7, #0]
 8003522:	681a      	ldr	r2, [r3, #0]
 8003524:	4b3f      	ldr	r3, [pc, #252]	@ (8003624 <HAL_ADC_ConfigChannel+0x7bc>)
 8003526:	4013      	ands	r3, r2
 8003528:	2b00      	cmp	r3, #0
 800352a:	d071      	beq.n	8003610 <HAL_ADC_ConfigChannel+0x7a8>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800352c:	483e      	ldr	r0, [pc, #248]	@ (8003628 <HAL_ADC_ConfigChannel+0x7c0>)
 800352e:	f7ff f967 	bl	8002800 <LL_ADC_GetCommonPathInternalCh>
 8003532:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8003536:	683b      	ldr	r3, [r7, #0]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	4a3c      	ldr	r2, [pc, #240]	@ (800362c <HAL_ADC_ConfigChannel+0x7c4>)
 800353c:	4293      	cmp	r3, r2
 800353e:	d004      	beq.n	800354a <HAL_ADC_ConfigChannel+0x6e2>
 8003540:	683b      	ldr	r3, [r7, #0]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	4a3a      	ldr	r2, [pc, #232]	@ (8003630 <HAL_ADC_ConfigChannel+0x7c8>)
 8003546:	4293      	cmp	r3, r2
 8003548:	d127      	bne.n	800359a <HAL_ADC_ConfigChannel+0x732>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800354a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800354e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003552:	2b00      	cmp	r3, #0
 8003554:	d121      	bne.n	800359a <HAL_ADC_ConfigChannel+0x732>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800355e:	d157      	bne.n	8003610 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003560:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003564:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8003568:	4619      	mov	r1, r3
 800356a:	482f      	ldr	r0, [pc, #188]	@ (8003628 <HAL_ADC_ConfigChannel+0x7c0>)
 800356c:	f7ff f935 	bl	80027da <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003570:	4b30      	ldr	r3, [pc, #192]	@ (8003634 <HAL_ADC_ConfigChannel+0x7cc>)
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	099b      	lsrs	r3, r3, #6
 8003576:	4a30      	ldr	r2, [pc, #192]	@ (8003638 <HAL_ADC_ConfigChannel+0x7d0>)
 8003578:	fba2 2303 	umull	r2, r3, r2, r3
 800357c:	099b      	lsrs	r3, r3, #6
 800357e:	1c5a      	adds	r2, r3, #1
 8003580:	4613      	mov	r3, r2
 8003582:	005b      	lsls	r3, r3, #1
 8003584:	4413      	add	r3, r2
 8003586:	009b      	lsls	r3, r3, #2
 8003588:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800358a:	e002      	b.n	8003592 <HAL_ADC_ConfigChannel+0x72a>
          {
            wait_loop_index--;
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	3b01      	subs	r3, #1
 8003590:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	2b00      	cmp	r3, #0
 8003596:	d1f9      	bne.n	800358c <HAL_ADC_ConfigChannel+0x724>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003598:	e03a      	b.n	8003610 <HAL_ADC_ConfigChannel+0x7a8>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 800359a:	683b      	ldr	r3, [r7, #0]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	4a27      	ldr	r2, [pc, #156]	@ (800363c <HAL_ADC_ConfigChannel+0x7d4>)
 80035a0:	4293      	cmp	r3, r2
 80035a2:	d113      	bne.n	80035cc <HAL_ADC_ConfigChannel+0x764>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80035a4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80035a8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d10d      	bne.n	80035cc <HAL_ADC_ConfigChannel+0x764>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	4a22      	ldr	r2, [pc, #136]	@ (8003640 <HAL_ADC_ConfigChannel+0x7d8>)
 80035b6:	4293      	cmp	r3, r2
 80035b8:	d02a      	beq.n	8003610 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80035ba:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80035be:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80035c2:	4619      	mov	r1, r3
 80035c4:	4818      	ldr	r0, [pc, #96]	@ (8003628 <HAL_ADC_ConfigChannel+0x7c0>)
 80035c6:	f7ff f908 	bl	80027da <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80035ca:	e021      	b.n	8003610 <HAL_ADC_ConfigChannel+0x7a8>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 80035cc:	683b      	ldr	r3, [r7, #0]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	4a1c      	ldr	r2, [pc, #112]	@ (8003644 <HAL_ADC_ConfigChannel+0x7dc>)
 80035d2:	4293      	cmp	r3, r2
 80035d4:	d11c      	bne.n	8003610 <HAL_ADC_ConfigChannel+0x7a8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80035d6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80035da:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d116      	bne.n	8003610 <HAL_ADC_ConfigChannel+0x7a8>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	4a16      	ldr	r2, [pc, #88]	@ (8003640 <HAL_ADC_ConfigChannel+0x7d8>)
 80035e8:	4293      	cmp	r3, r2
 80035ea:	d011      	beq.n	8003610 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80035ec:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80035f0:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80035f4:	4619      	mov	r1, r3
 80035f6:	480c      	ldr	r0, [pc, #48]	@ (8003628 <HAL_ADC_ConfigChannel+0x7c0>)
 80035f8:	f7ff f8ef 	bl	80027da <LL_ADC_SetCommonPathInternalCh>
 80035fc:	e008      	b.n	8003610 <HAL_ADC_ConfigChannel+0x7a8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003602:	f043 0220 	orr.w	r2, r3, #32
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 800360a:	2301      	movs	r3, #1
 800360c:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	2200      	movs	r2, #0
 8003614:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8003618:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 800361c:	4618      	mov	r0, r3
 800361e:	37d8      	adds	r7, #216	@ 0xd8
 8003620:	46bd      	mov	sp, r7
 8003622:	bd80      	pop	{r7, pc}
 8003624:	80080000 	.word	0x80080000
 8003628:	50000300 	.word	0x50000300
 800362c:	c3210000 	.word	0xc3210000
 8003630:	90c00010 	.word	0x90c00010
 8003634:	20000000 	.word	0x20000000
 8003638:	053e2d63 	.word	0x053e2d63
 800363c:	c7520000 	.word	0xc7520000
 8003640:	50000100 	.word	0x50000100
 8003644:	cb840000 	.word	0xcb840000

08003648 <LL_ADC_IsEnabled>:
{
 8003648:	b480      	push	{r7}
 800364a:	b083      	sub	sp, #12
 800364c:	af00      	add	r7, sp, #0
 800364e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	689b      	ldr	r3, [r3, #8]
 8003654:	f003 0301 	and.w	r3, r3, #1
 8003658:	2b01      	cmp	r3, #1
 800365a:	d101      	bne.n	8003660 <LL_ADC_IsEnabled+0x18>
 800365c:	2301      	movs	r3, #1
 800365e:	e000      	b.n	8003662 <LL_ADC_IsEnabled+0x1a>
 8003660:	2300      	movs	r3, #0
}
 8003662:	4618      	mov	r0, r3
 8003664:	370c      	adds	r7, #12
 8003666:	46bd      	mov	sp, r7
 8003668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800366c:	4770      	bx	lr

0800366e <LL_ADC_REG_IsConversionOngoing>:
{
 800366e:	b480      	push	{r7}
 8003670:	b083      	sub	sp, #12
 8003672:	af00      	add	r7, sp, #0
 8003674:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	689b      	ldr	r3, [r3, #8]
 800367a:	f003 0304 	and.w	r3, r3, #4
 800367e:	2b04      	cmp	r3, #4
 8003680:	d101      	bne.n	8003686 <LL_ADC_REG_IsConversionOngoing+0x18>
 8003682:	2301      	movs	r3, #1
 8003684:	e000      	b.n	8003688 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003686:	2300      	movs	r3, #0
}
 8003688:	4618      	mov	r0, r3
 800368a:	370c      	adds	r7, #12
 800368c:	46bd      	mov	sp, r7
 800368e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003692:	4770      	bx	lr

08003694 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8003694:	b590      	push	{r4, r7, lr}
 8003696:	b0a1      	sub	sp, #132	@ 0x84
 8003698:	af00      	add	r7, sp, #0
 800369a:	6078      	str	r0, [r7, #4]
 800369c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800369e:	2300      	movs	r3, #0
 80036a0:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 80036aa:	2b01      	cmp	r3, #1
 80036ac:	d101      	bne.n	80036b2 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 80036ae:	2302      	movs	r3, #2
 80036b0:	e08b      	b.n	80037ca <HAL_ADCEx_MultiModeConfigChannel+0x136>
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	2201      	movs	r2, #1
 80036b6:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 80036ba:	2300      	movs	r3, #0
 80036bc:	667b      	str	r3, [r7, #100]	@ 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 80036be:	2300      	movs	r3, #0
 80036c0:	66bb      	str	r3, [r7, #104]	@ 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80036ca:	d102      	bne.n	80036d2 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 80036cc:	4b41      	ldr	r3, [pc, #260]	@ (80037d4 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 80036ce:	60bb      	str	r3, [r7, #8]
 80036d0:	e001      	b.n	80036d6 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 80036d2:	2300      	movs	r3, #0
 80036d4:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 80036d6:	68bb      	ldr	r3, [r7, #8]
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d10b      	bne.n	80036f4 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80036e0:	f043 0220 	orr.w	r2, r3, #32
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	2200      	movs	r2, #0
 80036ec:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 80036f0:	2301      	movs	r3, #1
 80036f2:	e06a      	b.n	80037ca <HAL_ADCEx_MultiModeConfigChannel+0x136>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 80036f4:	68bb      	ldr	r3, [r7, #8]
 80036f6:	4618      	mov	r0, r3
 80036f8:	f7ff ffb9 	bl	800366e <LL_ADC_REG_IsConversionOngoing>
 80036fc:	67b8      	str	r0, [r7, #120]	@ 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	4618      	mov	r0, r3
 8003704:	f7ff ffb3 	bl	800366e <LL_ADC_REG_IsConversionOngoing>
 8003708:	4603      	mov	r3, r0
 800370a:	2b00      	cmp	r3, #0
 800370c:	d14c      	bne.n	80037a8 <HAL_ADCEx_MultiModeConfigChannel+0x114>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 800370e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003710:	2b00      	cmp	r3, #0
 8003712:	d149      	bne.n	80037a8 <HAL_ADCEx_MultiModeConfigChannel+0x114>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8003714:	4b30      	ldr	r3, [pc, #192]	@ (80037d8 <HAL_ADCEx_MultiModeConfigChannel+0x144>)
 8003716:	677b      	str	r3, [r7, #116]	@ 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003718:	683b      	ldr	r3, [r7, #0]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	2b00      	cmp	r3, #0
 800371e:	d028      	beq.n	8003772 <HAL_ADCEx_MultiModeConfigChannel+0xde>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8003720:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003722:	689b      	ldr	r3, [r3, #8]
 8003724:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003728:	683b      	ldr	r3, [r7, #0]
 800372a:	6859      	ldr	r1, [r3, #4]
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8003732:	035b      	lsls	r3, r3, #13
 8003734:	430b      	orrs	r3, r1
 8003736:	431a      	orrs	r2, r3
 8003738:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800373a:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800373c:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8003740:	f7ff ff82 	bl	8003648 <LL_ADC_IsEnabled>
 8003744:	4604      	mov	r4, r0
 8003746:	4823      	ldr	r0, [pc, #140]	@ (80037d4 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8003748:	f7ff ff7e 	bl	8003648 <LL_ADC_IsEnabled>
 800374c:	4603      	mov	r3, r0
 800374e:	4323      	orrs	r3, r4
 8003750:	2b00      	cmp	r3, #0
 8003752:	d133      	bne.n	80037bc <HAL_ADCEx_MultiModeConfigChannel+0x128>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8003754:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003756:	689b      	ldr	r3, [r3, #8]
 8003758:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 800375c:	f023 030f 	bic.w	r3, r3, #15
 8003760:	683a      	ldr	r2, [r7, #0]
 8003762:	6811      	ldr	r1, [r2, #0]
 8003764:	683a      	ldr	r2, [r7, #0]
 8003766:	6892      	ldr	r2, [r2, #8]
 8003768:	430a      	orrs	r2, r1
 800376a:	431a      	orrs	r2, r3
 800376c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800376e:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003770:	e024      	b.n	80037bc <HAL_ADCEx_MultiModeConfigChannel+0x128>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8003772:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003774:	689b      	ldr	r3, [r3, #8]
 8003776:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800377a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800377c:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800377e:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8003782:	f7ff ff61 	bl	8003648 <LL_ADC_IsEnabled>
 8003786:	4604      	mov	r4, r0
 8003788:	4812      	ldr	r0, [pc, #72]	@ (80037d4 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 800378a:	f7ff ff5d 	bl	8003648 <LL_ADC_IsEnabled>
 800378e:	4603      	mov	r3, r0
 8003790:	4323      	orrs	r3, r4
 8003792:	2b00      	cmp	r3, #0
 8003794:	d112      	bne.n	80037bc <HAL_ADCEx_MultiModeConfigChannel+0x128>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8003796:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003798:	689b      	ldr	r3, [r3, #8]
 800379a:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 800379e:	f023 030f 	bic.w	r3, r3, #15
 80037a2:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 80037a4:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80037a6:	e009      	b.n	80037bc <HAL_ADCEx_MultiModeConfigChannel+0x128>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80037ac:	f043 0220 	orr.w	r2, r3, #32
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 80037b4:	2301      	movs	r3, #1
 80037b6:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 80037ba:	e000      	b.n	80037be <HAL_ADCEx_MultiModeConfigChannel+0x12a>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80037bc:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	2200      	movs	r2, #0
 80037c2:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 80037c6:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 80037ca:	4618      	mov	r0, r3
 80037cc:	3784      	adds	r7, #132	@ 0x84
 80037ce:	46bd      	mov	sp, r7
 80037d0:	bd90      	pop	{r4, r7, pc}
 80037d2:	bf00      	nop
 80037d4:	50000100 	.word	0x50000100
 80037d8:	50000300 	.word	0x50000300

080037dc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80037dc:	b480      	push	{r7}
 80037de:	b085      	sub	sp, #20
 80037e0:	af00      	add	r7, sp, #0
 80037e2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	f003 0307 	and.w	r3, r3, #7
 80037ea:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80037ec:	4b0c      	ldr	r3, [pc, #48]	@ (8003820 <__NVIC_SetPriorityGrouping+0x44>)
 80037ee:	68db      	ldr	r3, [r3, #12]
 80037f0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80037f2:	68ba      	ldr	r2, [r7, #8]
 80037f4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80037f8:	4013      	ands	r3, r2
 80037fa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003800:	68bb      	ldr	r3, [r7, #8]
 8003802:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003804:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003808:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800380c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800380e:	4a04      	ldr	r2, [pc, #16]	@ (8003820 <__NVIC_SetPriorityGrouping+0x44>)
 8003810:	68bb      	ldr	r3, [r7, #8]
 8003812:	60d3      	str	r3, [r2, #12]
}
 8003814:	bf00      	nop
 8003816:	3714      	adds	r7, #20
 8003818:	46bd      	mov	sp, r7
 800381a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800381e:	4770      	bx	lr
 8003820:	e000ed00 	.word	0xe000ed00

08003824 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003824:	b480      	push	{r7}
 8003826:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003828:	4b04      	ldr	r3, [pc, #16]	@ (800383c <__NVIC_GetPriorityGrouping+0x18>)
 800382a:	68db      	ldr	r3, [r3, #12]
 800382c:	0a1b      	lsrs	r3, r3, #8
 800382e:	f003 0307 	and.w	r3, r3, #7
}
 8003832:	4618      	mov	r0, r3
 8003834:	46bd      	mov	sp, r7
 8003836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800383a:	4770      	bx	lr
 800383c:	e000ed00 	.word	0xe000ed00

08003840 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003840:	b480      	push	{r7}
 8003842:	b083      	sub	sp, #12
 8003844:	af00      	add	r7, sp, #0
 8003846:	4603      	mov	r3, r0
 8003848:	6039      	str	r1, [r7, #0]
 800384a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800384c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003850:	2b00      	cmp	r3, #0
 8003852:	db0a      	blt.n	800386a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003854:	683b      	ldr	r3, [r7, #0]
 8003856:	b2da      	uxtb	r2, r3
 8003858:	490c      	ldr	r1, [pc, #48]	@ (800388c <__NVIC_SetPriority+0x4c>)
 800385a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800385e:	0112      	lsls	r2, r2, #4
 8003860:	b2d2      	uxtb	r2, r2
 8003862:	440b      	add	r3, r1
 8003864:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003868:	e00a      	b.n	8003880 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800386a:	683b      	ldr	r3, [r7, #0]
 800386c:	b2da      	uxtb	r2, r3
 800386e:	4908      	ldr	r1, [pc, #32]	@ (8003890 <__NVIC_SetPriority+0x50>)
 8003870:	79fb      	ldrb	r3, [r7, #7]
 8003872:	f003 030f 	and.w	r3, r3, #15
 8003876:	3b04      	subs	r3, #4
 8003878:	0112      	lsls	r2, r2, #4
 800387a:	b2d2      	uxtb	r2, r2
 800387c:	440b      	add	r3, r1
 800387e:	761a      	strb	r2, [r3, #24]
}
 8003880:	bf00      	nop
 8003882:	370c      	adds	r7, #12
 8003884:	46bd      	mov	sp, r7
 8003886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800388a:	4770      	bx	lr
 800388c:	e000e100 	.word	0xe000e100
 8003890:	e000ed00 	.word	0xe000ed00

08003894 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003894:	b480      	push	{r7}
 8003896:	b089      	sub	sp, #36	@ 0x24
 8003898:	af00      	add	r7, sp, #0
 800389a:	60f8      	str	r0, [r7, #12]
 800389c:	60b9      	str	r1, [r7, #8]
 800389e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	f003 0307 	and.w	r3, r3, #7
 80038a6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80038a8:	69fb      	ldr	r3, [r7, #28]
 80038aa:	f1c3 0307 	rsb	r3, r3, #7
 80038ae:	2b04      	cmp	r3, #4
 80038b0:	bf28      	it	cs
 80038b2:	2304      	movcs	r3, #4
 80038b4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80038b6:	69fb      	ldr	r3, [r7, #28]
 80038b8:	3304      	adds	r3, #4
 80038ba:	2b06      	cmp	r3, #6
 80038bc:	d902      	bls.n	80038c4 <NVIC_EncodePriority+0x30>
 80038be:	69fb      	ldr	r3, [r7, #28]
 80038c0:	3b03      	subs	r3, #3
 80038c2:	e000      	b.n	80038c6 <NVIC_EncodePriority+0x32>
 80038c4:	2300      	movs	r3, #0
 80038c6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80038c8:	f04f 32ff 	mov.w	r2, #4294967295
 80038cc:	69bb      	ldr	r3, [r7, #24]
 80038ce:	fa02 f303 	lsl.w	r3, r2, r3
 80038d2:	43da      	mvns	r2, r3
 80038d4:	68bb      	ldr	r3, [r7, #8]
 80038d6:	401a      	ands	r2, r3
 80038d8:	697b      	ldr	r3, [r7, #20]
 80038da:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80038dc:	f04f 31ff 	mov.w	r1, #4294967295
 80038e0:	697b      	ldr	r3, [r7, #20]
 80038e2:	fa01 f303 	lsl.w	r3, r1, r3
 80038e6:	43d9      	mvns	r1, r3
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80038ec:	4313      	orrs	r3, r2
         );
}
 80038ee:	4618      	mov	r0, r3
 80038f0:	3724      	adds	r7, #36	@ 0x24
 80038f2:	46bd      	mov	sp, r7
 80038f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038f8:	4770      	bx	lr
	...

080038fc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80038fc:	b580      	push	{r7, lr}
 80038fe:	b082      	sub	sp, #8
 8003900:	af00      	add	r7, sp, #0
 8003902:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	3b01      	subs	r3, #1
 8003908:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800390c:	d301      	bcc.n	8003912 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800390e:	2301      	movs	r3, #1
 8003910:	e00f      	b.n	8003932 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003912:	4a0a      	ldr	r2, [pc, #40]	@ (800393c <SysTick_Config+0x40>)
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	3b01      	subs	r3, #1
 8003918:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800391a:	210f      	movs	r1, #15
 800391c:	f04f 30ff 	mov.w	r0, #4294967295
 8003920:	f7ff ff8e 	bl	8003840 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003924:	4b05      	ldr	r3, [pc, #20]	@ (800393c <SysTick_Config+0x40>)
 8003926:	2200      	movs	r2, #0
 8003928:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800392a:	4b04      	ldr	r3, [pc, #16]	@ (800393c <SysTick_Config+0x40>)
 800392c:	2207      	movs	r2, #7
 800392e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003930:	2300      	movs	r3, #0
}
 8003932:	4618      	mov	r0, r3
 8003934:	3708      	adds	r7, #8
 8003936:	46bd      	mov	sp, r7
 8003938:	bd80      	pop	{r7, pc}
 800393a:	bf00      	nop
 800393c:	e000e010 	.word	0xe000e010

08003940 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003940:	b580      	push	{r7, lr}
 8003942:	b082      	sub	sp, #8
 8003944:	af00      	add	r7, sp, #0
 8003946:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003948:	6878      	ldr	r0, [r7, #4]
 800394a:	f7ff ff47 	bl	80037dc <__NVIC_SetPriorityGrouping>
}
 800394e:	bf00      	nop
 8003950:	3708      	adds	r7, #8
 8003952:	46bd      	mov	sp, r7
 8003954:	bd80      	pop	{r7, pc}

08003956 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003956:	b580      	push	{r7, lr}
 8003958:	b086      	sub	sp, #24
 800395a:	af00      	add	r7, sp, #0
 800395c:	4603      	mov	r3, r0
 800395e:	60b9      	str	r1, [r7, #8]
 8003960:	607a      	str	r2, [r7, #4]
 8003962:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003964:	f7ff ff5e 	bl	8003824 <__NVIC_GetPriorityGrouping>
 8003968:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800396a:	687a      	ldr	r2, [r7, #4]
 800396c:	68b9      	ldr	r1, [r7, #8]
 800396e:	6978      	ldr	r0, [r7, #20]
 8003970:	f7ff ff90 	bl	8003894 <NVIC_EncodePriority>
 8003974:	4602      	mov	r2, r0
 8003976:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800397a:	4611      	mov	r1, r2
 800397c:	4618      	mov	r0, r3
 800397e:	f7ff ff5f 	bl	8003840 <__NVIC_SetPriority>
}
 8003982:	bf00      	nop
 8003984:	3718      	adds	r7, #24
 8003986:	46bd      	mov	sp, r7
 8003988:	bd80      	pop	{r7, pc}

0800398a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800398a:	b580      	push	{r7, lr}
 800398c:	b082      	sub	sp, #8
 800398e:	af00      	add	r7, sp, #0
 8003990:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003992:	6878      	ldr	r0, [r7, #4]
 8003994:	f7ff ffb2 	bl	80038fc <SysTick_Config>
 8003998:	4603      	mov	r3, r0
}
 800399a:	4618      	mov	r0, r3
 800399c:	3708      	adds	r7, #8
 800399e:	46bd      	mov	sp, r7
 80039a0:	bd80      	pop	{r7, pc}
	...

080039a4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80039a4:	b480      	push	{r7}
 80039a6:	b087      	sub	sp, #28
 80039a8:	af00      	add	r7, sp, #0
 80039aa:	6078      	str	r0, [r7, #4]
 80039ac:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80039ae:	2300      	movs	r3, #0
 80039b0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 80039b2:	e15a      	b.n	8003c6a <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80039b4:	683b      	ldr	r3, [r7, #0]
 80039b6:	681a      	ldr	r2, [r3, #0]
 80039b8:	2101      	movs	r1, #1
 80039ba:	697b      	ldr	r3, [r7, #20]
 80039bc:	fa01 f303 	lsl.w	r3, r1, r3
 80039c0:	4013      	ands	r3, r2
 80039c2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	f000 814c 	beq.w	8003c64 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80039cc:	683b      	ldr	r3, [r7, #0]
 80039ce:	685b      	ldr	r3, [r3, #4]
 80039d0:	f003 0303 	and.w	r3, r3, #3
 80039d4:	2b01      	cmp	r3, #1
 80039d6:	d005      	beq.n	80039e4 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80039d8:	683b      	ldr	r3, [r7, #0]
 80039da:	685b      	ldr	r3, [r3, #4]
 80039dc:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80039e0:	2b02      	cmp	r3, #2
 80039e2:	d130      	bne.n	8003a46 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	689b      	ldr	r3, [r3, #8]
 80039e8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80039ea:	697b      	ldr	r3, [r7, #20]
 80039ec:	005b      	lsls	r3, r3, #1
 80039ee:	2203      	movs	r2, #3
 80039f0:	fa02 f303 	lsl.w	r3, r2, r3
 80039f4:	43db      	mvns	r3, r3
 80039f6:	693a      	ldr	r2, [r7, #16]
 80039f8:	4013      	ands	r3, r2
 80039fa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80039fc:	683b      	ldr	r3, [r7, #0]
 80039fe:	68da      	ldr	r2, [r3, #12]
 8003a00:	697b      	ldr	r3, [r7, #20]
 8003a02:	005b      	lsls	r3, r3, #1
 8003a04:	fa02 f303 	lsl.w	r3, r2, r3
 8003a08:	693a      	ldr	r2, [r7, #16]
 8003a0a:	4313      	orrs	r3, r2
 8003a0c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	693a      	ldr	r2, [r7, #16]
 8003a12:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	685b      	ldr	r3, [r3, #4]
 8003a18:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003a1a:	2201      	movs	r2, #1
 8003a1c:	697b      	ldr	r3, [r7, #20]
 8003a1e:	fa02 f303 	lsl.w	r3, r2, r3
 8003a22:	43db      	mvns	r3, r3
 8003a24:	693a      	ldr	r2, [r7, #16]
 8003a26:	4013      	ands	r3, r2
 8003a28:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003a2a:	683b      	ldr	r3, [r7, #0]
 8003a2c:	685b      	ldr	r3, [r3, #4]
 8003a2e:	091b      	lsrs	r3, r3, #4
 8003a30:	f003 0201 	and.w	r2, r3, #1
 8003a34:	697b      	ldr	r3, [r7, #20]
 8003a36:	fa02 f303 	lsl.w	r3, r2, r3
 8003a3a:	693a      	ldr	r2, [r7, #16]
 8003a3c:	4313      	orrs	r3, r2
 8003a3e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	693a      	ldr	r2, [r7, #16]
 8003a44:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003a46:	683b      	ldr	r3, [r7, #0]
 8003a48:	685b      	ldr	r3, [r3, #4]
 8003a4a:	f003 0303 	and.w	r3, r3, #3
 8003a4e:	2b03      	cmp	r3, #3
 8003a50:	d017      	beq.n	8003a82 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	68db      	ldr	r3, [r3, #12]
 8003a56:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003a58:	697b      	ldr	r3, [r7, #20]
 8003a5a:	005b      	lsls	r3, r3, #1
 8003a5c:	2203      	movs	r2, #3
 8003a5e:	fa02 f303 	lsl.w	r3, r2, r3
 8003a62:	43db      	mvns	r3, r3
 8003a64:	693a      	ldr	r2, [r7, #16]
 8003a66:	4013      	ands	r3, r2
 8003a68:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003a6a:	683b      	ldr	r3, [r7, #0]
 8003a6c:	689a      	ldr	r2, [r3, #8]
 8003a6e:	697b      	ldr	r3, [r7, #20]
 8003a70:	005b      	lsls	r3, r3, #1
 8003a72:	fa02 f303 	lsl.w	r3, r2, r3
 8003a76:	693a      	ldr	r2, [r7, #16]
 8003a78:	4313      	orrs	r3, r2
 8003a7a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	693a      	ldr	r2, [r7, #16]
 8003a80:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003a82:	683b      	ldr	r3, [r7, #0]
 8003a84:	685b      	ldr	r3, [r3, #4]
 8003a86:	f003 0303 	and.w	r3, r3, #3
 8003a8a:	2b02      	cmp	r3, #2
 8003a8c:	d123      	bne.n	8003ad6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003a8e:	697b      	ldr	r3, [r7, #20]
 8003a90:	08da      	lsrs	r2, r3, #3
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	3208      	adds	r2, #8
 8003a96:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003a9a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8003a9c:	697b      	ldr	r3, [r7, #20]
 8003a9e:	f003 0307 	and.w	r3, r3, #7
 8003aa2:	009b      	lsls	r3, r3, #2
 8003aa4:	220f      	movs	r2, #15
 8003aa6:	fa02 f303 	lsl.w	r3, r2, r3
 8003aaa:	43db      	mvns	r3, r3
 8003aac:	693a      	ldr	r2, [r7, #16]
 8003aae:	4013      	ands	r3, r2
 8003ab0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8003ab2:	683b      	ldr	r3, [r7, #0]
 8003ab4:	691a      	ldr	r2, [r3, #16]
 8003ab6:	697b      	ldr	r3, [r7, #20]
 8003ab8:	f003 0307 	and.w	r3, r3, #7
 8003abc:	009b      	lsls	r3, r3, #2
 8003abe:	fa02 f303 	lsl.w	r3, r2, r3
 8003ac2:	693a      	ldr	r2, [r7, #16]
 8003ac4:	4313      	orrs	r3, r2
 8003ac6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8003ac8:	697b      	ldr	r3, [r7, #20]
 8003aca:	08da      	lsrs	r2, r3, #3
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	3208      	adds	r2, #8
 8003ad0:	6939      	ldr	r1, [r7, #16]
 8003ad2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003adc:	697b      	ldr	r3, [r7, #20]
 8003ade:	005b      	lsls	r3, r3, #1
 8003ae0:	2203      	movs	r2, #3
 8003ae2:	fa02 f303 	lsl.w	r3, r2, r3
 8003ae6:	43db      	mvns	r3, r3
 8003ae8:	693a      	ldr	r2, [r7, #16]
 8003aea:	4013      	ands	r3, r2
 8003aec:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003aee:	683b      	ldr	r3, [r7, #0]
 8003af0:	685b      	ldr	r3, [r3, #4]
 8003af2:	f003 0203 	and.w	r2, r3, #3
 8003af6:	697b      	ldr	r3, [r7, #20]
 8003af8:	005b      	lsls	r3, r3, #1
 8003afa:	fa02 f303 	lsl.w	r3, r2, r3
 8003afe:	693a      	ldr	r2, [r7, #16]
 8003b00:	4313      	orrs	r3, r2
 8003b02:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	693a      	ldr	r2, [r7, #16]
 8003b08:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003b0a:	683b      	ldr	r3, [r7, #0]
 8003b0c:	685b      	ldr	r3, [r3, #4]
 8003b0e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	f000 80a6 	beq.w	8003c64 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003b18:	4b5b      	ldr	r3, [pc, #364]	@ (8003c88 <HAL_GPIO_Init+0x2e4>)
 8003b1a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003b1c:	4a5a      	ldr	r2, [pc, #360]	@ (8003c88 <HAL_GPIO_Init+0x2e4>)
 8003b1e:	f043 0301 	orr.w	r3, r3, #1
 8003b22:	6613      	str	r3, [r2, #96]	@ 0x60
 8003b24:	4b58      	ldr	r3, [pc, #352]	@ (8003c88 <HAL_GPIO_Init+0x2e4>)
 8003b26:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003b28:	f003 0301 	and.w	r3, r3, #1
 8003b2c:	60bb      	str	r3, [r7, #8]
 8003b2e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003b30:	4a56      	ldr	r2, [pc, #344]	@ (8003c8c <HAL_GPIO_Init+0x2e8>)
 8003b32:	697b      	ldr	r3, [r7, #20]
 8003b34:	089b      	lsrs	r3, r3, #2
 8003b36:	3302      	adds	r3, #2
 8003b38:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003b3c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8003b3e:	697b      	ldr	r3, [r7, #20]
 8003b40:	f003 0303 	and.w	r3, r3, #3
 8003b44:	009b      	lsls	r3, r3, #2
 8003b46:	220f      	movs	r2, #15
 8003b48:	fa02 f303 	lsl.w	r3, r2, r3
 8003b4c:	43db      	mvns	r3, r3
 8003b4e:	693a      	ldr	r2, [r7, #16]
 8003b50:	4013      	ands	r3, r2
 8003b52:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8003b5a:	d01f      	beq.n	8003b9c <HAL_GPIO_Init+0x1f8>
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	4a4c      	ldr	r2, [pc, #304]	@ (8003c90 <HAL_GPIO_Init+0x2ec>)
 8003b60:	4293      	cmp	r3, r2
 8003b62:	d019      	beq.n	8003b98 <HAL_GPIO_Init+0x1f4>
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	4a4b      	ldr	r2, [pc, #300]	@ (8003c94 <HAL_GPIO_Init+0x2f0>)
 8003b68:	4293      	cmp	r3, r2
 8003b6a:	d013      	beq.n	8003b94 <HAL_GPIO_Init+0x1f0>
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	4a4a      	ldr	r2, [pc, #296]	@ (8003c98 <HAL_GPIO_Init+0x2f4>)
 8003b70:	4293      	cmp	r3, r2
 8003b72:	d00d      	beq.n	8003b90 <HAL_GPIO_Init+0x1ec>
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	4a49      	ldr	r2, [pc, #292]	@ (8003c9c <HAL_GPIO_Init+0x2f8>)
 8003b78:	4293      	cmp	r3, r2
 8003b7a:	d007      	beq.n	8003b8c <HAL_GPIO_Init+0x1e8>
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	4a48      	ldr	r2, [pc, #288]	@ (8003ca0 <HAL_GPIO_Init+0x2fc>)
 8003b80:	4293      	cmp	r3, r2
 8003b82:	d101      	bne.n	8003b88 <HAL_GPIO_Init+0x1e4>
 8003b84:	2305      	movs	r3, #5
 8003b86:	e00a      	b.n	8003b9e <HAL_GPIO_Init+0x1fa>
 8003b88:	2306      	movs	r3, #6
 8003b8a:	e008      	b.n	8003b9e <HAL_GPIO_Init+0x1fa>
 8003b8c:	2304      	movs	r3, #4
 8003b8e:	e006      	b.n	8003b9e <HAL_GPIO_Init+0x1fa>
 8003b90:	2303      	movs	r3, #3
 8003b92:	e004      	b.n	8003b9e <HAL_GPIO_Init+0x1fa>
 8003b94:	2302      	movs	r3, #2
 8003b96:	e002      	b.n	8003b9e <HAL_GPIO_Init+0x1fa>
 8003b98:	2301      	movs	r3, #1
 8003b9a:	e000      	b.n	8003b9e <HAL_GPIO_Init+0x1fa>
 8003b9c:	2300      	movs	r3, #0
 8003b9e:	697a      	ldr	r2, [r7, #20]
 8003ba0:	f002 0203 	and.w	r2, r2, #3
 8003ba4:	0092      	lsls	r2, r2, #2
 8003ba6:	4093      	lsls	r3, r2
 8003ba8:	693a      	ldr	r2, [r7, #16]
 8003baa:	4313      	orrs	r3, r2
 8003bac:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003bae:	4937      	ldr	r1, [pc, #220]	@ (8003c8c <HAL_GPIO_Init+0x2e8>)
 8003bb0:	697b      	ldr	r3, [r7, #20]
 8003bb2:	089b      	lsrs	r3, r3, #2
 8003bb4:	3302      	adds	r3, #2
 8003bb6:	693a      	ldr	r2, [r7, #16]
 8003bb8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003bbc:	4b39      	ldr	r3, [pc, #228]	@ (8003ca4 <HAL_GPIO_Init+0x300>)
 8003bbe:	689b      	ldr	r3, [r3, #8]
 8003bc0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	43db      	mvns	r3, r3
 8003bc6:	693a      	ldr	r2, [r7, #16]
 8003bc8:	4013      	ands	r3, r2
 8003bca:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003bcc:	683b      	ldr	r3, [r7, #0]
 8003bce:	685b      	ldr	r3, [r3, #4]
 8003bd0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d003      	beq.n	8003be0 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8003bd8:	693a      	ldr	r2, [r7, #16]
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	4313      	orrs	r3, r2
 8003bde:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003be0:	4a30      	ldr	r2, [pc, #192]	@ (8003ca4 <HAL_GPIO_Init+0x300>)
 8003be2:	693b      	ldr	r3, [r7, #16]
 8003be4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003be6:	4b2f      	ldr	r3, [pc, #188]	@ (8003ca4 <HAL_GPIO_Init+0x300>)
 8003be8:	68db      	ldr	r3, [r3, #12]
 8003bea:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	43db      	mvns	r3, r3
 8003bf0:	693a      	ldr	r2, [r7, #16]
 8003bf2:	4013      	ands	r3, r2
 8003bf4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003bf6:	683b      	ldr	r3, [r7, #0]
 8003bf8:	685b      	ldr	r3, [r3, #4]
 8003bfa:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d003      	beq.n	8003c0a <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8003c02:	693a      	ldr	r2, [r7, #16]
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	4313      	orrs	r3, r2
 8003c08:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003c0a:	4a26      	ldr	r2, [pc, #152]	@ (8003ca4 <HAL_GPIO_Init+0x300>)
 8003c0c:	693b      	ldr	r3, [r7, #16]
 8003c0e:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8003c10:	4b24      	ldr	r3, [pc, #144]	@ (8003ca4 <HAL_GPIO_Init+0x300>)
 8003c12:	685b      	ldr	r3, [r3, #4]
 8003c14:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	43db      	mvns	r3, r3
 8003c1a:	693a      	ldr	r2, [r7, #16]
 8003c1c:	4013      	ands	r3, r2
 8003c1e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003c20:	683b      	ldr	r3, [r7, #0]
 8003c22:	685b      	ldr	r3, [r3, #4]
 8003c24:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d003      	beq.n	8003c34 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8003c2c:	693a      	ldr	r2, [r7, #16]
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	4313      	orrs	r3, r2
 8003c32:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003c34:	4a1b      	ldr	r2, [pc, #108]	@ (8003ca4 <HAL_GPIO_Init+0x300>)
 8003c36:	693b      	ldr	r3, [r7, #16]
 8003c38:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8003c3a:	4b1a      	ldr	r3, [pc, #104]	@ (8003ca4 <HAL_GPIO_Init+0x300>)
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	43db      	mvns	r3, r3
 8003c44:	693a      	ldr	r2, [r7, #16]
 8003c46:	4013      	ands	r3, r2
 8003c48:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003c4a:	683b      	ldr	r3, [r7, #0]
 8003c4c:	685b      	ldr	r3, [r3, #4]
 8003c4e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d003      	beq.n	8003c5e <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8003c56:	693a      	ldr	r2, [r7, #16]
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	4313      	orrs	r3, r2
 8003c5c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003c5e:	4a11      	ldr	r2, [pc, #68]	@ (8003ca4 <HAL_GPIO_Init+0x300>)
 8003c60:	693b      	ldr	r3, [r7, #16]
 8003c62:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003c64:	697b      	ldr	r3, [r7, #20]
 8003c66:	3301      	adds	r3, #1
 8003c68:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8003c6a:	683b      	ldr	r3, [r7, #0]
 8003c6c:	681a      	ldr	r2, [r3, #0]
 8003c6e:	697b      	ldr	r3, [r7, #20]
 8003c70:	fa22 f303 	lsr.w	r3, r2, r3
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	f47f ae9d 	bne.w	80039b4 <HAL_GPIO_Init+0x10>
  }
}
 8003c7a:	bf00      	nop
 8003c7c:	bf00      	nop
 8003c7e:	371c      	adds	r7, #28
 8003c80:	46bd      	mov	sp, r7
 8003c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c86:	4770      	bx	lr
 8003c88:	40021000 	.word	0x40021000
 8003c8c:	40010000 	.word	0x40010000
 8003c90:	48000400 	.word	0x48000400
 8003c94:	48000800 	.word	0x48000800
 8003c98:	48000c00 	.word	0x48000c00
 8003c9c:	48001000 	.word	0x48001000
 8003ca0:	48001400 	.word	0x48001400
 8003ca4:	40010400 	.word	0x40010400

08003ca8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003ca8:	b480      	push	{r7}
 8003caa:	b083      	sub	sp, #12
 8003cac:	af00      	add	r7, sp, #0
 8003cae:	6078      	str	r0, [r7, #4]
 8003cb0:	460b      	mov	r3, r1
 8003cb2:	807b      	strh	r3, [r7, #2]
 8003cb4:	4613      	mov	r3, r2
 8003cb6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003cb8:	787b      	ldrb	r3, [r7, #1]
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d003      	beq.n	8003cc6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003cbe:	887a      	ldrh	r2, [r7, #2]
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003cc4:	e002      	b.n	8003ccc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003cc6:	887a      	ldrh	r2, [r7, #2]
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8003ccc:	bf00      	nop
 8003cce:	370c      	adds	r7, #12
 8003cd0:	46bd      	mov	sp, r7
 8003cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cd6:	4770      	bx	lr

08003cd8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003cd8:	b480      	push	{r7}
 8003cda:	b085      	sub	sp, #20
 8003cdc:	af00      	add	r7, sp, #0
 8003cde:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d141      	bne.n	8003d6a <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003ce6:	4b4b      	ldr	r3, [pc, #300]	@ (8003e14 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8003cee:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003cf2:	d131      	bne.n	8003d58 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003cf4:	4b47      	ldr	r3, [pc, #284]	@ (8003e14 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003cf6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003cfa:	4a46      	ldr	r2, [pc, #280]	@ (8003e14 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003cfc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003d00:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003d04:	4b43      	ldr	r3, [pc, #268]	@ (8003e14 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003d0c:	4a41      	ldr	r2, [pc, #260]	@ (8003e14 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003d0e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003d12:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003d14:	4b40      	ldr	r3, [pc, #256]	@ (8003e18 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	2232      	movs	r2, #50	@ 0x32
 8003d1a:	fb02 f303 	mul.w	r3, r2, r3
 8003d1e:	4a3f      	ldr	r2, [pc, #252]	@ (8003e1c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003d20:	fba2 2303 	umull	r2, r3, r2, r3
 8003d24:	0c9b      	lsrs	r3, r3, #18
 8003d26:	3301      	adds	r3, #1
 8003d28:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003d2a:	e002      	b.n	8003d32 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	3b01      	subs	r3, #1
 8003d30:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003d32:	4b38      	ldr	r3, [pc, #224]	@ (8003e14 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003d34:	695b      	ldr	r3, [r3, #20]
 8003d36:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003d3a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003d3e:	d102      	bne.n	8003d46 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d1f2      	bne.n	8003d2c <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003d46:	4b33      	ldr	r3, [pc, #204]	@ (8003e14 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003d48:	695b      	ldr	r3, [r3, #20]
 8003d4a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003d4e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003d52:	d158      	bne.n	8003e06 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003d54:	2303      	movs	r3, #3
 8003d56:	e057      	b.n	8003e08 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003d58:	4b2e      	ldr	r3, [pc, #184]	@ (8003e14 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003d5a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003d5e:	4a2d      	ldr	r2, [pc, #180]	@ (8003e14 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003d60:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003d64:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8003d68:	e04d      	b.n	8003e06 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003d70:	d141      	bne.n	8003df6 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003d72:	4b28      	ldr	r3, [pc, #160]	@ (8003e14 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8003d7a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003d7e:	d131      	bne.n	8003de4 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003d80:	4b24      	ldr	r3, [pc, #144]	@ (8003e14 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003d82:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003d86:	4a23      	ldr	r2, [pc, #140]	@ (8003e14 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003d88:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003d8c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003d90:	4b20      	ldr	r3, [pc, #128]	@ (8003e14 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003d98:	4a1e      	ldr	r2, [pc, #120]	@ (8003e14 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003d9a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003d9e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003da0:	4b1d      	ldr	r3, [pc, #116]	@ (8003e18 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	2232      	movs	r2, #50	@ 0x32
 8003da6:	fb02 f303 	mul.w	r3, r2, r3
 8003daa:	4a1c      	ldr	r2, [pc, #112]	@ (8003e1c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003dac:	fba2 2303 	umull	r2, r3, r2, r3
 8003db0:	0c9b      	lsrs	r3, r3, #18
 8003db2:	3301      	adds	r3, #1
 8003db4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003db6:	e002      	b.n	8003dbe <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	3b01      	subs	r3, #1
 8003dbc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003dbe:	4b15      	ldr	r3, [pc, #84]	@ (8003e14 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003dc0:	695b      	ldr	r3, [r3, #20]
 8003dc2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003dc6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003dca:	d102      	bne.n	8003dd2 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d1f2      	bne.n	8003db8 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003dd2:	4b10      	ldr	r3, [pc, #64]	@ (8003e14 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003dd4:	695b      	ldr	r3, [r3, #20]
 8003dd6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003dda:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003dde:	d112      	bne.n	8003e06 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003de0:	2303      	movs	r3, #3
 8003de2:	e011      	b.n	8003e08 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003de4:	4b0b      	ldr	r3, [pc, #44]	@ (8003e14 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003de6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003dea:	4a0a      	ldr	r2, [pc, #40]	@ (8003e14 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003dec:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003df0:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8003df4:	e007      	b.n	8003e06 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003df6:	4b07      	ldr	r3, [pc, #28]	@ (8003e14 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003dfe:	4a05      	ldr	r2, [pc, #20]	@ (8003e14 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003e00:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003e04:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8003e06:	2300      	movs	r3, #0
}
 8003e08:	4618      	mov	r0, r3
 8003e0a:	3714      	adds	r7, #20
 8003e0c:	46bd      	mov	sp, r7
 8003e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e12:	4770      	bx	lr
 8003e14:	40007000 	.word	0x40007000
 8003e18:	20000000 	.word	0x20000000
 8003e1c:	431bde83 	.word	0x431bde83

08003e20 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8003e20:	b480      	push	{r7}
 8003e22:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8003e24:	4b05      	ldr	r3, [pc, #20]	@ (8003e3c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8003e26:	689b      	ldr	r3, [r3, #8]
 8003e28:	4a04      	ldr	r2, [pc, #16]	@ (8003e3c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8003e2a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003e2e:	6093      	str	r3, [r2, #8]
}
 8003e30:	bf00      	nop
 8003e32:	46bd      	mov	sp, r7
 8003e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e38:	4770      	bx	lr
 8003e3a:	bf00      	nop
 8003e3c:	40007000 	.word	0x40007000

08003e40 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003e40:	b580      	push	{r7, lr}
 8003e42:	b088      	sub	sp, #32
 8003e44:	af00      	add	r7, sp, #0
 8003e46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d101      	bne.n	8003e52 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003e4e:	2301      	movs	r3, #1
 8003e50:	e2fe      	b.n	8004450 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	f003 0301 	and.w	r3, r3, #1
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d075      	beq.n	8003f4a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003e5e:	4b97      	ldr	r3, [pc, #604]	@ (80040bc <HAL_RCC_OscConfig+0x27c>)
 8003e60:	689b      	ldr	r3, [r3, #8]
 8003e62:	f003 030c 	and.w	r3, r3, #12
 8003e66:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003e68:	4b94      	ldr	r3, [pc, #592]	@ (80040bc <HAL_RCC_OscConfig+0x27c>)
 8003e6a:	68db      	ldr	r3, [r3, #12]
 8003e6c:	f003 0303 	and.w	r3, r3, #3
 8003e70:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8003e72:	69bb      	ldr	r3, [r7, #24]
 8003e74:	2b0c      	cmp	r3, #12
 8003e76:	d102      	bne.n	8003e7e <HAL_RCC_OscConfig+0x3e>
 8003e78:	697b      	ldr	r3, [r7, #20]
 8003e7a:	2b03      	cmp	r3, #3
 8003e7c:	d002      	beq.n	8003e84 <HAL_RCC_OscConfig+0x44>
 8003e7e:	69bb      	ldr	r3, [r7, #24]
 8003e80:	2b08      	cmp	r3, #8
 8003e82:	d10b      	bne.n	8003e9c <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003e84:	4b8d      	ldr	r3, [pc, #564]	@ (80040bc <HAL_RCC_OscConfig+0x27c>)
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d05b      	beq.n	8003f48 <HAL_RCC_OscConfig+0x108>
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	685b      	ldr	r3, [r3, #4]
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d157      	bne.n	8003f48 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003e98:	2301      	movs	r3, #1
 8003e9a:	e2d9      	b.n	8004450 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	685b      	ldr	r3, [r3, #4]
 8003ea0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003ea4:	d106      	bne.n	8003eb4 <HAL_RCC_OscConfig+0x74>
 8003ea6:	4b85      	ldr	r3, [pc, #532]	@ (80040bc <HAL_RCC_OscConfig+0x27c>)
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	4a84      	ldr	r2, [pc, #528]	@ (80040bc <HAL_RCC_OscConfig+0x27c>)
 8003eac:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003eb0:	6013      	str	r3, [r2, #0]
 8003eb2:	e01d      	b.n	8003ef0 <HAL_RCC_OscConfig+0xb0>
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	685b      	ldr	r3, [r3, #4]
 8003eb8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003ebc:	d10c      	bne.n	8003ed8 <HAL_RCC_OscConfig+0x98>
 8003ebe:	4b7f      	ldr	r3, [pc, #508]	@ (80040bc <HAL_RCC_OscConfig+0x27c>)
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	4a7e      	ldr	r2, [pc, #504]	@ (80040bc <HAL_RCC_OscConfig+0x27c>)
 8003ec4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003ec8:	6013      	str	r3, [r2, #0]
 8003eca:	4b7c      	ldr	r3, [pc, #496]	@ (80040bc <HAL_RCC_OscConfig+0x27c>)
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	4a7b      	ldr	r2, [pc, #492]	@ (80040bc <HAL_RCC_OscConfig+0x27c>)
 8003ed0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003ed4:	6013      	str	r3, [r2, #0]
 8003ed6:	e00b      	b.n	8003ef0 <HAL_RCC_OscConfig+0xb0>
 8003ed8:	4b78      	ldr	r3, [pc, #480]	@ (80040bc <HAL_RCC_OscConfig+0x27c>)
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	4a77      	ldr	r2, [pc, #476]	@ (80040bc <HAL_RCC_OscConfig+0x27c>)
 8003ede:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003ee2:	6013      	str	r3, [r2, #0]
 8003ee4:	4b75      	ldr	r3, [pc, #468]	@ (80040bc <HAL_RCC_OscConfig+0x27c>)
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	4a74      	ldr	r2, [pc, #464]	@ (80040bc <HAL_RCC_OscConfig+0x27c>)
 8003eea:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003eee:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	685b      	ldr	r3, [r3, #4]
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d013      	beq.n	8003f20 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ef8:	f7fe fc2e 	bl	8002758 <HAL_GetTick>
 8003efc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003efe:	e008      	b.n	8003f12 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003f00:	f7fe fc2a 	bl	8002758 <HAL_GetTick>
 8003f04:	4602      	mov	r2, r0
 8003f06:	693b      	ldr	r3, [r7, #16]
 8003f08:	1ad3      	subs	r3, r2, r3
 8003f0a:	2b64      	cmp	r3, #100	@ 0x64
 8003f0c:	d901      	bls.n	8003f12 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003f0e:	2303      	movs	r3, #3
 8003f10:	e29e      	b.n	8004450 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003f12:	4b6a      	ldr	r3, [pc, #424]	@ (80040bc <HAL_RCC_OscConfig+0x27c>)
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d0f0      	beq.n	8003f00 <HAL_RCC_OscConfig+0xc0>
 8003f1e:	e014      	b.n	8003f4a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f20:	f7fe fc1a 	bl	8002758 <HAL_GetTick>
 8003f24:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003f26:	e008      	b.n	8003f3a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003f28:	f7fe fc16 	bl	8002758 <HAL_GetTick>
 8003f2c:	4602      	mov	r2, r0
 8003f2e:	693b      	ldr	r3, [r7, #16]
 8003f30:	1ad3      	subs	r3, r2, r3
 8003f32:	2b64      	cmp	r3, #100	@ 0x64
 8003f34:	d901      	bls.n	8003f3a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003f36:	2303      	movs	r3, #3
 8003f38:	e28a      	b.n	8004450 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003f3a:	4b60      	ldr	r3, [pc, #384]	@ (80040bc <HAL_RCC_OscConfig+0x27c>)
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d1f0      	bne.n	8003f28 <HAL_RCC_OscConfig+0xe8>
 8003f46:	e000      	b.n	8003f4a <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003f48:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	f003 0302 	and.w	r3, r3, #2
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d075      	beq.n	8004042 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003f56:	4b59      	ldr	r3, [pc, #356]	@ (80040bc <HAL_RCC_OscConfig+0x27c>)
 8003f58:	689b      	ldr	r3, [r3, #8]
 8003f5a:	f003 030c 	and.w	r3, r3, #12
 8003f5e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003f60:	4b56      	ldr	r3, [pc, #344]	@ (80040bc <HAL_RCC_OscConfig+0x27c>)
 8003f62:	68db      	ldr	r3, [r3, #12]
 8003f64:	f003 0303 	and.w	r3, r3, #3
 8003f68:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8003f6a:	69bb      	ldr	r3, [r7, #24]
 8003f6c:	2b0c      	cmp	r3, #12
 8003f6e:	d102      	bne.n	8003f76 <HAL_RCC_OscConfig+0x136>
 8003f70:	697b      	ldr	r3, [r7, #20]
 8003f72:	2b02      	cmp	r3, #2
 8003f74:	d002      	beq.n	8003f7c <HAL_RCC_OscConfig+0x13c>
 8003f76:	69bb      	ldr	r3, [r7, #24]
 8003f78:	2b04      	cmp	r3, #4
 8003f7a:	d11f      	bne.n	8003fbc <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003f7c:	4b4f      	ldr	r3, [pc, #316]	@ (80040bc <HAL_RCC_OscConfig+0x27c>)
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d005      	beq.n	8003f94 <HAL_RCC_OscConfig+0x154>
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	68db      	ldr	r3, [r3, #12]
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d101      	bne.n	8003f94 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8003f90:	2301      	movs	r3, #1
 8003f92:	e25d      	b.n	8004450 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003f94:	4b49      	ldr	r3, [pc, #292]	@ (80040bc <HAL_RCC_OscConfig+0x27c>)
 8003f96:	685b      	ldr	r3, [r3, #4]
 8003f98:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	691b      	ldr	r3, [r3, #16]
 8003fa0:	061b      	lsls	r3, r3, #24
 8003fa2:	4946      	ldr	r1, [pc, #280]	@ (80040bc <HAL_RCC_OscConfig+0x27c>)
 8003fa4:	4313      	orrs	r3, r2
 8003fa6:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8003fa8:	4b45      	ldr	r3, [pc, #276]	@ (80040c0 <HAL_RCC_OscConfig+0x280>)
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	4618      	mov	r0, r3
 8003fae:	f7fe fb87 	bl	80026c0 <HAL_InitTick>
 8003fb2:	4603      	mov	r3, r0
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d043      	beq.n	8004040 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8003fb8:	2301      	movs	r3, #1
 8003fba:	e249      	b.n	8004450 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	68db      	ldr	r3, [r3, #12]
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d023      	beq.n	800400c <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003fc4:	4b3d      	ldr	r3, [pc, #244]	@ (80040bc <HAL_RCC_OscConfig+0x27c>)
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	4a3c      	ldr	r2, [pc, #240]	@ (80040bc <HAL_RCC_OscConfig+0x27c>)
 8003fca:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003fce:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003fd0:	f7fe fbc2 	bl	8002758 <HAL_GetTick>
 8003fd4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003fd6:	e008      	b.n	8003fea <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003fd8:	f7fe fbbe 	bl	8002758 <HAL_GetTick>
 8003fdc:	4602      	mov	r2, r0
 8003fde:	693b      	ldr	r3, [r7, #16]
 8003fe0:	1ad3      	subs	r3, r2, r3
 8003fe2:	2b02      	cmp	r3, #2
 8003fe4:	d901      	bls.n	8003fea <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8003fe6:	2303      	movs	r3, #3
 8003fe8:	e232      	b.n	8004450 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003fea:	4b34      	ldr	r3, [pc, #208]	@ (80040bc <HAL_RCC_OscConfig+0x27c>)
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d0f0      	beq.n	8003fd8 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003ff6:	4b31      	ldr	r3, [pc, #196]	@ (80040bc <HAL_RCC_OscConfig+0x27c>)
 8003ff8:	685b      	ldr	r3, [r3, #4]
 8003ffa:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	691b      	ldr	r3, [r3, #16]
 8004002:	061b      	lsls	r3, r3, #24
 8004004:	492d      	ldr	r1, [pc, #180]	@ (80040bc <HAL_RCC_OscConfig+0x27c>)
 8004006:	4313      	orrs	r3, r2
 8004008:	604b      	str	r3, [r1, #4]
 800400a:	e01a      	b.n	8004042 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800400c:	4b2b      	ldr	r3, [pc, #172]	@ (80040bc <HAL_RCC_OscConfig+0x27c>)
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	4a2a      	ldr	r2, [pc, #168]	@ (80040bc <HAL_RCC_OscConfig+0x27c>)
 8004012:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004016:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004018:	f7fe fb9e 	bl	8002758 <HAL_GetTick>
 800401c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800401e:	e008      	b.n	8004032 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004020:	f7fe fb9a 	bl	8002758 <HAL_GetTick>
 8004024:	4602      	mov	r2, r0
 8004026:	693b      	ldr	r3, [r7, #16]
 8004028:	1ad3      	subs	r3, r2, r3
 800402a:	2b02      	cmp	r3, #2
 800402c:	d901      	bls.n	8004032 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800402e:	2303      	movs	r3, #3
 8004030:	e20e      	b.n	8004450 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004032:	4b22      	ldr	r3, [pc, #136]	@ (80040bc <HAL_RCC_OscConfig+0x27c>)
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800403a:	2b00      	cmp	r3, #0
 800403c:	d1f0      	bne.n	8004020 <HAL_RCC_OscConfig+0x1e0>
 800403e:	e000      	b.n	8004042 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004040:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	f003 0308 	and.w	r3, r3, #8
 800404a:	2b00      	cmp	r3, #0
 800404c:	d041      	beq.n	80040d2 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	695b      	ldr	r3, [r3, #20]
 8004052:	2b00      	cmp	r3, #0
 8004054:	d01c      	beq.n	8004090 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004056:	4b19      	ldr	r3, [pc, #100]	@ (80040bc <HAL_RCC_OscConfig+0x27c>)
 8004058:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800405c:	4a17      	ldr	r2, [pc, #92]	@ (80040bc <HAL_RCC_OscConfig+0x27c>)
 800405e:	f043 0301 	orr.w	r3, r3, #1
 8004062:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004066:	f7fe fb77 	bl	8002758 <HAL_GetTick>
 800406a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800406c:	e008      	b.n	8004080 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800406e:	f7fe fb73 	bl	8002758 <HAL_GetTick>
 8004072:	4602      	mov	r2, r0
 8004074:	693b      	ldr	r3, [r7, #16]
 8004076:	1ad3      	subs	r3, r2, r3
 8004078:	2b02      	cmp	r3, #2
 800407a:	d901      	bls.n	8004080 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800407c:	2303      	movs	r3, #3
 800407e:	e1e7      	b.n	8004450 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004080:	4b0e      	ldr	r3, [pc, #56]	@ (80040bc <HAL_RCC_OscConfig+0x27c>)
 8004082:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004086:	f003 0302 	and.w	r3, r3, #2
 800408a:	2b00      	cmp	r3, #0
 800408c:	d0ef      	beq.n	800406e <HAL_RCC_OscConfig+0x22e>
 800408e:	e020      	b.n	80040d2 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004090:	4b0a      	ldr	r3, [pc, #40]	@ (80040bc <HAL_RCC_OscConfig+0x27c>)
 8004092:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004096:	4a09      	ldr	r2, [pc, #36]	@ (80040bc <HAL_RCC_OscConfig+0x27c>)
 8004098:	f023 0301 	bic.w	r3, r3, #1
 800409c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80040a0:	f7fe fb5a 	bl	8002758 <HAL_GetTick>
 80040a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80040a6:	e00d      	b.n	80040c4 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80040a8:	f7fe fb56 	bl	8002758 <HAL_GetTick>
 80040ac:	4602      	mov	r2, r0
 80040ae:	693b      	ldr	r3, [r7, #16]
 80040b0:	1ad3      	subs	r3, r2, r3
 80040b2:	2b02      	cmp	r3, #2
 80040b4:	d906      	bls.n	80040c4 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80040b6:	2303      	movs	r3, #3
 80040b8:	e1ca      	b.n	8004450 <HAL_RCC_OscConfig+0x610>
 80040ba:	bf00      	nop
 80040bc:	40021000 	.word	0x40021000
 80040c0:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80040c4:	4b8c      	ldr	r3, [pc, #560]	@ (80042f8 <HAL_RCC_OscConfig+0x4b8>)
 80040c6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80040ca:	f003 0302 	and.w	r3, r3, #2
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d1ea      	bne.n	80040a8 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	f003 0304 	and.w	r3, r3, #4
 80040da:	2b00      	cmp	r3, #0
 80040dc:	f000 80a6 	beq.w	800422c <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 80040e0:	2300      	movs	r3, #0
 80040e2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80040e4:	4b84      	ldr	r3, [pc, #528]	@ (80042f8 <HAL_RCC_OscConfig+0x4b8>)
 80040e6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80040e8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d101      	bne.n	80040f4 <HAL_RCC_OscConfig+0x2b4>
 80040f0:	2301      	movs	r3, #1
 80040f2:	e000      	b.n	80040f6 <HAL_RCC_OscConfig+0x2b6>
 80040f4:	2300      	movs	r3, #0
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d00d      	beq.n	8004116 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80040fa:	4b7f      	ldr	r3, [pc, #508]	@ (80042f8 <HAL_RCC_OscConfig+0x4b8>)
 80040fc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80040fe:	4a7e      	ldr	r2, [pc, #504]	@ (80042f8 <HAL_RCC_OscConfig+0x4b8>)
 8004100:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004104:	6593      	str	r3, [r2, #88]	@ 0x58
 8004106:	4b7c      	ldr	r3, [pc, #496]	@ (80042f8 <HAL_RCC_OscConfig+0x4b8>)
 8004108:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800410a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800410e:	60fb      	str	r3, [r7, #12]
 8004110:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8004112:	2301      	movs	r3, #1
 8004114:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004116:	4b79      	ldr	r3, [pc, #484]	@ (80042fc <HAL_RCC_OscConfig+0x4bc>)
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800411e:	2b00      	cmp	r3, #0
 8004120:	d118      	bne.n	8004154 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004122:	4b76      	ldr	r3, [pc, #472]	@ (80042fc <HAL_RCC_OscConfig+0x4bc>)
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	4a75      	ldr	r2, [pc, #468]	@ (80042fc <HAL_RCC_OscConfig+0x4bc>)
 8004128:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800412c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800412e:	f7fe fb13 	bl	8002758 <HAL_GetTick>
 8004132:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004134:	e008      	b.n	8004148 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004136:	f7fe fb0f 	bl	8002758 <HAL_GetTick>
 800413a:	4602      	mov	r2, r0
 800413c:	693b      	ldr	r3, [r7, #16]
 800413e:	1ad3      	subs	r3, r2, r3
 8004140:	2b02      	cmp	r3, #2
 8004142:	d901      	bls.n	8004148 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8004144:	2303      	movs	r3, #3
 8004146:	e183      	b.n	8004450 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004148:	4b6c      	ldr	r3, [pc, #432]	@ (80042fc <HAL_RCC_OscConfig+0x4bc>)
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004150:	2b00      	cmp	r3, #0
 8004152:	d0f0      	beq.n	8004136 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	689b      	ldr	r3, [r3, #8]
 8004158:	2b01      	cmp	r3, #1
 800415a:	d108      	bne.n	800416e <HAL_RCC_OscConfig+0x32e>
 800415c:	4b66      	ldr	r3, [pc, #408]	@ (80042f8 <HAL_RCC_OscConfig+0x4b8>)
 800415e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004162:	4a65      	ldr	r2, [pc, #404]	@ (80042f8 <HAL_RCC_OscConfig+0x4b8>)
 8004164:	f043 0301 	orr.w	r3, r3, #1
 8004168:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800416c:	e024      	b.n	80041b8 <HAL_RCC_OscConfig+0x378>
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	689b      	ldr	r3, [r3, #8]
 8004172:	2b05      	cmp	r3, #5
 8004174:	d110      	bne.n	8004198 <HAL_RCC_OscConfig+0x358>
 8004176:	4b60      	ldr	r3, [pc, #384]	@ (80042f8 <HAL_RCC_OscConfig+0x4b8>)
 8004178:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800417c:	4a5e      	ldr	r2, [pc, #376]	@ (80042f8 <HAL_RCC_OscConfig+0x4b8>)
 800417e:	f043 0304 	orr.w	r3, r3, #4
 8004182:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004186:	4b5c      	ldr	r3, [pc, #368]	@ (80042f8 <HAL_RCC_OscConfig+0x4b8>)
 8004188:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800418c:	4a5a      	ldr	r2, [pc, #360]	@ (80042f8 <HAL_RCC_OscConfig+0x4b8>)
 800418e:	f043 0301 	orr.w	r3, r3, #1
 8004192:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004196:	e00f      	b.n	80041b8 <HAL_RCC_OscConfig+0x378>
 8004198:	4b57      	ldr	r3, [pc, #348]	@ (80042f8 <HAL_RCC_OscConfig+0x4b8>)
 800419a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800419e:	4a56      	ldr	r2, [pc, #344]	@ (80042f8 <HAL_RCC_OscConfig+0x4b8>)
 80041a0:	f023 0301 	bic.w	r3, r3, #1
 80041a4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80041a8:	4b53      	ldr	r3, [pc, #332]	@ (80042f8 <HAL_RCC_OscConfig+0x4b8>)
 80041aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80041ae:	4a52      	ldr	r2, [pc, #328]	@ (80042f8 <HAL_RCC_OscConfig+0x4b8>)
 80041b0:	f023 0304 	bic.w	r3, r3, #4
 80041b4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	689b      	ldr	r3, [r3, #8]
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d016      	beq.n	80041ee <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80041c0:	f7fe faca 	bl	8002758 <HAL_GetTick>
 80041c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80041c6:	e00a      	b.n	80041de <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80041c8:	f7fe fac6 	bl	8002758 <HAL_GetTick>
 80041cc:	4602      	mov	r2, r0
 80041ce:	693b      	ldr	r3, [r7, #16]
 80041d0:	1ad3      	subs	r3, r2, r3
 80041d2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80041d6:	4293      	cmp	r3, r2
 80041d8:	d901      	bls.n	80041de <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80041da:	2303      	movs	r3, #3
 80041dc:	e138      	b.n	8004450 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80041de:	4b46      	ldr	r3, [pc, #280]	@ (80042f8 <HAL_RCC_OscConfig+0x4b8>)
 80041e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80041e4:	f003 0302 	and.w	r3, r3, #2
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d0ed      	beq.n	80041c8 <HAL_RCC_OscConfig+0x388>
 80041ec:	e015      	b.n	800421a <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80041ee:	f7fe fab3 	bl	8002758 <HAL_GetTick>
 80041f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80041f4:	e00a      	b.n	800420c <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80041f6:	f7fe faaf 	bl	8002758 <HAL_GetTick>
 80041fa:	4602      	mov	r2, r0
 80041fc:	693b      	ldr	r3, [r7, #16]
 80041fe:	1ad3      	subs	r3, r2, r3
 8004200:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004204:	4293      	cmp	r3, r2
 8004206:	d901      	bls.n	800420c <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8004208:	2303      	movs	r3, #3
 800420a:	e121      	b.n	8004450 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800420c:	4b3a      	ldr	r3, [pc, #232]	@ (80042f8 <HAL_RCC_OscConfig+0x4b8>)
 800420e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004212:	f003 0302 	and.w	r3, r3, #2
 8004216:	2b00      	cmp	r3, #0
 8004218:	d1ed      	bne.n	80041f6 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800421a:	7ffb      	ldrb	r3, [r7, #31]
 800421c:	2b01      	cmp	r3, #1
 800421e:	d105      	bne.n	800422c <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004220:	4b35      	ldr	r3, [pc, #212]	@ (80042f8 <HAL_RCC_OscConfig+0x4b8>)
 8004222:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004224:	4a34      	ldr	r2, [pc, #208]	@ (80042f8 <HAL_RCC_OscConfig+0x4b8>)
 8004226:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800422a:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	f003 0320 	and.w	r3, r3, #32
 8004234:	2b00      	cmp	r3, #0
 8004236:	d03c      	beq.n	80042b2 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	699b      	ldr	r3, [r3, #24]
 800423c:	2b00      	cmp	r3, #0
 800423e:	d01c      	beq.n	800427a <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004240:	4b2d      	ldr	r3, [pc, #180]	@ (80042f8 <HAL_RCC_OscConfig+0x4b8>)
 8004242:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004246:	4a2c      	ldr	r2, [pc, #176]	@ (80042f8 <HAL_RCC_OscConfig+0x4b8>)
 8004248:	f043 0301 	orr.w	r3, r3, #1
 800424c:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004250:	f7fe fa82 	bl	8002758 <HAL_GetTick>
 8004254:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004256:	e008      	b.n	800426a <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004258:	f7fe fa7e 	bl	8002758 <HAL_GetTick>
 800425c:	4602      	mov	r2, r0
 800425e:	693b      	ldr	r3, [r7, #16]
 8004260:	1ad3      	subs	r3, r2, r3
 8004262:	2b02      	cmp	r3, #2
 8004264:	d901      	bls.n	800426a <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8004266:	2303      	movs	r3, #3
 8004268:	e0f2      	b.n	8004450 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800426a:	4b23      	ldr	r3, [pc, #140]	@ (80042f8 <HAL_RCC_OscConfig+0x4b8>)
 800426c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004270:	f003 0302 	and.w	r3, r3, #2
 8004274:	2b00      	cmp	r3, #0
 8004276:	d0ef      	beq.n	8004258 <HAL_RCC_OscConfig+0x418>
 8004278:	e01b      	b.n	80042b2 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800427a:	4b1f      	ldr	r3, [pc, #124]	@ (80042f8 <HAL_RCC_OscConfig+0x4b8>)
 800427c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004280:	4a1d      	ldr	r2, [pc, #116]	@ (80042f8 <HAL_RCC_OscConfig+0x4b8>)
 8004282:	f023 0301 	bic.w	r3, r3, #1
 8004286:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800428a:	f7fe fa65 	bl	8002758 <HAL_GetTick>
 800428e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004290:	e008      	b.n	80042a4 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004292:	f7fe fa61 	bl	8002758 <HAL_GetTick>
 8004296:	4602      	mov	r2, r0
 8004298:	693b      	ldr	r3, [r7, #16]
 800429a:	1ad3      	subs	r3, r2, r3
 800429c:	2b02      	cmp	r3, #2
 800429e:	d901      	bls.n	80042a4 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 80042a0:	2303      	movs	r3, #3
 80042a2:	e0d5      	b.n	8004450 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80042a4:	4b14      	ldr	r3, [pc, #80]	@ (80042f8 <HAL_RCC_OscConfig+0x4b8>)
 80042a6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80042aa:	f003 0302 	and.w	r3, r3, #2
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d1ef      	bne.n	8004292 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	69db      	ldr	r3, [r3, #28]
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	f000 80c9 	beq.w	800444e <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80042bc:	4b0e      	ldr	r3, [pc, #56]	@ (80042f8 <HAL_RCC_OscConfig+0x4b8>)
 80042be:	689b      	ldr	r3, [r3, #8]
 80042c0:	f003 030c 	and.w	r3, r3, #12
 80042c4:	2b0c      	cmp	r3, #12
 80042c6:	f000 8083 	beq.w	80043d0 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	69db      	ldr	r3, [r3, #28]
 80042ce:	2b02      	cmp	r3, #2
 80042d0:	d15e      	bne.n	8004390 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80042d2:	4b09      	ldr	r3, [pc, #36]	@ (80042f8 <HAL_RCC_OscConfig+0x4b8>)
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	4a08      	ldr	r2, [pc, #32]	@ (80042f8 <HAL_RCC_OscConfig+0x4b8>)
 80042d8:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80042dc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042de:	f7fe fa3b 	bl	8002758 <HAL_GetTick>
 80042e2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80042e4:	e00c      	b.n	8004300 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80042e6:	f7fe fa37 	bl	8002758 <HAL_GetTick>
 80042ea:	4602      	mov	r2, r0
 80042ec:	693b      	ldr	r3, [r7, #16]
 80042ee:	1ad3      	subs	r3, r2, r3
 80042f0:	2b02      	cmp	r3, #2
 80042f2:	d905      	bls.n	8004300 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 80042f4:	2303      	movs	r3, #3
 80042f6:	e0ab      	b.n	8004450 <HAL_RCC_OscConfig+0x610>
 80042f8:	40021000 	.word	0x40021000
 80042fc:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004300:	4b55      	ldr	r3, [pc, #340]	@ (8004458 <HAL_RCC_OscConfig+0x618>)
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004308:	2b00      	cmp	r3, #0
 800430a:	d1ec      	bne.n	80042e6 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800430c:	4b52      	ldr	r3, [pc, #328]	@ (8004458 <HAL_RCC_OscConfig+0x618>)
 800430e:	68da      	ldr	r2, [r3, #12]
 8004310:	4b52      	ldr	r3, [pc, #328]	@ (800445c <HAL_RCC_OscConfig+0x61c>)
 8004312:	4013      	ands	r3, r2
 8004314:	687a      	ldr	r2, [r7, #4]
 8004316:	6a11      	ldr	r1, [r2, #32]
 8004318:	687a      	ldr	r2, [r7, #4]
 800431a:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800431c:	3a01      	subs	r2, #1
 800431e:	0112      	lsls	r2, r2, #4
 8004320:	4311      	orrs	r1, r2
 8004322:	687a      	ldr	r2, [r7, #4]
 8004324:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8004326:	0212      	lsls	r2, r2, #8
 8004328:	4311      	orrs	r1, r2
 800432a:	687a      	ldr	r2, [r7, #4]
 800432c:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800432e:	0852      	lsrs	r2, r2, #1
 8004330:	3a01      	subs	r2, #1
 8004332:	0552      	lsls	r2, r2, #21
 8004334:	4311      	orrs	r1, r2
 8004336:	687a      	ldr	r2, [r7, #4]
 8004338:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800433a:	0852      	lsrs	r2, r2, #1
 800433c:	3a01      	subs	r2, #1
 800433e:	0652      	lsls	r2, r2, #25
 8004340:	4311      	orrs	r1, r2
 8004342:	687a      	ldr	r2, [r7, #4]
 8004344:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8004346:	06d2      	lsls	r2, r2, #27
 8004348:	430a      	orrs	r2, r1
 800434a:	4943      	ldr	r1, [pc, #268]	@ (8004458 <HAL_RCC_OscConfig+0x618>)
 800434c:	4313      	orrs	r3, r2
 800434e:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004350:	4b41      	ldr	r3, [pc, #260]	@ (8004458 <HAL_RCC_OscConfig+0x618>)
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	4a40      	ldr	r2, [pc, #256]	@ (8004458 <HAL_RCC_OscConfig+0x618>)
 8004356:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800435a:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800435c:	4b3e      	ldr	r3, [pc, #248]	@ (8004458 <HAL_RCC_OscConfig+0x618>)
 800435e:	68db      	ldr	r3, [r3, #12]
 8004360:	4a3d      	ldr	r2, [pc, #244]	@ (8004458 <HAL_RCC_OscConfig+0x618>)
 8004362:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004366:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004368:	f7fe f9f6 	bl	8002758 <HAL_GetTick>
 800436c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800436e:	e008      	b.n	8004382 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004370:	f7fe f9f2 	bl	8002758 <HAL_GetTick>
 8004374:	4602      	mov	r2, r0
 8004376:	693b      	ldr	r3, [r7, #16]
 8004378:	1ad3      	subs	r3, r2, r3
 800437a:	2b02      	cmp	r3, #2
 800437c:	d901      	bls.n	8004382 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 800437e:	2303      	movs	r3, #3
 8004380:	e066      	b.n	8004450 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004382:	4b35      	ldr	r3, [pc, #212]	@ (8004458 <HAL_RCC_OscConfig+0x618>)
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800438a:	2b00      	cmp	r3, #0
 800438c:	d0f0      	beq.n	8004370 <HAL_RCC_OscConfig+0x530>
 800438e:	e05e      	b.n	800444e <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004390:	4b31      	ldr	r3, [pc, #196]	@ (8004458 <HAL_RCC_OscConfig+0x618>)
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	4a30      	ldr	r2, [pc, #192]	@ (8004458 <HAL_RCC_OscConfig+0x618>)
 8004396:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800439a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800439c:	f7fe f9dc 	bl	8002758 <HAL_GetTick>
 80043a0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80043a2:	e008      	b.n	80043b6 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80043a4:	f7fe f9d8 	bl	8002758 <HAL_GetTick>
 80043a8:	4602      	mov	r2, r0
 80043aa:	693b      	ldr	r3, [r7, #16]
 80043ac:	1ad3      	subs	r3, r2, r3
 80043ae:	2b02      	cmp	r3, #2
 80043b0:	d901      	bls.n	80043b6 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 80043b2:	2303      	movs	r3, #3
 80043b4:	e04c      	b.n	8004450 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80043b6:	4b28      	ldr	r3, [pc, #160]	@ (8004458 <HAL_RCC_OscConfig+0x618>)
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d1f0      	bne.n	80043a4 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 80043c2:	4b25      	ldr	r3, [pc, #148]	@ (8004458 <HAL_RCC_OscConfig+0x618>)
 80043c4:	68da      	ldr	r2, [r3, #12]
 80043c6:	4924      	ldr	r1, [pc, #144]	@ (8004458 <HAL_RCC_OscConfig+0x618>)
 80043c8:	4b25      	ldr	r3, [pc, #148]	@ (8004460 <HAL_RCC_OscConfig+0x620>)
 80043ca:	4013      	ands	r3, r2
 80043cc:	60cb      	str	r3, [r1, #12]
 80043ce:	e03e      	b.n	800444e <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	69db      	ldr	r3, [r3, #28]
 80043d4:	2b01      	cmp	r3, #1
 80043d6:	d101      	bne.n	80043dc <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 80043d8:	2301      	movs	r3, #1
 80043da:	e039      	b.n	8004450 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 80043dc:	4b1e      	ldr	r3, [pc, #120]	@ (8004458 <HAL_RCC_OscConfig+0x618>)
 80043de:	68db      	ldr	r3, [r3, #12]
 80043e0:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80043e2:	697b      	ldr	r3, [r7, #20]
 80043e4:	f003 0203 	and.w	r2, r3, #3
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	6a1b      	ldr	r3, [r3, #32]
 80043ec:	429a      	cmp	r2, r3
 80043ee:	d12c      	bne.n	800444a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80043f0:	697b      	ldr	r3, [r7, #20]
 80043f2:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043fa:	3b01      	subs	r3, #1
 80043fc:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80043fe:	429a      	cmp	r2, r3
 8004400:	d123      	bne.n	800444a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8004402:	697b      	ldr	r3, [r7, #20]
 8004404:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800440c:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800440e:	429a      	cmp	r2, r3
 8004410:	d11b      	bne.n	800444a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004412:	697b      	ldr	r3, [r7, #20]
 8004414:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800441c:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800441e:	429a      	cmp	r2, r3
 8004420:	d113      	bne.n	800444a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004422:	697b      	ldr	r3, [r7, #20]
 8004424:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800442c:	085b      	lsrs	r3, r3, #1
 800442e:	3b01      	subs	r3, #1
 8004430:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004432:	429a      	cmp	r2, r3
 8004434:	d109      	bne.n	800444a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004436:	697b      	ldr	r3, [r7, #20]
 8004438:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004440:	085b      	lsrs	r3, r3, #1
 8004442:	3b01      	subs	r3, #1
 8004444:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004446:	429a      	cmp	r2, r3
 8004448:	d001      	beq.n	800444e <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 800444a:	2301      	movs	r3, #1
 800444c:	e000      	b.n	8004450 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 800444e:	2300      	movs	r3, #0
}
 8004450:	4618      	mov	r0, r3
 8004452:	3720      	adds	r7, #32
 8004454:	46bd      	mov	sp, r7
 8004456:	bd80      	pop	{r7, pc}
 8004458:	40021000 	.word	0x40021000
 800445c:	019f800c 	.word	0x019f800c
 8004460:	feeefffc 	.word	0xfeeefffc

08004464 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004464:	b580      	push	{r7, lr}
 8004466:	b086      	sub	sp, #24
 8004468:	af00      	add	r7, sp, #0
 800446a:	6078      	str	r0, [r7, #4]
 800446c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800446e:	2300      	movs	r3, #0
 8004470:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	2b00      	cmp	r3, #0
 8004476:	d101      	bne.n	800447c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004478:	2301      	movs	r3, #1
 800447a:	e11e      	b.n	80046ba <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800447c:	4b91      	ldr	r3, [pc, #580]	@ (80046c4 <HAL_RCC_ClockConfig+0x260>)
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	f003 030f 	and.w	r3, r3, #15
 8004484:	683a      	ldr	r2, [r7, #0]
 8004486:	429a      	cmp	r2, r3
 8004488:	d910      	bls.n	80044ac <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800448a:	4b8e      	ldr	r3, [pc, #568]	@ (80046c4 <HAL_RCC_ClockConfig+0x260>)
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	f023 020f 	bic.w	r2, r3, #15
 8004492:	498c      	ldr	r1, [pc, #560]	@ (80046c4 <HAL_RCC_ClockConfig+0x260>)
 8004494:	683b      	ldr	r3, [r7, #0]
 8004496:	4313      	orrs	r3, r2
 8004498:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800449a:	4b8a      	ldr	r3, [pc, #552]	@ (80046c4 <HAL_RCC_ClockConfig+0x260>)
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	f003 030f 	and.w	r3, r3, #15
 80044a2:	683a      	ldr	r2, [r7, #0]
 80044a4:	429a      	cmp	r2, r3
 80044a6:	d001      	beq.n	80044ac <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80044a8:	2301      	movs	r3, #1
 80044aa:	e106      	b.n	80046ba <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	f003 0301 	and.w	r3, r3, #1
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d073      	beq.n	80045a0 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	685b      	ldr	r3, [r3, #4]
 80044bc:	2b03      	cmp	r3, #3
 80044be:	d129      	bne.n	8004514 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80044c0:	4b81      	ldr	r3, [pc, #516]	@ (80046c8 <HAL_RCC_ClockConfig+0x264>)
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d101      	bne.n	80044d0 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 80044cc:	2301      	movs	r3, #1
 80044ce:	e0f4      	b.n	80046ba <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 80044d0:	f000 f99e 	bl	8004810 <RCC_GetSysClockFreqFromPLLSource>
 80044d4:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 80044d6:	693b      	ldr	r3, [r7, #16]
 80044d8:	4a7c      	ldr	r2, [pc, #496]	@ (80046cc <HAL_RCC_ClockConfig+0x268>)
 80044da:	4293      	cmp	r3, r2
 80044dc:	d93f      	bls.n	800455e <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80044de:	4b7a      	ldr	r3, [pc, #488]	@ (80046c8 <HAL_RCC_ClockConfig+0x264>)
 80044e0:	689b      	ldr	r3, [r3, #8]
 80044e2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d009      	beq.n	80044fe <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d033      	beq.n	800455e <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d12f      	bne.n	800455e <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80044fe:	4b72      	ldr	r3, [pc, #456]	@ (80046c8 <HAL_RCC_ClockConfig+0x264>)
 8004500:	689b      	ldr	r3, [r3, #8]
 8004502:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004506:	4a70      	ldr	r2, [pc, #448]	@ (80046c8 <HAL_RCC_ClockConfig+0x264>)
 8004508:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800450c:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800450e:	2380      	movs	r3, #128	@ 0x80
 8004510:	617b      	str	r3, [r7, #20]
 8004512:	e024      	b.n	800455e <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	685b      	ldr	r3, [r3, #4]
 8004518:	2b02      	cmp	r3, #2
 800451a:	d107      	bne.n	800452c <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800451c:	4b6a      	ldr	r3, [pc, #424]	@ (80046c8 <HAL_RCC_ClockConfig+0x264>)
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004524:	2b00      	cmp	r3, #0
 8004526:	d109      	bne.n	800453c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8004528:	2301      	movs	r3, #1
 800452a:	e0c6      	b.n	80046ba <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800452c:	4b66      	ldr	r3, [pc, #408]	@ (80046c8 <HAL_RCC_ClockConfig+0x264>)
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004534:	2b00      	cmp	r3, #0
 8004536:	d101      	bne.n	800453c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8004538:	2301      	movs	r3, #1
 800453a:	e0be      	b.n	80046ba <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 800453c:	f000 f8ce 	bl	80046dc <HAL_RCC_GetSysClockFreq>
 8004540:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8004542:	693b      	ldr	r3, [r7, #16]
 8004544:	4a61      	ldr	r2, [pc, #388]	@ (80046cc <HAL_RCC_ClockConfig+0x268>)
 8004546:	4293      	cmp	r3, r2
 8004548:	d909      	bls.n	800455e <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800454a:	4b5f      	ldr	r3, [pc, #380]	@ (80046c8 <HAL_RCC_ClockConfig+0x264>)
 800454c:	689b      	ldr	r3, [r3, #8]
 800454e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004552:	4a5d      	ldr	r2, [pc, #372]	@ (80046c8 <HAL_RCC_ClockConfig+0x264>)
 8004554:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004558:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800455a:	2380      	movs	r3, #128	@ 0x80
 800455c:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800455e:	4b5a      	ldr	r3, [pc, #360]	@ (80046c8 <HAL_RCC_ClockConfig+0x264>)
 8004560:	689b      	ldr	r3, [r3, #8]
 8004562:	f023 0203 	bic.w	r2, r3, #3
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	685b      	ldr	r3, [r3, #4]
 800456a:	4957      	ldr	r1, [pc, #348]	@ (80046c8 <HAL_RCC_ClockConfig+0x264>)
 800456c:	4313      	orrs	r3, r2
 800456e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004570:	f7fe f8f2 	bl	8002758 <HAL_GetTick>
 8004574:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004576:	e00a      	b.n	800458e <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004578:	f7fe f8ee 	bl	8002758 <HAL_GetTick>
 800457c:	4602      	mov	r2, r0
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	1ad3      	subs	r3, r2, r3
 8004582:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004586:	4293      	cmp	r3, r2
 8004588:	d901      	bls.n	800458e <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 800458a:	2303      	movs	r3, #3
 800458c:	e095      	b.n	80046ba <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800458e:	4b4e      	ldr	r3, [pc, #312]	@ (80046c8 <HAL_RCC_ClockConfig+0x264>)
 8004590:	689b      	ldr	r3, [r3, #8]
 8004592:	f003 020c 	and.w	r2, r3, #12
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	685b      	ldr	r3, [r3, #4]
 800459a:	009b      	lsls	r3, r3, #2
 800459c:	429a      	cmp	r2, r3
 800459e:	d1eb      	bne.n	8004578 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	f003 0302 	and.w	r3, r3, #2
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d023      	beq.n	80045f4 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	f003 0304 	and.w	r3, r3, #4
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d005      	beq.n	80045c4 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80045b8:	4b43      	ldr	r3, [pc, #268]	@ (80046c8 <HAL_RCC_ClockConfig+0x264>)
 80045ba:	689b      	ldr	r3, [r3, #8]
 80045bc:	4a42      	ldr	r2, [pc, #264]	@ (80046c8 <HAL_RCC_ClockConfig+0x264>)
 80045be:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80045c2:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	f003 0308 	and.w	r3, r3, #8
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d007      	beq.n	80045e0 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 80045d0:	4b3d      	ldr	r3, [pc, #244]	@ (80046c8 <HAL_RCC_ClockConfig+0x264>)
 80045d2:	689b      	ldr	r3, [r3, #8]
 80045d4:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80045d8:	4a3b      	ldr	r2, [pc, #236]	@ (80046c8 <HAL_RCC_ClockConfig+0x264>)
 80045da:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80045de:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80045e0:	4b39      	ldr	r3, [pc, #228]	@ (80046c8 <HAL_RCC_ClockConfig+0x264>)
 80045e2:	689b      	ldr	r3, [r3, #8]
 80045e4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	689b      	ldr	r3, [r3, #8]
 80045ec:	4936      	ldr	r1, [pc, #216]	@ (80046c8 <HAL_RCC_ClockConfig+0x264>)
 80045ee:	4313      	orrs	r3, r2
 80045f0:	608b      	str	r3, [r1, #8]
 80045f2:	e008      	b.n	8004606 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 80045f4:	697b      	ldr	r3, [r7, #20]
 80045f6:	2b80      	cmp	r3, #128	@ 0x80
 80045f8:	d105      	bne.n	8004606 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80045fa:	4b33      	ldr	r3, [pc, #204]	@ (80046c8 <HAL_RCC_ClockConfig+0x264>)
 80045fc:	689b      	ldr	r3, [r3, #8]
 80045fe:	4a32      	ldr	r2, [pc, #200]	@ (80046c8 <HAL_RCC_ClockConfig+0x264>)
 8004600:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004604:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004606:	4b2f      	ldr	r3, [pc, #188]	@ (80046c4 <HAL_RCC_ClockConfig+0x260>)
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	f003 030f 	and.w	r3, r3, #15
 800460e:	683a      	ldr	r2, [r7, #0]
 8004610:	429a      	cmp	r2, r3
 8004612:	d21d      	bcs.n	8004650 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004614:	4b2b      	ldr	r3, [pc, #172]	@ (80046c4 <HAL_RCC_ClockConfig+0x260>)
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	f023 020f 	bic.w	r2, r3, #15
 800461c:	4929      	ldr	r1, [pc, #164]	@ (80046c4 <HAL_RCC_ClockConfig+0x260>)
 800461e:	683b      	ldr	r3, [r7, #0]
 8004620:	4313      	orrs	r3, r2
 8004622:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8004624:	f7fe f898 	bl	8002758 <HAL_GetTick>
 8004628:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800462a:	e00a      	b.n	8004642 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800462c:	f7fe f894 	bl	8002758 <HAL_GetTick>
 8004630:	4602      	mov	r2, r0
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	1ad3      	subs	r3, r2, r3
 8004636:	f241 3288 	movw	r2, #5000	@ 0x1388
 800463a:	4293      	cmp	r3, r2
 800463c:	d901      	bls.n	8004642 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 800463e:	2303      	movs	r3, #3
 8004640:	e03b      	b.n	80046ba <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004642:	4b20      	ldr	r3, [pc, #128]	@ (80046c4 <HAL_RCC_ClockConfig+0x260>)
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	f003 030f 	and.w	r3, r3, #15
 800464a:	683a      	ldr	r2, [r7, #0]
 800464c:	429a      	cmp	r2, r3
 800464e:	d1ed      	bne.n	800462c <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	f003 0304 	and.w	r3, r3, #4
 8004658:	2b00      	cmp	r3, #0
 800465a:	d008      	beq.n	800466e <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800465c:	4b1a      	ldr	r3, [pc, #104]	@ (80046c8 <HAL_RCC_ClockConfig+0x264>)
 800465e:	689b      	ldr	r3, [r3, #8]
 8004660:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	68db      	ldr	r3, [r3, #12]
 8004668:	4917      	ldr	r1, [pc, #92]	@ (80046c8 <HAL_RCC_ClockConfig+0x264>)
 800466a:	4313      	orrs	r3, r2
 800466c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	f003 0308 	and.w	r3, r3, #8
 8004676:	2b00      	cmp	r3, #0
 8004678:	d009      	beq.n	800468e <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800467a:	4b13      	ldr	r3, [pc, #76]	@ (80046c8 <HAL_RCC_ClockConfig+0x264>)
 800467c:	689b      	ldr	r3, [r3, #8]
 800467e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	691b      	ldr	r3, [r3, #16]
 8004686:	00db      	lsls	r3, r3, #3
 8004688:	490f      	ldr	r1, [pc, #60]	@ (80046c8 <HAL_RCC_ClockConfig+0x264>)
 800468a:	4313      	orrs	r3, r2
 800468c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800468e:	f000 f825 	bl	80046dc <HAL_RCC_GetSysClockFreq>
 8004692:	4602      	mov	r2, r0
 8004694:	4b0c      	ldr	r3, [pc, #48]	@ (80046c8 <HAL_RCC_ClockConfig+0x264>)
 8004696:	689b      	ldr	r3, [r3, #8]
 8004698:	091b      	lsrs	r3, r3, #4
 800469a:	f003 030f 	and.w	r3, r3, #15
 800469e:	490c      	ldr	r1, [pc, #48]	@ (80046d0 <HAL_RCC_ClockConfig+0x26c>)
 80046a0:	5ccb      	ldrb	r3, [r1, r3]
 80046a2:	f003 031f 	and.w	r3, r3, #31
 80046a6:	fa22 f303 	lsr.w	r3, r2, r3
 80046aa:	4a0a      	ldr	r2, [pc, #40]	@ (80046d4 <HAL_RCC_ClockConfig+0x270>)
 80046ac:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80046ae:	4b0a      	ldr	r3, [pc, #40]	@ (80046d8 <HAL_RCC_ClockConfig+0x274>)
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	4618      	mov	r0, r3
 80046b4:	f7fe f804 	bl	80026c0 <HAL_InitTick>
 80046b8:	4603      	mov	r3, r0
}
 80046ba:	4618      	mov	r0, r3
 80046bc:	3718      	adds	r7, #24
 80046be:	46bd      	mov	sp, r7
 80046c0:	bd80      	pop	{r7, pc}
 80046c2:	bf00      	nop
 80046c4:	40022000 	.word	0x40022000
 80046c8:	40021000 	.word	0x40021000
 80046cc:	04c4b400 	.word	0x04c4b400
 80046d0:	080094dc 	.word	0x080094dc
 80046d4:	20000000 	.word	0x20000000
 80046d8:	20000004 	.word	0x20000004

080046dc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80046dc:	b480      	push	{r7}
 80046de:	b087      	sub	sp, #28
 80046e0:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80046e2:	4b2c      	ldr	r3, [pc, #176]	@ (8004794 <HAL_RCC_GetSysClockFreq+0xb8>)
 80046e4:	689b      	ldr	r3, [r3, #8]
 80046e6:	f003 030c 	and.w	r3, r3, #12
 80046ea:	2b04      	cmp	r3, #4
 80046ec:	d102      	bne.n	80046f4 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80046ee:	4b2a      	ldr	r3, [pc, #168]	@ (8004798 <HAL_RCC_GetSysClockFreq+0xbc>)
 80046f0:	613b      	str	r3, [r7, #16]
 80046f2:	e047      	b.n	8004784 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80046f4:	4b27      	ldr	r3, [pc, #156]	@ (8004794 <HAL_RCC_GetSysClockFreq+0xb8>)
 80046f6:	689b      	ldr	r3, [r3, #8]
 80046f8:	f003 030c 	and.w	r3, r3, #12
 80046fc:	2b08      	cmp	r3, #8
 80046fe:	d102      	bne.n	8004706 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004700:	4b26      	ldr	r3, [pc, #152]	@ (800479c <HAL_RCC_GetSysClockFreq+0xc0>)
 8004702:	613b      	str	r3, [r7, #16]
 8004704:	e03e      	b.n	8004784 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8004706:	4b23      	ldr	r3, [pc, #140]	@ (8004794 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004708:	689b      	ldr	r3, [r3, #8]
 800470a:	f003 030c 	and.w	r3, r3, #12
 800470e:	2b0c      	cmp	r3, #12
 8004710:	d136      	bne.n	8004780 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004712:	4b20      	ldr	r3, [pc, #128]	@ (8004794 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004714:	68db      	ldr	r3, [r3, #12]
 8004716:	f003 0303 	and.w	r3, r3, #3
 800471a:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800471c:	4b1d      	ldr	r3, [pc, #116]	@ (8004794 <HAL_RCC_GetSysClockFreq+0xb8>)
 800471e:	68db      	ldr	r3, [r3, #12]
 8004720:	091b      	lsrs	r3, r3, #4
 8004722:	f003 030f 	and.w	r3, r3, #15
 8004726:	3301      	adds	r3, #1
 8004728:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	2b03      	cmp	r3, #3
 800472e:	d10c      	bne.n	800474a <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004730:	4a1a      	ldr	r2, [pc, #104]	@ (800479c <HAL_RCC_GetSysClockFreq+0xc0>)
 8004732:	68bb      	ldr	r3, [r7, #8]
 8004734:	fbb2 f3f3 	udiv	r3, r2, r3
 8004738:	4a16      	ldr	r2, [pc, #88]	@ (8004794 <HAL_RCC_GetSysClockFreq+0xb8>)
 800473a:	68d2      	ldr	r2, [r2, #12]
 800473c:	0a12      	lsrs	r2, r2, #8
 800473e:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8004742:	fb02 f303 	mul.w	r3, r2, r3
 8004746:	617b      	str	r3, [r7, #20]
      break;
 8004748:	e00c      	b.n	8004764 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800474a:	4a13      	ldr	r2, [pc, #76]	@ (8004798 <HAL_RCC_GetSysClockFreq+0xbc>)
 800474c:	68bb      	ldr	r3, [r7, #8]
 800474e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004752:	4a10      	ldr	r2, [pc, #64]	@ (8004794 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004754:	68d2      	ldr	r2, [r2, #12]
 8004756:	0a12      	lsrs	r2, r2, #8
 8004758:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800475c:	fb02 f303 	mul.w	r3, r2, r3
 8004760:	617b      	str	r3, [r7, #20]
      break;
 8004762:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004764:	4b0b      	ldr	r3, [pc, #44]	@ (8004794 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004766:	68db      	ldr	r3, [r3, #12]
 8004768:	0e5b      	lsrs	r3, r3, #25
 800476a:	f003 0303 	and.w	r3, r3, #3
 800476e:	3301      	adds	r3, #1
 8004770:	005b      	lsls	r3, r3, #1
 8004772:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8004774:	697a      	ldr	r2, [r7, #20]
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	fbb2 f3f3 	udiv	r3, r2, r3
 800477c:	613b      	str	r3, [r7, #16]
 800477e:	e001      	b.n	8004784 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8004780:	2300      	movs	r3, #0
 8004782:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8004784:	693b      	ldr	r3, [r7, #16]
}
 8004786:	4618      	mov	r0, r3
 8004788:	371c      	adds	r7, #28
 800478a:	46bd      	mov	sp, r7
 800478c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004790:	4770      	bx	lr
 8004792:	bf00      	nop
 8004794:	40021000 	.word	0x40021000
 8004798:	00f42400 	.word	0x00f42400
 800479c:	007a1200 	.word	0x007a1200

080047a0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80047a0:	b480      	push	{r7}
 80047a2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80047a4:	4b03      	ldr	r3, [pc, #12]	@ (80047b4 <HAL_RCC_GetHCLKFreq+0x14>)
 80047a6:	681b      	ldr	r3, [r3, #0]
}
 80047a8:	4618      	mov	r0, r3
 80047aa:	46bd      	mov	sp, r7
 80047ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047b0:	4770      	bx	lr
 80047b2:	bf00      	nop
 80047b4:	20000000 	.word	0x20000000

080047b8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80047b8:	b580      	push	{r7, lr}
 80047ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80047bc:	f7ff fff0 	bl	80047a0 <HAL_RCC_GetHCLKFreq>
 80047c0:	4602      	mov	r2, r0
 80047c2:	4b06      	ldr	r3, [pc, #24]	@ (80047dc <HAL_RCC_GetPCLK1Freq+0x24>)
 80047c4:	689b      	ldr	r3, [r3, #8]
 80047c6:	0a1b      	lsrs	r3, r3, #8
 80047c8:	f003 0307 	and.w	r3, r3, #7
 80047cc:	4904      	ldr	r1, [pc, #16]	@ (80047e0 <HAL_RCC_GetPCLK1Freq+0x28>)
 80047ce:	5ccb      	ldrb	r3, [r1, r3]
 80047d0:	f003 031f 	and.w	r3, r3, #31
 80047d4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80047d8:	4618      	mov	r0, r3
 80047da:	bd80      	pop	{r7, pc}
 80047dc:	40021000 	.word	0x40021000
 80047e0:	080094ec 	.word	0x080094ec

080047e4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80047e4:	b580      	push	{r7, lr}
 80047e6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80047e8:	f7ff ffda 	bl	80047a0 <HAL_RCC_GetHCLKFreq>
 80047ec:	4602      	mov	r2, r0
 80047ee:	4b06      	ldr	r3, [pc, #24]	@ (8004808 <HAL_RCC_GetPCLK2Freq+0x24>)
 80047f0:	689b      	ldr	r3, [r3, #8]
 80047f2:	0adb      	lsrs	r3, r3, #11
 80047f4:	f003 0307 	and.w	r3, r3, #7
 80047f8:	4904      	ldr	r1, [pc, #16]	@ (800480c <HAL_RCC_GetPCLK2Freq+0x28>)
 80047fa:	5ccb      	ldrb	r3, [r1, r3]
 80047fc:	f003 031f 	and.w	r3, r3, #31
 8004800:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004804:	4618      	mov	r0, r3
 8004806:	bd80      	pop	{r7, pc}
 8004808:	40021000 	.word	0x40021000
 800480c:	080094ec 	.word	0x080094ec

08004810 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8004810:	b480      	push	{r7}
 8004812:	b087      	sub	sp, #28
 8004814:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004816:	4b1e      	ldr	r3, [pc, #120]	@ (8004890 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004818:	68db      	ldr	r3, [r3, #12]
 800481a:	f003 0303 	and.w	r3, r3, #3
 800481e:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004820:	4b1b      	ldr	r3, [pc, #108]	@ (8004890 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004822:	68db      	ldr	r3, [r3, #12]
 8004824:	091b      	lsrs	r3, r3, #4
 8004826:	f003 030f 	and.w	r3, r3, #15
 800482a:	3301      	adds	r3, #1
 800482c:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800482e:	693b      	ldr	r3, [r7, #16]
 8004830:	2b03      	cmp	r3, #3
 8004832:	d10c      	bne.n	800484e <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004834:	4a17      	ldr	r2, [pc, #92]	@ (8004894 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	fbb2 f3f3 	udiv	r3, r2, r3
 800483c:	4a14      	ldr	r2, [pc, #80]	@ (8004890 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800483e:	68d2      	ldr	r2, [r2, #12]
 8004840:	0a12      	lsrs	r2, r2, #8
 8004842:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8004846:	fb02 f303 	mul.w	r3, r2, r3
 800484a:	617b      	str	r3, [r7, #20]
    break;
 800484c:	e00c      	b.n	8004868 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800484e:	4a12      	ldr	r2, [pc, #72]	@ (8004898 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	fbb2 f3f3 	udiv	r3, r2, r3
 8004856:	4a0e      	ldr	r2, [pc, #56]	@ (8004890 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004858:	68d2      	ldr	r2, [r2, #12]
 800485a:	0a12      	lsrs	r2, r2, #8
 800485c:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8004860:	fb02 f303 	mul.w	r3, r2, r3
 8004864:	617b      	str	r3, [r7, #20]
    break;
 8004866:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004868:	4b09      	ldr	r3, [pc, #36]	@ (8004890 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800486a:	68db      	ldr	r3, [r3, #12]
 800486c:	0e5b      	lsrs	r3, r3, #25
 800486e:	f003 0303 	and.w	r3, r3, #3
 8004872:	3301      	adds	r3, #1
 8004874:	005b      	lsls	r3, r3, #1
 8004876:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8004878:	697a      	ldr	r2, [r7, #20]
 800487a:	68bb      	ldr	r3, [r7, #8]
 800487c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004880:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8004882:	687b      	ldr	r3, [r7, #4]
}
 8004884:	4618      	mov	r0, r3
 8004886:	371c      	adds	r7, #28
 8004888:	46bd      	mov	sp, r7
 800488a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800488e:	4770      	bx	lr
 8004890:	40021000 	.word	0x40021000
 8004894:	007a1200 	.word	0x007a1200
 8004898:	00f42400 	.word	0x00f42400

0800489c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800489c:	b580      	push	{r7, lr}
 800489e:	b086      	sub	sp, #24
 80048a0:	af00      	add	r7, sp, #0
 80048a2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80048a4:	2300      	movs	r3, #0
 80048a6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80048a8:	2300      	movs	r3, #0
 80048aa:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	f000 8098 	beq.w	80049ea <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80048ba:	2300      	movs	r3, #0
 80048bc:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80048be:	4b43      	ldr	r3, [pc, #268]	@ (80049cc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80048c0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80048c2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d10d      	bne.n	80048e6 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80048ca:	4b40      	ldr	r3, [pc, #256]	@ (80049cc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80048cc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80048ce:	4a3f      	ldr	r2, [pc, #252]	@ (80049cc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80048d0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80048d4:	6593      	str	r3, [r2, #88]	@ 0x58
 80048d6:	4b3d      	ldr	r3, [pc, #244]	@ (80049cc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80048d8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80048da:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80048de:	60bb      	str	r3, [r7, #8]
 80048e0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80048e2:	2301      	movs	r3, #1
 80048e4:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80048e6:	4b3a      	ldr	r3, [pc, #232]	@ (80049d0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	4a39      	ldr	r2, [pc, #228]	@ (80049d0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80048ec:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80048f0:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80048f2:	f7fd ff31 	bl	8002758 <HAL_GetTick>
 80048f6:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80048f8:	e009      	b.n	800490e <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80048fa:	f7fd ff2d 	bl	8002758 <HAL_GetTick>
 80048fe:	4602      	mov	r2, r0
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	1ad3      	subs	r3, r2, r3
 8004904:	2b02      	cmp	r3, #2
 8004906:	d902      	bls.n	800490e <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8004908:	2303      	movs	r3, #3
 800490a:	74fb      	strb	r3, [r7, #19]
        break;
 800490c:	e005      	b.n	800491a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800490e:	4b30      	ldr	r3, [pc, #192]	@ (80049d0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004916:	2b00      	cmp	r3, #0
 8004918:	d0ef      	beq.n	80048fa <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 800491a:	7cfb      	ldrb	r3, [r7, #19]
 800491c:	2b00      	cmp	r3, #0
 800491e:	d159      	bne.n	80049d4 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004920:	4b2a      	ldr	r3, [pc, #168]	@ (80049cc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004922:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004926:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800492a:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800492c:	697b      	ldr	r3, [r7, #20]
 800492e:	2b00      	cmp	r3, #0
 8004930:	d01e      	beq.n	8004970 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004936:	697a      	ldr	r2, [r7, #20]
 8004938:	429a      	cmp	r2, r3
 800493a:	d019      	beq.n	8004970 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800493c:	4b23      	ldr	r3, [pc, #140]	@ (80049cc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800493e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004942:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004946:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004948:	4b20      	ldr	r3, [pc, #128]	@ (80049cc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800494a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800494e:	4a1f      	ldr	r2, [pc, #124]	@ (80049cc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004950:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004954:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004958:	4b1c      	ldr	r3, [pc, #112]	@ (80049cc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800495a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800495e:	4a1b      	ldr	r2, [pc, #108]	@ (80049cc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004960:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004964:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004968:	4a18      	ldr	r2, [pc, #96]	@ (80049cc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800496a:	697b      	ldr	r3, [r7, #20]
 800496c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004970:	697b      	ldr	r3, [r7, #20]
 8004972:	f003 0301 	and.w	r3, r3, #1
 8004976:	2b00      	cmp	r3, #0
 8004978:	d016      	beq.n	80049a8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800497a:	f7fd feed 	bl	8002758 <HAL_GetTick>
 800497e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004980:	e00b      	b.n	800499a <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004982:	f7fd fee9 	bl	8002758 <HAL_GetTick>
 8004986:	4602      	mov	r2, r0
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	1ad3      	subs	r3, r2, r3
 800498c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004990:	4293      	cmp	r3, r2
 8004992:	d902      	bls.n	800499a <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8004994:	2303      	movs	r3, #3
 8004996:	74fb      	strb	r3, [r7, #19]
            break;
 8004998:	e006      	b.n	80049a8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800499a:	4b0c      	ldr	r3, [pc, #48]	@ (80049cc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800499c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80049a0:	f003 0302 	and.w	r3, r3, #2
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	d0ec      	beq.n	8004982 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 80049a8:	7cfb      	ldrb	r3, [r7, #19]
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d10b      	bne.n	80049c6 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80049ae:	4b07      	ldr	r3, [pc, #28]	@ (80049cc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80049b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80049b4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80049bc:	4903      	ldr	r1, [pc, #12]	@ (80049cc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80049be:	4313      	orrs	r3, r2
 80049c0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80049c4:	e008      	b.n	80049d8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80049c6:	7cfb      	ldrb	r3, [r7, #19]
 80049c8:	74bb      	strb	r3, [r7, #18]
 80049ca:	e005      	b.n	80049d8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80049cc:	40021000 	.word	0x40021000
 80049d0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80049d4:	7cfb      	ldrb	r3, [r7, #19]
 80049d6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80049d8:	7c7b      	ldrb	r3, [r7, #17]
 80049da:	2b01      	cmp	r3, #1
 80049dc:	d105      	bne.n	80049ea <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80049de:	4ba6      	ldr	r3, [pc, #664]	@ (8004c78 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80049e0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80049e2:	4aa5      	ldr	r2, [pc, #660]	@ (8004c78 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80049e4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80049e8:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	f003 0301 	and.w	r3, r3, #1
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d00a      	beq.n	8004a0c <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80049f6:	4ba0      	ldr	r3, [pc, #640]	@ (8004c78 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80049f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80049fc:	f023 0203 	bic.w	r2, r3, #3
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	685b      	ldr	r3, [r3, #4]
 8004a04:	499c      	ldr	r1, [pc, #624]	@ (8004c78 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004a06:	4313      	orrs	r3, r2
 8004a08:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	f003 0302 	and.w	r3, r3, #2
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	d00a      	beq.n	8004a2e <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004a18:	4b97      	ldr	r3, [pc, #604]	@ (8004c78 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004a1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004a1e:	f023 020c 	bic.w	r2, r3, #12
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	689b      	ldr	r3, [r3, #8]
 8004a26:	4994      	ldr	r1, [pc, #592]	@ (8004c78 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004a28:	4313      	orrs	r3, r2
 8004a2a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	f003 0304 	and.w	r3, r3, #4
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d00a      	beq.n	8004a50 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004a3a:	4b8f      	ldr	r3, [pc, #572]	@ (8004c78 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004a3c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004a40:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	68db      	ldr	r3, [r3, #12]
 8004a48:	498b      	ldr	r1, [pc, #556]	@ (8004c78 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004a4a:	4313      	orrs	r3, r2
 8004a4c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	f003 0308 	and.w	r3, r3, #8
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d00a      	beq.n	8004a72 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004a5c:	4b86      	ldr	r3, [pc, #536]	@ (8004c78 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004a5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004a62:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	691b      	ldr	r3, [r3, #16]
 8004a6a:	4983      	ldr	r1, [pc, #524]	@ (8004c78 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004a6c:	4313      	orrs	r3, r2
 8004a6e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	f003 0320 	and.w	r3, r3, #32
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d00a      	beq.n	8004a94 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004a7e:	4b7e      	ldr	r3, [pc, #504]	@ (8004c78 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004a80:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004a84:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	695b      	ldr	r3, [r3, #20]
 8004a8c:	497a      	ldr	r1, [pc, #488]	@ (8004c78 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004a8e:	4313      	orrs	r3, r2
 8004a90:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	d00a      	beq.n	8004ab6 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004aa0:	4b75      	ldr	r3, [pc, #468]	@ (8004c78 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004aa2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004aa6:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	699b      	ldr	r3, [r3, #24]
 8004aae:	4972      	ldr	r1, [pc, #456]	@ (8004c78 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004ab0:	4313      	orrs	r3, r2
 8004ab2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d00a      	beq.n	8004ad8 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004ac2:	4b6d      	ldr	r3, [pc, #436]	@ (8004c78 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004ac4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004ac8:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	69db      	ldr	r3, [r3, #28]
 8004ad0:	4969      	ldr	r1, [pc, #420]	@ (8004c78 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004ad2:	4313      	orrs	r3, r2
 8004ad4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d00a      	beq.n	8004afa <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004ae4:	4b64      	ldr	r3, [pc, #400]	@ (8004c78 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004ae6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004aea:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	6a1b      	ldr	r3, [r3, #32]
 8004af2:	4961      	ldr	r1, [pc, #388]	@ (8004c78 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004af4:	4313      	orrs	r3, r2
 8004af6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d00a      	beq.n	8004b1c <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004b06:	4b5c      	ldr	r3, [pc, #368]	@ (8004c78 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004b08:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004b0c:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b14:	4958      	ldr	r1, [pc, #352]	@ (8004c78 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004b16:	4313      	orrs	r3, r2
 8004b18:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d015      	beq.n	8004b54 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004b28:	4b53      	ldr	r3, [pc, #332]	@ (8004c78 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004b2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004b2e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b36:	4950      	ldr	r1, [pc, #320]	@ (8004c78 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004b38:	4313      	orrs	r3, r2
 8004b3a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b42:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004b46:	d105      	bne.n	8004b54 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004b48:	4b4b      	ldr	r3, [pc, #300]	@ (8004c78 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004b4a:	68db      	ldr	r3, [r3, #12]
 8004b4c:	4a4a      	ldr	r2, [pc, #296]	@ (8004c78 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004b4e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004b52:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d015      	beq.n	8004b8c <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004b60:	4b45      	ldr	r3, [pc, #276]	@ (8004c78 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004b62:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004b66:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b6e:	4942      	ldr	r1, [pc, #264]	@ (8004c78 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004b70:	4313      	orrs	r3, r2
 8004b72:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b7a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004b7e:	d105      	bne.n	8004b8c <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004b80:	4b3d      	ldr	r3, [pc, #244]	@ (8004c78 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004b82:	68db      	ldr	r3, [r3, #12]
 8004b84:	4a3c      	ldr	r2, [pc, #240]	@ (8004c78 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004b86:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004b8a:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	d015      	beq.n	8004bc4 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8004b98:	4b37      	ldr	r3, [pc, #220]	@ (8004c78 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004b9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004b9e:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004ba6:	4934      	ldr	r1, [pc, #208]	@ (8004c78 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004ba8:	4313      	orrs	r3, r2
 8004baa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004bb2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004bb6:	d105      	bne.n	8004bc4 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004bb8:	4b2f      	ldr	r3, [pc, #188]	@ (8004c78 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004bba:	68db      	ldr	r3, [r3, #12]
 8004bbc:	4a2e      	ldr	r2, [pc, #184]	@ (8004c78 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004bbe:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004bc2:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	d015      	beq.n	8004bfc <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004bd0:	4b29      	ldr	r3, [pc, #164]	@ (8004c78 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004bd2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004bd6:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004bde:	4926      	ldr	r1, [pc, #152]	@ (8004c78 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004be0:	4313      	orrs	r3, r2
 8004be2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004bea:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004bee:	d105      	bne.n	8004bfc <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004bf0:	4b21      	ldr	r3, [pc, #132]	@ (8004c78 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004bf2:	68db      	ldr	r3, [r3, #12]
 8004bf4:	4a20      	ldr	r2, [pc, #128]	@ (8004c78 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004bf6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004bfa:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d015      	beq.n	8004c34 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004c08:	4b1b      	ldr	r3, [pc, #108]	@ (8004c78 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004c0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004c0e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004c16:	4918      	ldr	r1, [pc, #96]	@ (8004c78 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004c18:	4313      	orrs	r3, r2
 8004c1a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004c22:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004c26:	d105      	bne.n	8004c34 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004c28:	4b13      	ldr	r3, [pc, #76]	@ (8004c78 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004c2a:	68db      	ldr	r3, [r3, #12]
 8004c2c:	4a12      	ldr	r2, [pc, #72]	@ (8004c78 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004c2e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004c32:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d015      	beq.n	8004c6c <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8004c40:	4b0d      	ldr	r3, [pc, #52]	@ (8004c78 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004c42:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004c46:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004c4e:	490a      	ldr	r1, [pc, #40]	@ (8004c78 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004c50:	4313      	orrs	r3, r2
 8004c52:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004c5a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004c5e:	d105      	bne.n	8004c6c <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8004c60:	4b05      	ldr	r3, [pc, #20]	@ (8004c78 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004c62:	68db      	ldr	r3, [r3, #12]
 8004c64:	4a04      	ldr	r2, [pc, #16]	@ (8004c78 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004c66:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004c6a:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8004c6c:	7cbb      	ldrb	r3, [r7, #18]
}
 8004c6e:	4618      	mov	r0, r3
 8004c70:	3718      	adds	r7, #24
 8004c72:	46bd      	mov	sp, r7
 8004c74:	bd80      	pop	{r7, pc}
 8004c76:	bf00      	nop
 8004c78:	40021000 	.word	0x40021000

08004c7c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004c7c:	b580      	push	{r7, lr}
 8004c7e:	b084      	sub	sp, #16
 8004c80:	af00      	add	r7, sp, #0
 8004c82:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d101      	bne.n	8004c8e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004c8a:	2301      	movs	r3, #1
 8004c8c:	e09d      	b.n	8004dca <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d108      	bne.n	8004ca8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	685b      	ldr	r3, [r3, #4]
 8004c9a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004c9e:	d009      	beq.n	8004cb4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	2200      	movs	r2, #0
 8004ca4:	61da      	str	r2, [r3, #28]
 8004ca6:	e005      	b.n	8004cb4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	2200      	movs	r2, #0
 8004cac:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	2200      	movs	r2, #0
 8004cb2:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	2200      	movs	r2, #0
 8004cb8:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8004cc0:	b2db      	uxtb	r3, r3
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d106      	bne.n	8004cd4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	2200      	movs	r2, #0
 8004cca:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004cce:	6878      	ldr	r0, [r7, #4]
 8004cd0:	f7fd fab4 	bl	800223c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	2202      	movs	r2, #2
 8004cd8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	681a      	ldr	r2, [r3, #0]
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004cea:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	68db      	ldr	r3, [r3, #12]
 8004cf0:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8004cf4:	d902      	bls.n	8004cfc <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8004cf6:	2300      	movs	r3, #0
 8004cf8:	60fb      	str	r3, [r7, #12]
 8004cfa:	e002      	b.n	8004d02 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8004cfc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8004d00:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	68db      	ldr	r3, [r3, #12]
 8004d06:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8004d0a:	d007      	beq.n	8004d1c <HAL_SPI_Init+0xa0>
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	68db      	ldr	r3, [r3, #12]
 8004d10:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8004d14:	d002      	beq.n	8004d1c <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	2200      	movs	r2, #0
 8004d1a:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	685b      	ldr	r3, [r3, #4]
 8004d20:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	689b      	ldr	r3, [r3, #8]
 8004d28:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8004d2c:	431a      	orrs	r2, r3
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	691b      	ldr	r3, [r3, #16]
 8004d32:	f003 0302 	and.w	r3, r3, #2
 8004d36:	431a      	orrs	r2, r3
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	695b      	ldr	r3, [r3, #20]
 8004d3c:	f003 0301 	and.w	r3, r3, #1
 8004d40:	431a      	orrs	r2, r3
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	699b      	ldr	r3, [r3, #24]
 8004d46:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004d4a:	431a      	orrs	r2, r3
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	69db      	ldr	r3, [r3, #28]
 8004d50:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004d54:	431a      	orrs	r2, r3
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	6a1b      	ldr	r3, [r3, #32]
 8004d5a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004d5e:	ea42 0103 	orr.w	r1, r2, r3
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d66:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	430a      	orrs	r2, r1
 8004d70:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	699b      	ldr	r3, [r3, #24]
 8004d76:	0c1b      	lsrs	r3, r3, #16
 8004d78:	f003 0204 	and.w	r2, r3, #4
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d80:	f003 0310 	and.w	r3, r3, #16
 8004d84:	431a      	orrs	r2, r3
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004d8a:	f003 0308 	and.w	r3, r3, #8
 8004d8e:	431a      	orrs	r2, r3
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	68db      	ldr	r3, [r3, #12]
 8004d94:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8004d98:	ea42 0103 	orr.w	r1, r2, r3
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	430a      	orrs	r2, r1
 8004da8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	69da      	ldr	r2, [r3, #28]
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004db8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	2200      	movs	r2, #0
 8004dbe:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	2201      	movs	r2, #1
 8004dc4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8004dc8:	2300      	movs	r3, #0
}
 8004dca:	4618      	mov	r0, r3
 8004dcc:	3710      	adds	r7, #16
 8004dce:	46bd      	mov	sp, r7
 8004dd0:	bd80      	pop	{r7, pc}

08004dd2 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8004dd2:	b580      	push	{r7, lr}
 8004dd4:	b08a      	sub	sp, #40	@ 0x28
 8004dd6:	af00      	add	r7, sp, #0
 8004dd8:	60f8      	str	r0, [r7, #12]
 8004dda:	60b9      	str	r1, [r7, #8]
 8004ddc:	607a      	str	r2, [r7, #4]
 8004dde:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8004de0:	2301      	movs	r3, #1
 8004de2:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004de4:	f7fd fcb8 	bl	8002758 <HAL_GetTick>
 8004de8:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8004df0:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	685b      	ldr	r3, [r3, #4]
 8004df6:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8004df8:	887b      	ldrh	r3, [r7, #2]
 8004dfa:	82fb      	strh	r3, [r7, #22]
  initial_RxXferCount = Size;
 8004dfc:	887b      	ldrh	r3, [r7, #2]
 8004dfe:	82bb      	strh	r3, [r7, #20]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004e00:	7ffb      	ldrb	r3, [r7, #31]
 8004e02:	2b01      	cmp	r3, #1
 8004e04:	d00c      	beq.n	8004e20 <HAL_SPI_TransmitReceive+0x4e>
 8004e06:	69bb      	ldr	r3, [r7, #24]
 8004e08:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004e0c:	d106      	bne.n	8004e1c <HAL_SPI_TransmitReceive+0x4a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	689b      	ldr	r3, [r3, #8]
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d102      	bne.n	8004e1c <HAL_SPI_TransmitReceive+0x4a>
 8004e16:	7ffb      	ldrb	r3, [r7, #31]
 8004e18:	2b04      	cmp	r3, #4
 8004e1a:	d001      	beq.n	8004e20 <HAL_SPI_TransmitReceive+0x4e>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 8004e1c:	2302      	movs	r3, #2
 8004e1e:	e1f3      	b.n	8005208 <HAL_SPI_TransmitReceive+0x436>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004e20:	68bb      	ldr	r3, [r7, #8]
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	d005      	beq.n	8004e32 <HAL_SPI_TransmitReceive+0x60>
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	d002      	beq.n	8004e32 <HAL_SPI_TransmitReceive+0x60>
 8004e2c:	887b      	ldrh	r3, [r7, #2]
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d101      	bne.n	8004e36 <HAL_SPI_TransmitReceive+0x64>
  {
    return HAL_ERROR;
 8004e32:	2301      	movs	r3, #1
 8004e34:	e1e8      	b.n	8005208 <HAL_SPI_TransmitReceive+0x436>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8004e3c:	2b01      	cmp	r3, #1
 8004e3e:	d101      	bne.n	8004e44 <HAL_SPI_TransmitReceive+0x72>
 8004e40:	2302      	movs	r3, #2
 8004e42:	e1e1      	b.n	8005208 <HAL_SPI_TransmitReceive+0x436>
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	2201      	movs	r2, #1
 8004e48:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8004e52:	b2db      	uxtb	r3, r3
 8004e54:	2b04      	cmp	r3, #4
 8004e56:	d003      	beq.n	8004e60 <HAL_SPI_TransmitReceive+0x8e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	2205      	movs	r2, #5
 8004e5c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	2200      	movs	r2, #0
 8004e64:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	687a      	ldr	r2, [r7, #4]
 8004e6a:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	887a      	ldrh	r2, [r7, #2]
 8004e70:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	887a      	ldrh	r2, [r7, #2]
 8004e78:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	68ba      	ldr	r2, [r7, #8]
 8004e80:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	887a      	ldrh	r2, [r7, #2]
 8004e86:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	887a      	ldrh	r2, [r7, #2]
 8004e8c:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	2200      	movs	r2, #0
 8004e92:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	2200      	movs	r2, #0
 8004e98:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	68db      	ldr	r3, [r3, #12]
 8004e9e:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8004ea2:	d802      	bhi.n	8004eaa <HAL_SPI_TransmitReceive+0xd8>
 8004ea4:	8abb      	ldrh	r3, [r7, #20]
 8004ea6:	2b01      	cmp	r3, #1
 8004ea8:	d908      	bls.n	8004ebc <HAL_SPI_TransmitReceive+0xea>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	685a      	ldr	r2, [r3, #4]
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8004eb8:	605a      	str	r2, [r3, #4]
 8004eba:	e007      	b.n	8004ecc <HAL_SPI_TransmitReceive+0xfa>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	685a      	ldr	r2, [r3, #4]
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8004eca:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004ed6:	2b40      	cmp	r3, #64	@ 0x40
 8004ed8:	d007      	beq.n	8004eea <HAL_SPI_TransmitReceive+0x118>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	681a      	ldr	r2, [r3, #0]
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004ee8:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	68db      	ldr	r3, [r3, #12]
 8004eee:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8004ef2:	f240 8083 	bls.w	8004ffc <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	685b      	ldr	r3, [r3, #4]
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d002      	beq.n	8004f04 <HAL_SPI_TransmitReceive+0x132>
 8004efe:	8afb      	ldrh	r3, [r7, #22]
 8004f00:	2b01      	cmp	r3, #1
 8004f02:	d16f      	bne.n	8004fe4 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004f08:	881a      	ldrh	r2, [r3, #0]
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004f14:	1c9a      	adds	r2, r3, #2
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004f1e:	b29b      	uxth	r3, r3
 8004f20:	3b01      	subs	r3, #1
 8004f22:	b29a      	uxth	r2, r3
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004f28:	e05c      	b.n	8004fe4 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	689b      	ldr	r3, [r3, #8]
 8004f30:	f003 0302 	and.w	r3, r3, #2
 8004f34:	2b02      	cmp	r3, #2
 8004f36:	d11b      	bne.n	8004f70 <HAL_SPI_TransmitReceive+0x19e>
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004f3c:	b29b      	uxth	r3, r3
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d016      	beq.n	8004f70 <HAL_SPI_TransmitReceive+0x19e>
 8004f42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f44:	2b01      	cmp	r3, #1
 8004f46:	d113      	bne.n	8004f70 <HAL_SPI_TransmitReceive+0x19e>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004f4c:	881a      	ldrh	r2, [r3, #0]
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004f58:	1c9a      	adds	r2, r3, #2
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004f62:	b29b      	uxth	r3, r3
 8004f64:	3b01      	subs	r3, #1
 8004f66:	b29a      	uxth	r2, r3
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004f6c:	2300      	movs	r3, #0
 8004f6e:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	689b      	ldr	r3, [r3, #8]
 8004f76:	f003 0301 	and.w	r3, r3, #1
 8004f7a:	2b01      	cmp	r3, #1
 8004f7c:	d11c      	bne.n	8004fb8 <HAL_SPI_TransmitReceive+0x1e6>
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8004f84:	b29b      	uxth	r3, r3
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d016      	beq.n	8004fb8 <HAL_SPI_TransmitReceive+0x1e6>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	68da      	ldr	r2, [r3, #12]
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f94:	b292      	uxth	r2, r2
 8004f96:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f9c:	1c9a      	adds	r2, r3, #2
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8004fa8:	b29b      	uxth	r3, r3
 8004faa:	3b01      	subs	r3, #1
 8004fac:	b29a      	uxth	r2, r3
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004fb4:	2301      	movs	r3, #1
 8004fb6:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004fb8:	f7fd fbce 	bl	8002758 <HAL_GetTick>
 8004fbc:	4602      	mov	r2, r0
 8004fbe:	6a3b      	ldr	r3, [r7, #32]
 8004fc0:	1ad3      	subs	r3, r2, r3
 8004fc2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004fc4:	429a      	cmp	r2, r3
 8004fc6:	d80d      	bhi.n	8004fe4 <HAL_SPI_TransmitReceive+0x212>
 8004fc8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004fca:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004fce:	d009      	beq.n	8004fe4 <HAL_SPI_TransmitReceive+0x212>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	2201      	movs	r2, #1
 8004fd4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	2200      	movs	r2, #0
 8004fdc:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 8004fe0:	2303      	movs	r3, #3
 8004fe2:	e111      	b.n	8005208 <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004fe8:	b29b      	uxth	r3, r3
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d19d      	bne.n	8004f2a <HAL_SPI_TransmitReceive+0x158>
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8004ff4:	b29b      	uxth	r3, r3
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d197      	bne.n	8004f2a <HAL_SPI_TransmitReceive+0x158>
 8004ffa:	e0e5      	b.n	80051c8 <HAL_SPI_TransmitReceive+0x3f6>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	685b      	ldr	r3, [r3, #4]
 8005000:	2b00      	cmp	r3, #0
 8005002:	d003      	beq.n	800500c <HAL_SPI_TransmitReceive+0x23a>
 8005004:	8afb      	ldrh	r3, [r7, #22]
 8005006:	2b01      	cmp	r3, #1
 8005008:	f040 80d1 	bne.w	80051ae <HAL_SPI_TransmitReceive+0x3dc>
    {
      if (hspi->TxXferCount > 1U)
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005010:	b29b      	uxth	r3, r3
 8005012:	2b01      	cmp	r3, #1
 8005014:	d912      	bls.n	800503c <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800501a:	881a      	ldrh	r2, [r3, #0]
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005026:	1c9a      	adds	r2, r3, #2
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005030:	b29b      	uxth	r3, r3
 8005032:	3b02      	subs	r3, #2
 8005034:	b29a      	uxth	r2, r3
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800503a:	e0b8      	b.n	80051ae <HAL_SPI_TransmitReceive+0x3dc>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	330c      	adds	r3, #12
 8005046:	7812      	ldrb	r2, [r2, #0]
 8005048:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800504e:	1c5a      	adds	r2, r3, #1
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005058:	b29b      	uxth	r3, r3
 800505a:	3b01      	subs	r3, #1
 800505c:	b29a      	uxth	r2, r3
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	87da      	strh	r2, [r3, #62]	@ 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005062:	e0a4      	b.n	80051ae <HAL_SPI_TransmitReceive+0x3dc>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	689b      	ldr	r3, [r3, #8]
 800506a:	f003 0302 	and.w	r3, r3, #2
 800506e:	2b02      	cmp	r3, #2
 8005070:	d134      	bne.n	80050dc <HAL_SPI_TransmitReceive+0x30a>
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005076:	b29b      	uxth	r3, r3
 8005078:	2b00      	cmp	r3, #0
 800507a:	d02f      	beq.n	80050dc <HAL_SPI_TransmitReceive+0x30a>
 800507c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800507e:	2b01      	cmp	r3, #1
 8005080:	d12c      	bne.n	80050dc <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005086:	b29b      	uxth	r3, r3
 8005088:	2b01      	cmp	r3, #1
 800508a:	d912      	bls.n	80050b2 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005090:	881a      	ldrh	r2, [r3, #0]
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800509c:	1c9a      	adds	r2, r3, #2
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80050a6:	b29b      	uxth	r3, r3
 80050a8:	3b02      	subs	r3, #2
 80050aa:	b29a      	uxth	r2, r3
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80050b0:	e012      	b.n	80050d8 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	330c      	adds	r3, #12
 80050bc:	7812      	ldrb	r2, [r2, #0]
 80050be:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80050c4:	1c5a      	adds	r2, r3, #1
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80050ce:	b29b      	uxth	r3, r3
 80050d0:	3b01      	subs	r3, #1
 80050d2:	b29a      	uxth	r2, r3
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80050d8:	2300      	movs	r3, #0
 80050da:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	689b      	ldr	r3, [r3, #8]
 80050e2:	f003 0301 	and.w	r3, r3, #1
 80050e6:	2b01      	cmp	r3, #1
 80050e8:	d148      	bne.n	800517c <HAL_SPI_TransmitReceive+0x3aa>
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80050f0:	b29b      	uxth	r3, r3
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d042      	beq.n	800517c <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80050fc:	b29b      	uxth	r3, r3
 80050fe:	2b01      	cmp	r3, #1
 8005100:	d923      	bls.n	800514a <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	68da      	ldr	r2, [r3, #12]
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800510c:	b292      	uxth	r2, r2
 800510e:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005114:	1c9a      	adds	r2, r3, #2
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005120:	b29b      	uxth	r3, r3
 8005122:	3b02      	subs	r3, #2
 8005124:	b29a      	uxth	r2, r3
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005132:	b29b      	uxth	r3, r3
 8005134:	2b01      	cmp	r3, #1
 8005136:	d81f      	bhi.n	8005178 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	685a      	ldr	r2, [r3, #4]
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8005146:	605a      	str	r2, [r3, #4]
 8005148:	e016      	b.n	8005178 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	f103 020c 	add.w	r2, r3, #12
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005156:	7812      	ldrb	r2, [r2, #0]
 8005158:	b2d2      	uxtb	r2, r2
 800515a:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005160:	1c5a      	adds	r2, r3, #1
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800516c:	b29b      	uxth	r3, r3
 800516e:	3b01      	subs	r3, #1
 8005170:	b29a      	uxth	r2, r3
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005178:	2301      	movs	r3, #1
 800517a:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800517c:	f7fd faec 	bl	8002758 <HAL_GetTick>
 8005180:	4602      	mov	r2, r0
 8005182:	6a3b      	ldr	r3, [r7, #32]
 8005184:	1ad3      	subs	r3, r2, r3
 8005186:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005188:	429a      	cmp	r2, r3
 800518a:	d803      	bhi.n	8005194 <HAL_SPI_TransmitReceive+0x3c2>
 800518c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800518e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005192:	d102      	bne.n	800519a <HAL_SPI_TransmitReceive+0x3c8>
 8005194:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005196:	2b00      	cmp	r3, #0
 8005198:	d109      	bne.n	80051ae <HAL_SPI_TransmitReceive+0x3dc>
      {
        hspi->State = HAL_SPI_STATE_READY;
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	2201      	movs	r2, #1
 800519e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	2200      	movs	r2, #0
 80051a6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 80051aa:	2303      	movs	r3, #3
 80051ac:	e02c      	b.n	8005208 <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80051b2:	b29b      	uxth	r3, r3
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	f47f af55 	bne.w	8005064 <HAL_SPI_TransmitReceive+0x292>
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80051c0:	b29b      	uxth	r3, r3
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	f47f af4e 	bne.w	8005064 <HAL_SPI_TransmitReceive+0x292>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80051c8:	6a3a      	ldr	r2, [r7, #32]
 80051ca:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80051cc:	68f8      	ldr	r0, [r7, #12]
 80051ce:	f000 f93d 	bl	800544c <SPI_EndRxTxTransaction>
 80051d2:	4603      	mov	r3, r0
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	d008      	beq.n	80051ea <HAL_SPI_TransmitReceive+0x418>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	2220      	movs	r2, #32
 80051dc:	661a      	str	r2, [r3, #96]	@ 0x60
    __HAL_UNLOCK(hspi);
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	2200      	movs	r2, #0
 80051e2:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
    return HAL_ERROR;
 80051e6:	2301      	movs	r3, #1
 80051e8:	e00e      	b.n	8005208 <HAL_SPI_TransmitReceive+0x436>
  }


  hspi->State = HAL_SPI_STATE_READY;
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	2201      	movs	r2, #1
 80051ee:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	2200      	movs	r2, #0
 80051f6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d001      	beq.n	8005206 <HAL_SPI_TransmitReceive+0x434>
  {
    return HAL_ERROR;
 8005202:	2301      	movs	r3, #1
 8005204:	e000      	b.n	8005208 <HAL_SPI_TransmitReceive+0x436>
  }
  else
  {
    return HAL_OK;
 8005206:	2300      	movs	r3, #0
  }
}
 8005208:	4618      	mov	r0, r3
 800520a:	3728      	adds	r7, #40	@ 0x28
 800520c:	46bd      	mov	sp, r7
 800520e:	bd80      	pop	{r7, pc}

08005210 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005210:	b580      	push	{r7, lr}
 8005212:	b088      	sub	sp, #32
 8005214:	af00      	add	r7, sp, #0
 8005216:	60f8      	str	r0, [r7, #12]
 8005218:	60b9      	str	r1, [r7, #8]
 800521a:	603b      	str	r3, [r7, #0]
 800521c:	4613      	mov	r3, r2
 800521e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005220:	f7fd fa9a 	bl	8002758 <HAL_GetTick>
 8005224:	4602      	mov	r2, r0
 8005226:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005228:	1a9b      	subs	r3, r3, r2
 800522a:	683a      	ldr	r2, [r7, #0]
 800522c:	4413      	add	r3, r2
 800522e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005230:	f7fd fa92 	bl	8002758 <HAL_GetTick>
 8005234:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005236:	4b39      	ldr	r3, [pc, #228]	@ (800531c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	015b      	lsls	r3, r3, #5
 800523c:	0d1b      	lsrs	r3, r3, #20
 800523e:	69fa      	ldr	r2, [r7, #28]
 8005240:	fb02 f303 	mul.w	r3, r2, r3
 8005244:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005246:	e054      	b.n	80052f2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005248:	683b      	ldr	r3, [r7, #0]
 800524a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800524e:	d050      	beq.n	80052f2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005250:	f7fd fa82 	bl	8002758 <HAL_GetTick>
 8005254:	4602      	mov	r2, r0
 8005256:	69bb      	ldr	r3, [r7, #24]
 8005258:	1ad3      	subs	r3, r2, r3
 800525a:	69fa      	ldr	r2, [r7, #28]
 800525c:	429a      	cmp	r2, r3
 800525e:	d902      	bls.n	8005266 <SPI_WaitFlagStateUntilTimeout+0x56>
 8005260:	69fb      	ldr	r3, [r7, #28]
 8005262:	2b00      	cmp	r3, #0
 8005264:	d13d      	bne.n	80052e2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	685a      	ldr	r2, [r3, #4]
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8005274:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	685b      	ldr	r3, [r3, #4]
 800527a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800527e:	d111      	bne.n	80052a4 <SPI_WaitFlagStateUntilTimeout+0x94>
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	689b      	ldr	r3, [r3, #8]
 8005284:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005288:	d004      	beq.n	8005294 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	689b      	ldr	r3, [r3, #8]
 800528e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005292:	d107      	bne.n	80052a4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	681a      	ldr	r2, [r3, #0]
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80052a2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80052a8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80052ac:	d10f      	bne.n	80052ce <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	681a      	ldr	r2, [r3, #0]
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80052bc:	601a      	str	r2, [r3, #0]
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	681a      	ldr	r2, [r3, #0]
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80052cc:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	2201      	movs	r2, #1
 80052d2:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	2200      	movs	r2, #0
 80052da:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 80052de:	2303      	movs	r3, #3
 80052e0:	e017      	b.n	8005312 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80052e2:	697b      	ldr	r3, [r7, #20]
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	d101      	bne.n	80052ec <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80052e8:	2300      	movs	r3, #0
 80052ea:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80052ec:	697b      	ldr	r3, [r7, #20]
 80052ee:	3b01      	subs	r3, #1
 80052f0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	689a      	ldr	r2, [r3, #8]
 80052f8:	68bb      	ldr	r3, [r7, #8]
 80052fa:	4013      	ands	r3, r2
 80052fc:	68ba      	ldr	r2, [r7, #8]
 80052fe:	429a      	cmp	r2, r3
 8005300:	bf0c      	ite	eq
 8005302:	2301      	moveq	r3, #1
 8005304:	2300      	movne	r3, #0
 8005306:	b2db      	uxtb	r3, r3
 8005308:	461a      	mov	r2, r3
 800530a:	79fb      	ldrb	r3, [r7, #7]
 800530c:	429a      	cmp	r2, r3
 800530e:	d19b      	bne.n	8005248 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005310:	2300      	movs	r3, #0
}
 8005312:	4618      	mov	r0, r3
 8005314:	3720      	adds	r7, #32
 8005316:	46bd      	mov	sp, r7
 8005318:	bd80      	pop	{r7, pc}
 800531a:	bf00      	nop
 800531c:	20000000 	.word	0x20000000

08005320 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005320:	b580      	push	{r7, lr}
 8005322:	b08a      	sub	sp, #40	@ 0x28
 8005324:	af00      	add	r7, sp, #0
 8005326:	60f8      	str	r0, [r7, #12]
 8005328:	60b9      	str	r1, [r7, #8]
 800532a:	607a      	str	r2, [r7, #4]
 800532c:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO const uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800532e:	2300      	movs	r3, #0
 8005330:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8005332:	f7fd fa11 	bl	8002758 <HAL_GetTick>
 8005336:	4602      	mov	r2, r0
 8005338:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800533a:	1a9b      	subs	r3, r3, r2
 800533c:	683a      	ldr	r2, [r7, #0]
 800533e:	4413      	add	r3, r2
 8005340:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 8005342:	f7fd fa09 	bl	8002758 <HAL_GetTick>
 8005346:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	330c      	adds	r3, #12
 800534e:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8005350:	4b3d      	ldr	r3, [pc, #244]	@ (8005448 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8005352:	681a      	ldr	r2, [r3, #0]
 8005354:	4613      	mov	r3, r2
 8005356:	009b      	lsls	r3, r3, #2
 8005358:	4413      	add	r3, r2
 800535a:	00da      	lsls	r2, r3, #3
 800535c:	1ad3      	subs	r3, r2, r3
 800535e:	0d1b      	lsrs	r3, r3, #20
 8005360:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005362:	fb02 f303 	mul.w	r3, r2, r3
 8005366:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8005368:	e060      	b.n	800542c <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800536a:	68bb      	ldr	r3, [r7, #8]
 800536c:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8005370:	d107      	bne.n	8005382 <SPI_WaitFifoStateUntilTimeout+0x62>
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	2b00      	cmp	r3, #0
 8005376:	d104      	bne.n	8005382 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8005378:	69fb      	ldr	r3, [r7, #28]
 800537a:	781b      	ldrb	r3, [r3, #0]
 800537c:	b2db      	uxtb	r3, r3
 800537e:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8005380:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8005382:	683b      	ldr	r3, [r7, #0]
 8005384:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005388:	d050      	beq.n	800542c <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800538a:	f7fd f9e5 	bl	8002758 <HAL_GetTick>
 800538e:	4602      	mov	r2, r0
 8005390:	6a3b      	ldr	r3, [r7, #32]
 8005392:	1ad3      	subs	r3, r2, r3
 8005394:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005396:	429a      	cmp	r2, r3
 8005398:	d902      	bls.n	80053a0 <SPI_WaitFifoStateUntilTimeout+0x80>
 800539a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800539c:	2b00      	cmp	r3, #0
 800539e:	d13d      	bne.n	800541c <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	685a      	ldr	r2, [r3, #4]
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80053ae:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	685b      	ldr	r3, [r3, #4]
 80053b4:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80053b8:	d111      	bne.n	80053de <SPI_WaitFifoStateUntilTimeout+0xbe>
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	689b      	ldr	r3, [r3, #8]
 80053be:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80053c2:	d004      	beq.n	80053ce <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	689b      	ldr	r3, [r3, #8]
 80053c8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80053cc:	d107      	bne.n	80053de <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	681a      	ldr	r2, [r3, #0]
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80053dc:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80053e2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80053e6:	d10f      	bne.n	8005408 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	681a      	ldr	r2, [r3, #0]
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80053f6:	601a      	str	r2, [r3, #0]
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	681a      	ldr	r2, [r3, #0]
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005406:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	2201      	movs	r2, #1
 800540c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	2200      	movs	r2, #0
 8005414:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8005418:	2303      	movs	r3, #3
 800541a:	e010      	b.n	800543e <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800541c:	69bb      	ldr	r3, [r7, #24]
 800541e:	2b00      	cmp	r3, #0
 8005420:	d101      	bne.n	8005426 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8005422:	2300      	movs	r3, #0
 8005424:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 8005426:	69bb      	ldr	r3, [r7, #24]
 8005428:	3b01      	subs	r3, #1
 800542a:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	689a      	ldr	r2, [r3, #8]
 8005432:	68bb      	ldr	r3, [r7, #8]
 8005434:	4013      	ands	r3, r2
 8005436:	687a      	ldr	r2, [r7, #4]
 8005438:	429a      	cmp	r2, r3
 800543a:	d196      	bne.n	800536a <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 800543c:	2300      	movs	r3, #0
}
 800543e:	4618      	mov	r0, r3
 8005440:	3728      	adds	r7, #40	@ 0x28
 8005442:	46bd      	mov	sp, r7
 8005444:	bd80      	pop	{r7, pc}
 8005446:	bf00      	nop
 8005448:	20000000 	.word	0x20000000

0800544c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800544c:	b580      	push	{r7, lr}
 800544e:	b086      	sub	sp, #24
 8005450:	af02      	add	r7, sp, #8
 8005452:	60f8      	str	r0, [r7, #12]
 8005454:	60b9      	str	r1, [r7, #8]
 8005456:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	9300      	str	r3, [sp, #0]
 800545c:	68bb      	ldr	r3, [r7, #8]
 800545e:	2200      	movs	r2, #0
 8005460:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8005464:	68f8      	ldr	r0, [r7, #12]
 8005466:	f7ff ff5b 	bl	8005320 <SPI_WaitFifoStateUntilTimeout>
 800546a:	4603      	mov	r3, r0
 800546c:	2b00      	cmp	r3, #0
 800546e:	d007      	beq.n	8005480 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005474:	f043 0220 	orr.w	r2, r3, #32
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800547c:	2303      	movs	r3, #3
 800547e:	e027      	b.n	80054d0 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	9300      	str	r3, [sp, #0]
 8005484:	68bb      	ldr	r3, [r7, #8]
 8005486:	2200      	movs	r2, #0
 8005488:	2180      	movs	r1, #128	@ 0x80
 800548a:	68f8      	ldr	r0, [r7, #12]
 800548c:	f7ff fec0 	bl	8005210 <SPI_WaitFlagStateUntilTimeout>
 8005490:	4603      	mov	r3, r0
 8005492:	2b00      	cmp	r3, #0
 8005494:	d007      	beq.n	80054a6 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800549a:	f043 0220 	orr.w	r2, r3, #32
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80054a2:	2303      	movs	r3, #3
 80054a4:	e014      	b.n	80054d0 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	9300      	str	r3, [sp, #0]
 80054aa:	68bb      	ldr	r3, [r7, #8]
 80054ac:	2200      	movs	r2, #0
 80054ae:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 80054b2:	68f8      	ldr	r0, [r7, #12]
 80054b4:	f7ff ff34 	bl	8005320 <SPI_WaitFifoStateUntilTimeout>
 80054b8:	4603      	mov	r3, r0
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	d007      	beq.n	80054ce <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80054c2:	f043 0220 	orr.w	r2, r3, #32
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80054ca:	2303      	movs	r3, #3
 80054cc:	e000      	b.n	80054d0 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80054ce:	2300      	movs	r3, #0
}
 80054d0:	4618      	mov	r0, r3
 80054d2:	3710      	adds	r7, #16
 80054d4:	46bd      	mov	sp, r7
 80054d6:	bd80      	pop	{r7, pc}

080054d8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80054d8:	b580      	push	{r7, lr}
 80054da:	b082      	sub	sp, #8
 80054dc:	af00      	add	r7, sp, #0
 80054de:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d101      	bne.n	80054ea <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80054e6:	2301      	movs	r3, #1
 80054e8:	e042      	b.n	8005570 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	d106      	bne.n	8005502 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	2200      	movs	r2, #0
 80054f8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80054fc:	6878      	ldr	r0, [r7, #4]
 80054fe:	f7fc fedf 	bl	80022c0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	2224      	movs	r2, #36	@ 0x24
 8005506:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	681a      	ldr	r2, [r3, #0]
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	f022 0201 	bic.w	r2, r2, #1
 8005518:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800551e:	2b00      	cmp	r3, #0
 8005520:	d002      	beq.n	8005528 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8005522:	6878      	ldr	r0, [r7, #4]
 8005524:	f000 fb82 	bl	8005c2c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005528:	6878      	ldr	r0, [r7, #4]
 800552a:	f000 f8b3 	bl	8005694 <UART_SetConfig>
 800552e:	4603      	mov	r3, r0
 8005530:	2b01      	cmp	r3, #1
 8005532:	d101      	bne.n	8005538 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8005534:	2301      	movs	r3, #1
 8005536:	e01b      	b.n	8005570 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	685a      	ldr	r2, [r3, #4]
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005546:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	689a      	ldr	r2, [r3, #8]
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005556:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	681a      	ldr	r2, [r3, #0]
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	f042 0201 	orr.w	r2, r2, #1
 8005566:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005568:	6878      	ldr	r0, [r7, #4]
 800556a:	f000 fc01 	bl	8005d70 <UART_CheckIdleState>
 800556e:	4603      	mov	r3, r0
}
 8005570:	4618      	mov	r0, r3
 8005572:	3708      	adds	r7, #8
 8005574:	46bd      	mov	sp, r7
 8005576:	bd80      	pop	{r7, pc}

08005578 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005578:	b580      	push	{r7, lr}
 800557a:	b08a      	sub	sp, #40	@ 0x28
 800557c:	af02      	add	r7, sp, #8
 800557e:	60f8      	str	r0, [r7, #12]
 8005580:	60b9      	str	r1, [r7, #8]
 8005582:	603b      	str	r3, [r7, #0]
 8005584:	4613      	mov	r3, r2
 8005586:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800558e:	2b20      	cmp	r3, #32
 8005590:	d17b      	bne.n	800568a <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8005592:	68bb      	ldr	r3, [r7, #8]
 8005594:	2b00      	cmp	r3, #0
 8005596:	d002      	beq.n	800559e <HAL_UART_Transmit+0x26>
 8005598:	88fb      	ldrh	r3, [r7, #6]
 800559a:	2b00      	cmp	r3, #0
 800559c:	d101      	bne.n	80055a2 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800559e:	2301      	movs	r3, #1
 80055a0:	e074      	b.n	800568c <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	2200      	movs	r2, #0
 80055a6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	2221      	movs	r2, #33	@ 0x21
 80055ae:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80055b2:	f7fd f8d1 	bl	8002758 <HAL_GetTick>
 80055b6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	88fa      	ldrh	r2, [r7, #6]
 80055bc:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	88fa      	ldrh	r2, [r7, #6]
 80055c4:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	689b      	ldr	r3, [r3, #8]
 80055cc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80055d0:	d108      	bne.n	80055e4 <HAL_UART_Transmit+0x6c>
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	691b      	ldr	r3, [r3, #16]
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	d104      	bne.n	80055e4 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80055da:	2300      	movs	r3, #0
 80055dc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80055de:	68bb      	ldr	r3, [r7, #8]
 80055e0:	61bb      	str	r3, [r7, #24]
 80055e2:	e003      	b.n	80055ec <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80055e4:	68bb      	ldr	r3, [r7, #8]
 80055e6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80055e8:	2300      	movs	r3, #0
 80055ea:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80055ec:	e030      	b.n	8005650 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80055ee:	683b      	ldr	r3, [r7, #0]
 80055f0:	9300      	str	r3, [sp, #0]
 80055f2:	697b      	ldr	r3, [r7, #20]
 80055f4:	2200      	movs	r2, #0
 80055f6:	2180      	movs	r1, #128	@ 0x80
 80055f8:	68f8      	ldr	r0, [r7, #12]
 80055fa:	f000 fc63 	bl	8005ec4 <UART_WaitOnFlagUntilTimeout>
 80055fe:	4603      	mov	r3, r0
 8005600:	2b00      	cmp	r3, #0
 8005602:	d005      	beq.n	8005610 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	2220      	movs	r2, #32
 8005608:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 800560c:	2303      	movs	r3, #3
 800560e:	e03d      	b.n	800568c <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8005610:	69fb      	ldr	r3, [r7, #28]
 8005612:	2b00      	cmp	r3, #0
 8005614:	d10b      	bne.n	800562e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005616:	69bb      	ldr	r3, [r7, #24]
 8005618:	881b      	ldrh	r3, [r3, #0]
 800561a:	461a      	mov	r2, r3
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005624:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8005626:	69bb      	ldr	r3, [r7, #24]
 8005628:	3302      	adds	r3, #2
 800562a:	61bb      	str	r3, [r7, #24]
 800562c:	e007      	b.n	800563e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800562e:	69fb      	ldr	r3, [r7, #28]
 8005630:	781a      	ldrb	r2, [r3, #0]
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8005638:	69fb      	ldr	r3, [r7, #28]
 800563a:	3301      	adds	r3, #1
 800563c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8005644:	b29b      	uxth	r3, r3
 8005646:	3b01      	subs	r3, #1
 8005648:	b29a      	uxth	r2, r3
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8005656:	b29b      	uxth	r3, r3
 8005658:	2b00      	cmp	r3, #0
 800565a:	d1c8      	bne.n	80055ee <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800565c:	683b      	ldr	r3, [r7, #0]
 800565e:	9300      	str	r3, [sp, #0]
 8005660:	697b      	ldr	r3, [r7, #20]
 8005662:	2200      	movs	r2, #0
 8005664:	2140      	movs	r1, #64	@ 0x40
 8005666:	68f8      	ldr	r0, [r7, #12]
 8005668:	f000 fc2c 	bl	8005ec4 <UART_WaitOnFlagUntilTimeout>
 800566c:	4603      	mov	r3, r0
 800566e:	2b00      	cmp	r3, #0
 8005670:	d005      	beq.n	800567e <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	2220      	movs	r2, #32
 8005676:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 800567a:	2303      	movs	r3, #3
 800567c:	e006      	b.n	800568c <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	2220      	movs	r2, #32
 8005682:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8005686:	2300      	movs	r3, #0
 8005688:	e000      	b.n	800568c <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800568a:	2302      	movs	r3, #2
  }
}
 800568c:	4618      	mov	r0, r3
 800568e:	3720      	adds	r7, #32
 8005690:	46bd      	mov	sp, r7
 8005692:	bd80      	pop	{r7, pc}

08005694 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005694:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005698:	b08c      	sub	sp, #48	@ 0x30
 800569a:	af00      	add	r7, sp, #0
 800569c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800569e:	2300      	movs	r3, #0
 80056a0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80056a4:	697b      	ldr	r3, [r7, #20]
 80056a6:	689a      	ldr	r2, [r3, #8]
 80056a8:	697b      	ldr	r3, [r7, #20]
 80056aa:	691b      	ldr	r3, [r3, #16]
 80056ac:	431a      	orrs	r2, r3
 80056ae:	697b      	ldr	r3, [r7, #20]
 80056b0:	695b      	ldr	r3, [r3, #20]
 80056b2:	431a      	orrs	r2, r3
 80056b4:	697b      	ldr	r3, [r7, #20]
 80056b6:	69db      	ldr	r3, [r3, #28]
 80056b8:	4313      	orrs	r3, r2
 80056ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80056bc:	697b      	ldr	r3, [r7, #20]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	681a      	ldr	r2, [r3, #0]
 80056c2:	4bab      	ldr	r3, [pc, #684]	@ (8005970 <UART_SetConfig+0x2dc>)
 80056c4:	4013      	ands	r3, r2
 80056c6:	697a      	ldr	r2, [r7, #20]
 80056c8:	6812      	ldr	r2, [r2, #0]
 80056ca:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80056cc:	430b      	orrs	r3, r1
 80056ce:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80056d0:	697b      	ldr	r3, [r7, #20]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	685b      	ldr	r3, [r3, #4]
 80056d6:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80056da:	697b      	ldr	r3, [r7, #20]
 80056dc:	68da      	ldr	r2, [r3, #12]
 80056de:	697b      	ldr	r3, [r7, #20]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	430a      	orrs	r2, r1
 80056e4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80056e6:	697b      	ldr	r3, [r7, #20]
 80056e8:	699b      	ldr	r3, [r3, #24]
 80056ea:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80056ec:	697b      	ldr	r3, [r7, #20]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	4aa0      	ldr	r2, [pc, #640]	@ (8005974 <UART_SetConfig+0x2e0>)
 80056f2:	4293      	cmp	r3, r2
 80056f4:	d004      	beq.n	8005700 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80056f6:	697b      	ldr	r3, [r7, #20]
 80056f8:	6a1b      	ldr	r3, [r3, #32]
 80056fa:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80056fc:	4313      	orrs	r3, r2
 80056fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005700:	697b      	ldr	r3, [r7, #20]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	689b      	ldr	r3, [r3, #8]
 8005706:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 800570a:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 800570e:	697a      	ldr	r2, [r7, #20]
 8005710:	6812      	ldr	r2, [r2, #0]
 8005712:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005714:	430b      	orrs	r3, r1
 8005716:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005718:	697b      	ldr	r3, [r7, #20]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800571e:	f023 010f 	bic.w	r1, r3, #15
 8005722:	697b      	ldr	r3, [r7, #20]
 8005724:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005726:	697b      	ldr	r3, [r7, #20]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	430a      	orrs	r2, r1
 800572c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800572e:	697b      	ldr	r3, [r7, #20]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	4a91      	ldr	r2, [pc, #580]	@ (8005978 <UART_SetConfig+0x2e4>)
 8005734:	4293      	cmp	r3, r2
 8005736:	d125      	bne.n	8005784 <UART_SetConfig+0xf0>
 8005738:	4b90      	ldr	r3, [pc, #576]	@ (800597c <UART_SetConfig+0x2e8>)
 800573a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800573e:	f003 0303 	and.w	r3, r3, #3
 8005742:	2b03      	cmp	r3, #3
 8005744:	d81a      	bhi.n	800577c <UART_SetConfig+0xe8>
 8005746:	a201      	add	r2, pc, #4	@ (adr r2, 800574c <UART_SetConfig+0xb8>)
 8005748:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800574c:	0800575d 	.word	0x0800575d
 8005750:	0800576d 	.word	0x0800576d
 8005754:	08005765 	.word	0x08005765
 8005758:	08005775 	.word	0x08005775
 800575c:	2301      	movs	r3, #1
 800575e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005762:	e0d6      	b.n	8005912 <UART_SetConfig+0x27e>
 8005764:	2302      	movs	r3, #2
 8005766:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800576a:	e0d2      	b.n	8005912 <UART_SetConfig+0x27e>
 800576c:	2304      	movs	r3, #4
 800576e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005772:	e0ce      	b.n	8005912 <UART_SetConfig+0x27e>
 8005774:	2308      	movs	r3, #8
 8005776:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800577a:	e0ca      	b.n	8005912 <UART_SetConfig+0x27e>
 800577c:	2310      	movs	r3, #16
 800577e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005782:	e0c6      	b.n	8005912 <UART_SetConfig+0x27e>
 8005784:	697b      	ldr	r3, [r7, #20]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	4a7d      	ldr	r2, [pc, #500]	@ (8005980 <UART_SetConfig+0x2ec>)
 800578a:	4293      	cmp	r3, r2
 800578c:	d138      	bne.n	8005800 <UART_SetConfig+0x16c>
 800578e:	4b7b      	ldr	r3, [pc, #492]	@ (800597c <UART_SetConfig+0x2e8>)
 8005790:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005794:	f003 030c 	and.w	r3, r3, #12
 8005798:	2b0c      	cmp	r3, #12
 800579a:	d82d      	bhi.n	80057f8 <UART_SetConfig+0x164>
 800579c:	a201      	add	r2, pc, #4	@ (adr r2, 80057a4 <UART_SetConfig+0x110>)
 800579e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80057a2:	bf00      	nop
 80057a4:	080057d9 	.word	0x080057d9
 80057a8:	080057f9 	.word	0x080057f9
 80057ac:	080057f9 	.word	0x080057f9
 80057b0:	080057f9 	.word	0x080057f9
 80057b4:	080057e9 	.word	0x080057e9
 80057b8:	080057f9 	.word	0x080057f9
 80057bc:	080057f9 	.word	0x080057f9
 80057c0:	080057f9 	.word	0x080057f9
 80057c4:	080057e1 	.word	0x080057e1
 80057c8:	080057f9 	.word	0x080057f9
 80057cc:	080057f9 	.word	0x080057f9
 80057d0:	080057f9 	.word	0x080057f9
 80057d4:	080057f1 	.word	0x080057f1
 80057d8:	2300      	movs	r3, #0
 80057da:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80057de:	e098      	b.n	8005912 <UART_SetConfig+0x27e>
 80057e0:	2302      	movs	r3, #2
 80057e2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80057e6:	e094      	b.n	8005912 <UART_SetConfig+0x27e>
 80057e8:	2304      	movs	r3, #4
 80057ea:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80057ee:	e090      	b.n	8005912 <UART_SetConfig+0x27e>
 80057f0:	2308      	movs	r3, #8
 80057f2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80057f6:	e08c      	b.n	8005912 <UART_SetConfig+0x27e>
 80057f8:	2310      	movs	r3, #16
 80057fa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80057fe:	e088      	b.n	8005912 <UART_SetConfig+0x27e>
 8005800:	697b      	ldr	r3, [r7, #20]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	4a5f      	ldr	r2, [pc, #380]	@ (8005984 <UART_SetConfig+0x2f0>)
 8005806:	4293      	cmp	r3, r2
 8005808:	d125      	bne.n	8005856 <UART_SetConfig+0x1c2>
 800580a:	4b5c      	ldr	r3, [pc, #368]	@ (800597c <UART_SetConfig+0x2e8>)
 800580c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005810:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8005814:	2b30      	cmp	r3, #48	@ 0x30
 8005816:	d016      	beq.n	8005846 <UART_SetConfig+0x1b2>
 8005818:	2b30      	cmp	r3, #48	@ 0x30
 800581a:	d818      	bhi.n	800584e <UART_SetConfig+0x1ba>
 800581c:	2b20      	cmp	r3, #32
 800581e:	d00a      	beq.n	8005836 <UART_SetConfig+0x1a2>
 8005820:	2b20      	cmp	r3, #32
 8005822:	d814      	bhi.n	800584e <UART_SetConfig+0x1ba>
 8005824:	2b00      	cmp	r3, #0
 8005826:	d002      	beq.n	800582e <UART_SetConfig+0x19a>
 8005828:	2b10      	cmp	r3, #16
 800582a:	d008      	beq.n	800583e <UART_SetConfig+0x1aa>
 800582c:	e00f      	b.n	800584e <UART_SetConfig+0x1ba>
 800582e:	2300      	movs	r3, #0
 8005830:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005834:	e06d      	b.n	8005912 <UART_SetConfig+0x27e>
 8005836:	2302      	movs	r3, #2
 8005838:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800583c:	e069      	b.n	8005912 <UART_SetConfig+0x27e>
 800583e:	2304      	movs	r3, #4
 8005840:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005844:	e065      	b.n	8005912 <UART_SetConfig+0x27e>
 8005846:	2308      	movs	r3, #8
 8005848:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800584c:	e061      	b.n	8005912 <UART_SetConfig+0x27e>
 800584e:	2310      	movs	r3, #16
 8005850:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005854:	e05d      	b.n	8005912 <UART_SetConfig+0x27e>
 8005856:	697b      	ldr	r3, [r7, #20]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	4a4b      	ldr	r2, [pc, #300]	@ (8005988 <UART_SetConfig+0x2f4>)
 800585c:	4293      	cmp	r3, r2
 800585e:	d125      	bne.n	80058ac <UART_SetConfig+0x218>
 8005860:	4b46      	ldr	r3, [pc, #280]	@ (800597c <UART_SetConfig+0x2e8>)
 8005862:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005866:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800586a:	2bc0      	cmp	r3, #192	@ 0xc0
 800586c:	d016      	beq.n	800589c <UART_SetConfig+0x208>
 800586e:	2bc0      	cmp	r3, #192	@ 0xc0
 8005870:	d818      	bhi.n	80058a4 <UART_SetConfig+0x210>
 8005872:	2b80      	cmp	r3, #128	@ 0x80
 8005874:	d00a      	beq.n	800588c <UART_SetConfig+0x1f8>
 8005876:	2b80      	cmp	r3, #128	@ 0x80
 8005878:	d814      	bhi.n	80058a4 <UART_SetConfig+0x210>
 800587a:	2b00      	cmp	r3, #0
 800587c:	d002      	beq.n	8005884 <UART_SetConfig+0x1f0>
 800587e:	2b40      	cmp	r3, #64	@ 0x40
 8005880:	d008      	beq.n	8005894 <UART_SetConfig+0x200>
 8005882:	e00f      	b.n	80058a4 <UART_SetConfig+0x210>
 8005884:	2300      	movs	r3, #0
 8005886:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800588a:	e042      	b.n	8005912 <UART_SetConfig+0x27e>
 800588c:	2302      	movs	r3, #2
 800588e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005892:	e03e      	b.n	8005912 <UART_SetConfig+0x27e>
 8005894:	2304      	movs	r3, #4
 8005896:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800589a:	e03a      	b.n	8005912 <UART_SetConfig+0x27e>
 800589c:	2308      	movs	r3, #8
 800589e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80058a2:	e036      	b.n	8005912 <UART_SetConfig+0x27e>
 80058a4:	2310      	movs	r3, #16
 80058a6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80058aa:	e032      	b.n	8005912 <UART_SetConfig+0x27e>
 80058ac:	697b      	ldr	r3, [r7, #20]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	4a30      	ldr	r2, [pc, #192]	@ (8005974 <UART_SetConfig+0x2e0>)
 80058b2:	4293      	cmp	r3, r2
 80058b4:	d12a      	bne.n	800590c <UART_SetConfig+0x278>
 80058b6:	4b31      	ldr	r3, [pc, #196]	@ (800597c <UART_SetConfig+0x2e8>)
 80058b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80058bc:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80058c0:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80058c4:	d01a      	beq.n	80058fc <UART_SetConfig+0x268>
 80058c6:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80058ca:	d81b      	bhi.n	8005904 <UART_SetConfig+0x270>
 80058cc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80058d0:	d00c      	beq.n	80058ec <UART_SetConfig+0x258>
 80058d2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80058d6:	d815      	bhi.n	8005904 <UART_SetConfig+0x270>
 80058d8:	2b00      	cmp	r3, #0
 80058da:	d003      	beq.n	80058e4 <UART_SetConfig+0x250>
 80058dc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80058e0:	d008      	beq.n	80058f4 <UART_SetConfig+0x260>
 80058e2:	e00f      	b.n	8005904 <UART_SetConfig+0x270>
 80058e4:	2300      	movs	r3, #0
 80058e6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80058ea:	e012      	b.n	8005912 <UART_SetConfig+0x27e>
 80058ec:	2302      	movs	r3, #2
 80058ee:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80058f2:	e00e      	b.n	8005912 <UART_SetConfig+0x27e>
 80058f4:	2304      	movs	r3, #4
 80058f6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80058fa:	e00a      	b.n	8005912 <UART_SetConfig+0x27e>
 80058fc:	2308      	movs	r3, #8
 80058fe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005902:	e006      	b.n	8005912 <UART_SetConfig+0x27e>
 8005904:	2310      	movs	r3, #16
 8005906:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800590a:	e002      	b.n	8005912 <UART_SetConfig+0x27e>
 800590c:	2310      	movs	r3, #16
 800590e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005912:	697b      	ldr	r3, [r7, #20]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	4a17      	ldr	r2, [pc, #92]	@ (8005974 <UART_SetConfig+0x2e0>)
 8005918:	4293      	cmp	r3, r2
 800591a:	f040 80a8 	bne.w	8005a6e <UART_SetConfig+0x3da>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800591e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8005922:	2b08      	cmp	r3, #8
 8005924:	d834      	bhi.n	8005990 <UART_SetConfig+0x2fc>
 8005926:	a201      	add	r2, pc, #4	@ (adr r2, 800592c <UART_SetConfig+0x298>)
 8005928:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800592c:	08005951 	.word	0x08005951
 8005930:	08005991 	.word	0x08005991
 8005934:	08005959 	.word	0x08005959
 8005938:	08005991 	.word	0x08005991
 800593c:	0800595f 	.word	0x0800595f
 8005940:	08005991 	.word	0x08005991
 8005944:	08005991 	.word	0x08005991
 8005948:	08005991 	.word	0x08005991
 800594c:	08005967 	.word	0x08005967
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005950:	f7fe ff32 	bl	80047b8 <HAL_RCC_GetPCLK1Freq>
 8005954:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005956:	e021      	b.n	800599c <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005958:	4b0c      	ldr	r3, [pc, #48]	@ (800598c <UART_SetConfig+0x2f8>)
 800595a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800595c:	e01e      	b.n	800599c <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800595e:	f7fe febd 	bl	80046dc <HAL_RCC_GetSysClockFreq>
 8005962:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005964:	e01a      	b.n	800599c <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005966:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800596a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800596c:	e016      	b.n	800599c <UART_SetConfig+0x308>
 800596e:	bf00      	nop
 8005970:	cfff69f3 	.word	0xcfff69f3
 8005974:	40008000 	.word	0x40008000
 8005978:	40013800 	.word	0x40013800
 800597c:	40021000 	.word	0x40021000
 8005980:	40004400 	.word	0x40004400
 8005984:	40004800 	.word	0x40004800
 8005988:	40004c00 	.word	0x40004c00
 800598c:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8005990:	2300      	movs	r3, #0
 8005992:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8005994:	2301      	movs	r3, #1
 8005996:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800599a:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800599c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800599e:	2b00      	cmp	r3, #0
 80059a0:	f000 812a 	beq.w	8005bf8 <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80059a4:	697b      	ldr	r3, [r7, #20]
 80059a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80059a8:	4a9e      	ldr	r2, [pc, #632]	@ (8005c24 <UART_SetConfig+0x590>)
 80059aa:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80059ae:	461a      	mov	r2, r3
 80059b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059b2:	fbb3 f3f2 	udiv	r3, r3, r2
 80059b6:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80059b8:	697b      	ldr	r3, [r7, #20]
 80059ba:	685a      	ldr	r2, [r3, #4]
 80059bc:	4613      	mov	r3, r2
 80059be:	005b      	lsls	r3, r3, #1
 80059c0:	4413      	add	r3, r2
 80059c2:	69ba      	ldr	r2, [r7, #24]
 80059c4:	429a      	cmp	r2, r3
 80059c6:	d305      	bcc.n	80059d4 <UART_SetConfig+0x340>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80059c8:	697b      	ldr	r3, [r7, #20]
 80059ca:	685b      	ldr	r3, [r3, #4]
 80059cc:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80059ce:	69ba      	ldr	r2, [r7, #24]
 80059d0:	429a      	cmp	r2, r3
 80059d2:	d903      	bls.n	80059dc <UART_SetConfig+0x348>
      {
        ret = HAL_ERROR;
 80059d4:	2301      	movs	r3, #1
 80059d6:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80059da:	e10d      	b.n	8005bf8 <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80059dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059de:	2200      	movs	r2, #0
 80059e0:	60bb      	str	r3, [r7, #8]
 80059e2:	60fa      	str	r2, [r7, #12]
 80059e4:	697b      	ldr	r3, [r7, #20]
 80059e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80059e8:	4a8e      	ldr	r2, [pc, #568]	@ (8005c24 <UART_SetConfig+0x590>)
 80059ea:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80059ee:	b29b      	uxth	r3, r3
 80059f0:	2200      	movs	r2, #0
 80059f2:	603b      	str	r3, [r7, #0]
 80059f4:	607a      	str	r2, [r7, #4]
 80059f6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80059fa:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80059fe:	f7fb f8fb 	bl	8000bf8 <__aeabi_uldivmod>
 8005a02:	4602      	mov	r2, r0
 8005a04:	460b      	mov	r3, r1
 8005a06:	4610      	mov	r0, r2
 8005a08:	4619      	mov	r1, r3
 8005a0a:	f04f 0200 	mov.w	r2, #0
 8005a0e:	f04f 0300 	mov.w	r3, #0
 8005a12:	020b      	lsls	r3, r1, #8
 8005a14:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8005a18:	0202      	lsls	r2, r0, #8
 8005a1a:	6979      	ldr	r1, [r7, #20]
 8005a1c:	6849      	ldr	r1, [r1, #4]
 8005a1e:	0849      	lsrs	r1, r1, #1
 8005a20:	2000      	movs	r0, #0
 8005a22:	460c      	mov	r4, r1
 8005a24:	4605      	mov	r5, r0
 8005a26:	eb12 0804 	adds.w	r8, r2, r4
 8005a2a:	eb43 0905 	adc.w	r9, r3, r5
 8005a2e:	697b      	ldr	r3, [r7, #20]
 8005a30:	685b      	ldr	r3, [r3, #4]
 8005a32:	2200      	movs	r2, #0
 8005a34:	469a      	mov	sl, r3
 8005a36:	4693      	mov	fp, r2
 8005a38:	4652      	mov	r2, sl
 8005a3a:	465b      	mov	r3, fp
 8005a3c:	4640      	mov	r0, r8
 8005a3e:	4649      	mov	r1, r9
 8005a40:	f7fb f8da 	bl	8000bf8 <__aeabi_uldivmod>
 8005a44:	4602      	mov	r2, r0
 8005a46:	460b      	mov	r3, r1
 8005a48:	4613      	mov	r3, r2
 8005a4a:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005a4c:	6a3b      	ldr	r3, [r7, #32]
 8005a4e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005a52:	d308      	bcc.n	8005a66 <UART_SetConfig+0x3d2>
 8005a54:	6a3b      	ldr	r3, [r7, #32]
 8005a56:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005a5a:	d204      	bcs.n	8005a66 <UART_SetConfig+0x3d2>
        {
          huart->Instance->BRR = usartdiv;
 8005a5c:	697b      	ldr	r3, [r7, #20]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	6a3a      	ldr	r2, [r7, #32]
 8005a62:	60da      	str	r2, [r3, #12]
 8005a64:	e0c8      	b.n	8005bf8 <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 8005a66:	2301      	movs	r3, #1
 8005a68:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8005a6c:	e0c4      	b.n	8005bf8 <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005a6e:	697b      	ldr	r3, [r7, #20]
 8005a70:	69db      	ldr	r3, [r3, #28]
 8005a72:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005a76:	d167      	bne.n	8005b48 <UART_SetConfig+0x4b4>
  {
    switch (clocksource)
 8005a78:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8005a7c:	2b08      	cmp	r3, #8
 8005a7e:	d828      	bhi.n	8005ad2 <UART_SetConfig+0x43e>
 8005a80:	a201      	add	r2, pc, #4	@ (adr r2, 8005a88 <UART_SetConfig+0x3f4>)
 8005a82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a86:	bf00      	nop
 8005a88:	08005aad 	.word	0x08005aad
 8005a8c:	08005ab5 	.word	0x08005ab5
 8005a90:	08005abd 	.word	0x08005abd
 8005a94:	08005ad3 	.word	0x08005ad3
 8005a98:	08005ac3 	.word	0x08005ac3
 8005a9c:	08005ad3 	.word	0x08005ad3
 8005aa0:	08005ad3 	.word	0x08005ad3
 8005aa4:	08005ad3 	.word	0x08005ad3
 8005aa8:	08005acb 	.word	0x08005acb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005aac:	f7fe fe84 	bl	80047b8 <HAL_RCC_GetPCLK1Freq>
 8005ab0:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005ab2:	e014      	b.n	8005ade <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005ab4:	f7fe fe96 	bl	80047e4 <HAL_RCC_GetPCLK2Freq>
 8005ab8:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005aba:	e010      	b.n	8005ade <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005abc:	4b5a      	ldr	r3, [pc, #360]	@ (8005c28 <UART_SetConfig+0x594>)
 8005abe:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005ac0:	e00d      	b.n	8005ade <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005ac2:	f7fe fe0b 	bl	80046dc <HAL_RCC_GetSysClockFreq>
 8005ac6:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005ac8:	e009      	b.n	8005ade <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005aca:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005ace:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005ad0:	e005      	b.n	8005ade <UART_SetConfig+0x44a>
      default:
        pclk = 0U;
 8005ad2:	2300      	movs	r3, #0
 8005ad4:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8005ad6:	2301      	movs	r3, #1
 8005ad8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8005adc:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005ade:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	f000 8089 	beq.w	8005bf8 <UART_SetConfig+0x564>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005ae6:	697b      	ldr	r3, [r7, #20]
 8005ae8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005aea:	4a4e      	ldr	r2, [pc, #312]	@ (8005c24 <UART_SetConfig+0x590>)
 8005aec:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005af0:	461a      	mov	r2, r3
 8005af2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005af4:	fbb3 f3f2 	udiv	r3, r3, r2
 8005af8:	005a      	lsls	r2, r3, #1
 8005afa:	697b      	ldr	r3, [r7, #20]
 8005afc:	685b      	ldr	r3, [r3, #4]
 8005afe:	085b      	lsrs	r3, r3, #1
 8005b00:	441a      	add	r2, r3
 8005b02:	697b      	ldr	r3, [r7, #20]
 8005b04:	685b      	ldr	r3, [r3, #4]
 8005b06:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b0a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005b0c:	6a3b      	ldr	r3, [r7, #32]
 8005b0e:	2b0f      	cmp	r3, #15
 8005b10:	d916      	bls.n	8005b40 <UART_SetConfig+0x4ac>
 8005b12:	6a3b      	ldr	r3, [r7, #32]
 8005b14:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005b18:	d212      	bcs.n	8005b40 <UART_SetConfig+0x4ac>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005b1a:	6a3b      	ldr	r3, [r7, #32]
 8005b1c:	b29b      	uxth	r3, r3
 8005b1e:	f023 030f 	bic.w	r3, r3, #15
 8005b22:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005b24:	6a3b      	ldr	r3, [r7, #32]
 8005b26:	085b      	lsrs	r3, r3, #1
 8005b28:	b29b      	uxth	r3, r3
 8005b2a:	f003 0307 	and.w	r3, r3, #7
 8005b2e:	b29a      	uxth	r2, r3
 8005b30:	8bfb      	ldrh	r3, [r7, #30]
 8005b32:	4313      	orrs	r3, r2
 8005b34:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8005b36:	697b      	ldr	r3, [r7, #20]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	8bfa      	ldrh	r2, [r7, #30]
 8005b3c:	60da      	str	r2, [r3, #12]
 8005b3e:	e05b      	b.n	8005bf8 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8005b40:	2301      	movs	r3, #1
 8005b42:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8005b46:	e057      	b.n	8005bf8 <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005b48:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8005b4c:	2b08      	cmp	r3, #8
 8005b4e:	d828      	bhi.n	8005ba2 <UART_SetConfig+0x50e>
 8005b50:	a201      	add	r2, pc, #4	@ (adr r2, 8005b58 <UART_SetConfig+0x4c4>)
 8005b52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b56:	bf00      	nop
 8005b58:	08005b7d 	.word	0x08005b7d
 8005b5c:	08005b85 	.word	0x08005b85
 8005b60:	08005b8d 	.word	0x08005b8d
 8005b64:	08005ba3 	.word	0x08005ba3
 8005b68:	08005b93 	.word	0x08005b93
 8005b6c:	08005ba3 	.word	0x08005ba3
 8005b70:	08005ba3 	.word	0x08005ba3
 8005b74:	08005ba3 	.word	0x08005ba3
 8005b78:	08005b9b 	.word	0x08005b9b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005b7c:	f7fe fe1c 	bl	80047b8 <HAL_RCC_GetPCLK1Freq>
 8005b80:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005b82:	e014      	b.n	8005bae <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005b84:	f7fe fe2e 	bl	80047e4 <HAL_RCC_GetPCLK2Freq>
 8005b88:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005b8a:	e010      	b.n	8005bae <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005b8c:	4b26      	ldr	r3, [pc, #152]	@ (8005c28 <UART_SetConfig+0x594>)
 8005b8e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005b90:	e00d      	b.n	8005bae <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005b92:	f7fe fda3 	bl	80046dc <HAL_RCC_GetSysClockFreq>
 8005b96:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005b98:	e009      	b.n	8005bae <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005b9a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005b9e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005ba0:	e005      	b.n	8005bae <UART_SetConfig+0x51a>
      default:
        pclk = 0U;
 8005ba2:	2300      	movs	r3, #0
 8005ba4:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8005ba6:	2301      	movs	r3, #1
 8005ba8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8005bac:	bf00      	nop
    }

    if (pclk != 0U)
 8005bae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	d021      	beq.n	8005bf8 <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005bb4:	697b      	ldr	r3, [r7, #20]
 8005bb6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005bb8:	4a1a      	ldr	r2, [pc, #104]	@ (8005c24 <UART_SetConfig+0x590>)
 8005bba:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005bbe:	461a      	mov	r2, r3
 8005bc0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005bc2:	fbb3 f2f2 	udiv	r2, r3, r2
 8005bc6:	697b      	ldr	r3, [r7, #20]
 8005bc8:	685b      	ldr	r3, [r3, #4]
 8005bca:	085b      	lsrs	r3, r3, #1
 8005bcc:	441a      	add	r2, r3
 8005bce:	697b      	ldr	r3, [r7, #20]
 8005bd0:	685b      	ldr	r3, [r3, #4]
 8005bd2:	fbb2 f3f3 	udiv	r3, r2, r3
 8005bd6:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005bd8:	6a3b      	ldr	r3, [r7, #32]
 8005bda:	2b0f      	cmp	r3, #15
 8005bdc:	d909      	bls.n	8005bf2 <UART_SetConfig+0x55e>
 8005bde:	6a3b      	ldr	r3, [r7, #32]
 8005be0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005be4:	d205      	bcs.n	8005bf2 <UART_SetConfig+0x55e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005be6:	6a3b      	ldr	r3, [r7, #32]
 8005be8:	b29a      	uxth	r2, r3
 8005bea:	697b      	ldr	r3, [r7, #20]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	60da      	str	r2, [r3, #12]
 8005bf0:	e002      	b.n	8005bf8 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8005bf2:	2301      	movs	r3, #1
 8005bf4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8005bf8:	697b      	ldr	r3, [r7, #20]
 8005bfa:	2201      	movs	r2, #1
 8005bfc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8005c00:	697b      	ldr	r3, [r7, #20]
 8005c02:	2201      	movs	r2, #1
 8005c04:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005c08:	697b      	ldr	r3, [r7, #20]
 8005c0a:	2200      	movs	r2, #0
 8005c0c:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8005c0e:	697b      	ldr	r3, [r7, #20]
 8005c10:	2200      	movs	r2, #0
 8005c12:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8005c14:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8005c18:	4618      	mov	r0, r3
 8005c1a:	3730      	adds	r7, #48	@ 0x30
 8005c1c:	46bd      	mov	sp, r7
 8005c1e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005c22:	bf00      	nop
 8005c24:	080094f4 	.word	0x080094f4
 8005c28:	00f42400 	.word	0x00f42400

08005c2c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005c2c:	b480      	push	{r7}
 8005c2e:	b083      	sub	sp, #12
 8005c30:	af00      	add	r7, sp, #0
 8005c32:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005c38:	f003 0308 	and.w	r3, r3, #8
 8005c3c:	2b00      	cmp	r3, #0
 8005c3e:	d00a      	beq.n	8005c56 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	685b      	ldr	r3, [r3, #4]
 8005c46:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	430a      	orrs	r2, r1
 8005c54:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005c5a:	f003 0301 	and.w	r3, r3, #1
 8005c5e:	2b00      	cmp	r3, #0
 8005c60:	d00a      	beq.n	8005c78 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	685b      	ldr	r3, [r3, #4]
 8005c68:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	430a      	orrs	r2, r1
 8005c76:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005c7c:	f003 0302 	and.w	r3, r3, #2
 8005c80:	2b00      	cmp	r3, #0
 8005c82:	d00a      	beq.n	8005c9a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	685b      	ldr	r3, [r3, #4]
 8005c8a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	430a      	orrs	r2, r1
 8005c98:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005c9e:	f003 0304 	and.w	r3, r3, #4
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	d00a      	beq.n	8005cbc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	685b      	ldr	r3, [r3, #4]
 8005cac:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	430a      	orrs	r2, r1
 8005cba:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005cc0:	f003 0310 	and.w	r3, r3, #16
 8005cc4:	2b00      	cmp	r3, #0
 8005cc6:	d00a      	beq.n	8005cde <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	689b      	ldr	r3, [r3, #8]
 8005cce:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	430a      	orrs	r2, r1
 8005cdc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005ce2:	f003 0320 	and.w	r3, r3, #32
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	d00a      	beq.n	8005d00 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	689b      	ldr	r3, [r3, #8]
 8005cf0:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	430a      	orrs	r2, r1
 8005cfe:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005d04:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	d01a      	beq.n	8005d42 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	685b      	ldr	r3, [r3, #4]
 8005d12:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	430a      	orrs	r2, r1
 8005d20:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005d26:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005d2a:	d10a      	bne.n	8005d42 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	685b      	ldr	r3, [r3, #4]
 8005d32:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	430a      	orrs	r2, r1
 8005d40:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005d46:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	d00a      	beq.n	8005d64 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	685b      	ldr	r3, [r3, #4]
 8005d54:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	430a      	orrs	r2, r1
 8005d62:	605a      	str	r2, [r3, #4]
  }
}
 8005d64:	bf00      	nop
 8005d66:	370c      	adds	r7, #12
 8005d68:	46bd      	mov	sp, r7
 8005d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d6e:	4770      	bx	lr

08005d70 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005d70:	b580      	push	{r7, lr}
 8005d72:	b098      	sub	sp, #96	@ 0x60
 8005d74:	af02      	add	r7, sp, #8
 8005d76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	2200      	movs	r2, #0
 8005d7c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005d80:	f7fc fcea 	bl	8002758 <HAL_GetTick>
 8005d84:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	f003 0308 	and.w	r3, r3, #8
 8005d90:	2b08      	cmp	r3, #8
 8005d92:	d12f      	bne.n	8005df4 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005d94:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005d98:	9300      	str	r3, [sp, #0]
 8005d9a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005d9c:	2200      	movs	r2, #0
 8005d9e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8005da2:	6878      	ldr	r0, [r7, #4]
 8005da4:	f000 f88e 	bl	8005ec4 <UART_WaitOnFlagUntilTimeout>
 8005da8:	4603      	mov	r3, r0
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	d022      	beq.n	8005df4 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005db4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005db6:	e853 3f00 	ldrex	r3, [r3]
 8005dba:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005dbc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005dbe:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005dc2:	653b      	str	r3, [r7, #80]	@ 0x50
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	461a      	mov	r2, r3
 8005dca:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005dcc:	647b      	str	r3, [r7, #68]	@ 0x44
 8005dce:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005dd0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005dd2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005dd4:	e841 2300 	strex	r3, r2, [r1]
 8005dd8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005dda:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005ddc:	2b00      	cmp	r3, #0
 8005dde:	d1e6      	bne.n	8005dae <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	2220      	movs	r2, #32
 8005de4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	2200      	movs	r2, #0
 8005dec:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005df0:	2303      	movs	r3, #3
 8005df2:	e063      	b.n	8005ebc <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	f003 0304 	and.w	r3, r3, #4
 8005dfe:	2b04      	cmp	r3, #4
 8005e00:	d149      	bne.n	8005e96 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005e02:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005e06:	9300      	str	r3, [sp, #0]
 8005e08:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005e0a:	2200      	movs	r2, #0
 8005e0c:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8005e10:	6878      	ldr	r0, [r7, #4]
 8005e12:	f000 f857 	bl	8005ec4 <UART_WaitOnFlagUntilTimeout>
 8005e16:	4603      	mov	r3, r0
 8005e18:	2b00      	cmp	r3, #0
 8005e1a:	d03c      	beq.n	8005e96 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e24:	e853 3f00 	ldrex	r3, [r3]
 8005e28:	623b      	str	r3, [r7, #32]
   return(result);
 8005e2a:	6a3b      	ldr	r3, [r7, #32]
 8005e2c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005e30:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	461a      	mov	r2, r3
 8005e38:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005e3a:	633b      	str	r3, [r7, #48]	@ 0x30
 8005e3c:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e3e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005e40:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005e42:	e841 2300 	strex	r3, r2, [r1]
 8005e46:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005e48:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	d1e6      	bne.n	8005e1c <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	3308      	adds	r3, #8
 8005e54:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e56:	693b      	ldr	r3, [r7, #16]
 8005e58:	e853 3f00 	ldrex	r3, [r3]
 8005e5c:	60fb      	str	r3, [r7, #12]
   return(result);
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	f023 0301 	bic.w	r3, r3, #1
 8005e64:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	3308      	adds	r3, #8
 8005e6c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005e6e:	61fa      	str	r2, [r7, #28]
 8005e70:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e72:	69b9      	ldr	r1, [r7, #24]
 8005e74:	69fa      	ldr	r2, [r7, #28]
 8005e76:	e841 2300 	strex	r3, r2, [r1]
 8005e7a:	617b      	str	r3, [r7, #20]
   return(result);
 8005e7c:	697b      	ldr	r3, [r7, #20]
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	d1e5      	bne.n	8005e4e <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	2220      	movs	r2, #32
 8005e86:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	2200      	movs	r2, #0
 8005e8e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005e92:	2303      	movs	r3, #3
 8005e94:	e012      	b.n	8005ebc <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	2220      	movs	r2, #32
 8005e9a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	2220      	movs	r2, #32
 8005ea2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	2200      	movs	r2, #0
 8005eaa:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	2200      	movs	r2, #0
 8005eb0:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	2200      	movs	r2, #0
 8005eb6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005eba:	2300      	movs	r3, #0
}
 8005ebc:	4618      	mov	r0, r3
 8005ebe:	3758      	adds	r7, #88	@ 0x58
 8005ec0:	46bd      	mov	sp, r7
 8005ec2:	bd80      	pop	{r7, pc}

08005ec4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005ec4:	b580      	push	{r7, lr}
 8005ec6:	b084      	sub	sp, #16
 8005ec8:	af00      	add	r7, sp, #0
 8005eca:	60f8      	str	r0, [r7, #12]
 8005ecc:	60b9      	str	r1, [r7, #8]
 8005ece:	603b      	str	r3, [r7, #0]
 8005ed0:	4613      	mov	r3, r2
 8005ed2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005ed4:	e04f      	b.n	8005f76 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005ed6:	69bb      	ldr	r3, [r7, #24]
 8005ed8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005edc:	d04b      	beq.n	8005f76 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005ede:	f7fc fc3b 	bl	8002758 <HAL_GetTick>
 8005ee2:	4602      	mov	r2, r0
 8005ee4:	683b      	ldr	r3, [r7, #0]
 8005ee6:	1ad3      	subs	r3, r2, r3
 8005ee8:	69ba      	ldr	r2, [r7, #24]
 8005eea:	429a      	cmp	r2, r3
 8005eec:	d302      	bcc.n	8005ef4 <UART_WaitOnFlagUntilTimeout+0x30>
 8005eee:	69bb      	ldr	r3, [r7, #24]
 8005ef0:	2b00      	cmp	r3, #0
 8005ef2:	d101      	bne.n	8005ef8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005ef4:	2303      	movs	r3, #3
 8005ef6:	e04e      	b.n	8005f96 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	f003 0304 	and.w	r3, r3, #4
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	d037      	beq.n	8005f76 <UART_WaitOnFlagUntilTimeout+0xb2>
 8005f06:	68bb      	ldr	r3, [r7, #8]
 8005f08:	2b80      	cmp	r3, #128	@ 0x80
 8005f0a:	d034      	beq.n	8005f76 <UART_WaitOnFlagUntilTimeout+0xb2>
 8005f0c:	68bb      	ldr	r3, [r7, #8]
 8005f0e:	2b40      	cmp	r3, #64	@ 0x40
 8005f10:	d031      	beq.n	8005f76 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	69db      	ldr	r3, [r3, #28]
 8005f18:	f003 0308 	and.w	r3, r3, #8
 8005f1c:	2b08      	cmp	r3, #8
 8005f1e:	d110      	bne.n	8005f42 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	2208      	movs	r2, #8
 8005f26:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005f28:	68f8      	ldr	r0, [r7, #12]
 8005f2a:	f000 f838 	bl	8005f9e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	2208      	movs	r2, #8
 8005f32:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	2200      	movs	r2, #0
 8005f3a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8005f3e:	2301      	movs	r3, #1
 8005f40:	e029      	b.n	8005f96 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	69db      	ldr	r3, [r3, #28]
 8005f48:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005f4c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005f50:	d111      	bne.n	8005f76 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8005f5a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005f5c:	68f8      	ldr	r0, [r7, #12]
 8005f5e:	f000 f81e 	bl	8005f9e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	2220      	movs	r2, #32
 8005f66:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	2200      	movs	r2, #0
 8005f6e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8005f72:	2303      	movs	r3, #3
 8005f74:	e00f      	b.n	8005f96 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	69da      	ldr	r2, [r3, #28]
 8005f7c:	68bb      	ldr	r3, [r7, #8]
 8005f7e:	4013      	ands	r3, r2
 8005f80:	68ba      	ldr	r2, [r7, #8]
 8005f82:	429a      	cmp	r2, r3
 8005f84:	bf0c      	ite	eq
 8005f86:	2301      	moveq	r3, #1
 8005f88:	2300      	movne	r3, #0
 8005f8a:	b2db      	uxtb	r3, r3
 8005f8c:	461a      	mov	r2, r3
 8005f8e:	79fb      	ldrb	r3, [r7, #7]
 8005f90:	429a      	cmp	r2, r3
 8005f92:	d0a0      	beq.n	8005ed6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005f94:	2300      	movs	r3, #0
}
 8005f96:	4618      	mov	r0, r3
 8005f98:	3710      	adds	r7, #16
 8005f9a:	46bd      	mov	sp, r7
 8005f9c:	bd80      	pop	{r7, pc}

08005f9e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005f9e:	b480      	push	{r7}
 8005fa0:	b095      	sub	sp, #84	@ 0x54
 8005fa2:	af00      	add	r7, sp, #0
 8005fa4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005fae:	e853 3f00 	ldrex	r3, [r3]
 8005fb2:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005fb4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005fb6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005fba:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	461a      	mov	r2, r3
 8005fc2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005fc4:	643b      	str	r3, [r7, #64]	@ 0x40
 8005fc6:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fc8:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005fca:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005fcc:	e841 2300 	strex	r3, r2, [r1]
 8005fd0:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005fd2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005fd4:	2b00      	cmp	r3, #0
 8005fd6:	d1e6      	bne.n	8005fa6 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	3308      	adds	r3, #8
 8005fde:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fe0:	6a3b      	ldr	r3, [r7, #32]
 8005fe2:	e853 3f00 	ldrex	r3, [r3]
 8005fe6:	61fb      	str	r3, [r7, #28]
   return(result);
 8005fe8:	69fb      	ldr	r3, [r7, #28]
 8005fea:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005fee:	f023 0301 	bic.w	r3, r3, #1
 8005ff2:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	3308      	adds	r3, #8
 8005ffa:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005ffc:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005ffe:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006000:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006002:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006004:	e841 2300 	strex	r3, r2, [r1]
 8006008:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800600a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800600c:	2b00      	cmp	r3, #0
 800600e:	d1e3      	bne.n	8005fd8 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006014:	2b01      	cmp	r3, #1
 8006016:	d118      	bne.n	800604a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	e853 3f00 	ldrex	r3, [r3]
 8006024:	60bb      	str	r3, [r7, #8]
   return(result);
 8006026:	68bb      	ldr	r3, [r7, #8]
 8006028:	f023 0310 	bic.w	r3, r3, #16
 800602c:	647b      	str	r3, [r7, #68]	@ 0x44
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	461a      	mov	r2, r3
 8006034:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006036:	61bb      	str	r3, [r7, #24]
 8006038:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800603a:	6979      	ldr	r1, [r7, #20]
 800603c:	69ba      	ldr	r2, [r7, #24]
 800603e:	e841 2300 	strex	r3, r2, [r1]
 8006042:	613b      	str	r3, [r7, #16]
   return(result);
 8006044:	693b      	ldr	r3, [r7, #16]
 8006046:	2b00      	cmp	r3, #0
 8006048:	d1e6      	bne.n	8006018 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	2220      	movs	r2, #32
 800604e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	2200      	movs	r2, #0
 8006056:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	2200      	movs	r2, #0
 800605c:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800605e:	bf00      	nop
 8006060:	3754      	adds	r7, #84	@ 0x54
 8006062:	46bd      	mov	sp, r7
 8006064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006068:	4770      	bx	lr

0800606a <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800606a:	b480      	push	{r7}
 800606c:	b085      	sub	sp, #20
 800606e:	af00      	add	r7, sp, #0
 8006070:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8006078:	2b01      	cmp	r3, #1
 800607a:	d101      	bne.n	8006080 <HAL_UARTEx_DisableFifoMode+0x16>
 800607c:	2302      	movs	r3, #2
 800607e:	e027      	b.n	80060d0 <HAL_UARTEx_DisableFifoMode+0x66>
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	2201      	movs	r2, #1
 8006084:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	2224      	movs	r2, #36	@ 0x24
 800608c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	681a      	ldr	r2, [r3, #0]
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	f022 0201 	bic.w	r2, r2, #1
 80060a6:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 80060ae:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	2200      	movs	r2, #0
 80060b4:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	68fa      	ldr	r2, [r7, #12]
 80060bc:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	2220      	movs	r2, #32
 80060c2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	2200      	movs	r2, #0
 80060ca:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80060ce:	2300      	movs	r3, #0
}
 80060d0:	4618      	mov	r0, r3
 80060d2:	3714      	adds	r7, #20
 80060d4:	46bd      	mov	sp, r7
 80060d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060da:	4770      	bx	lr

080060dc <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80060dc:	b580      	push	{r7, lr}
 80060de:	b084      	sub	sp, #16
 80060e0:	af00      	add	r7, sp, #0
 80060e2:	6078      	str	r0, [r7, #4]
 80060e4:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80060ec:	2b01      	cmp	r3, #1
 80060ee:	d101      	bne.n	80060f4 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80060f0:	2302      	movs	r3, #2
 80060f2:	e02d      	b.n	8006150 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	2201      	movs	r2, #1
 80060f8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	2224      	movs	r2, #36	@ 0x24
 8006100:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	681a      	ldr	r2, [r3, #0]
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	f022 0201 	bic.w	r2, r2, #1
 800611a:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	689b      	ldr	r3, [r3, #8]
 8006122:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	683a      	ldr	r2, [r7, #0]
 800612c:	430a      	orrs	r2, r1
 800612e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006130:	6878      	ldr	r0, [r7, #4]
 8006132:	f000 f84f 	bl	80061d4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	68fa      	ldr	r2, [r7, #12]
 800613c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	2220      	movs	r2, #32
 8006142:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	2200      	movs	r2, #0
 800614a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800614e:	2300      	movs	r3, #0
}
 8006150:	4618      	mov	r0, r3
 8006152:	3710      	adds	r7, #16
 8006154:	46bd      	mov	sp, r7
 8006156:	bd80      	pop	{r7, pc}

08006158 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006158:	b580      	push	{r7, lr}
 800615a:	b084      	sub	sp, #16
 800615c:	af00      	add	r7, sp, #0
 800615e:	6078      	str	r0, [r7, #4]
 8006160:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8006168:	2b01      	cmp	r3, #1
 800616a:	d101      	bne.n	8006170 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800616c:	2302      	movs	r3, #2
 800616e:	e02d      	b.n	80061cc <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	2201      	movs	r2, #1
 8006174:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	2224      	movs	r2, #36	@ 0x24
 800617c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	681a      	ldr	r2, [r3, #0]
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	f022 0201 	bic.w	r2, r2, #1
 8006196:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	689b      	ldr	r3, [r3, #8]
 800619e:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	683a      	ldr	r2, [r7, #0]
 80061a8:	430a      	orrs	r2, r1
 80061aa:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80061ac:	6878      	ldr	r0, [r7, #4]
 80061ae:	f000 f811 	bl	80061d4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	68fa      	ldr	r2, [r7, #12]
 80061b8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	2220      	movs	r2, #32
 80061be:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	2200      	movs	r2, #0
 80061c6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80061ca:	2300      	movs	r3, #0
}
 80061cc:	4618      	mov	r0, r3
 80061ce:	3710      	adds	r7, #16
 80061d0:	46bd      	mov	sp, r7
 80061d2:	bd80      	pop	{r7, pc}

080061d4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80061d4:	b480      	push	{r7}
 80061d6:	b085      	sub	sp, #20
 80061d8:	af00      	add	r7, sp, #0
 80061da:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80061e0:	2b00      	cmp	r3, #0
 80061e2:	d108      	bne.n	80061f6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	2201      	movs	r2, #1
 80061e8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	2201      	movs	r2, #1
 80061f0:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80061f4:	e031      	b.n	800625a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80061f6:	2308      	movs	r3, #8
 80061f8:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80061fa:	2308      	movs	r3, #8
 80061fc:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	689b      	ldr	r3, [r3, #8]
 8006204:	0e5b      	lsrs	r3, r3, #25
 8006206:	b2db      	uxtb	r3, r3
 8006208:	f003 0307 	and.w	r3, r3, #7
 800620c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	689b      	ldr	r3, [r3, #8]
 8006214:	0f5b      	lsrs	r3, r3, #29
 8006216:	b2db      	uxtb	r3, r3
 8006218:	f003 0307 	and.w	r3, r3, #7
 800621c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800621e:	7bbb      	ldrb	r3, [r7, #14]
 8006220:	7b3a      	ldrb	r2, [r7, #12]
 8006222:	4911      	ldr	r1, [pc, #68]	@ (8006268 <UARTEx_SetNbDataToProcess+0x94>)
 8006224:	5c8a      	ldrb	r2, [r1, r2]
 8006226:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800622a:	7b3a      	ldrb	r2, [r7, #12]
 800622c:	490f      	ldr	r1, [pc, #60]	@ (800626c <UARTEx_SetNbDataToProcess+0x98>)
 800622e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006230:	fb93 f3f2 	sdiv	r3, r3, r2
 8006234:	b29a      	uxth	r2, r3
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800623c:	7bfb      	ldrb	r3, [r7, #15]
 800623e:	7b7a      	ldrb	r2, [r7, #13]
 8006240:	4909      	ldr	r1, [pc, #36]	@ (8006268 <UARTEx_SetNbDataToProcess+0x94>)
 8006242:	5c8a      	ldrb	r2, [r1, r2]
 8006244:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8006248:	7b7a      	ldrb	r2, [r7, #13]
 800624a:	4908      	ldr	r1, [pc, #32]	@ (800626c <UARTEx_SetNbDataToProcess+0x98>)
 800624c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800624e:	fb93 f3f2 	sdiv	r3, r3, r2
 8006252:	b29a      	uxth	r2, r3
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800625a:	bf00      	nop
 800625c:	3714      	adds	r7, #20
 800625e:	46bd      	mov	sp, r7
 8006260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006264:	4770      	bx	lr
 8006266:	bf00      	nop
 8006268:	0800950c 	.word	0x0800950c
 800626c:	08009514 	.word	0x08009514

08006270 <__cvt>:
 8006270:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006274:	ec57 6b10 	vmov	r6, r7, d0
 8006278:	2f00      	cmp	r7, #0
 800627a:	460c      	mov	r4, r1
 800627c:	4619      	mov	r1, r3
 800627e:	463b      	mov	r3, r7
 8006280:	bfbb      	ittet	lt
 8006282:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8006286:	461f      	movlt	r7, r3
 8006288:	2300      	movge	r3, #0
 800628a:	232d      	movlt	r3, #45	@ 0x2d
 800628c:	700b      	strb	r3, [r1, #0]
 800628e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006290:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8006294:	4691      	mov	r9, r2
 8006296:	f023 0820 	bic.w	r8, r3, #32
 800629a:	bfbc      	itt	lt
 800629c:	4632      	movlt	r2, r6
 800629e:	4616      	movlt	r6, r2
 80062a0:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80062a4:	d005      	beq.n	80062b2 <__cvt+0x42>
 80062a6:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 80062aa:	d100      	bne.n	80062ae <__cvt+0x3e>
 80062ac:	3401      	adds	r4, #1
 80062ae:	2102      	movs	r1, #2
 80062b0:	e000      	b.n	80062b4 <__cvt+0x44>
 80062b2:	2103      	movs	r1, #3
 80062b4:	ab03      	add	r3, sp, #12
 80062b6:	9301      	str	r3, [sp, #4]
 80062b8:	ab02      	add	r3, sp, #8
 80062ba:	9300      	str	r3, [sp, #0]
 80062bc:	ec47 6b10 	vmov	d0, r6, r7
 80062c0:	4653      	mov	r3, sl
 80062c2:	4622      	mov	r2, r4
 80062c4:	f000 fe74 	bl	8006fb0 <_dtoa_r>
 80062c8:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 80062cc:	4605      	mov	r5, r0
 80062ce:	d119      	bne.n	8006304 <__cvt+0x94>
 80062d0:	f019 0f01 	tst.w	r9, #1
 80062d4:	d00e      	beq.n	80062f4 <__cvt+0x84>
 80062d6:	eb00 0904 	add.w	r9, r0, r4
 80062da:	2200      	movs	r2, #0
 80062dc:	2300      	movs	r3, #0
 80062de:	4630      	mov	r0, r6
 80062e0:	4639      	mov	r1, r7
 80062e2:	f7fa fc19 	bl	8000b18 <__aeabi_dcmpeq>
 80062e6:	b108      	cbz	r0, 80062ec <__cvt+0x7c>
 80062e8:	f8cd 900c 	str.w	r9, [sp, #12]
 80062ec:	2230      	movs	r2, #48	@ 0x30
 80062ee:	9b03      	ldr	r3, [sp, #12]
 80062f0:	454b      	cmp	r3, r9
 80062f2:	d31e      	bcc.n	8006332 <__cvt+0xc2>
 80062f4:	9b03      	ldr	r3, [sp, #12]
 80062f6:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80062f8:	1b5b      	subs	r3, r3, r5
 80062fa:	4628      	mov	r0, r5
 80062fc:	6013      	str	r3, [r2, #0]
 80062fe:	b004      	add	sp, #16
 8006300:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006304:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8006308:	eb00 0904 	add.w	r9, r0, r4
 800630c:	d1e5      	bne.n	80062da <__cvt+0x6a>
 800630e:	7803      	ldrb	r3, [r0, #0]
 8006310:	2b30      	cmp	r3, #48	@ 0x30
 8006312:	d10a      	bne.n	800632a <__cvt+0xba>
 8006314:	2200      	movs	r2, #0
 8006316:	2300      	movs	r3, #0
 8006318:	4630      	mov	r0, r6
 800631a:	4639      	mov	r1, r7
 800631c:	f7fa fbfc 	bl	8000b18 <__aeabi_dcmpeq>
 8006320:	b918      	cbnz	r0, 800632a <__cvt+0xba>
 8006322:	f1c4 0401 	rsb	r4, r4, #1
 8006326:	f8ca 4000 	str.w	r4, [sl]
 800632a:	f8da 3000 	ldr.w	r3, [sl]
 800632e:	4499      	add	r9, r3
 8006330:	e7d3      	b.n	80062da <__cvt+0x6a>
 8006332:	1c59      	adds	r1, r3, #1
 8006334:	9103      	str	r1, [sp, #12]
 8006336:	701a      	strb	r2, [r3, #0]
 8006338:	e7d9      	b.n	80062ee <__cvt+0x7e>

0800633a <__exponent>:
 800633a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800633c:	2900      	cmp	r1, #0
 800633e:	bfba      	itte	lt
 8006340:	4249      	neglt	r1, r1
 8006342:	232d      	movlt	r3, #45	@ 0x2d
 8006344:	232b      	movge	r3, #43	@ 0x2b
 8006346:	2909      	cmp	r1, #9
 8006348:	7002      	strb	r2, [r0, #0]
 800634a:	7043      	strb	r3, [r0, #1]
 800634c:	dd29      	ble.n	80063a2 <__exponent+0x68>
 800634e:	f10d 0307 	add.w	r3, sp, #7
 8006352:	461d      	mov	r5, r3
 8006354:	270a      	movs	r7, #10
 8006356:	461a      	mov	r2, r3
 8006358:	fbb1 f6f7 	udiv	r6, r1, r7
 800635c:	fb07 1416 	mls	r4, r7, r6, r1
 8006360:	3430      	adds	r4, #48	@ 0x30
 8006362:	f802 4c01 	strb.w	r4, [r2, #-1]
 8006366:	460c      	mov	r4, r1
 8006368:	2c63      	cmp	r4, #99	@ 0x63
 800636a:	f103 33ff 	add.w	r3, r3, #4294967295
 800636e:	4631      	mov	r1, r6
 8006370:	dcf1      	bgt.n	8006356 <__exponent+0x1c>
 8006372:	3130      	adds	r1, #48	@ 0x30
 8006374:	1e94      	subs	r4, r2, #2
 8006376:	f803 1c01 	strb.w	r1, [r3, #-1]
 800637a:	1c41      	adds	r1, r0, #1
 800637c:	4623      	mov	r3, r4
 800637e:	42ab      	cmp	r3, r5
 8006380:	d30a      	bcc.n	8006398 <__exponent+0x5e>
 8006382:	f10d 0309 	add.w	r3, sp, #9
 8006386:	1a9b      	subs	r3, r3, r2
 8006388:	42ac      	cmp	r4, r5
 800638a:	bf88      	it	hi
 800638c:	2300      	movhi	r3, #0
 800638e:	3302      	adds	r3, #2
 8006390:	4403      	add	r3, r0
 8006392:	1a18      	subs	r0, r3, r0
 8006394:	b003      	add	sp, #12
 8006396:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006398:	f813 6b01 	ldrb.w	r6, [r3], #1
 800639c:	f801 6f01 	strb.w	r6, [r1, #1]!
 80063a0:	e7ed      	b.n	800637e <__exponent+0x44>
 80063a2:	2330      	movs	r3, #48	@ 0x30
 80063a4:	3130      	adds	r1, #48	@ 0x30
 80063a6:	7083      	strb	r3, [r0, #2]
 80063a8:	70c1      	strb	r1, [r0, #3]
 80063aa:	1d03      	adds	r3, r0, #4
 80063ac:	e7f1      	b.n	8006392 <__exponent+0x58>
	...

080063b0 <_printf_float>:
 80063b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80063b4:	b08d      	sub	sp, #52	@ 0x34
 80063b6:	460c      	mov	r4, r1
 80063b8:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 80063bc:	4616      	mov	r6, r2
 80063be:	461f      	mov	r7, r3
 80063c0:	4605      	mov	r5, r0
 80063c2:	f000 fcf5 	bl	8006db0 <_localeconv_r>
 80063c6:	6803      	ldr	r3, [r0, #0]
 80063c8:	9304      	str	r3, [sp, #16]
 80063ca:	4618      	mov	r0, r3
 80063cc:	f7f9 ff78 	bl	80002c0 <strlen>
 80063d0:	2300      	movs	r3, #0
 80063d2:	930a      	str	r3, [sp, #40]	@ 0x28
 80063d4:	f8d8 3000 	ldr.w	r3, [r8]
 80063d8:	9005      	str	r0, [sp, #20]
 80063da:	3307      	adds	r3, #7
 80063dc:	f023 0307 	bic.w	r3, r3, #7
 80063e0:	f103 0208 	add.w	r2, r3, #8
 80063e4:	f894 a018 	ldrb.w	sl, [r4, #24]
 80063e8:	f8d4 b000 	ldr.w	fp, [r4]
 80063ec:	f8c8 2000 	str.w	r2, [r8]
 80063f0:	e9d3 8900 	ldrd	r8, r9, [r3]
 80063f4:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 80063f8:	9307      	str	r3, [sp, #28]
 80063fa:	f8cd 8018 	str.w	r8, [sp, #24]
 80063fe:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8006402:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006406:	4b9c      	ldr	r3, [pc, #624]	@ (8006678 <_printf_float+0x2c8>)
 8006408:	f04f 32ff 	mov.w	r2, #4294967295
 800640c:	f7fa fbb6 	bl	8000b7c <__aeabi_dcmpun>
 8006410:	bb70      	cbnz	r0, 8006470 <_printf_float+0xc0>
 8006412:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006416:	4b98      	ldr	r3, [pc, #608]	@ (8006678 <_printf_float+0x2c8>)
 8006418:	f04f 32ff 	mov.w	r2, #4294967295
 800641c:	f7fa fb90 	bl	8000b40 <__aeabi_dcmple>
 8006420:	bb30      	cbnz	r0, 8006470 <_printf_float+0xc0>
 8006422:	2200      	movs	r2, #0
 8006424:	2300      	movs	r3, #0
 8006426:	4640      	mov	r0, r8
 8006428:	4649      	mov	r1, r9
 800642a:	f7fa fb7f 	bl	8000b2c <__aeabi_dcmplt>
 800642e:	b110      	cbz	r0, 8006436 <_printf_float+0x86>
 8006430:	232d      	movs	r3, #45	@ 0x2d
 8006432:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006436:	4a91      	ldr	r2, [pc, #580]	@ (800667c <_printf_float+0x2cc>)
 8006438:	4b91      	ldr	r3, [pc, #580]	@ (8006680 <_printf_float+0x2d0>)
 800643a:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800643e:	bf8c      	ite	hi
 8006440:	4690      	movhi	r8, r2
 8006442:	4698      	movls	r8, r3
 8006444:	2303      	movs	r3, #3
 8006446:	6123      	str	r3, [r4, #16]
 8006448:	f02b 0304 	bic.w	r3, fp, #4
 800644c:	6023      	str	r3, [r4, #0]
 800644e:	f04f 0900 	mov.w	r9, #0
 8006452:	9700      	str	r7, [sp, #0]
 8006454:	4633      	mov	r3, r6
 8006456:	aa0b      	add	r2, sp, #44	@ 0x2c
 8006458:	4621      	mov	r1, r4
 800645a:	4628      	mov	r0, r5
 800645c:	f000 f9d2 	bl	8006804 <_printf_common>
 8006460:	3001      	adds	r0, #1
 8006462:	f040 808d 	bne.w	8006580 <_printf_float+0x1d0>
 8006466:	f04f 30ff 	mov.w	r0, #4294967295
 800646a:	b00d      	add	sp, #52	@ 0x34
 800646c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006470:	4642      	mov	r2, r8
 8006472:	464b      	mov	r3, r9
 8006474:	4640      	mov	r0, r8
 8006476:	4649      	mov	r1, r9
 8006478:	f7fa fb80 	bl	8000b7c <__aeabi_dcmpun>
 800647c:	b140      	cbz	r0, 8006490 <_printf_float+0xe0>
 800647e:	464b      	mov	r3, r9
 8006480:	2b00      	cmp	r3, #0
 8006482:	bfbc      	itt	lt
 8006484:	232d      	movlt	r3, #45	@ 0x2d
 8006486:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800648a:	4a7e      	ldr	r2, [pc, #504]	@ (8006684 <_printf_float+0x2d4>)
 800648c:	4b7e      	ldr	r3, [pc, #504]	@ (8006688 <_printf_float+0x2d8>)
 800648e:	e7d4      	b.n	800643a <_printf_float+0x8a>
 8006490:	6863      	ldr	r3, [r4, #4]
 8006492:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8006496:	9206      	str	r2, [sp, #24]
 8006498:	1c5a      	adds	r2, r3, #1
 800649a:	d13b      	bne.n	8006514 <_printf_float+0x164>
 800649c:	2306      	movs	r3, #6
 800649e:	6063      	str	r3, [r4, #4]
 80064a0:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 80064a4:	2300      	movs	r3, #0
 80064a6:	6022      	str	r2, [r4, #0]
 80064a8:	9303      	str	r3, [sp, #12]
 80064aa:	ab0a      	add	r3, sp, #40	@ 0x28
 80064ac:	e9cd a301 	strd	sl, r3, [sp, #4]
 80064b0:	ab09      	add	r3, sp, #36	@ 0x24
 80064b2:	9300      	str	r3, [sp, #0]
 80064b4:	6861      	ldr	r1, [r4, #4]
 80064b6:	ec49 8b10 	vmov	d0, r8, r9
 80064ba:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 80064be:	4628      	mov	r0, r5
 80064c0:	f7ff fed6 	bl	8006270 <__cvt>
 80064c4:	9b06      	ldr	r3, [sp, #24]
 80064c6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80064c8:	2b47      	cmp	r3, #71	@ 0x47
 80064ca:	4680      	mov	r8, r0
 80064cc:	d129      	bne.n	8006522 <_printf_float+0x172>
 80064ce:	1cc8      	adds	r0, r1, #3
 80064d0:	db02      	blt.n	80064d8 <_printf_float+0x128>
 80064d2:	6863      	ldr	r3, [r4, #4]
 80064d4:	4299      	cmp	r1, r3
 80064d6:	dd41      	ble.n	800655c <_printf_float+0x1ac>
 80064d8:	f1aa 0a02 	sub.w	sl, sl, #2
 80064dc:	fa5f fa8a 	uxtb.w	sl, sl
 80064e0:	3901      	subs	r1, #1
 80064e2:	4652      	mov	r2, sl
 80064e4:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 80064e8:	9109      	str	r1, [sp, #36]	@ 0x24
 80064ea:	f7ff ff26 	bl	800633a <__exponent>
 80064ee:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80064f0:	1813      	adds	r3, r2, r0
 80064f2:	2a01      	cmp	r2, #1
 80064f4:	4681      	mov	r9, r0
 80064f6:	6123      	str	r3, [r4, #16]
 80064f8:	dc02      	bgt.n	8006500 <_printf_float+0x150>
 80064fa:	6822      	ldr	r2, [r4, #0]
 80064fc:	07d2      	lsls	r2, r2, #31
 80064fe:	d501      	bpl.n	8006504 <_printf_float+0x154>
 8006500:	3301      	adds	r3, #1
 8006502:	6123      	str	r3, [r4, #16]
 8006504:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8006508:	2b00      	cmp	r3, #0
 800650a:	d0a2      	beq.n	8006452 <_printf_float+0xa2>
 800650c:	232d      	movs	r3, #45	@ 0x2d
 800650e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006512:	e79e      	b.n	8006452 <_printf_float+0xa2>
 8006514:	9a06      	ldr	r2, [sp, #24]
 8006516:	2a47      	cmp	r2, #71	@ 0x47
 8006518:	d1c2      	bne.n	80064a0 <_printf_float+0xf0>
 800651a:	2b00      	cmp	r3, #0
 800651c:	d1c0      	bne.n	80064a0 <_printf_float+0xf0>
 800651e:	2301      	movs	r3, #1
 8006520:	e7bd      	b.n	800649e <_printf_float+0xee>
 8006522:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8006526:	d9db      	bls.n	80064e0 <_printf_float+0x130>
 8006528:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800652c:	d118      	bne.n	8006560 <_printf_float+0x1b0>
 800652e:	2900      	cmp	r1, #0
 8006530:	6863      	ldr	r3, [r4, #4]
 8006532:	dd0b      	ble.n	800654c <_printf_float+0x19c>
 8006534:	6121      	str	r1, [r4, #16]
 8006536:	b913      	cbnz	r3, 800653e <_printf_float+0x18e>
 8006538:	6822      	ldr	r2, [r4, #0]
 800653a:	07d0      	lsls	r0, r2, #31
 800653c:	d502      	bpl.n	8006544 <_printf_float+0x194>
 800653e:	3301      	adds	r3, #1
 8006540:	440b      	add	r3, r1
 8006542:	6123      	str	r3, [r4, #16]
 8006544:	65a1      	str	r1, [r4, #88]	@ 0x58
 8006546:	f04f 0900 	mov.w	r9, #0
 800654a:	e7db      	b.n	8006504 <_printf_float+0x154>
 800654c:	b913      	cbnz	r3, 8006554 <_printf_float+0x1a4>
 800654e:	6822      	ldr	r2, [r4, #0]
 8006550:	07d2      	lsls	r2, r2, #31
 8006552:	d501      	bpl.n	8006558 <_printf_float+0x1a8>
 8006554:	3302      	adds	r3, #2
 8006556:	e7f4      	b.n	8006542 <_printf_float+0x192>
 8006558:	2301      	movs	r3, #1
 800655a:	e7f2      	b.n	8006542 <_printf_float+0x192>
 800655c:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8006560:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006562:	4299      	cmp	r1, r3
 8006564:	db05      	blt.n	8006572 <_printf_float+0x1c2>
 8006566:	6823      	ldr	r3, [r4, #0]
 8006568:	6121      	str	r1, [r4, #16]
 800656a:	07d8      	lsls	r0, r3, #31
 800656c:	d5ea      	bpl.n	8006544 <_printf_float+0x194>
 800656e:	1c4b      	adds	r3, r1, #1
 8006570:	e7e7      	b.n	8006542 <_printf_float+0x192>
 8006572:	2900      	cmp	r1, #0
 8006574:	bfd4      	ite	le
 8006576:	f1c1 0202 	rsble	r2, r1, #2
 800657a:	2201      	movgt	r2, #1
 800657c:	4413      	add	r3, r2
 800657e:	e7e0      	b.n	8006542 <_printf_float+0x192>
 8006580:	6823      	ldr	r3, [r4, #0]
 8006582:	055a      	lsls	r2, r3, #21
 8006584:	d407      	bmi.n	8006596 <_printf_float+0x1e6>
 8006586:	6923      	ldr	r3, [r4, #16]
 8006588:	4642      	mov	r2, r8
 800658a:	4631      	mov	r1, r6
 800658c:	4628      	mov	r0, r5
 800658e:	47b8      	blx	r7
 8006590:	3001      	adds	r0, #1
 8006592:	d12b      	bne.n	80065ec <_printf_float+0x23c>
 8006594:	e767      	b.n	8006466 <_printf_float+0xb6>
 8006596:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800659a:	f240 80dd 	bls.w	8006758 <_printf_float+0x3a8>
 800659e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80065a2:	2200      	movs	r2, #0
 80065a4:	2300      	movs	r3, #0
 80065a6:	f7fa fab7 	bl	8000b18 <__aeabi_dcmpeq>
 80065aa:	2800      	cmp	r0, #0
 80065ac:	d033      	beq.n	8006616 <_printf_float+0x266>
 80065ae:	4a37      	ldr	r2, [pc, #220]	@ (800668c <_printf_float+0x2dc>)
 80065b0:	2301      	movs	r3, #1
 80065b2:	4631      	mov	r1, r6
 80065b4:	4628      	mov	r0, r5
 80065b6:	47b8      	blx	r7
 80065b8:	3001      	adds	r0, #1
 80065ba:	f43f af54 	beq.w	8006466 <_printf_float+0xb6>
 80065be:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 80065c2:	4543      	cmp	r3, r8
 80065c4:	db02      	blt.n	80065cc <_printf_float+0x21c>
 80065c6:	6823      	ldr	r3, [r4, #0]
 80065c8:	07d8      	lsls	r0, r3, #31
 80065ca:	d50f      	bpl.n	80065ec <_printf_float+0x23c>
 80065cc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80065d0:	4631      	mov	r1, r6
 80065d2:	4628      	mov	r0, r5
 80065d4:	47b8      	blx	r7
 80065d6:	3001      	adds	r0, #1
 80065d8:	f43f af45 	beq.w	8006466 <_printf_float+0xb6>
 80065dc:	f04f 0900 	mov.w	r9, #0
 80065e0:	f108 38ff 	add.w	r8, r8, #4294967295
 80065e4:	f104 0a1a 	add.w	sl, r4, #26
 80065e8:	45c8      	cmp	r8, r9
 80065ea:	dc09      	bgt.n	8006600 <_printf_float+0x250>
 80065ec:	6823      	ldr	r3, [r4, #0]
 80065ee:	079b      	lsls	r3, r3, #30
 80065f0:	f100 8103 	bmi.w	80067fa <_printf_float+0x44a>
 80065f4:	68e0      	ldr	r0, [r4, #12]
 80065f6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80065f8:	4298      	cmp	r0, r3
 80065fa:	bfb8      	it	lt
 80065fc:	4618      	movlt	r0, r3
 80065fe:	e734      	b.n	800646a <_printf_float+0xba>
 8006600:	2301      	movs	r3, #1
 8006602:	4652      	mov	r2, sl
 8006604:	4631      	mov	r1, r6
 8006606:	4628      	mov	r0, r5
 8006608:	47b8      	blx	r7
 800660a:	3001      	adds	r0, #1
 800660c:	f43f af2b 	beq.w	8006466 <_printf_float+0xb6>
 8006610:	f109 0901 	add.w	r9, r9, #1
 8006614:	e7e8      	b.n	80065e8 <_printf_float+0x238>
 8006616:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006618:	2b00      	cmp	r3, #0
 800661a:	dc39      	bgt.n	8006690 <_printf_float+0x2e0>
 800661c:	4a1b      	ldr	r2, [pc, #108]	@ (800668c <_printf_float+0x2dc>)
 800661e:	2301      	movs	r3, #1
 8006620:	4631      	mov	r1, r6
 8006622:	4628      	mov	r0, r5
 8006624:	47b8      	blx	r7
 8006626:	3001      	adds	r0, #1
 8006628:	f43f af1d 	beq.w	8006466 <_printf_float+0xb6>
 800662c:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8006630:	ea59 0303 	orrs.w	r3, r9, r3
 8006634:	d102      	bne.n	800663c <_printf_float+0x28c>
 8006636:	6823      	ldr	r3, [r4, #0]
 8006638:	07d9      	lsls	r1, r3, #31
 800663a:	d5d7      	bpl.n	80065ec <_printf_float+0x23c>
 800663c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006640:	4631      	mov	r1, r6
 8006642:	4628      	mov	r0, r5
 8006644:	47b8      	blx	r7
 8006646:	3001      	adds	r0, #1
 8006648:	f43f af0d 	beq.w	8006466 <_printf_float+0xb6>
 800664c:	f04f 0a00 	mov.w	sl, #0
 8006650:	f104 0b1a 	add.w	fp, r4, #26
 8006654:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006656:	425b      	negs	r3, r3
 8006658:	4553      	cmp	r3, sl
 800665a:	dc01      	bgt.n	8006660 <_printf_float+0x2b0>
 800665c:	464b      	mov	r3, r9
 800665e:	e793      	b.n	8006588 <_printf_float+0x1d8>
 8006660:	2301      	movs	r3, #1
 8006662:	465a      	mov	r2, fp
 8006664:	4631      	mov	r1, r6
 8006666:	4628      	mov	r0, r5
 8006668:	47b8      	blx	r7
 800666a:	3001      	adds	r0, #1
 800666c:	f43f aefb 	beq.w	8006466 <_printf_float+0xb6>
 8006670:	f10a 0a01 	add.w	sl, sl, #1
 8006674:	e7ee      	b.n	8006654 <_printf_float+0x2a4>
 8006676:	bf00      	nop
 8006678:	7fefffff 	.word	0x7fefffff
 800667c:	08009520 	.word	0x08009520
 8006680:	0800951c 	.word	0x0800951c
 8006684:	08009528 	.word	0x08009528
 8006688:	08009524 	.word	0x08009524
 800668c:	0800952c 	.word	0x0800952c
 8006690:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8006692:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8006696:	4553      	cmp	r3, sl
 8006698:	bfa8      	it	ge
 800669a:	4653      	movge	r3, sl
 800669c:	2b00      	cmp	r3, #0
 800669e:	4699      	mov	r9, r3
 80066a0:	dc36      	bgt.n	8006710 <_printf_float+0x360>
 80066a2:	f04f 0b00 	mov.w	fp, #0
 80066a6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80066aa:	f104 021a 	add.w	r2, r4, #26
 80066ae:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80066b0:	9306      	str	r3, [sp, #24]
 80066b2:	eba3 0309 	sub.w	r3, r3, r9
 80066b6:	455b      	cmp	r3, fp
 80066b8:	dc31      	bgt.n	800671e <_printf_float+0x36e>
 80066ba:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80066bc:	459a      	cmp	sl, r3
 80066be:	dc3a      	bgt.n	8006736 <_printf_float+0x386>
 80066c0:	6823      	ldr	r3, [r4, #0]
 80066c2:	07da      	lsls	r2, r3, #31
 80066c4:	d437      	bmi.n	8006736 <_printf_float+0x386>
 80066c6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80066c8:	ebaa 0903 	sub.w	r9, sl, r3
 80066cc:	9b06      	ldr	r3, [sp, #24]
 80066ce:	ebaa 0303 	sub.w	r3, sl, r3
 80066d2:	4599      	cmp	r9, r3
 80066d4:	bfa8      	it	ge
 80066d6:	4699      	movge	r9, r3
 80066d8:	f1b9 0f00 	cmp.w	r9, #0
 80066dc:	dc33      	bgt.n	8006746 <_printf_float+0x396>
 80066de:	f04f 0800 	mov.w	r8, #0
 80066e2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80066e6:	f104 0b1a 	add.w	fp, r4, #26
 80066ea:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80066ec:	ebaa 0303 	sub.w	r3, sl, r3
 80066f0:	eba3 0309 	sub.w	r3, r3, r9
 80066f4:	4543      	cmp	r3, r8
 80066f6:	f77f af79 	ble.w	80065ec <_printf_float+0x23c>
 80066fa:	2301      	movs	r3, #1
 80066fc:	465a      	mov	r2, fp
 80066fe:	4631      	mov	r1, r6
 8006700:	4628      	mov	r0, r5
 8006702:	47b8      	blx	r7
 8006704:	3001      	adds	r0, #1
 8006706:	f43f aeae 	beq.w	8006466 <_printf_float+0xb6>
 800670a:	f108 0801 	add.w	r8, r8, #1
 800670e:	e7ec      	b.n	80066ea <_printf_float+0x33a>
 8006710:	4642      	mov	r2, r8
 8006712:	4631      	mov	r1, r6
 8006714:	4628      	mov	r0, r5
 8006716:	47b8      	blx	r7
 8006718:	3001      	adds	r0, #1
 800671a:	d1c2      	bne.n	80066a2 <_printf_float+0x2f2>
 800671c:	e6a3      	b.n	8006466 <_printf_float+0xb6>
 800671e:	2301      	movs	r3, #1
 8006720:	4631      	mov	r1, r6
 8006722:	4628      	mov	r0, r5
 8006724:	9206      	str	r2, [sp, #24]
 8006726:	47b8      	blx	r7
 8006728:	3001      	adds	r0, #1
 800672a:	f43f ae9c 	beq.w	8006466 <_printf_float+0xb6>
 800672e:	9a06      	ldr	r2, [sp, #24]
 8006730:	f10b 0b01 	add.w	fp, fp, #1
 8006734:	e7bb      	b.n	80066ae <_printf_float+0x2fe>
 8006736:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800673a:	4631      	mov	r1, r6
 800673c:	4628      	mov	r0, r5
 800673e:	47b8      	blx	r7
 8006740:	3001      	adds	r0, #1
 8006742:	d1c0      	bne.n	80066c6 <_printf_float+0x316>
 8006744:	e68f      	b.n	8006466 <_printf_float+0xb6>
 8006746:	9a06      	ldr	r2, [sp, #24]
 8006748:	464b      	mov	r3, r9
 800674a:	4442      	add	r2, r8
 800674c:	4631      	mov	r1, r6
 800674e:	4628      	mov	r0, r5
 8006750:	47b8      	blx	r7
 8006752:	3001      	adds	r0, #1
 8006754:	d1c3      	bne.n	80066de <_printf_float+0x32e>
 8006756:	e686      	b.n	8006466 <_printf_float+0xb6>
 8006758:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800675c:	f1ba 0f01 	cmp.w	sl, #1
 8006760:	dc01      	bgt.n	8006766 <_printf_float+0x3b6>
 8006762:	07db      	lsls	r3, r3, #31
 8006764:	d536      	bpl.n	80067d4 <_printf_float+0x424>
 8006766:	2301      	movs	r3, #1
 8006768:	4642      	mov	r2, r8
 800676a:	4631      	mov	r1, r6
 800676c:	4628      	mov	r0, r5
 800676e:	47b8      	blx	r7
 8006770:	3001      	adds	r0, #1
 8006772:	f43f ae78 	beq.w	8006466 <_printf_float+0xb6>
 8006776:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800677a:	4631      	mov	r1, r6
 800677c:	4628      	mov	r0, r5
 800677e:	47b8      	blx	r7
 8006780:	3001      	adds	r0, #1
 8006782:	f43f ae70 	beq.w	8006466 <_printf_float+0xb6>
 8006786:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800678a:	2200      	movs	r2, #0
 800678c:	2300      	movs	r3, #0
 800678e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006792:	f7fa f9c1 	bl	8000b18 <__aeabi_dcmpeq>
 8006796:	b9c0      	cbnz	r0, 80067ca <_printf_float+0x41a>
 8006798:	4653      	mov	r3, sl
 800679a:	f108 0201 	add.w	r2, r8, #1
 800679e:	4631      	mov	r1, r6
 80067a0:	4628      	mov	r0, r5
 80067a2:	47b8      	blx	r7
 80067a4:	3001      	adds	r0, #1
 80067a6:	d10c      	bne.n	80067c2 <_printf_float+0x412>
 80067a8:	e65d      	b.n	8006466 <_printf_float+0xb6>
 80067aa:	2301      	movs	r3, #1
 80067ac:	465a      	mov	r2, fp
 80067ae:	4631      	mov	r1, r6
 80067b0:	4628      	mov	r0, r5
 80067b2:	47b8      	blx	r7
 80067b4:	3001      	adds	r0, #1
 80067b6:	f43f ae56 	beq.w	8006466 <_printf_float+0xb6>
 80067ba:	f108 0801 	add.w	r8, r8, #1
 80067be:	45d0      	cmp	r8, sl
 80067c0:	dbf3      	blt.n	80067aa <_printf_float+0x3fa>
 80067c2:	464b      	mov	r3, r9
 80067c4:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 80067c8:	e6df      	b.n	800658a <_printf_float+0x1da>
 80067ca:	f04f 0800 	mov.w	r8, #0
 80067ce:	f104 0b1a 	add.w	fp, r4, #26
 80067d2:	e7f4      	b.n	80067be <_printf_float+0x40e>
 80067d4:	2301      	movs	r3, #1
 80067d6:	4642      	mov	r2, r8
 80067d8:	e7e1      	b.n	800679e <_printf_float+0x3ee>
 80067da:	2301      	movs	r3, #1
 80067dc:	464a      	mov	r2, r9
 80067de:	4631      	mov	r1, r6
 80067e0:	4628      	mov	r0, r5
 80067e2:	47b8      	blx	r7
 80067e4:	3001      	adds	r0, #1
 80067e6:	f43f ae3e 	beq.w	8006466 <_printf_float+0xb6>
 80067ea:	f108 0801 	add.w	r8, r8, #1
 80067ee:	68e3      	ldr	r3, [r4, #12]
 80067f0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80067f2:	1a5b      	subs	r3, r3, r1
 80067f4:	4543      	cmp	r3, r8
 80067f6:	dcf0      	bgt.n	80067da <_printf_float+0x42a>
 80067f8:	e6fc      	b.n	80065f4 <_printf_float+0x244>
 80067fa:	f04f 0800 	mov.w	r8, #0
 80067fe:	f104 0919 	add.w	r9, r4, #25
 8006802:	e7f4      	b.n	80067ee <_printf_float+0x43e>

08006804 <_printf_common>:
 8006804:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006808:	4616      	mov	r6, r2
 800680a:	4698      	mov	r8, r3
 800680c:	688a      	ldr	r2, [r1, #8]
 800680e:	690b      	ldr	r3, [r1, #16]
 8006810:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006814:	4293      	cmp	r3, r2
 8006816:	bfb8      	it	lt
 8006818:	4613      	movlt	r3, r2
 800681a:	6033      	str	r3, [r6, #0]
 800681c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8006820:	4607      	mov	r7, r0
 8006822:	460c      	mov	r4, r1
 8006824:	b10a      	cbz	r2, 800682a <_printf_common+0x26>
 8006826:	3301      	adds	r3, #1
 8006828:	6033      	str	r3, [r6, #0]
 800682a:	6823      	ldr	r3, [r4, #0]
 800682c:	0699      	lsls	r1, r3, #26
 800682e:	bf42      	ittt	mi
 8006830:	6833      	ldrmi	r3, [r6, #0]
 8006832:	3302      	addmi	r3, #2
 8006834:	6033      	strmi	r3, [r6, #0]
 8006836:	6825      	ldr	r5, [r4, #0]
 8006838:	f015 0506 	ands.w	r5, r5, #6
 800683c:	d106      	bne.n	800684c <_printf_common+0x48>
 800683e:	f104 0a19 	add.w	sl, r4, #25
 8006842:	68e3      	ldr	r3, [r4, #12]
 8006844:	6832      	ldr	r2, [r6, #0]
 8006846:	1a9b      	subs	r3, r3, r2
 8006848:	42ab      	cmp	r3, r5
 800684a:	dc26      	bgt.n	800689a <_printf_common+0x96>
 800684c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8006850:	6822      	ldr	r2, [r4, #0]
 8006852:	3b00      	subs	r3, #0
 8006854:	bf18      	it	ne
 8006856:	2301      	movne	r3, #1
 8006858:	0692      	lsls	r2, r2, #26
 800685a:	d42b      	bmi.n	80068b4 <_printf_common+0xb0>
 800685c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8006860:	4641      	mov	r1, r8
 8006862:	4638      	mov	r0, r7
 8006864:	47c8      	blx	r9
 8006866:	3001      	adds	r0, #1
 8006868:	d01e      	beq.n	80068a8 <_printf_common+0xa4>
 800686a:	6823      	ldr	r3, [r4, #0]
 800686c:	6922      	ldr	r2, [r4, #16]
 800686e:	f003 0306 	and.w	r3, r3, #6
 8006872:	2b04      	cmp	r3, #4
 8006874:	bf02      	ittt	eq
 8006876:	68e5      	ldreq	r5, [r4, #12]
 8006878:	6833      	ldreq	r3, [r6, #0]
 800687a:	1aed      	subeq	r5, r5, r3
 800687c:	68a3      	ldr	r3, [r4, #8]
 800687e:	bf0c      	ite	eq
 8006880:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006884:	2500      	movne	r5, #0
 8006886:	4293      	cmp	r3, r2
 8006888:	bfc4      	itt	gt
 800688a:	1a9b      	subgt	r3, r3, r2
 800688c:	18ed      	addgt	r5, r5, r3
 800688e:	2600      	movs	r6, #0
 8006890:	341a      	adds	r4, #26
 8006892:	42b5      	cmp	r5, r6
 8006894:	d11a      	bne.n	80068cc <_printf_common+0xc8>
 8006896:	2000      	movs	r0, #0
 8006898:	e008      	b.n	80068ac <_printf_common+0xa8>
 800689a:	2301      	movs	r3, #1
 800689c:	4652      	mov	r2, sl
 800689e:	4641      	mov	r1, r8
 80068a0:	4638      	mov	r0, r7
 80068a2:	47c8      	blx	r9
 80068a4:	3001      	adds	r0, #1
 80068a6:	d103      	bne.n	80068b0 <_printf_common+0xac>
 80068a8:	f04f 30ff 	mov.w	r0, #4294967295
 80068ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80068b0:	3501      	adds	r5, #1
 80068b2:	e7c6      	b.n	8006842 <_printf_common+0x3e>
 80068b4:	18e1      	adds	r1, r4, r3
 80068b6:	1c5a      	adds	r2, r3, #1
 80068b8:	2030      	movs	r0, #48	@ 0x30
 80068ba:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80068be:	4422      	add	r2, r4
 80068c0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80068c4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80068c8:	3302      	adds	r3, #2
 80068ca:	e7c7      	b.n	800685c <_printf_common+0x58>
 80068cc:	2301      	movs	r3, #1
 80068ce:	4622      	mov	r2, r4
 80068d0:	4641      	mov	r1, r8
 80068d2:	4638      	mov	r0, r7
 80068d4:	47c8      	blx	r9
 80068d6:	3001      	adds	r0, #1
 80068d8:	d0e6      	beq.n	80068a8 <_printf_common+0xa4>
 80068da:	3601      	adds	r6, #1
 80068dc:	e7d9      	b.n	8006892 <_printf_common+0x8e>
	...

080068e0 <_printf_i>:
 80068e0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80068e4:	7e0f      	ldrb	r7, [r1, #24]
 80068e6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80068e8:	2f78      	cmp	r7, #120	@ 0x78
 80068ea:	4691      	mov	r9, r2
 80068ec:	4680      	mov	r8, r0
 80068ee:	460c      	mov	r4, r1
 80068f0:	469a      	mov	sl, r3
 80068f2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80068f6:	d807      	bhi.n	8006908 <_printf_i+0x28>
 80068f8:	2f62      	cmp	r7, #98	@ 0x62
 80068fa:	d80a      	bhi.n	8006912 <_printf_i+0x32>
 80068fc:	2f00      	cmp	r7, #0
 80068fe:	f000 80d1 	beq.w	8006aa4 <_printf_i+0x1c4>
 8006902:	2f58      	cmp	r7, #88	@ 0x58
 8006904:	f000 80b8 	beq.w	8006a78 <_printf_i+0x198>
 8006908:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800690c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8006910:	e03a      	b.n	8006988 <_printf_i+0xa8>
 8006912:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8006916:	2b15      	cmp	r3, #21
 8006918:	d8f6      	bhi.n	8006908 <_printf_i+0x28>
 800691a:	a101      	add	r1, pc, #4	@ (adr r1, 8006920 <_printf_i+0x40>)
 800691c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006920:	08006979 	.word	0x08006979
 8006924:	0800698d 	.word	0x0800698d
 8006928:	08006909 	.word	0x08006909
 800692c:	08006909 	.word	0x08006909
 8006930:	08006909 	.word	0x08006909
 8006934:	08006909 	.word	0x08006909
 8006938:	0800698d 	.word	0x0800698d
 800693c:	08006909 	.word	0x08006909
 8006940:	08006909 	.word	0x08006909
 8006944:	08006909 	.word	0x08006909
 8006948:	08006909 	.word	0x08006909
 800694c:	08006a8b 	.word	0x08006a8b
 8006950:	080069b7 	.word	0x080069b7
 8006954:	08006a45 	.word	0x08006a45
 8006958:	08006909 	.word	0x08006909
 800695c:	08006909 	.word	0x08006909
 8006960:	08006aad 	.word	0x08006aad
 8006964:	08006909 	.word	0x08006909
 8006968:	080069b7 	.word	0x080069b7
 800696c:	08006909 	.word	0x08006909
 8006970:	08006909 	.word	0x08006909
 8006974:	08006a4d 	.word	0x08006a4d
 8006978:	6833      	ldr	r3, [r6, #0]
 800697a:	1d1a      	adds	r2, r3, #4
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	6032      	str	r2, [r6, #0]
 8006980:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006984:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8006988:	2301      	movs	r3, #1
 800698a:	e09c      	b.n	8006ac6 <_printf_i+0x1e6>
 800698c:	6833      	ldr	r3, [r6, #0]
 800698e:	6820      	ldr	r0, [r4, #0]
 8006990:	1d19      	adds	r1, r3, #4
 8006992:	6031      	str	r1, [r6, #0]
 8006994:	0606      	lsls	r6, r0, #24
 8006996:	d501      	bpl.n	800699c <_printf_i+0xbc>
 8006998:	681d      	ldr	r5, [r3, #0]
 800699a:	e003      	b.n	80069a4 <_printf_i+0xc4>
 800699c:	0645      	lsls	r5, r0, #25
 800699e:	d5fb      	bpl.n	8006998 <_printf_i+0xb8>
 80069a0:	f9b3 5000 	ldrsh.w	r5, [r3]
 80069a4:	2d00      	cmp	r5, #0
 80069a6:	da03      	bge.n	80069b0 <_printf_i+0xd0>
 80069a8:	232d      	movs	r3, #45	@ 0x2d
 80069aa:	426d      	negs	r5, r5
 80069ac:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80069b0:	4858      	ldr	r0, [pc, #352]	@ (8006b14 <_printf_i+0x234>)
 80069b2:	230a      	movs	r3, #10
 80069b4:	e011      	b.n	80069da <_printf_i+0xfa>
 80069b6:	6821      	ldr	r1, [r4, #0]
 80069b8:	6833      	ldr	r3, [r6, #0]
 80069ba:	0608      	lsls	r0, r1, #24
 80069bc:	f853 5b04 	ldr.w	r5, [r3], #4
 80069c0:	d402      	bmi.n	80069c8 <_printf_i+0xe8>
 80069c2:	0649      	lsls	r1, r1, #25
 80069c4:	bf48      	it	mi
 80069c6:	b2ad      	uxthmi	r5, r5
 80069c8:	2f6f      	cmp	r7, #111	@ 0x6f
 80069ca:	4852      	ldr	r0, [pc, #328]	@ (8006b14 <_printf_i+0x234>)
 80069cc:	6033      	str	r3, [r6, #0]
 80069ce:	bf14      	ite	ne
 80069d0:	230a      	movne	r3, #10
 80069d2:	2308      	moveq	r3, #8
 80069d4:	2100      	movs	r1, #0
 80069d6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80069da:	6866      	ldr	r6, [r4, #4]
 80069dc:	60a6      	str	r6, [r4, #8]
 80069de:	2e00      	cmp	r6, #0
 80069e0:	db05      	blt.n	80069ee <_printf_i+0x10e>
 80069e2:	6821      	ldr	r1, [r4, #0]
 80069e4:	432e      	orrs	r6, r5
 80069e6:	f021 0104 	bic.w	r1, r1, #4
 80069ea:	6021      	str	r1, [r4, #0]
 80069ec:	d04b      	beq.n	8006a86 <_printf_i+0x1a6>
 80069ee:	4616      	mov	r6, r2
 80069f0:	fbb5 f1f3 	udiv	r1, r5, r3
 80069f4:	fb03 5711 	mls	r7, r3, r1, r5
 80069f8:	5dc7      	ldrb	r7, [r0, r7]
 80069fa:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80069fe:	462f      	mov	r7, r5
 8006a00:	42bb      	cmp	r3, r7
 8006a02:	460d      	mov	r5, r1
 8006a04:	d9f4      	bls.n	80069f0 <_printf_i+0x110>
 8006a06:	2b08      	cmp	r3, #8
 8006a08:	d10b      	bne.n	8006a22 <_printf_i+0x142>
 8006a0a:	6823      	ldr	r3, [r4, #0]
 8006a0c:	07df      	lsls	r7, r3, #31
 8006a0e:	d508      	bpl.n	8006a22 <_printf_i+0x142>
 8006a10:	6923      	ldr	r3, [r4, #16]
 8006a12:	6861      	ldr	r1, [r4, #4]
 8006a14:	4299      	cmp	r1, r3
 8006a16:	bfde      	ittt	le
 8006a18:	2330      	movle	r3, #48	@ 0x30
 8006a1a:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006a1e:	f106 36ff 	addle.w	r6, r6, #4294967295
 8006a22:	1b92      	subs	r2, r2, r6
 8006a24:	6122      	str	r2, [r4, #16]
 8006a26:	f8cd a000 	str.w	sl, [sp]
 8006a2a:	464b      	mov	r3, r9
 8006a2c:	aa03      	add	r2, sp, #12
 8006a2e:	4621      	mov	r1, r4
 8006a30:	4640      	mov	r0, r8
 8006a32:	f7ff fee7 	bl	8006804 <_printf_common>
 8006a36:	3001      	adds	r0, #1
 8006a38:	d14a      	bne.n	8006ad0 <_printf_i+0x1f0>
 8006a3a:	f04f 30ff 	mov.w	r0, #4294967295
 8006a3e:	b004      	add	sp, #16
 8006a40:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006a44:	6823      	ldr	r3, [r4, #0]
 8006a46:	f043 0320 	orr.w	r3, r3, #32
 8006a4a:	6023      	str	r3, [r4, #0]
 8006a4c:	4832      	ldr	r0, [pc, #200]	@ (8006b18 <_printf_i+0x238>)
 8006a4e:	2778      	movs	r7, #120	@ 0x78
 8006a50:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8006a54:	6823      	ldr	r3, [r4, #0]
 8006a56:	6831      	ldr	r1, [r6, #0]
 8006a58:	061f      	lsls	r7, r3, #24
 8006a5a:	f851 5b04 	ldr.w	r5, [r1], #4
 8006a5e:	d402      	bmi.n	8006a66 <_printf_i+0x186>
 8006a60:	065f      	lsls	r7, r3, #25
 8006a62:	bf48      	it	mi
 8006a64:	b2ad      	uxthmi	r5, r5
 8006a66:	6031      	str	r1, [r6, #0]
 8006a68:	07d9      	lsls	r1, r3, #31
 8006a6a:	bf44      	itt	mi
 8006a6c:	f043 0320 	orrmi.w	r3, r3, #32
 8006a70:	6023      	strmi	r3, [r4, #0]
 8006a72:	b11d      	cbz	r5, 8006a7c <_printf_i+0x19c>
 8006a74:	2310      	movs	r3, #16
 8006a76:	e7ad      	b.n	80069d4 <_printf_i+0xf4>
 8006a78:	4826      	ldr	r0, [pc, #152]	@ (8006b14 <_printf_i+0x234>)
 8006a7a:	e7e9      	b.n	8006a50 <_printf_i+0x170>
 8006a7c:	6823      	ldr	r3, [r4, #0]
 8006a7e:	f023 0320 	bic.w	r3, r3, #32
 8006a82:	6023      	str	r3, [r4, #0]
 8006a84:	e7f6      	b.n	8006a74 <_printf_i+0x194>
 8006a86:	4616      	mov	r6, r2
 8006a88:	e7bd      	b.n	8006a06 <_printf_i+0x126>
 8006a8a:	6833      	ldr	r3, [r6, #0]
 8006a8c:	6825      	ldr	r5, [r4, #0]
 8006a8e:	6961      	ldr	r1, [r4, #20]
 8006a90:	1d18      	adds	r0, r3, #4
 8006a92:	6030      	str	r0, [r6, #0]
 8006a94:	062e      	lsls	r6, r5, #24
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	d501      	bpl.n	8006a9e <_printf_i+0x1be>
 8006a9a:	6019      	str	r1, [r3, #0]
 8006a9c:	e002      	b.n	8006aa4 <_printf_i+0x1c4>
 8006a9e:	0668      	lsls	r0, r5, #25
 8006aa0:	d5fb      	bpl.n	8006a9a <_printf_i+0x1ba>
 8006aa2:	8019      	strh	r1, [r3, #0]
 8006aa4:	2300      	movs	r3, #0
 8006aa6:	6123      	str	r3, [r4, #16]
 8006aa8:	4616      	mov	r6, r2
 8006aaa:	e7bc      	b.n	8006a26 <_printf_i+0x146>
 8006aac:	6833      	ldr	r3, [r6, #0]
 8006aae:	1d1a      	adds	r2, r3, #4
 8006ab0:	6032      	str	r2, [r6, #0]
 8006ab2:	681e      	ldr	r6, [r3, #0]
 8006ab4:	6862      	ldr	r2, [r4, #4]
 8006ab6:	2100      	movs	r1, #0
 8006ab8:	4630      	mov	r0, r6
 8006aba:	f7f9 fbb1 	bl	8000220 <memchr>
 8006abe:	b108      	cbz	r0, 8006ac4 <_printf_i+0x1e4>
 8006ac0:	1b80      	subs	r0, r0, r6
 8006ac2:	6060      	str	r0, [r4, #4]
 8006ac4:	6863      	ldr	r3, [r4, #4]
 8006ac6:	6123      	str	r3, [r4, #16]
 8006ac8:	2300      	movs	r3, #0
 8006aca:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006ace:	e7aa      	b.n	8006a26 <_printf_i+0x146>
 8006ad0:	6923      	ldr	r3, [r4, #16]
 8006ad2:	4632      	mov	r2, r6
 8006ad4:	4649      	mov	r1, r9
 8006ad6:	4640      	mov	r0, r8
 8006ad8:	47d0      	blx	sl
 8006ada:	3001      	adds	r0, #1
 8006adc:	d0ad      	beq.n	8006a3a <_printf_i+0x15a>
 8006ade:	6823      	ldr	r3, [r4, #0]
 8006ae0:	079b      	lsls	r3, r3, #30
 8006ae2:	d413      	bmi.n	8006b0c <_printf_i+0x22c>
 8006ae4:	68e0      	ldr	r0, [r4, #12]
 8006ae6:	9b03      	ldr	r3, [sp, #12]
 8006ae8:	4298      	cmp	r0, r3
 8006aea:	bfb8      	it	lt
 8006aec:	4618      	movlt	r0, r3
 8006aee:	e7a6      	b.n	8006a3e <_printf_i+0x15e>
 8006af0:	2301      	movs	r3, #1
 8006af2:	4632      	mov	r2, r6
 8006af4:	4649      	mov	r1, r9
 8006af6:	4640      	mov	r0, r8
 8006af8:	47d0      	blx	sl
 8006afa:	3001      	adds	r0, #1
 8006afc:	d09d      	beq.n	8006a3a <_printf_i+0x15a>
 8006afe:	3501      	adds	r5, #1
 8006b00:	68e3      	ldr	r3, [r4, #12]
 8006b02:	9903      	ldr	r1, [sp, #12]
 8006b04:	1a5b      	subs	r3, r3, r1
 8006b06:	42ab      	cmp	r3, r5
 8006b08:	dcf2      	bgt.n	8006af0 <_printf_i+0x210>
 8006b0a:	e7eb      	b.n	8006ae4 <_printf_i+0x204>
 8006b0c:	2500      	movs	r5, #0
 8006b0e:	f104 0619 	add.w	r6, r4, #25
 8006b12:	e7f5      	b.n	8006b00 <_printf_i+0x220>
 8006b14:	0800952e 	.word	0x0800952e
 8006b18:	0800953f 	.word	0x0800953f

08006b1c <std>:
 8006b1c:	2300      	movs	r3, #0
 8006b1e:	b510      	push	{r4, lr}
 8006b20:	4604      	mov	r4, r0
 8006b22:	e9c0 3300 	strd	r3, r3, [r0]
 8006b26:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006b2a:	6083      	str	r3, [r0, #8]
 8006b2c:	8181      	strh	r1, [r0, #12]
 8006b2e:	6643      	str	r3, [r0, #100]	@ 0x64
 8006b30:	81c2      	strh	r2, [r0, #14]
 8006b32:	6183      	str	r3, [r0, #24]
 8006b34:	4619      	mov	r1, r3
 8006b36:	2208      	movs	r2, #8
 8006b38:	305c      	adds	r0, #92	@ 0x5c
 8006b3a:	f000 f931 	bl	8006da0 <memset>
 8006b3e:	4b0d      	ldr	r3, [pc, #52]	@ (8006b74 <std+0x58>)
 8006b40:	6263      	str	r3, [r4, #36]	@ 0x24
 8006b42:	4b0d      	ldr	r3, [pc, #52]	@ (8006b78 <std+0x5c>)
 8006b44:	62a3      	str	r3, [r4, #40]	@ 0x28
 8006b46:	4b0d      	ldr	r3, [pc, #52]	@ (8006b7c <std+0x60>)
 8006b48:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8006b4a:	4b0d      	ldr	r3, [pc, #52]	@ (8006b80 <std+0x64>)
 8006b4c:	6323      	str	r3, [r4, #48]	@ 0x30
 8006b4e:	4b0d      	ldr	r3, [pc, #52]	@ (8006b84 <std+0x68>)
 8006b50:	6224      	str	r4, [r4, #32]
 8006b52:	429c      	cmp	r4, r3
 8006b54:	d006      	beq.n	8006b64 <std+0x48>
 8006b56:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8006b5a:	4294      	cmp	r4, r2
 8006b5c:	d002      	beq.n	8006b64 <std+0x48>
 8006b5e:	33d0      	adds	r3, #208	@ 0xd0
 8006b60:	429c      	cmp	r4, r3
 8006b62:	d105      	bne.n	8006b70 <std+0x54>
 8006b64:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8006b68:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006b6c:	f000 b994 	b.w	8006e98 <__retarget_lock_init_recursive>
 8006b70:	bd10      	pop	{r4, pc}
 8006b72:	bf00      	nop
 8006b74:	08006ca1 	.word	0x08006ca1
 8006b78:	08006cc3 	.word	0x08006cc3
 8006b7c:	08006cfb 	.word	0x08006cfb
 8006b80:	08006d1f 	.word	0x08006d1f
 8006b84:	20000564 	.word	0x20000564

08006b88 <stdio_exit_handler>:
 8006b88:	4a02      	ldr	r2, [pc, #8]	@ (8006b94 <stdio_exit_handler+0xc>)
 8006b8a:	4903      	ldr	r1, [pc, #12]	@ (8006b98 <stdio_exit_handler+0x10>)
 8006b8c:	4803      	ldr	r0, [pc, #12]	@ (8006b9c <stdio_exit_handler+0x14>)
 8006b8e:	f000 b869 	b.w	8006c64 <_fwalk_sglue>
 8006b92:	bf00      	nop
 8006b94:	2000000c 	.word	0x2000000c
 8006b98:	080087fd 	.word	0x080087fd
 8006b9c:	2000001c 	.word	0x2000001c

08006ba0 <cleanup_stdio>:
 8006ba0:	6841      	ldr	r1, [r0, #4]
 8006ba2:	4b0c      	ldr	r3, [pc, #48]	@ (8006bd4 <cleanup_stdio+0x34>)
 8006ba4:	4299      	cmp	r1, r3
 8006ba6:	b510      	push	{r4, lr}
 8006ba8:	4604      	mov	r4, r0
 8006baa:	d001      	beq.n	8006bb0 <cleanup_stdio+0x10>
 8006bac:	f001 fe26 	bl	80087fc <_fflush_r>
 8006bb0:	68a1      	ldr	r1, [r4, #8]
 8006bb2:	4b09      	ldr	r3, [pc, #36]	@ (8006bd8 <cleanup_stdio+0x38>)
 8006bb4:	4299      	cmp	r1, r3
 8006bb6:	d002      	beq.n	8006bbe <cleanup_stdio+0x1e>
 8006bb8:	4620      	mov	r0, r4
 8006bba:	f001 fe1f 	bl	80087fc <_fflush_r>
 8006bbe:	68e1      	ldr	r1, [r4, #12]
 8006bc0:	4b06      	ldr	r3, [pc, #24]	@ (8006bdc <cleanup_stdio+0x3c>)
 8006bc2:	4299      	cmp	r1, r3
 8006bc4:	d004      	beq.n	8006bd0 <cleanup_stdio+0x30>
 8006bc6:	4620      	mov	r0, r4
 8006bc8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006bcc:	f001 be16 	b.w	80087fc <_fflush_r>
 8006bd0:	bd10      	pop	{r4, pc}
 8006bd2:	bf00      	nop
 8006bd4:	20000564 	.word	0x20000564
 8006bd8:	200005cc 	.word	0x200005cc
 8006bdc:	20000634 	.word	0x20000634

08006be0 <global_stdio_init.part.0>:
 8006be0:	b510      	push	{r4, lr}
 8006be2:	4b0b      	ldr	r3, [pc, #44]	@ (8006c10 <global_stdio_init.part.0+0x30>)
 8006be4:	4c0b      	ldr	r4, [pc, #44]	@ (8006c14 <global_stdio_init.part.0+0x34>)
 8006be6:	4a0c      	ldr	r2, [pc, #48]	@ (8006c18 <global_stdio_init.part.0+0x38>)
 8006be8:	601a      	str	r2, [r3, #0]
 8006bea:	4620      	mov	r0, r4
 8006bec:	2200      	movs	r2, #0
 8006bee:	2104      	movs	r1, #4
 8006bf0:	f7ff ff94 	bl	8006b1c <std>
 8006bf4:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8006bf8:	2201      	movs	r2, #1
 8006bfa:	2109      	movs	r1, #9
 8006bfc:	f7ff ff8e 	bl	8006b1c <std>
 8006c00:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8006c04:	2202      	movs	r2, #2
 8006c06:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006c0a:	2112      	movs	r1, #18
 8006c0c:	f7ff bf86 	b.w	8006b1c <std>
 8006c10:	2000069c 	.word	0x2000069c
 8006c14:	20000564 	.word	0x20000564
 8006c18:	08006b89 	.word	0x08006b89

08006c1c <__sfp_lock_acquire>:
 8006c1c:	4801      	ldr	r0, [pc, #4]	@ (8006c24 <__sfp_lock_acquire+0x8>)
 8006c1e:	f000 b93c 	b.w	8006e9a <__retarget_lock_acquire_recursive>
 8006c22:	bf00      	nop
 8006c24:	200006a5 	.word	0x200006a5

08006c28 <__sfp_lock_release>:
 8006c28:	4801      	ldr	r0, [pc, #4]	@ (8006c30 <__sfp_lock_release+0x8>)
 8006c2a:	f000 b937 	b.w	8006e9c <__retarget_lock_release_recursive>
 8006c2e:	bf00      	nop
 8006c30:	200006a5 	.word	0x200006a5

08006c34 <__sinit>:
 8006c34:	b510      	push	{r4, lr}
 8006c36:	4604      	mov	r4, r0
 8006c38:	f7ff fff0 	bl	8006c1c <__sfp_lock_acquire>
 8006c3c:	6a23      	ldr	r3, [r4, #32]
 8006c3e:	b11b      	cbz	r3, 8006c48 <__sinit+0x14>
 8006c40:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006c44:	f7ff bff0 	b.w	8006c28 <__sfp_lock_release>
 8006c48:	4b04      	ldr	r3, [pc, #16]	@ (8006c5c <__sinit+0x28>)
 8006c4a:	6223      	str	r3, [r4, #32]
 8006c4c:	4b04      	ldr	r3, [pc, #16]	@ (8006c60 <__sinit+0x2c>)
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	2b00      	cmp	r3, #0
 8006c52:	d1f5      	bne.n	8006c40 <__sinit+0xc>
 8006c54:	f7ff ffc4 	bl	8006be0 <global_stdio_init.part.0>
 8006c58:	e7f2      	b.n	8006c40 <__sinit+0xc>
 8006c5a:	bf00      	nop
 8006c5c:	08006ba1 	.word	0x08006ba1
 8006c60:	2000069c 	.word	0x2000069c

08006c64 <_fwalk_sglue>:
 8006c64:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006c68:	4607      	mov	r7, r0
 8006c6a:	4688      	mov	r8, r1
 8006c6c:	4614      	mov	r4, r2
 8006c6e:	2600      	movs	r6, #0
 8006c70:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006c74:	f1b9 0901 	subs.w	r9, r9, #1
 8006c78:	d505      	bpl.n	8006c86 <_fwalk_sglue+0x22>
 8006c7a:	6824      	ldr	r4, [r4, #0]
 8006c7c:	2c00      	cmp	r4, #0
 8006c7e:	d1f7      	bne.n	8006c70 <_fwalk_sglue+0xc>
 8006c80:	4630      	mov	r0, r6
 8006c82:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006c86:	89ab      	ldrh	r3, [r5, #12]
 8006c88:	2b01      	cmp	r3, #1
 8006c8a:	d907      	bls.n	8006c9c <_fwalk_sglue+0x38>
 8006c8c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006c90:	3301      	adds	r3, #1
 8006c92:	d003      	beq.n	8006c9c <_fwalk_sglue+0x38>
 8006c94:	4629      	mov	r1, r5
 8006c96:	4638      	mov	r0, r7
 8006c98:	47c0      	blx	r8
 8006c9a:	4306      	orrs	r6, r0
 8006c9c:	3568      	adds	r5, #104	@ 0x68
 8006c9e:	e7e9      	b.n	8006c74 <_fwalk_sglue+0x10>

08006ca0 <__sread>:
 8006ca0:	b510      	push	{r4, lr}
 8006ca2:	460c      	mov	r4, r1
 8006ca4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006ca8:	f000 f8a8 	bl	8006dfc <_read_r>
 8006cac:	2800      	cmp	r0, #0
 8006cae:	bfab      	itete	ge
 8006cb0:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8006cb2:	89a3      	ldrhlt	r3, [r4, #12]
 8006cb4:	181b      	addge	r3, r3, r0
 8006cb6:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8006cba:	bfac      	ite	ge
 8006cbc:	6563      	strge	r3, [r4, #84]	@ 0x54
 8006cbe:	81a3      	strhlt	r3, [r4, #12]
 8006cc0:	bd10      	pop	{r4, pc}

08006cc2 <__swrite>:
 8006cc2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006cc6:	461f      	mov	r7, r3
 8006cc8:	898b      	ldrh	r3, [r1, #12]
 8006cca:	05db      	lsls	r3, r3, #23
 8006ccc:	4605      	mov	r5, r0
 8006cce:	460c      	mov	r4, r1
 8006cd0:	4616      	mov	r6, r2
 8006cd2:	d505      	bpl.n	8006ce0 <__swrite+0x1e>
 8006cd4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006cd8:	2302      	movs	r3, #2
 8006cda:	2200      	movs	r2, #0
 8006cdc:	f000 f87c 	bl	8006dd8 <_lseek_r>
 8006ce0:	89a3      	ldrh	r3, [r4, #12]
 8006ce2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006ce6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006cea:	81a3      	strh	r3, [r4, #12]
 8006cec:	4632      	mov	r2, r6
 8006cee:	463b      	mov	r3, r7
 8006cf0:	4628      	mov	r0, r5
 8006cf2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006cf6:	f000 b893 	b.w	8006e20 <_write_r>

08006cfa <__sseek>:
 8006cfa:	b510      	push	{r4, lr}
 8006cfc:	460c      	mov	r4, r1
 8006cfe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006d02:	f000 f869 	bl	8006dd8 <_lseek_r>
 8006d06:	1c43      	adds	r3, r0, #1
 8006d08:	89a3      	ldrh	r3, [r4, #12]
 8006d0a:	bf15      	itete	ne
 8006d0c:	6560      	strne	r0, [r4, #84]	@ 0x54
 8006d0e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8006d12:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8006d16:	81a3      	strheq	r3, [r4, #12]
 8006d18:	bf18      	it	ne
 8006d1a:	81a3      	strhne	r3, [r4, #12]
 8006d1c:	bd10      	pop	{r4, pc}

08006d1e <__sclose>:
 8006d1e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006d22:	f000 b849 	b.w	8006db8 <_close_r>

08006d26 <_vsniprintf_r>:
 8006d26:	b530      	push	{r4, r5, lr}
 8006d28:	4614      	mov	r4, r2
 8006d2a:	2c00      	cmp	r4, #0
 8006d2c:	b09b      	sub	sp, #108	@ 0x6c
 8006d2e:	4605      	mov	r5, r0
 8006d30:	461a      	mov	r2, r3
 8006d32:	da05      	bge.n	8006d40 <_vsniprintf_r+0x1a>
 8006d34:	238b      	movs	r3, #139	@ 0x8b
 8006d36:	6003      	str	r3, [r0, #0]
 8006d38:	f04f 30ff 	mov.w	r0, #4294967295
 8006d3c:	b01b      	add	sp, #108	@ 0x6c
 8006d3e:	bd30      	pop	{r4, r5, pc}
 8006d40:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8006d44:	f8ad 300c 	strh.w	r3, [sp, #12]
 8006d48:	f04f 0300 	mov.w	r3, #0
 8006d4c:	9319      	str	r3, [sp, #100]	@ 0x64
 8006d4e:	bf14      	ite	ne
 8006d50:	f104 33ff 	addne.w	r3, r4, #4294967295
 8006d54:	4623      	moveq	r3, r4
 8006d56:	9302      	str	r3, [sp, #8]
 8006d58:	9305      	str	r3, [sp, #20]
 8006d5a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8006d5e:	9100      	str	r1, [sp, #0]
 8006d60:	9104      	str	r1, [sp, #16]
 8006d62:	f8ad 300e 	strh.w	r3, [sp, #14]
 8006d66:	4669      	mov	r1, sp
 8006d68:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 8006d6a:	f001 fbc7 	bl	80084fc <_svfiprintf_r>
 8006d6e:	1c43      	adds	r3, r0, #1
 8006d70:	bfbc      	itt	lt
 8006d72:	238b      	movlt	r3, #139	@ 0x8b
 8006d74:	602b      	strlt	r3, [r5, #0]
 8006d76:	2c00      	cmp	r4, #0
 8006d78:	d0e0      	beq.n	8006d3c <_vsniprintf_r+0x16>
 8006d7a:	9b00      	ldr	r3, [sp, #0]
 8006d7c:	2200      	movs	r2, #0
 8006d7e:	701a      	strb	r2, [r3, #0]
 8006d80:	e7dc      	b.n	8006d3c <_vsniprintf_r+0x16>
	...

08006d84 <vsniprintf>:
 8006d84:	b507      	push	{r0, r1, r2, lr}
 8006d86:	9300      	str	r3, [sp, #0]
 8006d88:	4613      	mov	r3, r2
 8006d8a:	460a      	mov	r2, r1
 8006d8c:	4601      	mov	r1, r0
 8006d8e:	4803      	ldr	r0, [pc, #12]	@ (8006d9c <vsniprintf+0x18>)
 8006d90:	6800      	ldr	r0, [r0, #0]
 8006d92:	f7ff ffc8 	bl	8006d26 <_vsniprintf_r>
 8006d96:	b003      	add	sp, #12
 8006d98:	f85d fb04 	ldr.w	pc, [sp], #4
 8006d9c:	20000018 	.word	0x20000018

08006da0 <memset>:
 8006da0:	4402      	add	r2, r0
 8006da2:	4603      	mov	r3, r0
 8006da4:	4293      	cmp	r3, r2
 8006da6:	d100      	bne.n	8006daa <memset+0xa>
 8006da8:	4770      	bx	lr
 8006daa:	f803 1b01 	strb.w	r1, [r3], #1
 8006dae:	e7f9      	b.n	8006da4 <memset+0x4>

08006db0 <_localeconv_r>:
 8006db0:	4800      	ldr	r0, [pc, #0]	@ (8006db4 <_localeconv_r+0x4>)
 8006db2:	4770      	bx	lr
 8006db4:	20000158 	.word	0x20000158

08006db8 <_close_r>:
 8006db8:	b538      	push	{r3, r4, r5, lr}
 8006dba:	4d06      	ldr	r5, [pc, #24]	@ (8006dd4 <_close_r+0x1c>)
 8006dbc:	2300      	movs	r3, #0
 8006dbe:	4604      	mov	r4, r0
 8006dc0:	4608      	mov	r0, r1
 8006dc2:	602b      	str	r3, [r5, #0]
 8006dc4:	f7fb fbbd 	bl	8002542 <_close>
 8006dc8:	1c43      	adds	r3, r0, #1
 8006dca:	d102      	bne.n	8006dd2 <_close_r+0x1a>
 8006dcc:	682b      	ldr	r3, [r5, #0]
 8006dce:	b103      	cbz	r3, 8006dd2 <_close_r+0x1a>
 8006dd0:	6023      	str	r3, [r4, #0]
 8006dd2:	bd38      	pop	{r3, r4, r5, pc}
 8006dd4:	200006a0 	.word	0x200006a0

08006dd8 <_lseek_r>:
 8006dd8:	b538      	push	{r3, r4, r5, lr}
 8006dda:	4d07      	ldr	r5, [pc, #28]	@ (8006df8 <_lseek_r+0x20>)
 8006ddc:	4604      	mov	r4, r0
 8006dde:	4608      	mov	r0, r1
 8006de0:	4611      	mov	r1, r2
 8006de2:	2200      	movs	r2, #0
 8006de4:	602a      	str	r2, [r5, #0]
 8006de6:	461a      	mov	r2, r3
 8006de8:	f7fb fbd2 	bl	8002590 <_lseek>
 8006dec:	1c43      	adds	r3, r0, #1
 8006dee:	d102      	bne.n	8006df6 <_lseek_r+0x1e>
 8006df0:	682b      	ldr	r3, [r5, #0]
 8006df2:	b103      	cbz	r3, 8006df6 <_lseek_r+0x1e>
 8006df4:	6023      	str	r3, [r4, #0]
 8006df6:	bd38      	pop	{r3, r4, r5, pc}
 8006df8:	200006a0 	.word	0x200006a0

08006dfc <_read_r>:
 8006dfc:	b538      	push	{r3, r4, r5, lr}
 8006dfe:	4d07      	ldr	r5, [pc, #28]	@ (8006e1c <_read_r+0x20>)
 8006e00:	4604      	mov	r4, r0
 8006e02:	4608      	mov	r0, r1
 8006e04:	4611      	mov	r1, r2
 8006e06:	2200      	movs	r2, #0
 8006e08:	602a      	str	r2, [r5, #0]
 8006e0a:	461a      	mov	r2, r3
 8006e0c:	f7fb fb60 	bl	80024d0 <_read>
 8006e10:	1c43      	adds	r3, r0, #1
 8006e12:	d102      	bne.n	8006e1a <_read_r+0x1e>
 8006e14:	682b      	ldr	r3, [r5, #0]
 8006e16:	b103      	cbz	r3, 8006e1a <_read_r+0x1e>
 8006e18:	6023      	str	r3, [r4, #0]
 8006e1a:	bd38      	pop	{r3, r4, r5, pc}
 8006e1c:	200006a0 	.word	0x200006a0

08006e20 <_write_r>:
 8006e20:	b538      	push	{r3, r4, r5, lr}
 8006e22:	4d07      	ldr	r5, [pc, #28]	@ (8006e40 <_write_r+0x20>)
 8006e24:	4604      	mov	r4, r0
 8006e26:	4608      	mov	r0, r1
 8006e28:	4611      	mov	r1, r2
 8006e2a:	2200      	movs	r2, #0
 8006e2c:	602a      	str	r2, [r5, #0]
 8006e2e:	461a      	mov	r2, r3
 8006e30:	f7fb fb6b 	bl	800250a <_write>
 8006e34:	1c43      	adds	r3, r0, #1
 8006e36:	d102      	bne.n	8006e3e <_write_r+0x1e>
 8006e38:	682b      	ldr	r3, [r5, #0]
 8006e3a:	b103      	cbz	r3, 8006e3e <_write_r+0x1e>
 8006e3c:	6023      	str	r3, [r4, #0]
 8006e3e:	bd38      	pop	{r3, r4, r5, pc}
 8006e40:	200006a0 	.word	0x200006a0

08006e44 <__errno>:
 8006e44:	4b01      	ldr	r3, [pc, #4]	@ (8006e4c <__errno+0x8>)
 8006e46:	6818      	ldr	r0, [r3, #0]
 8006e48:	4770      	bx	lr
 8006e4a:	bf00      	nop
 8006e4c:	20000018 	.word	0x20000018

08006e50 <__libc_init_array>:
 8006e50:	b570      	push	{r4, r5, r6, lr}
 8006e52:	4d0d      	ldr	r5, [pc, #52]	@ (8006e88 <__libc_init_array+0x38>)
 8006e54:	4c0d      	ldr	r4, [pc, #52]	@ (8006e8c <__libc_init_array+0x3c>)
 8006e56:	1b64      	subs	r4, r4, r5
 8006e58:	10a4      	asrs	r4, r4, #2
 8006e5a:	2600      	movs	r6, #0
 8006e5c:	42a6      	cmp	r6, r4
 8006e5e:	d109      	bne.n	8006e74 <__libc_init_array+0x24>
 8006e60:	4d0b      	ldr	r5, [pc, #44]	@ (8006e90 <__libc_init_array+0x40>)
 8006e62:	4c0c      	ldr	r4, [pc, #48]	@ (8006e94 <__libc_init_array+0x44>)
 8006e64:	f002 f88a 	bl	8008f7c <_init>
 8006e68:	1b64      	subs	r4, r4, r5
 8006e6a:	10a4      	asrs	r4, r4, #2
 8006e6c:	2600      	movs	r6, #0
 8006e6e:	42a6      	cmp	r6, r4
 8006e70:	d105      	bne.n	8006e7e <__libc_init_array+0x2e>
 8006e72:	bd70      	pop	{r4, r5, r6, pc}
 8006e74:	f855 3b04 	ldr.w	r3, [r5], #4
 8006e78:	4798      	blx	r3
 8006e7a:	3601      	adds	r6, #1
 8006e7c:	e7ee      	b.n	8006e5c <__libc_init_array+0xc>
 8006e7e:	f855 3b04 	ldr.w	r3, [r5], #4
 8006e82:	4798      	blx	r3
 8006e84:	3601      	adds	r6, #1
 8006e86:	e7f2      	b.n	8006e6e <__libc_init_array+0x1e>
 8006e88:	0800989c 	.word	0x0800989c
 8006e8c:	0800989c 	.word	0x0800989c
 8006e90:	0800989c 	.word	0x0800989c
 8006e94:	080098a0 	.word	0x080098a0

08006e98 <__retarget_lock_init_recursive>:
 8006e98:	4770      	bx	lr

08006e9a <__retarget_lock_acquire_recursive>:
 8006e9a:	4770      	bx	lr

08006e9c <__retarget_lock_release_recursive>:
 8006e9c:	4770      	bx	lr

08006e9e <quorem>:
 8006e9e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006ea2:	6903      	ldr	r3, [r0, #16]
 8006ea4:	690c      	ldr	r4, [r1, #16]
 8006ea6:	42a3      	cmp	r3, r4
 8006ea8:	4607      	mov	r7, r0
 8006eaa:	db7e      	blt.n	8006faa <quorem+0x10c>
 8006eac:	3c01      	subs	r4, #1
 8006eae:	f101 0814 	add.w	r8, r1, #20
 8006eb2:	00a3      	lsls	r3, r4, #2
 8006eb4:	f100 0514 	add.w	r5, r0, #20
 8006eb8:	9300      	str	r3, [sp, #0]
 8006eba:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006ebe:	9301      	str	r3, [sp, #4]
 8006ec0:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8006ec4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006ec8:	3301      	adds	r3, #1
 8006eca:	429a      	cmp	r2, r3
 8006ecc:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8006ed0:	fbb2 f6f3 	udiv	r6, r2, r3
 8006ed4:	d32e      	bcc.n	8006f34 <quorem+0x96>
 8006ed6:	f04f 0a00 	mov.w	sl, #0
 8006eda:	46c4      	mov	ip, r8
 8006edc:	46ae      	mov	lr, r5
 8006ede:	46d3      	mov	fp, sl
 8006ee0:	f85c 3b04 	ldr.w	r3, [ip], #4
 8006ee4:	b298      	uxth	r0, r3
 8006ee6:	fb06 a000 	mla	r0, r6, r0, sl
 8006eea:	0c02      	lsrs	r2, r0, #16
 8006eec:	0c1b      	lsrs	r3, r3, #16
 8006eee:	fb06 2303 	mla	r3, r6, r3, r2
 8006ef2:	f8de 2000 	ldr.w	r2, [lr]
 8006ef6:	b280      	uxth	r0, r0
 8006ef8:	b292      	uxth	r2, r2
 8006efa:	1a12      	subs	r2, r2, r0
 8006efc:	445a      	add	r2, fp
 8006efe:	f8de 0000 	ldr.w	r0, [lr]
 8006f02:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8006f06:	b29b      	uxth	r3, r3
 8006f08:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8006f0c:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8006f10:	b292      	uxth	r2, r2
 8006f12:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8006f16:	45e1      	cmp	r9, ip
 8006f18:	f84e 2b04 	str.w	r2, [lr], #4
 8006f1c:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8006f20:	d2de      	bcs.n	8006ee0 <quorem+0x42>
 8006f22:	9b00      	ldr	r3, [sp, #0]
 8006f24:	58eb      	ldr	r3, [r5, r3]
 8006f26:	b92b      	cbnz	r3, 8006f34 <quorem+0x96>
 8006f28:	9b01      	ldr	r3, [sp, #4]
 8006f2a:	3b04      	subs	r3, #4
 8006f2c:	429d      	cmp	r5, r3
 8006f2e:	461a      	mov	r2, r3
 8006f30:	d32f      	bcc.n	8006f92 <quorem+0xf4>
 8006f32:	613c      	str	r4, [r7, #16]
 8006f34:	4638      	mov	r0, r7
 8006f36:	f001 f97d 	bl	8008234 <__mcmp>
 8006f3a:	2800      	cmp	r0, #0
 8006f3c:	db25      	blt.n	8006f8a <quorem+0xec>
 8006f3e:	4629      	mov	r1, r5
 8006f40:	2000      	movs	r0, #0
 8006f42:	f858 2b04 	ldr.w	r2, [r8], #4
 8006f46:	f8d1 c000 	ldr.w	ip, [r1]
 8006f4a:	fa1f fe82 	uxth.w	lr, r2
 8006f4e:	fa1f f38c 	uxth.w	r3, ip
 8006f52:	eba3 030e 	sub.w	r3, r3, lr
 8006f56:	4403      	add	r3, r0
 8006f58:	0c12      	lsrs	r2, r2, #16
 8006f5a:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8006f5e:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8006f62:	b29b      	uxth	r3, r3
 8006f64:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006f68:	45c1      	cmp	r9, r8
 8006f6a:	f841 3b04 	str.w	r3, [r1], #4
 8006f6e:	ea4f 4022 	mov.w	r0, r2, asr #16
 8006f72:	d2e6      	bcs.n	8006f42 <quorem+0xa4>
 8006f74:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006f78:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006f7c:	b922      	cbnz	r2, 8006f88 <quorem+0xea>
 8006f7e:	3b04      	subs	r3, #4
 8006f80:	429d      	cmp	r5, r3
 8006f82:	461a      	mov	r2, r3
 8006f84:	d30b      	bcc.n	8006f9e <quorem+0x100>
 8006f86:	613c      	str	r4, [r7, #16]
 8006f88:	3601      	adds	r6, #1
 8006f8a:	4630      	mov	r0, r6
 8006f8c:	b003      	add	sp, #12
 8006f8e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006f92:	6812      	ldr	r2, [r2, #0]
 8006f94:	3b04      	subs	r3, #4
 8006f96:	2a00      	cmp	r2, #0
 8006f98:	d1cb      	bne.n	8006f32 <quorem+0x94>
 8006f9a:	3c01      	subs	r4, #1
 8006f9c:	e7c6      	b.n	8006f2c <quorem+0x8e>
 8006f9e:	6812      	ldr	r2, [r2, #0]
 8006fa0:	3b04      	subs	r3, #4
 8006fa2:	2a00      	cmp	r2, #0
 8006fa4:	d1ef      	bne.n	8006f86 <quorem+0xe8>
 8006fa6:	3c01      	subs	r4, #1
 8006fa8:	e7ea      	b.n	8006f80 <quorem+0xe2>
 8006faa:	2000      	movs	r0, #0
 8006fac:	e7ee      	b.n	8006f8c <quorem+0xee>
	...

08006fb0 <_dtoa_r>:
 8006fb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006fb4:	69c7      	ldr	r7, [r0, #28]
 8006fb6:	b097      	sub	sp, #92	@ 0x5c
 8006fb8:	ed8d 0b04 	vstr	d0, [sp, #16]
 8006fbc:	ec55 4b10 	vmov	r4, r5, d0
 8006fc0:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 8006fc2:	9107      	str	r1, [sp, #28]
 8006fc4:	4681      	mov	r9, r0
 8006fc6:	920c      	str	r2, [sp, #48]	@ 0x30
 8006fc8:	9311      	str	r3, [sp, #68]	@ 0x44
 8006fca:	b97f      	cbnz	r7, 8006fec <_dtoa_r+0x3c>
 8006fcc:	2010      	movs	r0, #16
 8006fce:	f000 fe09 	bl	8007be4 <malloc>
 8006fd2:	4602      	mov	r2, r0
 8006fd4:	f8c9 001c 	str.w	r0, [r9, #28]
 8006fd8:	b920      	cbnz	r0, 8006fe4 <_dtoa_r+0x34>
 8006fda:	4ba9      	ldr	r3, [pc, #676]	@ (8007280 <_dtoa_r+0x2d0>)
 8006fdc:	21ef      	movs	r1, #239	@ 0xef
 8006fde:	48a9      	ldr	r0, [pc, #676]	@ (8007284 <_dtoa_r+0x2d4>)
 8006fe0:	f001 fc6c 	bl	80088bc <__assert_func>
 8006fe4:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8006fe8:	6007      	str	r7, [r0, #0]
 8006fea:	60c7      	str	r7, [r0, #12]
 8006fec:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8006ff0:	6819      	ldr	r1, [r3, #0]
 8006ff2:	b159      	cbz	r1, 800700c <_dtoa_r+0x5c>
 8006ff4:	685a      	ldr	r2, [r3, #4]
 8006ff6:	604a      	str	r2, [r1, #4]
 8006ff8:	2301      	movs	r3, #1
 8006ffa:	4093      	lsls	r3, r2
 8006ffc:	608b      	str	r3, [r1, #8]
 8006ffe:	4648      	mov	r0, r9
 8007000:	f000 fee6 	bl	8007dd0 <_Bfree>
 8007004:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8007008:	2200      	movs	r2, #0
 800700a:	601a      	str	r2, [r3, #0]
 800700c:	1e2b      	subs	r3, r5, #0
 800700e:	bfb9      	ittee	lt
 8007010:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8007014:	9305      	strlt	r3, [sp, #20]
 8007016:	2300      	movge	r3, #0
 8007018:	6033      	strge	r3, [r6, #0]
 800701a:	9f05      	ldr	r7, [sp, #20]
 800701c:	4b9a      	ldr	r3, [pc, #616]	@ (8007288 <_dtoa_r+0x2d8>)
 800701e:	bfbc      	itt	lt
 8007020:	2201      	movlt	r2, #1
 8007022:	6032      	strlt	r2, [r6, #0]
 8007024:	43bb      	bics	r3, r7
 8007026:	d112      	bne.n	800704e <_dtoa_r+0x9e>
 8007028:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800702a:	f242 730f 	movw	r3, #9999	@ 0x270f
 800702e:	6013      	str	r3, [r2, #0]
 8007030:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8007034:	4323      	orrs	r3, r4
 8007036:	f000 855a 	beq.w	8007aee <_dtoa_r+0xb3e>
 800703a:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800703c:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 800729c <_dtoa_r+0x2ec>
 8007040:	2b00      	cmp	r3, #0
 8007042:	f000 855c 	beq.w	8007afe <_dtoa_r+0xb4e>
 8007046:	f10a 0303 	add.w	r3, sl, #3
 800704a:	f000 bd56 	b.w	8007afa <_dtoa_r+0xb4a>
 800704e:	ed9d 7b04 	vldr	d7, [sp, #16]
 8007052:	2200      	movs	r2, #0
 8007054:	ec51 0b17 	vmov	r0, r1, d7
 8007058:	2300      	movs	r3, #0
 800705a:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 800705e:	f7f9 fd5b 	bl	8000b18 <__aeabi_dcmpeq>
 8007062:	4680      	mov	r8, r0
 8007064:	b158      	cbz	r0, 800707e <_dtoa_r+0xce>
 8007066:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8007068:	2301      	movs	r3, #1
 800706a:	6013      	str	r3, [r2, #0]
 800706c:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800706e:	b113      	cbz	r3, 8007076 <_dtoa_r+0xc6>
 8007070:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8007072:	4b86      	ldr	r3, [pc, #536]	@ (800728c <_dtoa_r+0x2dc>)
 8007074:	6013      	str	r3, [r2, #0]
 8007076:	f8df a228 	ldr.w	sl, [pc, #552]	@ 80072a0 <_dtoa_r+0x2f0>
 800707a:	f000 bd40 	b.w	8007afe <_dtoa_r+0xb4e>
 800707e:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 8007082:	aa14      	add	r2, sp, #80	@ 0x50
 8007084:	a915      	add	r1, sp, #84	@ 0x54
 8007086:	4648      	mov	r0, r9
 8007088:	f001 f984 	bl	8008394 <__d2b>
 800708c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8007090:	9002      	str	r0, [sp, #8]
 8007092:	2e00      	cmp	r6, #0
 8007094:	d078      	beq.n	8007188 <_dtoa_r+0x1d8>
 8007096:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007098:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 800709c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80070a0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80070a4:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 80070a8:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 80070ac:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 80070b0:	4619      	mov	r1, r3
 80070b2:	2200      	movs	r2, #0
 80070b4:	4b76      	ldr	r3, [pc, #472]	@ (8007290 <_dtoa_r+0x2e0>)
 80070b6:	f7f9 f90f 	bl	80002d8 <__aeabi_dsub>
 80070ba:	a36b      	add	r3, pc, #428	@ (adr r3, 8007268 <_dtoa_r+0x2b8>)
 80070bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070c0:	f7f9 fac2 	bl	8000648 <__aeabi_dmul>
 80070c4:	a36a      	add	r3, pc, #424	@ (adr r3, 8007270 <_dtoa_r+0x2c0>)
 80070c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070ca:	f7f9 f907 	bl	80002dc <__adddf3>
 80070ce:	4604      	mov	r4, r0
 80070d0:	4630      	mov	r0, r6
 80070d2:	460d      	mov	r5, r1
 80070d4:	f7f9 fa4e 	bl	8000574 <__aeabi_i2d>
 80070d8:	a367      	add	r3, pc, #412	@ (adr r3, 8007278 <_dtoa_r+0x2c8>)
 80070da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070de:	f7f9 fab3 	bl	8000648 <__aeabi_dmul>
 80070e2:	4602      	mov	r2, r0
 80070e4:	460b      	mov	r3, r1
 80070e6:	4620      	mov	r0, r4
 80070e8:	4629      	mov	r1, r5
 80070ea:	f7f9 f8f7 	bl	80002dc <__adddf3>
 80070ee:	4604      	mov	r4, r0
 80070f0:	460d      	mov	r5, r1
 80070f2:	f7f9 fd59 	bl	8000ba8 <__aeabi_d2iz>
 80070f6:	2200      	movs	r2, #0
 80070f8:	4607      	mov	r7, r0
 80070fa:	2300      	movs	r3, #0
 80070fc:	4620      	mov	r0, r4
 80070fe:	4629      	mov	r1, r5
 8007100:	f7f9 fd14 	bl	8000b2c <__aeabi_dcmplt>
 8007104:	b140      	cbz	r0, 8007118 <_dtoa_r+0x168>
 8007106:	4638      	mov	r0, r7
 8007108:	f7f9 fa34 	bl	8000574 <__aeabi_i2d>
 800710c:	4622      	mov	r2, r4
 800710e:	462b      	mov	r3, r5
 8007110:	f7f9 fd02 	bl	8000b18 <__aeabi_dcmpeq>
 8007114:	b900      	cbnz	r0, 8007118 <_dtoa_r+0x168>
 8007116:	3f01      	subs	r7, #1
 8007118:	2f16      	cmp	r7, #22
 800711a:	d852      	bhi.n	80071c2 <_dtoa_r+0x212>
 800711c:	4b5d      	ldr	r3, [pc, #372]	@ (8007294 <_dtoa_r+0x2e4>)
 800711e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8007122:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007126:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800712a:	f7f9 fcff 	bl	8000b2c <__aeabi_dcmplt>
 800712e:	2800      	cmp	r0, #0
 8007130:	d049      	beq.n	80071c6 <_dtoa_r+0x216>
 8007132:	3f01      	subs	r7, #1
 8007134:	2300      	movs	r3, #0
 8007136:	9310      	str	r3, [sp, #64]	@ 0x40
 8007138:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800713a:	1b9b      	subs	r3, r3, r6
 800713c:	1e5a      	subs	r2, r3, #1
 800713e:	bf45      	ittet	mi
 8007140:	f1c3 0301 	rsbmi	r3, r3, #1
 8007144:	9300      	strmi	r3, [sp, #0]
 8007146:	2300      	movpl	r3, #0
 8007148:	2300      	movmi	r3, #0
 800714a:	9206      	str	r2, [sp, #24]
 800714c:	bf54      	ite	pl
 800714e:	9300      	strpl	r3, [sp, #0]
 8007150:	9306      	strmi	r3, [sp, #24]
 8007152:	2f00      	cmp	r7, #0
 8007154:	db39      	blt.n	80071ca <_dtoa_r+0x21a>
 8007156:	9b06      	ldr	r3, [sp, #24]
 8007158:	970d      	str	r7, [sp, #52]	@ 0x34
 800715a:	443b      	add	r3, r7
 800715c:	9306      	str	r3, [sp, #24]
 800715e:	2300      	movs	r3, #0
 8007160:	9308      	str	r3, [sp, #32]
 8007162:	9b07      	ldr	r3, [sp, #28]
 8007164:	2b09      	cmp	r3, #9
 8007166:	d863      	bhi.n	8007230 <_dtoa_r+0x280>
 8007168:	2b05      	cmp	r3, #5
 800716a:	bfc4      	itt	gt
 800716c:	3b04      	subgt	r3, #4
 800716e:	9307      	strgt	r3, [sp, #28]
 8007170:	9b07      	ldr	r3, [sp, #28]
 8007172:	f1a3 0302 	sub.w	r3, r3, #2
 8007176:	bfcc      	ite	gt
 8007178:	2400      	movgt	r4, #0
 800717a:	2401      	movle	r4, #1
 800717c:	2b03      	cmp	r3, #3
 800717e:	d863      	bhi.n	8007248 <_dtoa_r+0x298>
 8007180:	e8df f003 	tbb	[pc, r3]
 8007184:	2b375452 	.word	0x2b375452
 8007188:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 800718c:	441e      	add	r6, r3
 800718e:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8007192:	2b20      	cmp	r3, #32
 8007194:	bfc1      	itttt	gt
 8007196:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800719a:	409f      	lslgt	r7, r3
 800719c:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 80071a0:	fa24 f303 	lsrgt.w	r3, r4, r3
 80071a4:	bfd6      	itet	le
 80071a6:	f1c3 0320 	rsble	r3, r3, #32
 80071aa:	ea47 0003 	orrgt.w	r0, r7, r3
 80071ae:	fa04 f003 	lslle.w	r0, r4, r3
 80071b2:	f7f9 f9cf 	bl	8000554 <__aeabi_ui2d>
 80071b6:	2201      	movs	r2, #1
 80071b8:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 80071bc:	3e01      	subs	r6, #1
 80071be:	9212      	str	r2, [sp, #72]	@ 0x48
 80071c0:	e776      	b.n	80070b0 <_dtoa_r+0x100>
 80071c2:	2301      	movs	r3, #1
 80071c4:	e7b7      	b.n	8007136 <_dtoa_r+0x186>
 80071c6:	9010      	str	r0, [sp, #64]	@ 0x40
 80071c8:	e7b6      	b.n	8007138 <_dtoa_r+0x188>
 80071ca:	9b00      	ldr	r3, [sp, #0]
 80071cc:	1bdb      	subs	r3, r3, r7
 80071ce:	9300      	str	r3, [sp, #0]
 80071d0:	427b      	negs	r3, r7
 80071d2:	9308      	str	r3, [sp, #32]
 80071d4:	2300      	movs	r3, #0
 80071d6:	930d      	str	r3, [sp, #52]	@ 0x34
 80071d8:	e7c3      	b.n	8007162 <_dtoa_r+0x1b2>
 80071da:	2301      	movs	r3, #1
 80071dc:	9309      	str	r3, [sp, #36]	@ 0x24
 80071de:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80071e0:	eb07 0b03 	add.w	fp, r7, r3
 80071e4:	f10b 0301 	add.w	r3, fp, #1
 80071e8:	2b01      	cmp	r3, #1
 80071ea:	9303      	str	r3, [sp, #12]
 80071ec:	bfb8      	it	lt
 80071ee:	2301      	movlt	r3, #1
 80071f0:	e006      	b.n	8007200 <_dtoa_r+0x250>
 80071f2:	2301      	movs	r3, #1
 80071f4:	9309      	str	r3, [sp, #36]	@ 0x24
 80071f6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80071f8:	2b00      	cmp	r3, #0
 80071fa:	dd28      	ble.n	800724e <_dtoa_r+0x29e>
 80071fc:	469b      	mov	fp, r3
 80071fe:	9303      	str	r3, [sp, #12]
 8007200:	f8d9 001c 	ldr.w	r0, [r9, #28]
 8007204:	2100      	movs	r1, #0
 8007206:	2204      	movs	r2, #4
 8007208:	f102 0514 	add.w	r5, r2, #20
 800720c:	429d      	cmp	r5, r3
 800720e:	d926      	bls.n	800725e <_dtoa_r+0x2ae>
 8007210:	6041      	str	r1, [r0, #4]
 8007212:	4648      	mov	r0, r9
 8007214:	f000 fd9c 	bl	8007d50 <_Balloc>
 8007218:	4682      	mov	sl, r0
 800721a:	2800      	cmp	r0, #0
 800721c:	d142      	bne.n	80072a4 <_dtoa_r+0x2f4>
 800721e:	4b1e      	ldr	r3, [pc, #120]	@ (8007298 <_dtoa_r+0x2e8>)
 8007220:	4602      	mov	r2, r0
 8007222:	f240 11af 	movw	r1, #431	@ 0x1af
 8007226:	e6da      	b.n	8006fde <_dtoa_r+0x2e>
 8007228:	2300      	movs	r3, #0
 800722a:	e7e3      	b.n	80071f4 <_dtoa_r+0x244>
 800722c:	2300      	movs	r3, #0
 800722e:	e7d5      	b.n	80071dc <_dtoa_r+0x22c>
 8007230:	2401      	movs	r4, #1
 8007232:	2300      	movs	r3, #0
 8007234:	9307      	str	r3, [sp, #28]
 8007236:	9409      	str	r4, [sp, #36]	@ 0x24
 8007238:	f04f 3bff 	mov.w	fp, #4294967295
 800723c:	2200      	movs	r2, #0
 800723e:	f8cd b00c 	str.w	fp, [sp, #12]
 8007242:	2312      	movs	r3, #18
 8007244:	920c      	str	r2, [sp, #48]	@ 0x30
 8007246:	e7db      	b.n	8007200 <_dtoa_r+0x250>
 8007248:	2301      	movs	r3, #1
 800724a:	9309      	str	r3, [sp, #36]	@ 0x24
 800724c:	e7f4      	b.n	8007238 <_dtoa_r+0x288>
 800724e:	f04f 0b01 	mov.w	fp, #1
 8007252:	f8cd b00c 	str.w	fp, [sp, #12]
 8007256:	465b      	mov	r3, fp
 8007258:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 800725c:	e7d0      	b.n	8007200 <_dtoa_r+0x250>
 800725e:	3101      	adds	r1, #1
 8007260:	0052      	lsls	r2, r2, #1
 8007262:	e7d1      	b.n	8007208 <_dtoa_r+0x258>
 8007264:	f3af 8000 	nop.w
 8007268:	636f4361 	.word	0x636f4361
 800726c:	3fd287a7 	.word	0x3fd287a7
 8007270:	8b60c8b3 	.word	0x8b60c8b3
 8007274:	3fc68a28 	.word	0x3fc68a28
 8007278:	509f79fb 	.word	0x509f79fb
 800727c:	3fd34413 	.word	0x3fd34413
 8007280:	0800955d 	.word	0x0800955d
 8007284:	08009574 	.word	0x08009574
 8007288:	7ff00000 	.word	0x7ff00000
 800728c:	0800952d 	.word	0x0800952d
 8007290:	3ff80000 	.word	0x3ff80000
 8007294:	080096c8 	.word	0x080096c8
 8007298:	080095cc 	.word	0x080095cc
 800729c:	08009559 	.word	0x08009559
 80072a0:	0800952c 	.word	0x0800952c
 80072a4:	f8d9 301c 	ldr.w	r3, [r9, #28]
 80072a8:	6018      	str	r0, [r3, #0]
 80072aa:	9b03      	ldr	r3, [sp, #12]
 80072ac:	2b0e      	cmp	r3, #14
 80072ae:	f200 80a1 	bhi.w	80073f4 <_dtoa_r+0x444>
 80072b2:	2c00      	cmp	r4, #0
 80072b4:	f000 809e 	beq.w	80073f4 <_dtoa_r+0x444>
 80072b8:	2f00      	cmp	r7, #0
 80072ba:	dd33      	ble.n	8007324 <_dtoa_r+0x374>
 80072bc:	4b9c      	ldr	r3, [pc, #624]	@ (8007530 <_dtoa_r+0x580>)
 80072be:	f007 020f 	and.w	r2, r7, #15
 80072c2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80072c6:	ed93 7b00 	vldr	d7, [r3]
 80072ca:	05f8      	lsls	r0, r7, #23
 80072cc:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 80072d0:	ea4f 1427 	mov.w	r4, r7, asr #4
 80072d4:	d516      	bpl.n	8007304 <_dtoa_r+0x354>
 80072d6:	4b97      	ldr	r3, [pc, #604]	@ (8007534 <_dtoa_r+0x584>)
 80072d8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80072dc:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80072e0:	f7f9 fadc 	bl	800089c <__aeabi_ddiv>
 80072e4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80072e8:	f004 040f 	and.w	r4, r4, #15
 80072ec:	2603      	movs	r6, #3
 80072ee:	4d91      	ldr	r5, [pc, #580]	@ (8007534 <_dtoa_r+0x584>)
 80072f0:	b954      	cbnz	r4, 8007308 <_dtoa_r+0x358>
 80072f2:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 80072f6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80072fa:	f7f9 facf 	bl	800089c <__aeabi_ddiv>
 80072fe:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007302:	e028      	b.n	8007356 <_dtoa_r+0x3a6>
 8007304:	2602      	movs	r6, #2
 8007306:	e7f2      	b.n	80072ee <_dtoa_r+0x33e>
 8007308:	07e1      	lsls	r1, r4, #31
 800730a:	d508      	bpl.n	800731e <_dtoa_r+0x36e>
 800730c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8007310:	e9d5 2300 	ldrd	r2, r3, [r5]
 8007314:	f7f9 f998 	bl	8000648 <__aeabi_dmul>
 8007318:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800731c:	3601      	adds	r6, #1
 800731e:	1064      	asrs	r4, r4, #1
 8007320:	3508      	adds	r5, #8
 8007322:	e7e5      	b.n	80072f0 <_dtoa_r+0x340>
 8007324:	f000 80af 	beq.w	8007486 <_dtoa_r+0x4d6>
 8007328:	427c      	negs	r4, r7
 800732a:	4b81      	ldr	r3, [pc, #516]	@ (8007530 <_dtoa_r+0x580>)
 800732c:	4d81      	ldr	r5, [pc, #516]	@ (8007534 <_dtoa_r+0x584>)
 800732e:	f004 020f 	and.w	r2, r4, #15
 8007332:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007336:	e9d3 2300 	ldrd	r2, r3, [r3]
 800733a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800733e:	f7f9 f983 	bl	8000648 <__aeabi_dmul>
 8007342:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007346:	1124      	asrs	r4, r4, #4
 8007348:	2300      	movs	r3, #0
 800734a:	2602      	movs	r6, #2
 800734c:	2c00      	cmp	r4, #0
 800734e:	f040 808f 	bne.w	8007470 <_dtoa_r+0x4c0>
 8007352:	2b00      	cmp	r3, #0
 8007354:	d1d3      	bne.n	80072fe <_dtoa_r+0x34e>
 8007356:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8007358:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800735c:	2b00      	cmp	r3, #0
 800735e:	f000 8094 	beq.w	800748a <_dtoa_r+0x4da>
 8007362:	4b75      	ldr	r3, [pc, #468]	@ (8007538 <_dtoa_r+0x588>)
 8007364:	2200      	movs	r2, #0
 8007366:	4620      	mov	r0, r4
 8007368:	4629      	mov	r1, r5
 800736a:	f7f9 fbdf 	bl	8000b2c <__aeabi_dcmplt>
 800736e:	2800      	cmp	r0, #0
 8007370:	f000 808b 	beq.w	800748a <_dtoa_r+0x4da>
 8007374:	9b03      	ldr	r3, [sp, #12]
 8007376:	2b00      	cmp	r3, #0
 8007378:	f000 8087 	beq.w	800748a <_dtoa_r+0x4da>
 800737c:	f1bb 0f00 	cmp.w	fp, #0
 8007380:	dd34      	ble.n	80073ec <_dtoa_r+0x43c>
 8007382:	4620      	mov	r0, r4
 8007384:	4b6d      	ldr	r3, [pc, #436]	@ (800753c <_dtoa_r+0x58c>)
 8007386:	2200      	movs	r2, #0
 8007388:	4629      	mov	r1, r5
 800738a:	f7f9 f95d 	bl	8000648 <__aeabi_dmul>
 800738e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007392:	f107 38ff 	add.w	r8, r7, #4294967295
 8007396:	3601      	adds	r6, #1
 8007398:	465c      	mov	r4, fp
 800739a:	4630      	mov	r0, r6
 800739c:	f7f9 f8ea 	bl	8000574 <__aeabi_i2d>
 80073a0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80073a4:	f7f9 f950 	bl	8000648 <__aeabi_dmul>
 80073a8:	4b65      	ldr	r3, [pc, #404]	@ (8007540 <_dtoa_r+0x590>)
 80073aa:	2200      	movs	r2, #0
 80073ac:	f7f8 ff96 	bl	80002dc <__adddf3>
 80073b0:	4605      	mov	r5, r0
 80073b2:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 80073b6:	2c00      	cmp	r4, #0
 80073b8:	d16a      	bne.n	8007490 <_dtoa_r+0x4e0>
 80073ba:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80073be:	4b61      	ldr	r3, [pc, #388]	@ (8007544 <_dtoa_r+0x594>)
 80073c0:	2200      	movs	r2, #0
 80073c2:	f7f8 ff89 	bl	80002d8 <__aeabi_dsub>
 80073c6:	4602      	mov	r2, r0
 80073c8:	460b      	mov	r3, r1
 80073ca:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80073ce:	462a      	mov	r2, r5
 80073d0:	4633      	mov	r3, r6
 80073d2:	f7f9 fbc9 	bl	8000b68 <__aeabi_dcmpgt>
 80073d6:	2800      	cmp	r0, #0
 80073d8:	f040 8298 	bne.w	800790c <_dtoa_r+0x95c>
 80073dc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80073e0:	462a      	mov	r2, r5
 80073e2:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 80073e6:	f7f9 fba1 	bl	8000b2c <__aeabi_dcmplt>
 80073ea:	bb38      	cbnz	r0, 800743c <_dtoa_r+0x48c>
 80073ec:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 80073f0:	e9cd 3404 	strd	r3, r4, [sp, #16]
 80073f4:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 80073f6:	2b00      	cmp	r3, #0
 80073f8:	f2c0 8157 	blt.w	80076aa <_dtoa_r+0x6fa>
 80073fc:	2f0e      	cmp	r7, #14
 80073fe:	f300 8154 	bgt.w	80076aa <_dtoa_r+0x6fa>
 8007402:	4b4b      	ldr	r3, [pc, #300]	@ (8007530 <_dtoa_r+0x580>)
 8007404:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8007408:	ed93 7b00 	vldr	d7, [r3]
 800740c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800740e:	2b00      	cmp	r3, #0
 8007410:	ed8d 7b00 	vstr	d7, [sp]
 8007414:	f280 80e5 	bge.w	80075e2 <_dtoa_r+0x632>
 8007418:	9b03      	ldr	r3, [sp, #12]
 800741a:	2b00      	cmp	r3, #0
 800741c:	f300 80e1 	bgt.w	80075e2 <_dtoa_r+0x632>
 8007420:	d10c      	bne.n	800743c <_dtoa_r+0x48c>
 8007422:	4b48      	ldr	r3, [pc, #288]	@ (8007544 <_dtoa_r+0x594>)
 8007424:	2200      	movs	r2, #0
 8007426:	ec51 0b17 	vmov	r0, r1, d7
 800742a:	f7f9 f90d 	bl	8000648 <__aeabi_dmul>
 800742e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007432:	f7f9 fb8f 	bl	8000b54 <__aeabi_dcmpge>
 8007436:	2800      	cmp	r0, #0
 8007438:	f000 8266 	beq.w	8007908 <_dtoa_r+0x958>
 800743c:	2400      	movs	r4, #0
 800743e:	4625      	mov	r5, r4
 8007440:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8007442:	4656      	mov	r6, sl
 8007444:	ea6f 0803 	mvn.w	r8, r3
 8007448:	2700      	movs	r7, #0
 800744a:	4621      	mov	r1, r4
 800744c:	4648      	mov	r0, r9
 800744e:	f000 fcbf 	bl	8007dd0 <_Bfree>
 8007452:	2d00      	cmp	r5, #0
 8007454:	f000 80bd 	beq.w	80075d2 <_dtoa_r+0x622>
 8007458:	b12f      	cbz	r7, 8007466 <_dtoa_r+0x4b6>
 800745a:	42af      	cmp	r7, r5
 800745c:	d003      	beq.n	8007466 <_dtoa_r+0x4b6>
 800745e:	4639      	mov	r1, r7
 8007460:	4648      	mov	r0, r9
 8007462:	f000 fcb5 	bl	8007dd0 <_Bfree>
 8007466:	4629      	mov	r1, r5
 8007468:	4648      	mov	r0, r9
 800746a:	f000 fcb1 	bl	8007dd0 <_Bfree>
 800746e:	e0b0      	b.n	80075d2 <_dtoa_r+0x622>
 8007470:	07e2      	lsls	r2, r4, #31
 8007472:	d505      	bpl.n	8007480 <_dtoa_r+0x4d0>
 8007474:	e9d5 2300 	ldrd	r2, r3, [r5]
 8007478:	f7f9 f8e6 	bl	8000648 <__aeabi_dmul>
 800747c:	3601      	adds	r6, #1
 800747e:	2301      	movs	r3, #1
 8007480:	1064      	asrs	r4, r4, #1
 8007482:	3508      	adds	r5, #8
 8007484:	e762      	b.n	800734c <_dtoa_r+0x39c>
 8007486:	2602      	movs	r6, #2
 8007488:	e765      	b.n	8007356 <_dtoa_r+0x3a6>
 800748a:	9c03      	ldr	r4, [sp, #12]
 800748c:	46b8      	mov	r8, r7
 800748e:	e784      	b.n	800739a <_dtoa_r+0x3ea>
 8007490:	4b27      	ldr	r3, [pc, #156]	@ (8007530 <_dtoa_r+0x580>)
 8007492:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8007494:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8007498:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800749c:	4454      	add	r4, sl
 800749e:	2900      	cmp	r1, #0
 80074a0:	d054      	beq.n	800754c <_dtoa_r+0x59c>
 80074a2:	4929      	ldr	r1, [pc, #164]	@ (8007548 <_dtoa_r+0x598>)
 80074a4:	2000      	movs	r0, #0
 80074a6:	f7f9 f9f9 	bl	800089c <__aeabi_ddiv>
 80074aa:	4633      	mov	r3, r6
 80074ac:	462a      	mov	r2, r5
 80074ae:	f7f8 ff13 	bl	80002d8 <__aeabi_dsub>
 80074b2:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 80074b6:	4656      	mov	r6, sl
 80074b8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80074bc:	f7f9 fb74 	bl	8000ba8 <__aeabi_d2iz>
 80074c0:	4605      	mov	r5, r0
 80074c2:	f7f9 f857 	bl	8000574 <__aeabi_i2d>
 80074c6:	4602      	mov	r2, r0
 80074c8:	460b      	mov	r3, r1
 80074ca:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80074ce:	f7f8 ff03 	bl	80002d8 <__aeabi_dsub>
 80074d2:	3530      	adds	r5, #48	@ 0x30
 80074d4:	4602      	mov	r2, r0
 80074d6:	460b      	mov	r3, r1
 80074d8:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80074dc:	f806 5b01 	strb.w	r5, [r6], #1
 80074e0:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 80074e4:	f7f9 fb22 	bl	8000b2c <__aeabi_dcmplt>
 80074e8:	2800      	cmp	r0, #0
 80074ea:	d172      	bne.n	80075d2 <_dtoa_r+0x622>
 80074ec:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80074f0:	4911      	ldr	r1, [pc, #68]	@ (8007538 <_dtoa_r+0x588>)
 80074f2:	2000      	movs	r0, #0
 80074f4:	f7f8 fef0 	bl	80002d8 <__aeabi_dsub>
 80074f8:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 80074fc:	f7f9 fb16 	bl	8000b2c <__aeabi_dcmplt>
 8007500:	2800      	cmp	r0, #0
 8007502:	f040 80b4 	bne.w	800766e <_dtoa_r+0x6be>
 8007506:	42a6      	cmp	r6, r4
 8007508:	f43f af70 	beq.w	80073ec <_dtoa_r+0x43c>
 800750c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8007510:	4b0a      	ldr	r3, [pc, #40]	@ (800753c <_dtoa_r+0x58c>)
 8007512:	2200      	movs	r2, #0
 8007514:	f7f9 f898 	bl	8000648 <__aeabi_dmul>
 8007518:	4b08      	ldr	r3, [pc, #32]	@ (800753c <_dtoa_r+0x58c>)
 800751a:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800751e:	2200      	movs	r2, #0
 8007520:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007524:	f7f9 f890 	bl	8000648 <__aeabi_dmul>
 8007528:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800752c:	e7c4      	b.n	80074b8 <_dtoa_r+0x508>
 800752e:	bf00      	nop
 8007530:	080096c8 	.word	0x080096c8
 8007534:	080096a0 	.word	0x080096a0
 8007538:	3ff00000 	.word	0x3ff00000
 800753c:	40240000 	.word	0x40240000
 8007540:	401c0000 	.word	0x401c0000
 8007544:	40140000 	.word	0x40140000
 8007548:	3fe00000 	.word	0x3fe00000
 800754c:	4631      	mov	r1, r6
 800754e:	4628      	mov	r0, r5
 8007550:	f7f9 f87a 	bl	8000648 <__aeabi_dmul>
 8007554:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8007558:	9413      	str	r4, [sp, #76]	@ 0x4c
 800755a:	4656      	mov	r6, sl
 800755c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007560:	f7f9 fb22 	bl	8000ba8 <__aeabi_d2iz>
 8007564:	4605      	mov	r5, r0
 8007566:	f7f9 f805 	bl	8000574 <__aeabi_i2d>
 800756a:	4602      	mov	r2, r0
 800756c:	460b      	mov	r3, r1
 800756e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007572:	f7f8 feb1 	bl	80002d8 <__aeabi_dsub>
 8007576:	3530      	adds	r5, #48	@ 0x30
 8007578:	f806 5b01 	strb.w	r5, [r6], #1
 800757c:	4602      	mov	r2, r0
 800757e:	460b      	mov	r3, r1
 8007580:	42a6      	cmp	r6, r4
 8007582:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8007586:	f04f 0200 	mov.w	r2, #0
 800758a:	d124      	bne.n	80075d6 <_dtoa_r+0x626>
 800758c:	4baf      	ldr	r3, [pc, #700]	@ (800784c <_dtoa_r+0x89c>)
 800758e:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8007592:	f7f8 fea3 	bl	80002dc <__adddf3>
 8007596:	4602      	mov	r2, r0
 8007598:	460b      	mov	r3, r1
 800759a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800759e:	f7f9 fae3 	bl	8000b68 <__aeabi_dcmpgt>
 80075a2:	2800      	cmp	r0, #0
 80075a4:	d163      	bne.n	800766e <_dtoa_r+0x6be>
 80075a6:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 80075aa:	49a8      	ldr	r1, [pc, #672]	@ (800784c <_dtoa_r+0x89c>)
 80075ac:	2000      	movs	r0, #0
 80075ae:	f7f8 fe93 	bl	80002d8 <__aeabi_dsub>
 80075b2:	4602      	mov	r2, r0
 80075b4:	460b      	mov	r3, r1
 80075b6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80075ba:	f7f9 fab7 	bl	8000b2c <__aeabi_dcmplt>
 80075be:	2800      	cmp	r0, #0
 80075c0:	f43f af14 	beq.w	80073ec <_dtoa_r+0x43c>
 80075c4:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 80075c6:	1e73      	subs	r3, r6, #1
 80075c8:	9313      	str	r3, [sp, #76]	@ 0x4c
 80075ca:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80075ce:	2b30      	cmp	r3, #48	@ 0x30
 80075d0:	d0f8      	beq.n	80075c4 <_dtoa_r+0x614>
 80075d2:	4647      	mov	r7, r8
 80075d4:	e03b      	b.n	800764e <_dtoa_r+0x69e>
 80075d6:	4b9e      	ldr	r3, [pc, #632]	@ (8007850 <_dtoa_r+0x8a0>)
 80075d8:	f7f9 f836 	bl	8000648 <__aeabi_dmul>
 80075dc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80075e0:	e7bc      	b.n	800755c <_dtoa_r+0x5ac>
 80075e2:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 80075e6:	4656      	mov	r6, sl
 80075e8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80075ec:	4620      	mov	r0, r4
 80075ee:	4629      	mov	r1, r5
 80075f0:	f7f9 f954 	bl	800089c <__aeabi_ddiv>
 80075f4:	f7f9 fad8 	bl	8000ba8 <__aeabi_d2iz>
 80075f8:	4680      	mov	r8, r0
 80075fa:	f7f8 ffbb 	bl	8000574 <__aeabi_i2d>
 80075fe:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007602:	f7f9 f821 	bl	8000648 <__aeabi_dmul>
 8007606:	4602      	mov	r2, r0
 8007608:	460b      	mov	r3, r1
 800760a:	4620      	mov	r0, r4
 800760c:	4629      	mov	r1, r5
 800760e:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8007612:	f7f8 fe61 	bl	80002d8 <__aeabi_dsub>
 8007616:	f806 4b01 	strb.w	r4, [r6], #1
 800761a:	9d03      	ldr	r5, [sp, #12]
 800761c:	eba6 040a 	sub.w	r4, r6, sl
 8007620:	42a5      	cmp	r5, r4
 8007622:	4602      	mov	r2, r0
 8007624:	460b      	mov	r3, r1
 8007626:	d133      	bne.n	8007690 <_dtoa_r+0x6e0>
 8007628:	f7f8 fe58 	bl	80002dc <__adddf3>
 800762c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007630:	4604      	mov	r4, r0
 8007632:	460d      	mov	r5, r1
 8007634:	f7f9 fa98 	bl	8000b68 <__aeabi_dcmpgt>
 8007638:	b9c0      	cbnz	r0, 800766c <_dtoa_r+0x6bc>
 800763a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800763e:	4620      	mov	r0, r4
 8007640:	4629      	mov	r1, r5
 8007642:	f7f9 fa69 	bl	8000b18 <__aeabi_dcmpeq>
 8007646:	b110      	cbz	r0, 800764e <_dtoa_r+0x69e>
 8007648:	f018 0f01 	tst.w	r8, #1
 800764c:	d10e      	bne.n	800766c <_dtoa_r+0x6bc>
 800764e:	9902      	ldr	r1, [sp, #8]
 8007650:	4648      	mov	r0, r9
 8007652:	f000 fbbd 	bl	8007dd0 <_Bfree>
 8007656:	2300      	movs	r3, #0
 8007658:	7033      	strb	r3, [r6, #0]
 800765a:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800765c:	3701      	adds	r7, #1
 800765e:	601f      	str	r7, [r3, #0]
 8007660:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8007662:	2b00      	cmp	r3, #0
 8007664:	f000 824b 	beq.w	8007afe <_dtoa_r+0xb4e>
 8007668:	601e      	str	r6, [r3, #0]
 800766a:	e248      	b.n	8007afe <_dtoa_r+0xb4e>
 800766c:	46b8      	mov	r8, r7
 800766e:	4633      	mov	r3, r6
 8007670:	461e      	mov	r6, r3
 8007672:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007676:	2a39      	cmp	r2, #57	@ 0x39
 8007678:	d106      	bne.n	8007688 <_dtoa_r+0x6d8>
 800767a:	459a      	cmp	sl, r3
 800767c:	d1f8      	bne.n	8007670 <_dtoa_r+0x6c0>
 800767e:	2230      	movs	r2, #48	@ 0x30
 8007680:	f108 0801 	add.w	r8, r8, #1
 8007684:	f88a 2000 	strb.w	r2, [sl]
 8007688:	781a      	ldrb	r2, [r3, #0]
 800768a:	3201      	adds	r2, #1
 800768c:	701a      	strb	r2, [r3, #0]
 800768e:	e7a0      	b.n	80075d2 <_dtoa_r+0x622>
 8007690:	4b6f      	ldr	r3, [pc, #444]	@ (8007850 <_dtoa_r+0x8a0>)
 8007692:	2200      	movs	r2, #0
 8007694:	f7f8 ffd8 	bl	8000648 <__aeabi_dmul>
 8007698:	2200      	movs	r2, #0
 800769a:	2300      	movs	r3, #0
 800769c:	4604      	mov	r4, r0
 800769e:	460d      	mov	r5, r1
 80076a0:	f7f9 fa3a 	bl	8000b18 <__aeabi_dcmpeq>
 80076a4:	2800      	cmp	r0, #0
 80076a6:	d09f      	beq.n	80075e8 <_dtoa_r+0x638>
 80076a8:	e7d1      	b.n	800764e <_dtoa_r+0x69e>
 80076aa:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80076ac:	2a00      	cmp	r2, #0
 80076ae:	f000 80ea 	beq.w	8007886 <_dtoa_r+0x8d6>
 80076b2:	9a07      	ldr	r2, [sp, #28]
 80076b4:	2a01      	cmp	r2, #1
 80076b6:	f300 80cd 	bgt.w	8007854 <_dtoa_r+0x8a4>
 80076ba:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 80076bc:	2a00      	cmp	r2, #0
 80076be:	f000 80c1 	beq.w	8007844 <_dtoa_r+0x894>
 80076c2:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 80076c6:	9c08      	ldr	r4, [sp, #32]
 80076c8:	9e00      	ldr	r6, [sp, #0]
 80076ca:	9a00      	ldr	r2, [sp, #0]
 80076cc:	441a      	add	r2, r3
 80076ce:	9200      	str	r2, [sp, #0]
 80076d0:	9a06      	ldr	r2, [sp, #24]
 80076d2:	2101      	movs	r1, #1
 80076d4:	441a      	add	r2, r3
 80076d6:	4648      	mov	r0, r9
 80076d8:	9206      	str	r2, [sp, #24]
 80076da:	f000 fc2d 	bl	8007f38 <__i2b>
 80076de:	4605      	mov	r5, r0
 80076e0:	b166      	cbz	r6, 80076fc <_dtoa_r+0x74c>
 80076e2:	9b06      	ldr	r3, [sp, #24]
 80076e4:	2b00      	cmp	r3, #0
 80076e6:	dd09      	ble.n	80076fc <_dtoa_r+0x74c>
 80076e8:	42b3      	cmp	r3, r6
 80076ea:	9a00      	ldr	r2, [sp, #0]
 80076ec:	bfa8      	it	ge
 80076ee:	4633      	movge	r3, r6
 80076f0:	1ad2      	subs	r2, r2, r3
 80076f2:	9200      	str	r2, [sp, #0]
 80076f4:	9a06      	ldr	r2, [sp, #24]
 80076f6:	1af6      	subs	r6, r6, r3
 80076f8:	1ad3      	subs	r3, r2, r3
 80076fa:	9306      	str	r3, [sp, #24]
 80076fc:	9b08      	ldr	r3, [sp, #32]
 80076fe:	b30b      	cbz	r3, 8007744 <_dtoa_r+0x794>
 8007700:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007702:	2b00      	cmp	r3, #0
 8007704:	f000 80c6 	beq.w	8007894 <_dtoa_r+0x8e4>
 8007708:	2c00      	cmp	r4, #0
 800770a:	f000 80c0 	beq.w	800788e <_dtoa_r+0x8de>
 800770e:	4629      	mov	r1, r5
 8007710:	4622      	mov	r2, r4
 8007712:	4648      	mov	r0, r9
 8007714:	f000 fcc8 	bl	80080a8 <__pow5mult>
 8007718:	9a02      	ldr	r2, [sp, #8]
 800771a:	4601      	mov	r1, r0
 800771c:	4605      	mov	r5, r0
 800771e:	4648      	mov	r0, r9
 8007720:	f000 fc20 	bl	8007f64 <__multiply>
 8007724:	9902      	ldr	r1, [sp, #8]
 8007726:	4680      	mov	r8, r0
 8007728:	4648      	mov	r0, r9
 800772a:	f000 fb51 	bl	8007dd0 <_Bfree>
 800772e:	9b08      	ldr	r3, [sp, #32]
 8007730:	1b1b      	subs	r3, r3, r4
 8007732:	9308      	str	r3, [sp, #32]
 8007734:	f000 80b1 	beq.w	800789a <_dtoa_r+0x8ea>
 8007738:	9a08      	ldr	r2, [sp, #32]
 800773a:	4641      	mov	r1, r8
 800773c:	4648      	mov	r0, r9
 800773e:	f000 fcb3 	bl	80080a8 <__pow5mult>
 8007742:	9002      	str	r0, [sp, #8]
 8007744:	2101      	movs	r1, #1
 8007746:	4648      	mov	r0, r9
 8007748:	f000 fbf6 	bl	8007f38 <__i2b>
 800774c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800774e:	4604      	mov	r4, r0
 8007750:	2b00      	cmp	r3, #0
 8007752:	f000 81d8 	beq.w	8007b06 <_dtoa_r+0xb56>
 8007756:	461a      	mov	r2, r3
 8007758:	4601      	mov	r1, r0
 800775a:	4648      	mov	r0, r9
 800775c:	f000 fca4 	bl	80080a8 <__pow5mult>
 8007760:	9b07      	ldr	r3, [sp, #28]
 8007762:	2b01      	cmp	r3, #1
 8007764:	4604      	mov	r4, r0
 8007766:	f300 809f 	bgt.w	80078a8 <_dtoa_r+0x8f8>
 800776a:	9b04      	ldr	r3, [sp, #16]
 800776c:	2b00      	cmp	r3, #0
 800776e:	f040 8097 	bne.w	80078a0 <_dtoa_r+0x8f0>
 8007772:	9b05      	ldr	r3, [sp, #20]
 8007774:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007778:	2b00      	cmp	r3, #0
 800777a:	f040 8093 	bne.w	80078a4 <_dtoa_r+0x8f4>
 800777e:	9b05      	ldr	r3, [sp, #20]
 8007780:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8007784:	0d1b      	lsrs	r3, r3, #20
 8007786:	051b      	lsls	r3, r3, #20
 8007788:	b133      	cbz	r3, 8007798 <_dtoa_r+0x7e8>
 800778a:	9b00      	ldr	r3, [sp, #0]
 800778c:	3301      	adds	r3, #1
 800778e:	9300      	str	r3, [sp, #0]
 8007790:	9b06      	ldr	r3, [sp, #24]
 8007792:	3301      	adds	r3, #1
 8007794:	9306      	str	r3, [sp, #24]
 8007796:	2301      	movs	r3, #1
 8007798:	9308      	str	r3, [sp, #32]
 800779a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800779c:	2b00      	cmp	r3, #0
 800779e:	f000 81b8 	beq.w	8007b12 <_dtoa_r+0xb62>
 80077a2:	6923      	ldr	r3, [r4, #16]
 80077a4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80077a8:	6918      	ldr	r0, [r3, #16]
 80077aa:	f000 fb79 	bl	8007ea0 <__hi0bits>
 80077ae:	f1c0 0020 	rsb	r0, r0, #32
 80077b2:	9b06      	ldr	r3, [sp, #24]
 80077b4:	4418      	add	r0, r3
 80077b6:	f010 001f 	ands.w	r0, r0, #31
 80077ba:	f000 8082 	beq.w	80078c2 <_dtoa_r+0x912>
 80077be:	f1c0 0320 	rsb	r3, r0, #32
 80077c2:	2b04      	cmp	r3, #4
 80077c4:	dd73      	ble.n	80078ae <_dtoa_r+0x8fe>
 80077c6:	9b00      	ldr	r3, [sp, #0]
 80077c8:	f1c0 001c 	rsb	r0, r0, #28
 80077cc:	4403      	add	r3, r0
 80077ce:	9300      	str	r3, [sp, #0]
 80077d0:	9b06      	ldr	r3, [sp, #24]
 80077d2:	4403      	add	r3, r0
 80077d4:	4406      	add	r6, r0
 80077d6:	9306      	str	r3, [sp, #24]
 80077d8:	9b00      	ldr	r3, [sp, #0]
 80077da:	2b00      	cmp	r3, #0
 80077dc:	dd05      	ble.n	80077ea <_dtoa_r+0x83a>
 80077de:	9902      	ldr	r1, [sp, #8]
 80077e0:	461a      	mov	r2, r3
 80077e2:	4648      	mov	r0, r9
 80077e4:	f000 fcba 	bl	800815c <__lshift>
 80077e8:	9002      	str	r0, [sp, #8]
 80077ea:	9b06      	ldr	r3, [sp, #24]
 80077ec:	2b00      	cmp	r3, #0
 80077ee:	dd05      	ble.n	80077fc <_dtoa_r+0x84c>
 80077f0:	4621      	mov	r1, r4
 80077f2:	461a      	mov	r2, r3
 80077f4:	4648      	mov	r0, r9
 80077f6:	f000 fcb1 	bl	800815c <__lshift>
 80077fa:	4604      	mov	r4, r0
 80077fc:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80077fe:	2b00      	cmp	r3, #0
 8007800:	d061      	beq.n	80078c6 <_dtoa_r+0x916>
 8007802:	9802      	ldr	r0, [sp, #8]
 8007804:	4621      	mov	r1, r4
 8007806:	f000 fd15 	bl	8008234 <__mcmp>
 800780a:	2800      	cmp	r0, #0
 800780c:	da5b      	bge.n	80078c6 <_dtoa_r+0x916>
 800780e:	2300      	movs	r3, #0
 8007810:	9902      	ldr	r1, [sp, #8]
 8007812:	220a      	movs	r2, #10
 8007814:	4648      	mov	r0, r9
 8007816:	f000 fafd 	bl	8007e14 <__multadd>
 800781a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800781c:	9002      	str	r0, [sp, #8]
 800781e:	f107 38ff 	add.w	r8, r7, #4294967295
 8007822:	2b00      	cmp	r3, #0
 8007824:	f000 8177 	beq.w	8007b16 <_dtoa_r+0xb66>
 8007828:	4629      	mov	r1, r5
 800782a:	2300      	movs	r3, #0
 800782c:	220a      	movs	r2, #10
 800782e:	4648      	mov	r0, r9
 8007830:	f000 faf0 	bl	8007e14 <__multadd>
 8007834:	f1bb 0f00 	cmp.w	fp, #0
 8007838:	4605      	mov	r5, r0
 800783a:	dc6f      	bgt.n	800791c <_dtoa_r+0x96c>
 800783c:	9b07      	ldr	r3, [sp, #28]
 800783e:	2b02      	cmp	r3, #2
 8007840:	dc49      	bgt.n	80078d6 <_dtoa_r+0x926>
 8007842:	e06b      	b.n	800791c <_dtoa_r+0x96c>
 8007844:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8007846:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800784a:	e73c      	b.n	80076c6 <_dtoa_r+0x716>
 800784c:	3fe00000 	.word	0x3fe00000
 8007850:	40240000 	.word	0x40240000
 8007854:	9b03      	ldr	r3, [sp, #12]
 8007856:	1e5c      	subs	r4, r3, #1
 8007858:	9b08      	ldr	r3, [sp, #32]
 800785a:	42a3      	cmp	r3, r4
 800785c:	db09      	blt.n	8007872 <_dtoa_r+0x8c2>
 800785e:	1b1c      	subs	r4, r3, r4
 8007860:	9b03      	ldr	r3, [sp, #12]
 8007862:	2b00      	cmp	r3, #0
 8007864:	f6bf af30 	bge.w	80076c8 <_dtoa_r+0x718>
 8007868:	9b00      	ldr	r3, [sp, #0]
 800786a:	9a03      	ldr	r2, [sp, #12]
 800786c:	1a9e      	subs	r6, r3, r2
 800786e:	2300      	movs	r3, #0
 8007870:	e72b      	b.n	80076ca <_dtoa_r+0x71a>
 8007872:	9b08      	ldr	r3, [sp, #32]
 8007874:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8007876:	9408      	str	r4, [sp, #32]
 8007878:	1ae3      	subs	r3, r4, r3
 800787a:	441a      	add	r2, r3
 800787c:	9e00      	ldr	r6, [sp, #0]
 800787e:	9b03      	ldr	r3, [sp, #12]
 8007880:	920d      	str	r2, [sp, #52]	@ 0x34
 8007882:	2400      	movs	r4, #0
 8007884:	e721      	b.n	80076ca <_dtoa_r+0x71a>
 8007886:	9c08      	ldr	r4, [sp, #32]
 8007888:	9e00      	ldr	r6, [sp, #0]
 800788a:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 800788c:	e728      	b.n	80076e0 <_dtoa_r+0x730>
 800788e:	f8dd 8008 	ldr.w	r8, [sp, #8]
 8007892:	e751      	b.n	8007738 <_dtoa_r+0x788>
 8007894:	9a08      	ldr	r2, [sp, #32]
 8007896:	9902      	ldr	r1, [sp, #8]
 8007898:	e750      	b.n	800773c <_dtoa_r+0x78c>
 800789a:	f8cd 8008 	str.w	r8, [sp, #8]
 800789e:	e751      	b.n	8007744 <_dtoa_r+0x794>
 80078a0:	2300      	movs	r3, #0
 80078a2:	e779      	b.n	8007798 <_dtoa_r+0x7e8>
 80078a4:	9b04      	ldr	r3, [sp, #16]
 80078a6:	e777      	b.n	8007798 <_dtoa_r+0x7e8>
 80078a8:	2300      	movs	r3, #0
 80078aa:	9308      	str	r3, [sp, #32]
 80078ac:	e779      	b.n	80077a2 <_dtoa_r+0x7f2>
 80078ae:	d093      	beq.n	80077d8 <_dtoa_r+0x828>
 80078b0:	9a00      	ldr	r2, [sp, #0]
 80078b2:	331c      	adds	r3, #28
 80078b4:	441a      	add	r2, r3
 80078b6:	9200      	str	r2, [sp, #0]
 80078b8:	9a06      	ldr	r2, [sp, #24]
 80078ba:	441a      	add	r2, r3
 80078bc:	441e      	add	r6, r3
 80078be:	9206      	str	r2, [sp, #24]
 80078c0:	e78a      	b.n	80077d8 <_dtoa_r+0x828>
 80078c2:	4603      	mov	r3, r0
 80078c4:	e7f4      	b.n	80078b0 <_dtoa_r+0x900>
 80078c6:	9b03      	ldr	r3, [sp, #12]
 80078c8:	2b00      	cmp	r3, #0
 80078ca:	46b8      	mov	r8, r7
 80078cc:	dc20      	bgt.n	8007910 <_dtoa_r+0x960>
 80078ce:	469b      	mov	fp, r3
 80078d0:	9b07      	ldr	r3, [sp, #28]
 80078d2:	2b02      	cmp	r3, #2
 80078d4:	dd1e      	ble.n	8007914 <_dtoa_r+0x964>
 80078d6:	f1bb 0f00 	cmp.w	fp, #0
 80078da:	f47f adb1 	bne.w	8007440 <_dtoa_r+0x490>
 80078de:	4621      	mov	r1, r4
 80078e0:	465b      	mov	r3, fp
 80078e2:	2205      	movs	r2, #5
 80078e4:	4648      	mov	r0, r9
 80078e6:	f000 fa95 	bl	8007e14 <__multadd>
 80078ea:	4601      	mov	r1, r0
 80078ec:	4604      	mov	r4, r0
 80078ee:	9802      	ldr	r0, [sp, #8]
 80078f0:	f000 fca0 	bl	8008234 <__mcmp>
 80078f4:	2800      	cmp	r0, #0
 80078f6:	f77f ada3 	ble.w	8007440 <_dtoa_r+0x490>
 80078fa:	4656      	mov	r6, sl
 80078fc:	2331      	movs	r3, #49	@ 0x31
 80078fe:	f806 3b01 	strb.w	r3, [r6], #1
 8007902:	f108 0801 	add.w	r8, r8, #1
 8007906:	e59f      	b.n	8007448 <_dtoa_r+0x498>
 8007908:	9c03      	ldr	r4, [sp, #12]
 800790a:	46b8      	mov	r8, r7
 800790c:	4625      	mov	r5, r4
 800790e:	e7f4      	b.n	80078fa <_dtoa_r+0x94a>
 8007910:	f8dd b00c 	ldr.w	fp, [sp, #12]
 8007914:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007916:	2b00      	cmp	r3, #0
 8007918:	f000 8101 	beq.w	8007b1e <_dtoa_r+0xb6e>
 800791c:	2e00      	cmp	r6, #0
 800791e:	dd05      	ble.n	800792c <_dtoa_r+0x97c>
 8007920:	4629      	mov	r1, r5
 8007922:	4632      	mov	r2, r6
 8007924:	4648      	mov	r0, r9
 8007926:	f000 fc19 	bl	800815c <__lshift>
 800792a:	4605      	mov	r5, r0
 800792c:	9b08      	ldr	r3, [sp, #32]
 800792e:	2b00      	cmp	r3, #0
 8007930:	d05c      	beq.n	80079ec <_dtoa_r+0xa3c>
 8007932:	6869      	ldr	r1, [r5, #4]
 8007934:	4648      	mov	r0, r9
 8007936:	f000 fa0b 	bl	8007d50 <_Balloc>
 800793a:	4606      	mov	r6, r0
 800793c:	b928      	cbnz	r0, 800794a <_dtoa_r+0x99a>
 800793e:	4b82      	ldr	r3, [pc, #520]	@ (8007b48 <_dtoa_r+0xb98>)
 8007940:	4602      	mov	r2, r0
 8007942:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8007946:	f7ff bb4a 	b.w	8006fde <_dtoa_r+0x2e>
 800794a:	692a      	ldr	r2, [r5, #16]
 800794c:	3202      	adds	r2, #2
 800794e:	0092      	lsls	r2, r2, #2
 8007950:	f105 010c 	add.w	r1, r5, #12
 8007954:	300c      	adds	r0, #12
 8007956:	f000 ffa3 	bl	80088a0 <memcpy>
 800795a:	2201      	movs	r2, #1
 800795c:	4631      	mov	r1, r6
 800795e:	4648      	mov	r0, r9
 8007960:	f000 fbfc 	bl	800815c <__lshift>
 8007964:	f10a 0301 	add.w	r3, sl, #1
 8007968:	9300      	str	r3, [sp, #0]
 800796a:	eb0a 030b 	add.w	r3, sl, fp
 800796e:	9308      	str	r3, [sp, #32]
 8007970:	9b04      	ldr	r3, [sp, #16]
 8007972:	f003 0301 	and.w	r3, r3, #1
 8007976:	462f      	mov	r7, r5
 8007978:	9306      	str	r3, [sp, #24]
 800797a:	4605      	mov	r5, r0
 800797c:	9b00      	ldr	r3, [sp, #0]
 800797e:	9802      	ldr	r0, [sp, #8]
 8007980:	4621      	mov	r1, r4
 8007982:	f103 3bff 	add.w	fp, r3, #4294967295
 8007986:	f7ff fa8a 	bl	8006e9e <quorem>
 800798a:	4603      	mov	r3, r0
 800798c:	3330      	adds	r3, #48	@ 0x30
 800798e:	9003      	str	r0, [sp, #12]
 8007990:	4639      	mov	r1, r7
 8007992:	9802      	ldr	r0, [sp, #8]
 8007994:	9309      	str	r3, [sp, #36]	@ 0x24
 8007996:	f000 fc4d 	bl	8008234 <__mcmp>
 800799a:	462a      	mov	r2, r5
 800799c:	9004      	str	r0, [sp, #16]
 800799e:	4621      	mov	r1, r4
 80079a0:	4648      	mov	r0, r9
 80079a2:	f000 fc63 	bl	800826c <__mdiff>
 80079a6:	68c2      	ldr	r2, [r0, #12]
 80079a8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80079aa:	4606      	mov	r6, r0
 80079ac:	bb02      	cbnz	r2, 80079f0 <_dtoa_r+0xa40>
 80079ae:	4601      	mov	r1, r0
 80079b0:	9802      	ldr	r0, [sp, #8]
 80079b2:	f000 fc3f 	bl	8008234 <__mcmp>
 80079b6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80079b8:	4602      	mov	r2, r0
 80079ba:	4631      	mov	r1, r6
 80079bc:	4648      	mov	r0, r9
 80079be:	920c      	str	r2, [sp, #48]	@ 0x30
 80079c0:	9309      	str	r3, [sp, #36]	@ 0x24
 80079c2:	f000 fa05 	bl	8007dd0 <_Bfree>
 80079c6:	9b07      	ldr	r3, [sp, #28]
 80079c8:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 80079ca:	9e00      	ldr	r6, [sp, #0]
 80079cc:	ea42 0103 	orr.w	r1, r2, r3
 80079d0:	9b06      	ldr	r3, [sp, #24]
 80079d2:	4319      	orrs	r1, r3
 80079d4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80079d6:	d10d      	bne.n	80079f4 <_dtoa_r+0xa44>
 80079d8:	2b39      	cmp	r3, #57	@ 0x39
 80079da:	d027      	beq.n	8007a2c <_dtoa_r+0xa7c>
 80079dc:	9a04      	ldr	r2, [sp, #16]
 80079de:	2a00      	cmp	r2, #0
 80079e0:	dd01      	ble.n	80079e6 <_dtoa_r+0xa36>
 80079e2:	9b03      	ldr	r3, [sp, #12]
 80079e4:	3331      	adds	r3, #49	@ 0x31
 80079e6:	f88b 3000 	strb.w	r3, [fp]
 80079ea:	e52e      	b.n	800744a <_dtoa_r+0x49a>
 80079ec:	4628      	mov	r0, r5
 80079ee:	e7b9      	b.n	8007964 <_dtoa_r+0x9b4>
 80079f0:	2201      	movs	r2, #1
 80079f2:	e7e2      	b.n	80079ba <_dtoa_r+0xa0a>
 80079f4:	9904      	ldr	r1, [sp, #16]
 80079f6:	2900      	cmp	r1, #0
 80079f8:	db04      	blt.n	8007a04 <_dtoa_r+0xa54>
 80079fa:	9807      	ldr	r0, [sp, #28]
 80079fc:	4301      	orrs	r1, r0
 80079fe:	9806      	ldr	r0, [sp, #24]
 8007a00:	4301      	orrs	r1, r0
 8007a02:	d120      	bne.n	8007a46 <_dtoa_r+0xa96>
 8007a04:	2a00      	cmp	r2, #0
 8007a06:	ddee      	ble.n	80079e6 <_dtoa_r+0xa36>
 8007a08:	9902      	ldr	r1, [sp, #8]
 8007a0a:	9300      	str	r3, [sp, #0]
 8007a0c:	2201      	movs	r2, #1
 8007a0e:	4648      	mov	r0, r9
 8007a10:	f000 fba4 	bl	800815c <__lshift>
 8007a14:	4621      	mov	r1, r4
 8007a16:	9002      	str	r0, [sp, #8]
 8007a18:	f000 fc0c 	bl	8008234 <__mcmp>
 8007a1c:	2800      	cmp	r0, #0
 8007a1e:	9b00      	ldr	r3, [sp, #0]
 8007a20:	dc02      	bgt.n	8007a28 <_dtoa_r+0xa78>
 8007a22:	d1e0      	bne.n	80079e6 <_dtoa_r+0xa36>
 8007a24:	07da      	lsls	r2, r3, #31
 8007a26:	d5de      	bpl.n	80079e6 <_dtoa_r+0xa36>
 8007a28:	2b39      	cmp	r3, #57	@ 0x39
 8007a2a:	d1da      	bne.n	80079e2 <_dtoa_r+0xa32>
 8007a2c:	2339      	movs	r3, #57	@ 0x39
 8007a2e:	f88b 3000 	strb.w	r3, [fp]
 8007a32:	4633      	mov	r3, r6
 8007a34:	461e      	mov	r6, r3
 8007a36:	3b01      	subs	r3, #1
 8007a38:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8007a3c:	2a39      	cmp	r2, #57	@ 0x39
 8007a3e:	d04e      	beq.n	8007ade <_dtoa_r+0xb2e>
 8007a40:	3201      	adds	r2, #1
 8007a42:	701a      	strb	r2, [r3, #0]
 8007a44:	e501      	b.n	800744a <_dtoa_r+0x49a>
 8007a46:	2a00      	cmp	r2, #0
 8007a48:	dd03      	ble.n	8007a52 <_dtoa_r+0xaa2>
 8007a4a:	2b39      	cmp	r3, #57	@ 0x39
 8007a4c:	d0ee      	beq.n	8007a2c <_dtoa_r+0xa7c>
 8007a4e:	3301      	adds	r3, #1
 8007a50:	e7c9      	b.n	80079e6 <_dtoa_r+0xa36>
 8007a52:	9a00      	ldr	r2, [sp, #0]
 8007a54:	9908      	ldr	r1, [sp, #32]
 8007a56:	f802 3c01 	strb.w	r3, [r2, #-1]
 8007a5a:	428a      	cmp	r2, r1
 8007a5c:	d028      	beq.n	8007ab0 <_dtoa_r+0xb00>
 8007a5e:	9902      	ldr	r1, [sp, #8]
 8007a60:	2300      	movs	r3, #0
 8007a62:	220a      	movs	r2, #10
 8007a64:	4648      	mov	r0, r9
 8007a66:	f000 f9d5 	bl	8007e14 <__multadd>
 8007a6a:	42af      	cmp	r7, r5
 8007a6c:	9002      	str	r0, [sp, #8]
 8007a6e:	f04f 0300 	mov.w	r3, #0
 8007a72:	f04f 020a 	mov.w	r2, #10
 8007a76:	4639      	mov	r1, r7
 8007a78:	4648      	mov	r0, r9
 8007a7a:	d107      	bne.n	8007a8c <_dtoa_r+0xadc>
 8007a7c:	f000 f9ca 	bl	8007e14 <__multadd>
 8007a80:	4607      	mov	r7, r0
 8007a82:	4605      	mov	r5, r0
 8007a84:	9b00      	ldr	r3, [sp, #0]
 8007a86:	3301      	adds	r3, #1
 8007a88:	9300      	str	r3, [sp, #0]
 8007a8a:	e777      	b.n	800797c <_dtoa_r+0x9cc>
 8007a8c:	f000 f9c2 	bl	8007e14 <__multadd>
 8007a90:	4629      	mov	r1, r5
 8007a92:	4607      	mov	r7, r0
 8007a94:	2300      	movs	r3, #0
 8007a96:	220a      	movs	r2, #10
 8007a98:	4648      	mov	r0, r9
 8007a9a:	f000 f9bb 	bl	8007e14 <__multadd>
 8007a9e:	4605      	mov	r5, r0
 8007aa0:	e7f0      	b.n	8007a84 <_dtoa_r+0xad4>
 8007aa2:	f1bb 0f00 	cmp.w	fp, #0
 8007aa6:	bfcc      	ite	gt
 8007aa8:	465e      	movgt	r6, fp
 8007aaa:	2601      	movle	r6, #1
 8007aac:	4456      	add	r6, sl
 8007aae:	2700      	movs	r7, #0
 8007ab0:	9902      	ldr	r1, [sp, #8]
 8007ab2:	9300      	str	r3, [sp, #0]
 8007ab4:	2201      	movs	r2, #1
 8007ab6:	4648      	mov	r0, r9
 8007ab8:	f000 fb50 	bl	800815c <__lshift>
 8007abc:	4621      	mov	r1, r4
 8007abe:	9002      	str	r0, [sp, #8]
 8007ac0:	f000 fbb8 	bl	8008234 <__mcmp>
 8007ac4:	2800      	cmp	r0, #0
 8007ac6:	dcb4      	bgt.n	8007a32 <_dtoa_r+0xa82>
 8007ac8:	d102      	bne.n	8007ad0 <_dtoa_r+0xb20>
 8007aca:	9b00      	ldr	r3, [sp, #0]
 8007acc:	07db      	lsls	r3, r3, #31
 8007ace:	d4b0      	bmi.n	8007a32 <_dtoa_r+0xa82>
 8007ad0:	4633      	mov	r3, r6
 8007ad2:	461e      	mov	r6, r3
 8007ad4:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007ad8:	2a30      	cmp	r2, #48	@ 0x30
 8007ada:	d0fa      	beq.n	8007ad2 <_dtoa_r+0xb22>
 8007adc:	e4b5      	b.n	800744a <_dtoa_r+0x49a>
 8007ade:	459a      	cmp	sl, r3
 8007ae0:	d1a8      	bne.n	8007a34 <_dtoa_r+0xa84>
 8007ae2:	2331      	movs	r3, #49	@ 0x31
 8007ae4:	f108 0801 	add.w	r8, r8, #1
 8007ae8:	f88a 3000 	strb.w	r3, [sl]
 8007aec:	e4ad      	b.n	800744a <_dtoa_r+0x49a>
 8007aee:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8007af0:	f8df a058 	ldr.w	sl, [pc, #88]	@ 8007b4c <_dtoa_r+0xb9c>
 8007af4:	b11b      	cbz	r3, 8007afe <_dtoa_r+0xb4e>
 8007af6:	f10a 0308 	add.w	r3, sl, #8
 8007afa:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8007afc:	6013      	str	r3, [r2, #0]
 8007afe:	4650      	mov	r0, sl
 8007b00:	b017      	add	sp, #92	@ 0x5c
 8007b02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007b06:	9b07      	ldr	r3, [sp, #28]
 8007b08:	2b01      	cmp	r3, #1
 8007b0a:	f77f ae2e 	ble.w	800776a <_dtoa_r+0x7ba>
 8007b0e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007b10:	9308      	str	r3, [sp, #32]
 8007b12:	2001      	movs	r0, #1
 8007b14:	e64d      	b.n	80077b2 <_dtoa_r+0x802>
 8007b16:	f1bb 0f00 	cmp.w	fp, #0
 8007b1a:	f77f aed9 	ble.w	80078d0 <_dtoa_r+0x920>
 8007b1e:	4656      	mov	r6, sl
 8007b20:	9802      	ldr	r0, [sp, #8]
 8007b22:	4621      	mov	r1, r4
 8007b24:	f7ff f9bb 	bl	8006e9e <quorem>
 8007b28:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 8007b2c:	f806 3b01 	strb.w	r3, [r6], #1
 8007b30:	eba6 020a 	sub.w	r2, r6, sl
 8007b34:	4593      	cmp	fp, r2
 8007b36:	ddb4      	ble.n	8007aa2 <_dtoa_r+0xaf2>
 8007b38:	9902      	ldr	r1, [sp, #8]
 8007b3a:	2300      	movs	r3, #0
 8007b3c:	220a      	movs	r2, #10
 8007b3e:	4648      	mov	r0, r9
 8007b40:	f000 f968 	bl	8007e14 <__multadd>
 8007b44:	9002      	str	r0, [sp, #8]
 8007b46:	e7eb      	b.n	8007b20 <_dtoa_r+0xb70>
 8007b48:	080095cc 	.word	0x080095cc
 8007b4c:	08009550 	.word	0x08009550

08007b50 <_free_r>:
 8007b50:	b538      	push	{r3, r4, r5, lr}
 8007b52:	4605      	mov	r5, r0
 8007b54:	2900      	cmp	r1, #0
 8007b56:	d041      	beq.n	8007bdc <_free_r+0x8c>
 8007b58:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007b5c:	1f0c      	subs	r4, r1, #4
 8007b5e:	2b00      	cmp	r3, #0
 8007b60:	bfb8      	it	lt
 8007b62:	18e4      	addlt	r4, r4, r3
 8007b64:	f000 f8e8 	bl	8007d38 <__malloc_lock>
 8007b68:	4a1d      	ldr	r2, [pc, #116]	@ (8007be0 <_free_r+0x90>)
 8007b6a:	6813      	ldr	r3, [r2, #0]
 8007b6c:	b933      	cbnz	r3, 8007b7c <_free_r+0x2c>
 8007b6e:	6063      	str	r3, [r4, #4]
 8007b70:	6014      	str	r4, [r2, #0]
 8007b72:	4628      	mov	r0, r5
 8007b74:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007b78:	f000 b8e4 	b.w	8007d44 <__malloc_unlock>
 8007b7c:	42a3      	cmp	r3, r4
 8007b7e:	d908      	bls.n	8007b92 <_free_r+0x42>
 8007b80:	6820      	ldr	r0, [r4, #0]
 8007b82:	1821      	adds	r1, r4, r0
 8007b84:	428b      	cmp	r3, r1
 8007b86:	bf01      	itttt	eq
 8007b88:	6819      	ldreq	r1, [r3, #0]
 8007b8a:	685b      	ldreq	r3, [r3, #4]
 8007b8c:	1809      	addeq	r1, r1, r0
 8007b8e:	6021      	streq	r1, [r4, #0]
 8007b90:	e7ed      	b.n	8007b6e <_free_r+0x1e>
 8007b92:	461a      	mov	r2, r3
 8007b94:	685b      	ldr	r3, [r3, #4]
 8007b96:	b10b      	cbz	r3, 8007b9c <_free_r+0x4c>
 8007b98:	42a3      	cmp	r3, r4
 8007b9a:	d9fa      	bls.n	8007b92 <_free_r+0x42>
 8007b9c:	6811      	ldr	r1, [r2, #0]
 8007b9e:	1850      	adds	r0, r2, r1
 8007ba0:	42a0      	cmp	r0, r4
 8007ba2:	d10b      	bne.n	8007bbc <_free_r+0x6c>
 8007ba4:	6820      	ldr	r0, [r4, #0]
 8007ba6:	4401      	add	r1, r0
 8007ba8:	1850      	adds	r0, r2, r1
 8007baa:	4283      	cmp	r3, r0
 8007bac:	6011      	str	r1, [r2, #0]
 8007bae:	d1e0      	bne.n	8007b72 <_free_r+0x22>
 8007bb0:	6818      	ldr	r0, [r3, #0]
 8007bb2:	685b      	ldr	r3, [r3, #4]
 8007bb4:	6053      	str	r3, [r2, #4]
 8007bb6:	4408      	add	r0, r1
 8007bb8:	6010      	str	r0, [r2, #0]
 8007bba:	e7da      	b.n	8007b72 <_free_r+0x22>
 8007bbc:	d902      	bls.n	8007bc4 <_free_r+0x74>
 8007bbe:	230c      	movs	r3, #12
 8007bc0:	602b      	str	r3, [r5, #0]
 8007bc2:	e7d6      	b.n	8007b72 <_free_r+0x22>
 8007bc4:	6820      	ldr	r0, [r4, #0]
 8007bc6:	1821      	adds	r1, r4, r0
 8007bc8:	428b      	cmp	r3, r1
 8007bca:	bf04      	itt	eq
 8007bcc:	6819      	ldreq	r1, [r3, #0]
 8007bce:	685b      	ldreq	r3, [r3, #4]
 8007bd0:	6063      	str	r3, [r4, #4]
 8007bd2:	bf04      	itt	eq
 8007bd4:	1809      	addeq	r1, r1, r0
 8007bd6:	6021      	streq	r1, [r4, #0]
 8007bd8:	6054      	str	r4, [r2, #4]
 8007bda:	e7ca      	b.n	8007b72 <_free_r+0x22>
 8007bdc:	bd38      	pop	{r3, r4, r5, pc}
 8007bde:	bf00      	nop
 8007be0:	200006ac 	.word	0x200006ac

08007be4 <malloc>:
 8007be4:	4b02      	ldr	r3, [pc, #8]	@ (8007bf0 <malloc+0xc>)
 8007be6:	4601      	mov	r1, r0
 8007be8:	6818      	ldr	r0, [r3, #0]
 8007bea:	f000 b825 	b.w	8007c38 <_malloc_r>
 8007bee:	bf00      	nop
 8007bf0:	20000018 	.word	0x20000018

08007bf4 <sbrk_aligned>:
 8007bf4:	b570      	push	{r4, r5, r6, lr}
 8007bf6:	4e0f      	ldr	r6, [pc, #60]	@ (8007c34 <sbrk_aligned+0x40>)
 8007bf8:	460c      	mov	r4, r1
 8007bfa:	6831      	ldr	r1, [r6, #0]
 8007bfc:	4605      	mov	r5, r0
 8007bfe:	b911      	cbnz	r1, 8007c06 <sbrk_aligned+0x12>
 8007c00:	f000 fe3e 	bl	8008880 <_sbrk_r>
 8007c04:	6030      	str	r0, [r6, #0]
 8007c06:	4621      	mov	r1, r4
 8007c08:	4628      	mov	r0, r5
 8007c0a:	f000 fe39 	bl	8008880 <_sbrk_r>
 8007c0e:	1c43      	adds	r3, r0, #1
 8007c10:	d103      	bne.n	8007c1a <sbrk_aligned+0x26>
 8007c12:	f04f 34ff 	mov.w	r4, #4294967295
 8007c16:	4620      	mov	r0, r4
 8007c18:	bd70      	pop	{r4, r5, r6, pc}
 8007c1a:	1cc4      	adds	r4, r0, #3
 8007c1c:	f024 0403 	bic.w	r4, r4, #3
 8007c20:	42a0      	cmp	r0, r4
 8007c22:	d0f8      	beq.n	8007c16 <sbrk_aligned+0x22>
 8007c24:	1a21      	subs	r1, r4, r0
 8007c26:	4628      	mov	r0, r5
 8007c28:	f000 fe2a 	bl	8008880 <_sbrk_r>
 8007c2c:	3001      	adds	r0, #1
 8007c2e:	d1f2      	bne.n	8007c16 <sbrk_aligned+0x22>
 8007c30:	e7ef      	b.n	8007c12 <sbrk_aligned+0x1e>
 8007c32:	bf00      	nop
 8007c34:	200006a8 	.word	0x200006a8

08007c38 <_malloc_r>:
 8007c38:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007c3c:	1ccd      	adds	r5, r1, #3
 8007c3e:	f025 0503 	bic.w	r5, r5, #3
 8007c42:	3508      	adds	r5, #8
 8007c44:	2d0c      	cmp	r5, #12
 8007c46:	bf38      	it	cc
 8007c48:	250c      	movcc	r5, #12
 8007c4a:	2d00      	cmp	r5, #0
 8007c4c:	4606      	mov	r6, r0
 8007c4e:	db01      	blt.n	8007c54 <_malloc_r+0x1c>
 8007c50:	42a9      	cmp	r1, r5
 8007c52:	d904      	bls.n	8007c5e <_malloc_r+0x26>
 8007c54:	230c      	movs	r3, #12
 8007c56:	6033      	str	r3, [r6, #0]
 8007c58:	2000      	movs	r0, #0
 8007c5a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007c5e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8007d34 <_malloc_r+0xfc>
 8007c62:	f000 f869 	bl	8007d38 <__malloc_lock>
 8007c66:	f8d8 3000 	ldr.w	r3, [r8]
 8007c6a:	461c      	mov	r4, r3
 8007c6c:	bb44      	cbnz	r4, 8007cc0 <_malloc_r+0x88>
 8007c6e:	4629      	mov	r1, r5
 8007c70:	4630      	mov	r0, r6
 8007c72:	f7ff ffbf 	bl	8007bf4 <sbrk_aligned>
 8007c76:	1c43      	adds	r3, r0, #1
 8007c78:	4604      	mov	r4, r0
 8007c7a:	d158      	bne.n	8007d2e <_malloc_r+0xf6>
 8007c7c:	f8d8 4000 	ldr.w	r4, [r8]
 8007c80:	4627      	mov	r7, r4
 8007c82:	2f00      	cmp	r7, #0
 8007c84:	d143      	bne.n	8007d0e <_malloc_r+0xd6>
 8007c86:	2c00      	cmp	r4, #0
 8007c88:	d04b      	beq.n	8007d22 <_malloc_r+0xea>
 8007c8a:	6823      	ldr	r3, [r4, #0]
 8007c8c:	4639      	mov	r1, r7
 8007c8e:	4630      	mov	r0, r6
 8007c90:	eb04 0903 	add.w	r9, r4, r3
 8007c94:	f000 fdf4 	bl	8008880 <_sbrk_r>
 8007c98:	4581      	cmp	r9, r0
 8007c9a:	d142      	bne.n	8007d22 <_malloc_r+0xea>
 8007c9c:	6821      	ldr	r1, [r4, #0]
 8007c9e:	1a6d      	subs	r5, r5, r1
 8007ca0:	4629      	mov	r1, r5
 8007ca2:	4630      	mov	r0, r6
 8007ca4:	f7ff ffa6 	bl	8007bf4 <sbrk_aligned>
 8007ca8:	3001      	adds	r0, #1
 8007caa:	d03a      	beq.n	8007d22 <_malloc_r+0xea>
 8007cac:	6823      	ldr	r3, [r4, #0]
 8007cae:	442b      	add	r3, r5
 8007cb0:	6023      	str	r3, [r4, #0]
 8007cb2:	f8d8 3000 	ldr.w	r3, [r8]
 8007cb6:	685a      	ldr	r2, [r3, #4]
 8007cb8:	bb62      	cbnz	r2, 8007d14 <_malloc_r+0xdc>
 8007cba:	f8c8 7000 	str.w	r7, [r8]
 8007cbe:	e00f      	b.n	8007ce0 <_malloc_r+0xa8>
 8007cc0:	6822      	ldr	r2, [r4, #0]
 8007cc2:	1b52      	subs	r2, r2, r5
 8007cc4:	d420      	bmi.n	8007d08 <_malloc_r+0xd0>
 8007cc6:	2a0b      	cmp	r2, #11
 8007cc8:	d917      	bls.n	8007cfa <_malloc_r+0xc2>
 8007cca:	1961      	adds	r1, r4, r5
 8007ccc:	42a3      	cmp	r3, r4
 8007cce:	6025      	str	r5, [r4, #0]
 8007cd0:	bf18      	it	ne
 8007cd2:	6059      	strne	r1, [r3, #4]
 8007cd4:	6863      	ldr	r3, [r4, #4]
 8007cd6:	bf08      	it	eq
 8007cd8:	f8c8 1000 	streq.w	r1, [r8]
 8007cdc:	5162      	str	r2, [r4, r5]
 8007cde:	604b      	str	r3, [r1, #4]
 8007ce0:	4630      	mov	r0, r6
 8007ce2:	f000 f82f 	bl	8007d44 <__malloc_unlock>
 8007ce6:	f104 000b 	add.w	r0, r4, #11
 8007cea:	1d23      	adds	r3, r4, #4
 8007cec:	f020 0007 	bic.w	r0, r0, #7
 8007cf0:	1ac2      	subs	r2, r0, r3
 8007cf2:	bf1c      	itt	ne
 8007cf4:	1a1b      	subne	r3, r3, r0
 8007cf6:	50a3      	strne	r3, [r4, r2]
 8007cf8:	e7af      	b.n	8007c5a <_malloc_r+0x22>
 8007cfa:	6862      	ldr	r2, [r4, #4]
 8007cfc:	42a3      	cmp	r3, r4
 8007cfe:	bf0c      	ite	eq
 8007d00:	f8c8 2000 	streq.w	r2, [r8]
 8007d04:	605a      	strne	r2, [r3, #4]
 8007d06:	e7eb      	b.n	8007ce0 <_malloc_r+0xa8>
 8007d08:	4623      	mov	r3, r4
 8007d0a:	6864      	ldr	r4, [r4, #4]
 8007d0c:	e7ae      	b.n	8007c6c <_malloc_r+0x34>
 8007d0e:	463c      	mov	r4, r7
 8007d10:	687f      	ldr	r7, [r7, #4]
 8007d12:	e7b6      	b.n	8007c82 <_malloc_r+0x4a>
 8007d14:	461a      	mov	r2, r3
 8007d16:	685b      	ldr	r3, [r3, #4]
 8007d18:	42a3      	cmp	r3, r4
 8007d1a:	d1fb      	bne.n	8007d14 <_malloc_r+0xdc>
 8007d1c:	2300      	movs	r3, #0
 8007d1e:	6053      	str	r3, [r2, #4]
 8007d20:	e7de      	b.n	8007ce0 <_malloc_r+0xa8>
 8007d22:	230c      	movs	r3, #12
 8007d24:	6033      	str	r3, [r6, #0]
 8007d26:	4630      	mov	r0, r6
 8007d28:	f000 f80c 	bl	8007d44 <__malloc_unlock>
 8007d2c:	e794      	b.n	8007c58 <_malloc_r+0x20>
 8007d2e:	6005      	str	r5, [r0, #0]
 8007d30:	e7d6      	b.n	8007ce0 <_malloc_r+0xa8>
 8007d32:	bf00      	nop
 8007d34:	200006ac 	.word	0x200006ac

08007d38 <__malloc_lock>:
 8007d38:	4801      	ldr	r0, [pc, #4]	@ (8007d40 <__malloc_lock+0x8>)
 8007d3a:	f7ff b8ae 	b.w	8006e9a <__retarget_lock_acquire_recursive>
 8007d3e:	bf00      	nop
 8007d40:	200006a4 	.word	0x200006a4

08007d44 <__malloc_unlock>:
 8007d44:	4801      	ldr	r0, [pc, #4]	@ (8007d4c <__malloc_unlock+0x8>)
 8007d46:	f7ff b8a9 	b.w	8006e9c <__retarget_lock_release_recursive>
 8007d4a:	bf00      	nop
 8007d4c:	200006a4 	.word	0x200006a4

08007d50 <_Balloc>:
 8007d50:	b570      	push	{r4, r5, r6, lr}
 8007d52:	69c6      	ldr	r6, [r0, #28]
 8007d54:	4604      	mov	r4, r0
 8007d56:	460d      	mov	r5, r1
 8007d58:	b976      	cbnz	r6, 8007d78 <_Balloc+0x28>
 8007d5a:	2010      	movs	r0, #16
 8007d5c:	f7ff ff42 	bl	8007be4 <malloc>
 8007d60:	4602      	mov	r2, r0
 8007d62:	61e0      	str	r0, [r4, #28]
 8007d64:	b920      	cbnz	r0, 8007d70 <_Balloc+0x20>
 8007d66:	4b18      	ldr	r3, [pc, #96]	@ (8007dc8 <_Balloc+0x78>)
 8007d68:	4818      	ldr	r0, [pc, #96]	@ (8007dcc <_Balloc+0x7c>)
 8007d6a:	216b      	movs	r1, #107	@ 0x6b
 8007d6c:	f000 fda6 	bl	80088bc <__assert_func>
 8007d70:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007d74:	6006      	str	r6, [r0, #0]
 8007d76:	60c6      	str	r6, [r0, #12]
 8007d78:	69e6      	ldr	r6, [r4, #28]
 8007d7a:	68f3      	ldr	r3, [r6, #12]
 8007d7c:	b183      	cbz	r3, 8007da0 <_Balloc+0x50>
 8007d7e:	69e3      	ldr	r3, [r4, #28]
 8007d80:	68db      	ldr	r3, [r3, #12]
 8007d82:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8007d86:	b9b8      	cbnz	r0, 8007db8 <_Balloc+0x68>
 8007d88:	2101      	movs	r1, #1
 8007d8a:	fa01 f605 	lsl.w	r6, r1, r5
 8007d8e:	1d72      	adds	r2, r6, #5
 8007d90:	0092      	lsls	r2, r2, #2
 8007d92:	4620      	mov	r0, r4
 8007d94:	f000 fdb0 	bl	80088f8 <_calloc_r>
 8007d98:	b160      	cbz	r0, 8007db4 <_Balloc+0x64>
 8007d9a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8007d9e:	e00e      	b.n	8007dbe <_Balloc+0x6e>
 8007da0:	2221      	movs	r2, #33	@ 0x21
 8007da2:	2104      	movs	r1, #4
 8007da4:	4620      	mov	r0, r4
 8007da6:	f000 fda7 	bl	80088f8 <_calloc_r>
 8007daa:	69e3      	ldr	r3, [r4, #28]
 8007dac:	60f0      	str	r0, [r6, #12]
 8007dae:	68db      	ldr	r3, [r3, #12]
 8007db0:	2b00      	cmp	r3, #0
 8007db2:	d1e4      	bne.n	8007d7e <_Balloc+0x2e>
 8007db4:	2000      	movs	r0, #0
 8007db6:	bd70      	pop	{r4, r5, r6, pc}
 8007db8:	6802      	ldr	r2, [r0, #0]
 8007dba:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8007dbe:	2300      	movs	r3, #0
 8007dc0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007dc4:	e7f7      	b.n	8007db6 <_Balloc+0x66>
 8007dc6:	bf00      	nop
 8007dc8:	0800955d 	.word	0x0800955d
 8007dcc:	080095dd 	.word	0x080095dd

08007dd0 <_Bfree>:
 8007dd0:	b570      	push	{r4, r5, r6, lr}
 8007dd2:	69c6      	ldr	r6, [r0, #28]
 8007dd4:	4605      	mov	r5, r0
 8007dd6:	460c      	mov	r4, r1
 8007dd8:	b976      	cbnz	r6, 8007df8 <_Bfree+0x28>
 8007dda:	2010      	movs	r0, #16
 8007ddc:	f7ff ff02 	bl	8007be4 <malloc>
 8007de0:	4602      	mov	r2, r0
 8007de2:	61e8      	str	r0, [r5, #28]
 8007de4:	b920      	cbnz	r0, 8007df0 <_Bfree+0x20>
 8007de6:	4b09      	ldr	r3, [pc, #36]	@ (8007e0c <_Bfree+0x3c>)
 8007de8:	4809      	ldr	r0, [pc, #36]	@ (8007e10 <_Bfree+0x40>)
 8007dea:	218f      	movs	r1, #143	@ 0x8f
 8007dec:	f000 fd66 	bl	80088bc <__assert_func>
 8007df0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007df4:	6006      	str	r6, [r0, #0]
 8007df6:	60c6      	str	r6, [r0, #12]
 8007df8:	b13c      	cbz	r4, 8007e0a <_Bfree+0x3a>
 8007dfa:	69eb      	ldr	r3, [r5, #28]
 8007dfc:	6862      	ldr	r2, [r4, #4]
 8007dfe:	68db      	ldr	r3, [r3, #12]
 8007e00:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007e04:	6021      	str	r1, [r4, #0]
 8007e06:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8007e0a:	bd70      	pop	{r4, r5, r6, pc}
 8007e0c:	0800955d 	.word	0x0800955d
 8007e10:	080095dd 	.word	0x080095dd

08007e14 <__multadd>:
 8007e14:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007e18:	690d      	ldr	r5, [r1, #16]
 8007e1a:	4607      	mov	r7, r0
 8007e1c:	460c      	mov	r4, r1
 8007e1e:	461e      	mov	r6, r3
 8007e20:	f101 0c14 	add.w	ip, r1, #20
 8007e24:	2000      	movs	r0, #0
 8007e26:	f8dc 3000 	ldr.w	r3, [ip]
 8007e2a:	b299      	uxth	r1, r3
 8007e2c:	fb02 6101 	mla	r1, r2, r1, r6
 8007e30:	0c1e      	lsrs	r6, r3, #16
 8007e32:	0c0b      	lsrs	r3, r1, #16
 8007e34:	fb02 3306 	mla	r3, r2, r6, r3
 8007e38:	b289      	uxth	r1, r1
 8007e3a:	3001      	adds	r0, #1
 8007e3c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8007e40:	4285      	cmp	r5, r0
 8007e42:	f84c 1b04 	str.w	r1, [ip], #4
 8007e46:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8007e4a:	dcec      	bgt.n	8007e26 <__multadd+0x12>
 8007e4c:	b30e      	cbz	r6, 8007e92 <__multadd+0x7e>
 8007e4e:	68a3      	ldr	r3, [r4, #8]
 8007e50:	42ab      	cmp	r3, r5
 8007e52:	dc19      	bgt.n	8007e88 <__multadd+0x74>
 8007e54:	6861      	ldr	r1, [r4, #4]
 8007e56:	4638      	mov	r0, r7
 8007e58:	3101      	adds	r1, #1
 8007e5a:	f7ff ff79 	bl	8007d50 <_Balloc>
 8007e5e:	4680      	mov	r8, r0
 8007e60:	b928      	cbnz	r0, 8007e6e <__multadd+0x5a>
 8007e62:	4602      	mov	r2, r0
 8007e64:	4b0c      	ldr	r3, [pc, #48]	@ (8007e98 <__multadd+0x84>)
 8007e66:	480d      	ldr	r0, [pc, #52]	@ (8007e9c <__multadd+0x88>)
 8007e68:	21ba      	movs	r1, #186	@ 0xba
 8007e6a:	f000 fd27 	bl	80088bc <__assert_func>
 8007e6e:	6922      	ldr	r2, [r4, #16]
 8007e70:	3202      	adds	r2, #2
 8007e72:	f104 010c 	add.w	r1, r4, #12
 8007e76:	0092      	lsls	r2, r2, #2
 8007e78:	300c      	adds	r0, #12
 8007e7a:	f000 fd11 	bl	80088a0 <memcpy>
 8007e7e:	4621      	mov	r1, r4
 8007e80:	4638      	mov	r0, r7
 8007e82:	f7ff ffa5 	bl	8007dd0 <_Bfree>
 8007e86:	4644      	mov	r4, r8
 8007e88:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8007e8c:	3501      	adds	r5, #1
 8007e8e:	615e      	str	r6, [r3, #20]
 8007e90:	6125      	str	r5, [r4, #16]
 8007e92:	4620      	mov	r0, r4
 8007e94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007e98:	080095cc 	.word	0x080095cc
 8007e9c:	080095dd 	.word	0x080095dd

08007ea0 <__hi0bits>:
 8007ea0:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8007ea4:	4603      	mov	r3, r0
 8007ea6:	bf36      	itet	cc
 8007ea8:	0403      	lslcc	r3, r0, #16
 8007eaa:	2000      	movcs	r0, #0
 8007eac:	2010      	movcc	r0, #16
 8007eae:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007eb2:	bf3c      	itt	cc
 8007eb4:	021b      	lslcc	r3, r3, #8
 8007eb6:	3008      	addcc	r0, #8
 8007eb8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007ebc:	bf3c      	itt	cc
 8007ebe:	011b      	lslcc	r3, r3, #4
 8007ec0:	3004      	addcc	r0, #4
 8007ec2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007ec6:	bf3c      	itt	cc
 8007ec8:	009b      	lslcc	r3, r3, #2
 8007eca:	3002      	addcc	r0, #2
 8007ecc:	2b00      	cmp	r3, #0
 8007ece:	db05      	blt.n	8007edc <__hi0bits+0x3c>
 8007ed0:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8007ed4:	f100 0001 	add.w	r0, r0, #1
 8007ed8:	bf08      	it	eq
 8007eda:	2020      	moveq	r0, #32
 8007edc:	4770      	bx	lr

08007ede <__lo0bits>:
 8007ede:	6803      	ldr	r3, [r0, #0]
 8007ee0:	4602      	mov	r2, r0
 8007ee2:	f013 0007 	ands.w	r0, r3, #7
 8007ee6:	d00b      	beq.n	8007f00 <__lo0bits+0x22>
 8007ee8:	07d9      	lsls	r1, r3, #31
 8007eea:	d421      	bmi.n	8007f30 <__lo0bits+0x52>
 8007eec:	0798      	lsls	r0, r3, #30
 8007eee:	bf49      	itett	mi
 8007ef0:	085b      	lsrmi	r3, r3, #1
 8007ef2:	089b      	lsrpl	r3, r3, #2
 8007ef4:	2001      	movmi	r0, #1
 8007ef6:	6013      	strmi	r3, [r2, #0]
 8007ef8:	bf5c      	itt	pl
 8007efa:	6013      	strpl	r3, [r2, #0]
 8007efc:	2002      	movpl	r0, #2
 8007efe:	4770      	bx	lr
 8007f00:	b299      	uxth	r1, r3
 8007f02:	b909      	cbnz	r1, 8007f08 <__lo0bits+0x2a>
 8007f04:	0c1b      	lsrs	r3, r3, #16
 8007f06:	2010      	movs	r0, #16
 8007f08:	b2d9      	uxtb	r1, r3
 8007f0a:	b909      	cbnz	r1, 8007f10 <__lo0bits+0x32>
 8007f0c:	3008      	adds	r0, #8
 8007f0e:	0a1b      	lsrs	r3, r3, #8
 8007f10:	0719      	lsls	r1, r3, #28
 8007f12:	bf04      	itt	eq
 8007f14:	091b      	lsreq	r3, r3, #4
 8007f16:	3004      	addeq	r0, #4
 8007f18:	0799      	lsls	r1, r3, #30
 8007f1a:	bf04      	itt	eq
 8007f1c:	089b      	lsreq	r3, r3, #2
 8007f1e:	3002      	addeq	r0, #2
 8007f20:	07d9      	lsls	r1, r3, #31
 8007f22:	d403      	bmi.n	8007f2c <__lo0bits+0x4e>
 8007f24:	085b      	lsrs	r3, r3, #1
 8007f26:	f100 0001 	add.w	r0, r0, #1
 8007f2a:	d003      	beq.n	8007f34 <__lo0bits+0x56>
 8007f2c:	6013      	str	r3, [r2, #0]
 8007f2e:	4770      	bx	lr
 8007f30:	2000      	movs	r0, #0
 8007f32:	4770      	bx	lr
 8007f34:	2020      	movs	r0, #32
 8007f36:	4770      	bx	lr

08007f38 <__i2b>:
 8007f38:	b510      	push	{r4, lr}
 8007f3a:	460c      	mov	r4, r1
 8007f3c:	2101      	movs	r1, #1
 8007f3e:	f7ff ff07 	bl	8007d50 <_Balloc>
 8007f42:	4602      	mov	r2, r0
 8007f44:	b928      	cbnz	r0, 8007f52 <__i2b+0x1a>
 8007f46:	4b05      	ldr	r3, [pc, #20]	@ (8007f5c <__i2b+0x24>)
 8007f48:	4805      	ldr	r0, [pc, #20]	@ (8007f60 <__i2b+0x28>)
 8007f4a:	f240 1145 	movw	r1, #325	@ 0x145
 8007f4e:	f000 fcb5 	bl	80088bc <__assert_func>
 8007f52:	2301      	movs	r3, #1
 8007f54:	6144      	str	r4, [r0, #20]
 8007f56:	6103      	str	r3, [r0, #16]
 8007f58:	bd10      	pop	{r4, pc}
 8007f5a:	bf00      	nop
 8007f5c:	080095cc 	.word	0x080095cc
 8007f60:	080095dd 	.word	0x080095dd

08007f64 <__multiply>:
 8007f64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007f68:	4617      	mov	r7, r2
 8007f6a:	690a      	ldr	r2, [r1, #16]
 8007f6c:	693b      	ldr	r3, [r7, #16]
 8007f6e:	429a      	cmp	r2, r3
 8007f70:	bfa8      	it	ge
 8007f72:	463b      	movge	r3, r7
 8007f74:	4689      	mov	r9, r1
 8007f76:	bfa4      	itt	ge
 8007f78:	460f      	movge	r7, r1
 8007f7a:	4699      	movge	r9, r3
 8007f7c:	693d      	ldr	r5, [r7, #16]
 8007f7e:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8007f82:	68bb      	ldr	r3, [r7, #8]
 8007f84:	6879      	ldr	r1, [r7, #4]
 8007f86:	eb05 060a 	add.w	r6, r5, sl
 8007f8a:	42b3      	cmp	r3, r6
 8007f8c:	b085      	sub	sp, #20
 8007f8e:	bfb8      	it	lt
 8007f90:	3101      	addlt	r1, #1
 8007f92:	f7ff fedd 	bl	8007d50 <_Balloc>
 8007f96:	b930      	cbnz	r0, 8007fa6 <__multiply+0x42>
 8007f98:	4602      	mov	r2, r0
 8007f9a:	4b41      	ldr	r3, [pc, #260]	@ (80080a0 <__multiply+0x13c>)
 8007f9c:	4841      	ldr	r0, [pc, #260]	@ (80080a4 <__multiply+0x140>)
 8007f9e:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8007fa2:	f000 fc8b 	bl	80088bc <__assert_func>
 8007fa6:	f100 0414 	add.w	r4, r0, #20
 8007faa:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 8007fae:	4623      	mov	r3, r4
 8007fb0:	2200      	movs	r2, #0
 8007fb2:	4573      	cmp	r3, lr
 8007fb4:	d320      	bcc.n	8007ff8 <__multiply+0x94>
 8007fb6:	f107 0814 	add.w	r8, r7, #20
 8007fba:	f109 0114 	add.w	r1, r9, #20
 8007fbe:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 8007fc2:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 8007fc6:	9302      	str	r3, [sp, #8]
 8007fc8:	1beb      	subs	r3, r5, r7
 8007fca:	3b15      	subs	r3, #21
 8007fcc:	f023 0303 	bic.w	r3, r3, #3
 8007fd0:	3304      	adds	r3, #4
 8007fd2:	3715      	adds	r7, #21
 8007fd4:	42bd      	cmp	r5, r7
 8007fd6:	bf38      	it	cc
 8007fd8:	2304      	movcc	r3, #4
 8007fda:	9301      	str	r3, [sp, #4]
 8007fdc:	9b02      	ldr	r3, [sp, #8]
 8007fde:	9103      	str	r1, [sp, #12]
 8007fe0:	428b      	cmp	r3, r1
 8007fe2:	d80c      	bhi.n	8007ffe <__multiply+0x9a>
 8007fe4:	2e00      	cmp	r6, #0
 8007fe6:	dd03      	ble.n	8007ff0 <__multiply+0x8c>
 8007fe8:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8007fec:	2b00      	cmp	r3, #0
 8007fee:	d055      	beq.n	800809c <__multiply+0x138>
 8007ff0:	6106      	str	r6, [r0, #16]
 8007ff2:	b005      	add	sp, #20
 8007ff4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007ff8:	f843 2b04 	str.w	r2, [r3], #4
 8007ffc:	e7d9      	b.n	8007fb2 <__multiply+0x4e>
 8007ffe:	f8b1 a000 	ldrh.w	sl, [r1]
 8008002:	f1ba 0f00 	cmp.w	sl, #0
 8008006:	d01f      	beq.n	8008048 <__multiply+0xe4>
 8008008:	46c4      	mov	ip, r8
 800800a:	46a1      	mov	r9, r4
 800800c:	2700      	movs	r7, #0
 800800e:	f85c 2b04 	ldr.w	r2, [ip], #4
 8008012:	f8d9 3000 	ldr.w	r3, [r9]
 8008016:	fa1f fb82 	uxth.w	fp, r2
 800801a:	b29b      	uxth	r3, r3
 800801c:	fb0a 330b 	mla	r3, sl, fp, r3
 8008020:	443b      	add	r3, r7
 8008022:	f8d9 7000 	ldr.w	r7, [r9]
 8008026:	0c12      	lsrs	r2, r2, #16
 8008028:	0c3f      	lsrs	r7, r7, #16
 800802a:	fb0a 7202 	mla	r2, sl, r2, r7
 800802e:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 8008032:	b29b      	uxth	r3, r3
 8008034:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008038:	4565      	cmp	r5, ip
 800803a:	f849 3b04 	str.w	r3, [r9], #4
 800803e:	ea4f 4712 	mov.w	r7, r2, lsr #16
 8008042:	d8e4      	bhi.n	800800e <__multiply+0xaa>
 8008044:	9b01      	ldr	r3, [sp, #4]
 8008046:	50e7      	str	r7, [r4, r3]
 8008048:	9b03      	ldr	r3, [sp, #12]
 800804a:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800804e:	3104      	adds	r1, #4
 8008050:	f1b9 0f00 	cmp.w	r9, #0
 8008054:	d020      	beq.n	8008098 <__multiply+0x134>
 8008056:	6823      	ldr	r3, [r4, #0]
 8008058:	4647      	mov	r7, r8
 800805a:	46a4      	mov	ip, r4
 800805c:	f04f 0a00 	mov.w	sl, #0
 8008060:	f8b7 b000 	ldrh.w	fp, [r7]
 8008064:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 8008068:	fb09 220b 	mla	r2, r9, fp, r2
 800806c:	4452      	add	r2, sl
 800806e:	b29b      	uxth	r3, r3
 8008070:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008074:	f84c 3b04 	str.w	r3, [ip], #4
 8008078:	f857 3b04 	ldr.w	r3, [r7], #4
 800807c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008080:	f8bc 3000 	ldrh.w	r3, [ip]
 8008084:	fb09 330a 	mla	r3, r9, sl, r3
 8008088:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 800808c:	42bd      	cmp	r5, r7
 800808e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008092:	d8e5      	bhi.n	8008060 <__multiply+0xfc>
 8008094:	9a01      	ldr	r2, [sp, #4]
 8008096:	50a3      	str	r3, [r4, r2]
 8008098:	3404      	adds	r4, #4
 800809a:	e79f      	b.n	8007fdc <__multiply+0x78>
 800809c:	3e01      	subs	r6, #1
 800809e:	e7a1      	b.n	8007fe4 <__multiply+0x80>
 80080a0:	080095cc 	.word	0x080095cc
 80080a4:	080095dd 	.word	0x080095dd

080080a8 <__pow5mult>:
 80080a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80080ac:	4615      	mov	r5, r2
 80080ae:	f012 0203 	ands.w	r2, r2, #3
 80080b2:	4607      	mov	r7, r0
 80080b4:	460e      	mov	r6, r1
 80080b6:	d007      	beq.n	80080c8 <__pow5mult+0x20>
 80080b8:	4c25      	ldr	r4, [pc, #148]	@ (8008150 <__pow5mult+0xa8>)
 80080ba:	3a01      	subs	r2, #1
 80080bc:	2300      	movs	r3, #0
 80080be:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80080c2:	f7ff fea7 	bl	8007e14 <__multadd>
 80080c6:	4606      	mov	r6, r0
 80080c8:	10ad      	asrs	r5, r5, #2
 80080ca:	d03d      	beq.n	8008148 <__pow5mult+0xa0>
 80080cc:	69fc      	ldr	r4, [r7, #28]
 80080ce:	b97c      	cbnz	r4, 80080f0 <__pow5mult+0x48>
 80080d0:	2010      	movs	r0, #16
 80080d2:	f7ff fd87 	bl	8007be4 <malloc>
 80080d6:	4602      	mov	r2, r0
 80080d8:	61f8      	str	r0, [r7, #28]
 80080da:	b928      	cbnz	r0, 80080e8 <__pow5mult+0x40>
 80080dc:	4b1d      	ldr	r3, [pc, #116]	@ (8008154 <__pow5mult+0xac>)
 80080de:	481e      	ldr	r0, [pc, #120]	@ (8008158 <__pow5mult+0xb0>)
 80080e0:	f240 11b3 	movw	r1, #435	@ 0x1b3
 80080e4:	f000 fbea 	bl	80088bc <__assert_func>
 80080e8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80080ec:	6004      	str	r4, [r0, #0]
 80080ee:	60c4      	str	r4, [r0, #12]
 80080f0:	f8d7 801c 	ldr.w	r8, [r7, #28]
 80080f4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80080f8:	b94c      	cbnz	r4, 800810e <__pow5mult+0x66>
 80080fa:	f240 2171 	movw	r1, #625	@ 0x271
 80080fe:	4638      	mov	r0, r7
 8008100:	f7ff ff1a 	bl	8007f38 <__i2b>
 8008104:	2300      	movs	r3, #0
 8008106:	f8c8 0008 	str.w	r0, [r8, #8]
 800810a:	4604      	mov	r4, r0
 800810c:	6003      	str	r3, [r0, #0]
 800810e:	f04f 0900 	mov.w	r9, #0
 8008112:	07eb      	lsls	r3, r5, #31
 8008114:	d50a      	bpl.n	800812c <__pow5mult+0x84>
 8008116:	4631      	mov	r1, r6
 8008118:	4622      	mov	r2, r4
 800811a:	4638      	mov	r0, r7
 800811c:	f7ff ff22 	bl	8007f64 <__multiply>
 8008120:	4631      	mov	r1, r6
 8008122:	4680      	mov	r8, r0
 8008124:	4638      	mov	r0, r7
 8008126:	f7ff fe53 	bl	8007dd0 <_Bfree>
 800812a:	4646      	mov	r6, r8
 800812c:	106d      	asrs	r5, r5, #1
 800812e:	d00b      	beq.n	8008148 <__pow5mult+0xa0>
 8008130:	6820      	ldr	r0, [r4, #0]
 8008132:	b938      	cbnz	r0, 8008144 <__pow5mult+0x9c>
 8008134:	4622      	mov	r2, r4
 8008136:	4621      	mov	r1, r4
 8008138:	4638      	mov	r0, r7
 800813a:	f7ff ff13 	bl	8007f64 <__multiply>
 800813e:	6020      	str	r0, [r4, #0]
 8008140:	f8c0 9000 	str.w	r9, [r0]
 8008144:	4604      	mov	r4, r0
 8008146:	e7e4      	b.n	8008112 <__pow5mult+0x6a>
 8008148:	4630      	mov	r0, r6
 800814a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800814e:	bf00      	nop
 8008150:	08009690 	.word	0x08009690
 8008154:	0800955d 	.word	0x0800955d
 8008158:	080095dd 	.word	0x080095dd

0800815c <__lshift>:
 800815c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008160:	460c      	mov	r4, r1
 8008162:	6849      	ldr	r1, [r1, #4]
 8008164:	6923      	ldr	r3, [r4, #16]
 8008166:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800816a:	68a3      	ldr	r3, [r4, #8]
 800816c:	4607      	mov	r7, r0
 800816e:	4691      	mov	r9, r2
 8008170:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008174:	f108 0601 	add.w	r6, r8, #1
 8008178:	42b3      	cmp	r3, r6
 800817a:	db0b      	blt.n	8008194 <__lshift+0x38>
 800817c:	4638      	mov	r0, r7
 800817e:	f7ff fde7 	bl	8007d50 <_Balloc>
 8008182:	4605      	mov	r5, r0
 8008184:	b948      	cbnz	r0, 800819a <__lshift+0x3e>
 8008186:	4602      	mov	r2, r0
 8008188:	4b28      	ldr	r3, [pc, #160]	@ (800822c <__lshift+0xd0>)
 800818a:	4829      	ldr	r0, [pc, #164]	@ (8008230 <__lshift+0xd4>)
 800818c:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8008190:	f000 fb94 	bl	80088bc <__assert_func>
 8008194:	3101      	adds	r1, #1
 8008196:	005b      	lsls	r3, r3, #1
 8008198:	e7ee      	b.n	8008178 <__lshift+0x1c>
 800819a:	2300      	movs	r3, #0
 800819c:	f100 0114 	add.w	r1, r0, #20
 80081a0:	f100 0210 	add.w	r2, r0, #16
 80081a4:	4618      	mov	r0, r3
 80081a6:	4553      	cmp	r3, sl
 80081a8:	db33      	blt.n	8008212 <__lshift+0xb6>
 80081aa:	6920      	ldr	r0, [r4, #16]
 80081ac:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80081b0:	f104 0314 	add.w	r3, r4, #20
 80081b4:	f019 091f 	ands.w	r9, r9, #31
 80081b8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80081bc:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80081c0:	d02b      	beq.n	800821a <__lshift+0xbe>
 80081c2:	f1c9 0e20 	rsb	lr, r9, #32
 80081c6:	468a      	mov	sl, r1
 80081c8:	2200      	movs	r2, #0
 80081ca:	6818      	ldr	r0, [r3, #0]
 80081cc:	fa00 f009 	lsl.w	r0, r0, r9
 80081d0:	4310      	orrs	r0, r2
 80081d2:	f84a 0b04 	str.w	r0, [sl], #4
 80081d6:	f853 2b04 	ldr.w	r2, [r3], #4
 80081da:	459c      	cmp	ip, r3
 80081dc:	fa22 f20e 	lsr.w	r2, r2, lr
 80081e0:	d8f3      	bhi.n	80081ca <__lshift+0x6e>
 80081e2:	ebac 0304 	sub.w	r3, ip, r4
 80081e6:	3b15      	subs	r3, #21
 80081e8:	f023 0303 	bic.w	r3, r3, #3
 80081ec:	3304      	adds	r3, #4
 80081ee:	f104 0015 	add.w	r0, r4, #21
 80081f2:	4560      	cmp	r0, ip
 80081f4:	bf88      	it	hi
 80081f6:	2304      	movhi	r3, #4
 80081f8:	50ca      	str	r2, [r1, r3]
 80081fa:	b10a      	cbz	r2, 8008200 <__lshift+0xa4>
 80081fc:	f108 0602 	add.w	r6, r8, #2
 8008200:	3e01      	subs	r6, #1
 8008202:	4638      	mov	r0, r7
 8008204:	612e      	str	r6, [r5, #16]
 8008206:	4621      	mov	r1, r4
 8008208:	f7ff fde2 	bl	8007dd0 <_Bfree>
 800820c:	4628      	mov	r0, r5
 800820e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008212:	f842 0f04 	str.w	r0, [r2, #4]!
 8008216:	3301      	adds	r3, #1
 8008218:	e7c5      	b.n	80081a6 <__lshift+0x4a>
 800821a:	3904      	subs	r1, #4
 800821c:	f853 2b04 	ldr.w	r2, [r3], #4
 8008220:	f841 2f04 	str.w	r2, [r1, #4]!
 8008224:	459c      	cmp	ip, r3
 8008226:	d8f9      	bhi.n	800821c <__lshift+0xc0>
 8008228:	e7ea      	b.n	8008200 <__lshift+0xa4>
 800822a:	bf00      	nop
 800822c:	080095cc 	.word	0x080095cc
 8008230:	080095dd 	.word	0x080095dd

08008234 <__mcmp>:
 8008234:	690a      	ldr	r2, [r1, #16]
 8008236:	4603      	mov	r3, r0
 8008238:	6900      	ldr	r0, [r0, #16]
 800823a:	1a80      	subs	r0, r0, r2
 800823c:	b530      	push	{r4, r5, lr}
 800823e:	d10e      	bne.n	800825e <__mcmp+0x2a>
 8008240:	3314      	adds	r3, #20
 8008242:	3114      	adds	r1, #20
 8008244:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8008248:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800824c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8008250:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8008254:	4295      	cmp	r5, r2
 8008256:	d003      	beq.n	8008260 <__mcmp+0x2c>
 8008258:	d205      	bcs.n	8008266 <__mcmp+0x32>
 800825a:	f04f 30ff 	mov.w	r0, #4294967295
 800825e:	bd30      	pop	{r4, r5, pc}
 8008260:	42a3      	cmp	r3, r4
 8008262:	d3f3      	bcc.n	800824c <__mcmp+0x18>
 8008264:	e7fb      	b.n	800825e <__mcmp+0x2a>
 8008266:	2001      	movs	r0, #1
 8008268:	e7f9      	b.n	800825e <__mcmp+0x2a>
	...

0800826c <__mdiff>:
 800826c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008270:	4689      	mov	r9, r1
 8008272:	4606      	mov	r6, r0
 8008274:	4611      	mov	r1, r2
 8008276:	4648      	mov	r0, r9
 8008278:	4614      	mov	r4, r2
 800827a:	f7ff ffdb 	bl	8008234 <__mcmp>
 800827e:	1e05      	subs	r5, r0, #0
 8008280:	d112      	bne.n	80082a8 <__mdiff+0x3c>
 8008282:	4629      	mov	r1, r5
 8008284:	4630      	mov	r0, r6
 8008286:	f7ff fd63 	bl	8007d50 <_Balloc>
 800828a:	4602      	mov	r2, r0
 800828c:	b928      	cbnz	r0, 800829a <__mdiff+0x2e>
 800828e:	4b3f      	ldr	r3, [pc, #252]	@ (800838c <__mdiff+0x120>)
 8008290:	f240 2137 	movw	r1, #567	@ 0x237
 8008294:	483e      	ldr	r0, [pc, #248]	@ (8008390 <__mdiff+0x124>)
 8008296:	f000 fb11 	bl	80088bc <__assert_func>
 800829a:	2301      	movs	r3, #1
 800829c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80082a0:	4610      	mov	r0, r2
 80082a2:	b003      	add	sp, #12
 80082a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80082a8:	bfbc      	itt	lt
 80082aa:	464b      	movlt	r3, r9
 80082ac:	46a1      	movlt	r9, r4
 80082ae:	4630      	mov	r0, r6
 80082b0:	f8d9 1004 	ldr.w	r1, [r9, #4]
 80082b4:	bfba      	itte	lt
 80082b6:	461c      	movlt	r4, r3
 80082b8:	2501      	movlt	r5, #1
 80082ba:	2500      	movge	r5, #0
 80082bc:	f7ff fd48 	bl	8007d50 <_Balloc>
 80082c0:	4602      	mov	r2, r0
 80082c2:	b918      	cbnz	r0, 80082cc <__mdiff+0x60>
 80082c4:	4b31      	ldr	r3, [pc, #196]	@ (800838c <__mdiff+0x120>)
 80082c6:	f240 2145 	movw	r1, #581	@ 0x245
 80082ca:	e7e3      	b.n	8008294 <__mdiff+0x28>
 80082cc:	f8d9 7010 	ldr.w	r7, [r9, #16]
 80082d0:	6926      	ldr	r6, [r4, #16]
 80082d2:	60c5      	str	r5, [r0, #12]
 80082d4:	f109 0310 	add.w	r3, r9, #16
 80082d8:	f109 0514 	add.w	r5, r9, #20
 80082dc:	f104 0e14 	add.w	lr, r4, #20
 80082e0:	f100 0b14 	add.w	fp, r0, #20
 80082e4:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 80082e8:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 80082ec:	9301      	str	r3, [sp, #4]
 80082ee:	46d9      	mov	r9, fp
 80082f0:	f04f 0c00 	mov.w	ip, #0
 80082f4:	9b01      	ldr	r3, [sp, #4]
 80082f6:	f85e 0b04 	ldr.w	r0, [lr], #4
 80082fa:	f853 af04 	ldr.w	sl, [r3, #4]!
 80082fe:	9301      	str	r3, [sp, #4]
 8008300:	fa1f f38a 	uxth.w	r3, sl
 8008304:	4619      	mov	r1, r3
 8008306:	b283      	uxth	r3, r0
 8008308:	1acb      	subs	r3, r1, r3
 800830a:	0c00      	lsrs	r0, r0, #16
 800830c:	4463      	add	r3, ip
 800830e:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8008312:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8008316:	b29b      	uxth	r3, r3
 8008318:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800831c:	4576      	cmp	r6, lr
 800831e:	f849 3b04 	str.w	r3, [r9], #4
 8008322:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8008326:	d8e5      	bhi.n	80082f4 <__mdiff+0x88>
 8008328:	1b33      	subs	r3, r6, r4
 800832a:	3b15      	subs	r3, #21
 800832c:	f023 0303 	bic.w	r3, r3, #3
 8008330:	3415      	adds	r4, #21
 8008332:	3304      	adds	r3, #4
 8008334:	42a6      	cmp	r6, r4
 8008336:	bf38      	it	cc
 8008338:	2304      	movcc	r3, #4
 800833a:	441d      	add	r5, r3
 800833c:	445b      	add	r3, fp
 800833e:	461e      	mov	r6, r3
 8008340:	462c      	mov	r4, r5
 8008342:	4544      	cmp	r4, r8
 8008344:	d30e      	bcc.n	8008364 <__mdiff+0xf8>
 8008346:	f108 0103 	add.w	r1, r8, #3
 800834a:	1b49      	subs	r1, r1, r5
 800834c:	f021 0103 	bic.w	r1, r1, #3
 8008350:	3d03      	subs	r5, #3
 8008352:	45a8      	cmp	r8, r5
 8008354:	bf38      	it	cc
 8008356:	2100      	movcc	r1, #0
 8008358:	440b      	add	r3, r1
 800835a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800835e:	b191      	cbz	r1, 8008386 <__mdiff+0x11a>
 8008360:	6117      	str	r7, [r2, #16]
 8008362:	e79d      	b.n	80082a0 <__mdiff+0x34>
 8008364:	f854 1b04 	ldr.w	r1, [r4], #4
 8008368:	46e6      	mov	lr, ip
 800836a:	0c08      	lsrs	r0, r1, #16
 800836c:	fa1c fc81 	uxtah	ip, ip, r1
 8008370:	4471      	add	r1, lr
 8008372:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8008376:	b289      	uxth	r1, r1
 8008378:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800837c:	f846 1b04 	str.w	r1, [r6], #4
 8008380:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8008384:	e7dd      	b.n	8008342 <__mdiff+0xd6>
 8008386:	3f01      	subs	r7, #1
 8008388:	e7e7      	b.n	800835a <__mdiff+0xee>
 800838a:	bf00      	nop
 800838c:	080095cc 	.word	0x080095cc
 8008390:	080095dd 	.word	0x080095dd

08008394 <__d2b>:
 8008394:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8008398:	460f      	mov	r7, r1
 800839a:	2101      	movs	r1, #1
 800839c:	ec59 8b10 	vmov	r8, r9, d0
 80083a0:	4616      	mov	r6, r2
 80083a2:	f7ff fcd5 	bl	8007d50 <_Balloc>
 80083a6:	4604      	mov	r4, r0
 80083a8:	b930      	cbnz	r0, 80083b8 <__d2b+0x24>
 80083aa:	4602      	mov	r2, r0
 80083ac:	4b23      	ldr	r3, [pc, #140]	@ (800843c <__d2b+0xa8>)
 80083ae:	4824      	ldr	r0, [pc, #144]	@ (8008440 <__d2b+0xac>)
 80083b0:	f240 310f 	movw	r1, #783	@ 0x30f
 80083b4:	f000 fa82 	bl	80088bc <__assert_func>
 80083b8:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80083bc:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80083c0:	b10d      	cbz	r5, 80083c6 <__d2b+0x32>
 80083c2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80083c6:	9301      	str	r3, [sp, #4]
 80083c8:	f1b8 0300 	subs.w	r3, r8, #0
 80083cc:	d023      	beq.n	8008416 <__d2b+0x82>
 80083ce:	4668      	mov	r0, sp
 80083d0:	9300      	str	r3, [sp, #0]
 80083d2:	f7ff fd84 	bl	8007ede <__lo0bits>
 80083d6:	e9dd 1200 	ldrd	r1, r2, [sp]
 80083da:	b1d0      	cbz	r0, 8008412 <__d2b+0x7e>
 80083dc:	f1c0 0320 	rsb	r3, r0, #32
 80083e0:	fa02 f303 	lsl.w	r3, r2, r3
 80083e4:	430b      	orrs	r3, r1
 80083e6:	40c2      	lsrs	r2, r0
 80083e8:	6163      	str	r3, [r4, #20]
 80083ea:	9201      	str	r2, [sp, #4]
 80083ec:	9b01      	ldr	r3, [sp, #4]
 80083ee:	61a3      	str	r3, [r4, #24]
 80083f0:	2b00      	cmp	r3, #0
 80083f2:	bf0c      	ite	eq
 80083f4:	2201      	moveq	r2, #1
 80083f6:	2202      	movne	r2, #2
 80083f8:	6122      	str	r2, [r4, #16]
 80083fa:	b1a5      	cbz	r5, 8008426 <__d2b+0x92>
 80083fc:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8008400:	4405      	add	r5, r0
 8008402:	603d      	str	r5, [r7, #0]
 8008404:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8008408:	6030      	str	r0, [r6, #0]
 800840a:	4620      	mov	r0, r4
 800840c:	b003      	add	sp, #12
 800840e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008412:	6161      	str	r1, [r4, #20]
 8008414:	e7ea      	b.n	80083ec <__d2b+0x58>
 8008416:	a801      	add	r0, sp, #4
 8008418:	f7ff fd61 	bl	8007ede <__lo0bits>
 800841c:	9b01      	ldr	r3, [sp, #4]
 800841e:	6163      	str	r3, [r4, #20]
 8008420:	3020      	adds	r0, #32
 8008422:	2201      	movs	r2, #1
 8008424:	e7e8      	b.n	80083f8 <__d2b+0x64>
 8008426:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800842a:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800842e:	6038      	str	r0, [r7, #0]
 8008430:	6918      	ldr	r0, [r3, #16]
 8008432:	f7ff fd35 	bl	8007ea0 <__hi0bits>
 8008436:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800843a:	e7e5      	b.n	8008408 <__d2b+0x74>
 800843c:	080095cc 	.word	0x080095cc
 8008440:	080095dd 	.word	0x080095dd

08008444 <__ssputs_r>:
 8008444:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008448:	688e      	ldr	r6, [r1, #8]
 800844a:	461f      	mov	r7, r3
 800844c:	42be      	cmp	r6, r7
 800844e:	680b      	ldr	r3, [r1, #0]
 8008450:	4682      	mov	sl, r0
 8008452:	460c      	mov	r4, r1
 8008454:	4690      	mov	r8, r2
 8008456:	d82d      	bhi.n	80084b4 <__ssputs_r+0x70>
 8008458:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800845c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8008460:	d026      	beq.n	80084b0 <__ssputs_r+0x6c>
 8008462:	6965      	ldr	r5, [r4, #20]
 8008464:	6909      	ldr	r1, [r1, #16]
 8008466:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800846a:	eba3 0901 	sub.w	r9, r3, r1
 800846e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008472:	1c7b      	adds	r3, r7, #1
 8008474:	444b      	add	r3, r9
 8008476:	106d      	asrs	r5, r5, #1
 8008478:	429d      	cmp	r5, r3
 800847a:	bf38      	it	cc
 800847c:	461d      	movcc	r5, r3
 800847e:	0553      	lsls	r3, r2, #21
 8008480:	d527      	bpl.n	80084d2 <__ssputs_r+0x8e>
 8008482:	4629      	mov	r1, r5
 8008484:	f7ff fbd8 	bl	8007c38 <_malloc_r>
 8008488:	4606      	mov	r6, r0
 800848a:	b360      	cbz	r0, 80084e6 <__ssputs_r+0xa2>
 800848c:	6921      	ldr	r1, [r4, #16]
 800848e:	464a      	mov	r2, r9
 8008490:	f000 fa06 	bl	80088a0 <memcpy>
 8008494:	89a3      	ldrh	r3, [r4, #12]
 8008496:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800849a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800849e:	81a3      	strh	r3, [r4, #12]
 80084a0:	6126      	str	r6, [r4, #16]
 80084a2:	6165      	str	r5, [r4, #20]
 80084a4:	444e      	add	r6, r9
 80084a6:	eba5 0509 	sub.w	r5, r5, r9
 80084aa:	6026      	str	r6, [r4, #0]
 80084ac:	60a5      	str	r5, [r4, #8]
 80084ae:	463e      	mov	r6, r7
 80084b0:	42be      	cmp	r6, r7
 80084b2:	d900      	bls.n	80084b6 <__ssputs_r+0x72>
 80084b4:	463e      	mov	r6, r7
 80084b6:	6820      	ldr	r0, [r4, #0]
 80084b8:	4632      	mov	r2, r6
 80084ba:	4641      	mov	r1, r8
 80084bc:	f000 f9c6 	bl	800884c <memmove>
 80084c0:	68a3      	ldr	r3, [r4, #8]
 80084c2:	1b9b      	subs	r3, r3, r6
 80084c4:	60a3      	str	r3, [r4, #8]
 80084c6:	6823      	ldr	r3, [r4, #0]
 80084c8:	4433      	add	r3, r6
 80084ca:	6023      	str	r3, [r4, #0]
 80084cc:	2000      	movs	r0, #0
 80084ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80084d2:	462a      	mov	r2, r5
 80084d4:	f000 fa36 	bl	8008944 <_realloc_r>
 80084d8:	4606      	mov	r6, r0
 80084da:	2800      	cmp	r0, #0
 80084dc:	d1e0      	bne.n	80084a0 <__ssputs_r+0x5c>
 80084de:	6921      	ldr	r1, [r4, #16]
 80084e0:	4650      	mov	r0, sl
 80084e2:	f7ff fb35 	bl	8007b50 <_free_r>
 80084e6:	230c      	movs	r3, #12
 80084e8:	f8ca 3000 	str.w	r3, [sl]
 80084ec:	89a3      	ldrh	r3, [r4, #12]
 80084ee:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80084f2:	81a3      	strh	r3, [r4, #12]
 80084f4:	f04f 30ff 	mov.w	r0, #4294967295
 80084f8:	e7e9      	b.n	80084ce <__ssputs_r+0x8a>
	...

080084fc <_svfiprintf_r>:
 80084fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008500:	4698      	mov	r8, r3
 8008502:	898b      	ldrh	r3, [r1, #12]
 8008504:	061b      	lsls	r3, r3, #24
 8008506:	b09d      	sub	sp, #116	@ 0x74
 8008508:	4607      	mov	r7, r0
 800850a:	460d      	mov	r5, r1
 800850c:	4614      	mov	r4, r2
 800850e:	d510      	bpl.n	8008532 <_svfiprintf_r+0x36>
 8008510:	690b      	ldr	r3, [r1, #16]
 8008512:	b973      	cbnz	r3, 8008532 <_svfiprintf_r+0x36>
 8008514:	2140      	movs	r1, #64	@ 0x40
 8008516:	f7ff fb8f 	bl	8007c38 <_malloc_r>
 800851a:	6028      	str	r0, [r5, #0]
 800851c:	6128      	str	r0, [r5, #16]
 800851e:	b930      	cbnz	r0, 800852e <_svfiprintf_r+0x32>
 8008520:	230c      	movs	r3, #12
 8008522:	603b      	str	r3, [r7, #0]
 8008524:	f04f 30ff 	mov.w	r0, #4294967295
 8008528:	b01d      	add	sp, #116	@ 0x74
 800852a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800852e:	2340      	movs	r3, #64	@ 0x40
 8008530:	616b      	str	r3, [r5, #20]
 8008532:	2300      	movs	r3, #0
 8008534:	9309      	str	r3, [sp, #36]	@ 0x24
 8008536:	2320      	movs	r3, #32
 8008538:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800853c:	f8cd 800c 	str.w	r8, [sp, #12]
 8008540:	2330      	movs	r3, #48	@ 0x30
 8008542:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80086e0 <_svfiprintf_r+0x1e4>
 8008546:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800854a:	f04f 0901 	mov.w	r9, #1
 800854e:	4623      	mov	r3, r4
 8008550:	469a      	mov	sl, r3
 8008552:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008556:	b10a      	cbz	r2, 800855c <_svfiprintf_r+0x60>
 8008558:	2a25      	cmp	r2, #37	@ 0x25
 800855a:	d1f9      	bne.n	8008550 <_svfiprintf_r+0x54>
 800855c:	ebba 0b04 	subs.w	fp, sl, r4
 8008560:	d00b      	beq.n	800857a <_svfiprintf_r+0x7e>
 8008562:	465b      	mov	r3, fp
 8008564:	4622      	mov	r2, r4
 8008566:	4629      	mov	r1, r5
 8008568:	4638      	mov	r0, r7
 800856a:	f7ff ff6b 	bl	8008444 <__ssputs_r>
 800856e:	3001      	adds	r0, #1
 8008570:	f000 80a7 	beq.w	80086c2 <_svfiprintf_r+0x1c6>
 8008574:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008576:	445a      	add	r2, fp
 8008578:	9209      	str	r2, [sp, #36]	@ 0x24
 800857a:	f89a 3000 	ldrb.w	r3, [sl]
 800857e:	2b00      	cmp	r3, #0
 8008580:	f000 809f 	beq.w	80086c2 <_svfiprintf_r+0x1c6>
 8008584:	2300      	movs	r3, #0
 8008586:	f04f 32ff 	mov.w	r2, #4294967295
 800858a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800858e:	f10a 0a01 	add.w	sl, sl, #1
 8008592:	9304      	str	r3, [sp, #16]
 8008594:	9307      	str	r3, [sp, #28]
 8008596:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800859a:	931a      	str	r3, [sp, #104]	@ 0x68
 800859c:	4654      	mov	r4, sl
 800859e:	2205      	movs	r2, #5
 80085a0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80085a4:	484e      	ldr	r0, [pc, #312]	@ (80086e0 <_svfiprintf_r+0x1e4>)
 80085a6:	f7f7 fe3b 	bl	8000220 <memchr>
 80085aa:	9a04      	ldr	r2, [sp, #16]
 80085ac:	b9d8      	cbnz	r0, 80085e6 <_svfiprintf_r+0xea>
 80085ae:	06d0      	lsls	r0, r2, #27
 80085b0:	bf44      	itt	mi
 80085b2:	2320      	movmi	r3, #32
 80085b4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80085b8:	0711      	lsls	r1, r2, #28
 80085ba:	bf44      	itt	mi
 80085bc:	232b      	movmi	r3, #43	@ 0x2b
 80085be:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80085c2:	f89a 3000 	ldrb.w	r3, [sl]
 80085c6:	2b2a      	cmp	r3, #42	@ 0x2a
 80085c8:	d015      	beq.n	80085f6 <_svfiprintf_r+0xfa>
 80085ca:	9a07      	ldr	r2, [sp, #28]
 80085cc:	4654      	mov	r4, sl
 80085ce:	2000      	movs	r0, #0
 80085d0:	f04f 0c0a 	mov.w	ip, #10
 80085d4:	4621      	mov	r1, r4
 80085d6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80085da:	3b30      	subs	r3, #48	@ 0x30
 80085dc:	2b09      	cmp	r3, #9
 80085de:	d94b      	bls.n	8008678 <_svfiprintf_r+0x17c>
 80085e0:	b1b0      	cbz	r0, 8008610 <_svfiprintf_r+0x114>
 80085e2:	9207      	str	r2, [sp, #28]
 80085e4:	e014      	b.n	8008610 <_svfiprintf_r+0x114>
 80085e6:	eba0 0308 	sub.w	r3, r0, r8
 80085ea:	fa09 f303 	lsl.w	r3, r9, r3
 80085ee:	4313      	orrs	r3, r2
 80085f0:	9304      	str	r3, [sp, #16]
 80085f2:	46a2      	mov	sl, r4
 80085f4:	e7d2      	b.n	800859c <_svfiprintf_r+0xa0>
 80085f6:	9b03      	ldr	r3, [sp, #12]
 80085f8:	1d19      	adds	r1, r3, #4
 80085fa:	681b      	ldr	r3, [r3, #0]
 80085fc:	9103      	str	r1, [sp, #12]
 80085fe:	2b00      	cmp	r3, #0
 8008600:	bfbb      	ittet	lt
 8008602:	425b      	neglt	r3, r3
 8008604:	f042 0202 	orrlt.w	r2, r2, #2
 8008608:	9307      	strge	r3, [sp, #28]
 800860a:	9307      	strlt	r3, [sp, #28]
 800860c:	bfb8      	it	lt
 800860e:	9204      	strlt	r2, [sp, #16]
 8008610:	7823      	ldrb	r3, [r4, #0]
 8008612:	2b2e      	cmp	r3, #46	@ 0x2e
 8008614:	d10a      	bne.n	800862c <_svfiprintf_r+0x130>
 8008616:	7863      	ldrb	r3, [r4, #1]
 8008618:	2b2a      	cmp	r3, #42	@ 0x2a
 800861a:	d132      	bne.n	8008682 <_svfiprintf_r+0x186>
 800861c:	9b03      	ldr	r3, [sp, #12]
 800861e:	1d1a      	adds	r2, r3, #4
 8008620:	681b      	ldr	r3, [r3, #0]
 8008622:	9203      	str	r2, [sp, #12]
 8008624:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008628:	3402      	adds	r4, #2
 800862a:	9305      	str	r3, [sp, #20]
 800862c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80086f0 <_svfiprintf_r+0x1f4>
 8008630:	7821      	ldrb	r1, [r4, #0]
 8008632:	2203      	movs	r2, #3
 8008634:	4650      	mov	r0, sl
 8008636:	f7f7 fdf3 	bl	8000220 <memchr>
 800863a:	b138      	cbz	r0, 800864c <_svfiprintf_r+0x150>
 800863c:	9b04      	ldr	r3, [sp, #16]
 800863e:	eba0 000a 	sub.w	r0, r0, sl
 8008642:	2240      	movs	r2, #64	@ 0x40
 8008644:	4082      	lsls	r2, r0
 8008646:	4313      	orrs	r3, r2
 8008648:	3401      	adds	r4, #1
 800864a:	9304      	str	r3, [sp, #16]
 800864c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008650:	4824      	ldr	r0, [pc, #144]	@ (80086e4 <_svfiprintf_r+0x1e8>)
 8008652:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8008656:	2206      	movs	r2, #6
 8008658:	f7f7 fde2 	bl	8000220 <memchr>
 800865c:	2800      	cmp	r0, #0
 800865e:	d036      	beq.n	80086ce <_svfiprintf_r+0x1d2>
 8008660:	4b21      	ldr	r3, [pc, #132]	@ (80086e8 <_svfiprintf_r+0x1ec>)
 8008662:	bb1b      	cbnz	r3, 80086ac <_svfiprintf_r+0x1b0>
 8008664:	9b03      	ldr	r3, [sp, #12]
 8008666:	3307      	adds	r3, #7
 8008668:	f023 0307 	bic.w	r3, r3, #7
 800866c:	3308      	adds	r3, #8
 800866e:	9303      	str	r3, [sp, #12]
 8008670:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008672:	4433      	add	r3, r6
 8008674:	9309      	str	r3, [sp, #36]	@ 0x24
 8008676:	e76a      	b.n	800854e <_svfiprintf_r+0x52>
 8008678:	fb0c 3202 	mla	r2, ip, r2, r3
 800867c:	460c      	mov	r4, r1
 800867e:	2001      	movs	r0, #1
 8008680:	e7a8      	b.n	80085d4 <_svfiprintf_r+0xd8>
 8008682:	2300      	movs	r3, #0
 8008684:	3401      	adds	r4, #1
 8008686:	9305      	str	r3, [sp, #20]
 8008688:	4619      	mov	r1, r3
 800868a:	f04f 0c0a 	mov.w	ip, #10
 800868e:	4620      	mov	r0, r4
 8008690:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008694:	3a30      	subs	r2, #48	@ 0x30
 8008696:	2a09      	cmp	r2, #9
 8008698:	d903      	bls.n	80086a2 <_svfiprintf_r+0x1a6>
 800869a:	2b00      	cmp	r3, #0
 800869c:	d0c6      	beq.n	800862c <_svfiprintf_r+0x130>
 800869e:	9105      	str	r1, [sp, #20]
 80086a0:	e7c4      	b.n	800862c <_svfiprintf_r+0x130>
 80086a2:	fb0c 2101 	mla	r1, ip, r1, r2
 80086a6:	4604      	mov	r4, r0
 80086a8:	2301      	movs	r3, #1
 80086aa:	e7f0      	b.n	800868e <_svfiprintf_r+0x192>
 80086ac:	ab03      	add	r3, sp, #12
 80086ae:	9300      	str	r3, [sp, #0]
 80086b0:	462a      	mov	r2, r5
 80086b2:	4b0e      	ldr	r3, [pc, #56]	@ (80086ec <_svfiprintf_r+0x1f0>)
 80086b4:	a904      	add	r1, sp, #16
 80086b6:	4638      	mov	r0, r7
 80086b8:	f7fd fe7a 	bl	80063b0 <_printf_float>
 80086bc:	1c42      	adds	r2, r0, #1
 80086be:	4606      	mov	r6, r0
 80086c0:	d1d6      	bne.n	8008670 <_svfiprintf_r+0x174>
 80086c2:	89ab      	ldrh	r3, [r5, #12]
 80086c4:	065b      	lsls	r3, r3, #25
 80086c6:	f53f af2d 	bmi.w	8008524 <_svfiprintf_r+0x28>
 80086ca:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80086cc:	e72c      	b.n	8008528 <_svfiprintf_r+0x2c>
 80086ce:	ab03      	add	r3, sp, #12
 80086d0:	9300      	str	r3, [sp, #0]
 80086d2:	462a      	mov	r2, r5
 80086d4:	4b05      	ldr	r3, [pc, #20]	@ (80086ec <_svfiprintf_r+0x1f0>)
 80086d6:	a904      	add	r1, sp, #16
 80086d8:	4638      	mov	r0, r7
 80086da:	f7fe f901 	bl	80068e0 <_printf_i>
 80086de:	e7ed      	b.n	80086bc <_svfiprintf_r+0x1c0>
 80086e0:	08009636 	.word	0x08009636
 80086e4:	08009640 	.word	0x08009640
 80086e8:	080063b1 	.word	0x080063b1
 80086ec:	08008445 	.word	0x08008445
 80086f0:	0800963c 	.word	0x0800963c

080086f4 <__sflush_r>:
 80086f4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80086f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80086fc:	0716      	lsls	r6, r2, #28
 80086fe:	4605      	mov	r5, r0
 8008700:	460c      	mov	r4, r1
 8008702:	d454      	bmi.n	80087ae <__sflush_r+0xba>
 8008704:	684b      	ldr	r3, [r1, #4]
 8008706:	2b00      	cmp	r3, #0
 8008708:	dc02      	bgt.n	8008710 <__sflush_r+0x1c>
 800870a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800870c:	2b00      	cmp	r3, #0
 800870e:	dd48      	ble.n	80087a2 <__sflush_r+0xae>
 8008710:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008712:	2e00      	cmp	r6, #0
 8008714:	d045      	beq.n	80087a2 <__sflush_r+0xae>
 8008716:	2300      	movs	r3, #0
 8008718:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800871c:	682f      	ldr	r7, [r5, #0]
 800871e:	6a21      	ldr	r1, [r4, #32]
 8008720:	602b      	str	r3, [r5, #0]
 8008722:	d030      	beq.n	8008786 <__sflush_r+0x92>
 8008724:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8008726:	89a3      	ldrh	r3, [r4, #12]
 8008728:	0759      	lsls	r1, r3, #29
 800872a:	d505      	bpl.n	8008738 <__sflush_r+0x44>
 800872c:	6863      	ldr	r3, [r4, #4]
 800872e:	1ad2      	subs	r2, r2, r3
 8008730:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8008732:	b10b      	cbz	r3, 8008738 <__sflush_r+0x44>
 8008734:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8008736:	1ad2      	subs	r2, r2, r3
 8008738:	2300      	movs	r3, #0
 800873a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800873c:	6a21      	ldr	r1, [r4, #32]
 800873e:	4628      	mov	r0, r5
 8008740:	47b0      	blx	r6
 8008742:	1c43      	adds	r3, r0, #1
 8008744:	89a3      	ldrh	r3, [r4, #12]
 8008746:	d106      	bne.n	8008756 <__sflush_r+0x62>
 8008748:	6829      	ldr	r1, [r5, #0]
 800874a:	291d      	cmp	r1, #29
 800874c:	d82b      	bhi.n	80087a6 <__sflush_r+0xb2>
 800874e:	4a2a      	ldr	r2, [pc, #168]	@ (80087f8 <__sflush_r+0x104>)
 8008750:	40ca      	lsrs	r2, r1
 8008752:	07d6      	lsls	r6, r2, #31
 8008754:	d527      	bpl.n	80087a6 <__sflush_r+0xb2>
 8008756:	2200      	movs	r2, #0
 8008758:	6062      	str	r2, [r4, #4]
 800875a:	04d9      	lsls	r1, r3, #19
 800875c:	6922      	ldr	r2, [r4, #16]
 800875e:	6022      	str	r2, [r4, #0]
 8008760:	d504      	bpl.n	800876c <__sflush_r+0x78>
 8008762:	1c42      	adds	r2, r0, #1
 8008764:	d101      	bne.n	800876a <__sflush_r+0x76>
 8008766:	682b      	ldr	r3, [r5, #0]
 8008768:	b903      	cbnz	r3, 800876c <__sflush_r+0x78>
 800876a:	6560      	str	r0, [r4, #84]	@ 0x54
 800876c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800876e:	602f      	str	r7, [r5, #0]
 8008770:	b1b9      	cbz	r1, 80087a2 <__sflush_r+0xae>
 8008772:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008776:	4299      	cmp	r1, r3
 8008778:	d002      	beq.n	8008780 <__sflush_r+0x8c>
 800877a:	4628      	mov	r0, r5
 800877c:	f7ff f9e8 	bl	8007b50 <_free_r>
 8008780:	2300      	movs	r3, #0
 8008782:	6363      	str	r3, [r4, #52]	@ 0x34
 8008784:	e00d      	b.n	80087a2 <__sflush_r+0xae>
 8008786:	2301      	movs	r3, #1
 8008788:	4628      	mov	r0, r5
 800878a:	47b0      	blx	r6
 800878c:	4602      	mov	r2, r0
 800878e:	1c50      	adds	r0, r2, #1
 8008790:	d1c9      	bne.n	8008726 <__sflush_r+0x32>
 8008792:	682b      	ldr	r3, [r5, #0]
 8008794:	2b00      	cmp	r3, #0
 8008796:	d0c6      	beq.n	8008726 <__sflush_r+0x32>
 8008798:	2b1d      	cmp	r3, #29
 800879a:	d001      	beq.n	80087a0 <__sflush_r+0xac>
 800879c:	2b16      	cmp	r3, #22
 800879e:	d11e      	bne.n	80087de <__sflush_r+0xea>
 80087a0:	602f      	str	r7, [r5, #0]
 80087a2:	2000      	movs	r0, #0
 80087a4:	e022      	b.n	80087ec <__sflush_r+0xf8>
 80087a6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80087aa:	b21b      	sxth	r3, r3
 80087ac:	e01b      	b.n	80087e6 <__sflush_r+0xf2>
 80087ae:	690f      	ldr	r7, [r1, #16]
 80087b0:	2f00      	cmp	r7, #0
 80087b2:	d0f6      	beq.n	80087a2 <__sflush_r+0xae>
 80087b4:	0793      	lsls	r3, r2, #30
 80087b6:	680e      	ldr	r6, [r1, #0]
 80087b8:	bf08      	it	eq
 80087ba:	694b      	ldreq	r3, [r1, #20]
 80087bc:	600f      	str	r7, [r1, #0]
 80087be:	bf18      	it	ne
 80087c0:	2300      	movne	r3, #0
 80087c2:	eba6 0807 	sub.w	r8, r6, r7
 80087c6:	608b      	str	r3, [r1, #8]
 80087c8:	f1b8 0f00 	cmp.w	r8, #0
 80087cc:	dde9      	ble.n	80087a2 <__sflush_r+0xae>
 80087ce:	6a21      	ldr	r1, [r4, #32]
 80087d0:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80087d2:	4643      	mov	r3, r8
 80087d4:	463a      	mov	r2, r7
 80087d6:	4628      	mov	r0, r5
 80087d8:	47b0      	blx	r6
 80087da:	2800      	cmp	r0, #0
 80087dc:	dc08      	bgt.n	80087f0 <__sflush_r+0xfc>
 80087de:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80087e2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80087e6:	81a3      	strh	r3, [r4, #12]
 80087e8:	f04f 30ff 	mov.w	r0, #4294967295
 80087ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80087f0:	4407      	add	r7, r0
 80087f2:	eba8 0800 	sub.w	r8, r8, r0
 80087f6:	e7e7      	b.n	80087c8 <__sflush_r+0xd4>
 80087f8:	20400001 	.word	0x20400001

080087fc <_fflush_r>:
 80087fc:	b538      	push	{r3, r4, r5, lr}
 80087fe:	690b      	ldr	r3, [r1, #16]
 8008800:	4605      	mov	r5, r0
 8008802:	460c      	mov	r4, r1
 8008804:	b913      	cbnz	r3, 800880c <_fflush_r+0x10>
 8008806:	2500      	movs	r5, #0
 8008808:	4628      	mov	r0, r5
 800880a:	bd38      	pop	{r3, r4, r5, pc}
 800880c:	b118      	cbz	r0, 8008816 <_fflush_r+0x1a>
 800880e:	6a03      	ldr	r3, [r0, #32]
 8008810:	b90b      	cbnz	r3, 8008816 <_fflush_r+0x1a>
 8008812:	f7fe fa0f 	bl	8006c34 <__sinit>
 8008816:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800881a:	2b00      	cmp	r3, #0
 800881c:	d0f3      	beq.n	8008806 <_fflush_r+0xa>
 800881e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8008820:	07d0      	lsls	r0, r2, #31
 8008822:	d404      	bmi.n	800882e <_fflush_r+0x32>
 8008824:	0599      	lsls	r1, r3, #22
 8008826:	d402      	bmi.n	800882e <_fflush_r+0x32>
 8008828:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800882a:	f7fe fb36 	bl	8006e9a <__retarget_lock_acquire_recursive>
 800882e:	4628      	mov	r0, r5
 8008830:	4621      	mov	r1, r4
 8008832:	f7ff ff5f 	bl	80086f4 <__sflush_r>
 8008836:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008838:	07da      	lsls	r2, r3, #31
 800883a:	4605      	mov	r5, r0
 800883c:	d4e4      	bmi.n	8008808 <_fflush_r+0xc>
 800883e:	89a3      	ldrh	r3, [r4, #12]
 8008840:	059b      	lsls	r3, r3, #22
 8008842:	d4e1      	bmi.n	8008808 <_fflush_r+0xc>
 8008844:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008846:	f7fe fb29 	bl	8006e9c <__retarget_lock_release_recursive>
 800884a:	e7dd      	b.n	8008808 <_fflush_r+0xc>

0800884c <memmove>:
 800884c:	4288      	cmp	r0, r1
 800884e:	b510      	push	{r4, lr}
 8008850:	eb01 0402 	add.w	r4, r1, r2
 8008854:	d902      	bls.n	800885c <memmove+0x10>
 8008856:	4284      	cmp	r4, r0
 8008858:	4623      	mov	r3, r4
 800885a:	d807      	bhi.n	800886c <memmove+0x20>
 800885c:	1e43      	subs	r3, r0, #1
 800885e:	42a1      	cmp	r1, r4
 8008860:	d008      	beq.n	8008874 <memmove+0x28>
 8008862:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008866:	f803 2f01 	strb.w	r2, [r3, #1]!
 800886a:	e7f8      	b.n	800885e <memmove+0x12>
 800886c:	4402      	add	r2, r0
 800886e:	4601      	mov	r1, r0
 8008870:	428a      	cmp	r2, r1
 8008872:	d100      	bne.n	8008876 <memmove+0x2a>
 8008874:	bd10      	pop	{r4, pc}
 8008876:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800887a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800887e:	e7f7      	b.n	8008870 <memmove+0x24>

08008880 <_sbrk_r>:
 8008880:	b538      	push	{r3, r4, r5, lr}
 8008882:	4d06      	ldr	r5, [pc, #24]	@ (800889c <_sbrk_r+0x1c>)
 8008884:	2300      	movs	r3, #0
 8008886:	4604      	mov	r4, r0
 8008888:	4608      	mov	r0, r1
 800888a:	602b      	str	r3, [r5, #0]
 800888c:	f7f9 fe8e 	bl	80025ac <_sbrk>
 8008890:	1c43      	adds	r3, r0, #1
 8008892:	d102      	bne.n	800889a <_sbrk_r+0x1a>
 8008894:	682b      	ldr	r3, [r5, #0]
 8008896:	b103      	cbz	r3, 800889a <_sbrk_r+0x1a>
 8008898:	6023      	str	r3, [r4, #0]
 800889a:	bd38      	pop	{r3, r4, r5, pc}
 800889c:	200006a0 	.word	0x200006a0

080088a0 <memcpy>:
 80088a0:	440a      	add	r2, r1
 80088a2:	4291      	cmp	r1, r2
 80088a4:	f100 33ff 	add.w	r3, r0, #4294967295
 80088a8:	d100      	bne.n	80088ac <memcpy+0xc>
 80088aa:	4770      	bx	lr
 80088ac:	b510      	push	{r4, lr}
 80088ae:	f811 4b01 	ldrb.w	r4, [r1], #1
 80088b2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80088b6:	4291      	cmp	r1, r2
 80088b8:	d1f9      	bne.n	80088ae <memcpy+0xe>
 80088ba:	bd10      	pop	{r4, pc}

080088bc <__assert_func>:
 80088bc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80088be:	4614      	mov	r4, r2
 80088c0:	461a      	mov	r2, r3
 80088c2:	4b09      	ldr	r3, [pc, #36]	@ (80088e8 <__assert_func+0x2c>)
 80088c4:	681b      	ldr	r3, [r3, #0]
 80088c6:	4605      	mov	r5, r0
 80088c8:	68d8      	ldr	r0, [r3, #12]
 80088ca:	b14c      	cbz	r4, 80088e0 <__assert_func+0x24>
 80088cc:	4b07      	ldr	r3, [pc, #28]	@ (80088ec <__assert_func+0x30>)
 80088ce:	9100      	str	r1, [sp, #0]
 80088d0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80088d4:	4906      	ldr	r1, [pc, #24]	@ (80088f0 <__assert_func+0x34>)
 80088d6:	462b      	mov	r3, r5
 80088d8:	f000 f870 	bl	80089bc <fiprintf>
 80088dc:	f000 f880 	bl	80089e0 <abort>
 80088e0:	4b04      	ldr	r3, [pc, #16]	@ (80088f4 <__assert_func+0x38>)
 80088e2:	461c      	mov	r4, r3
 80088e4:	e7f3      	b.n	80088ce <__assert_func+0x12>
 80088e6:	bf00      	nop
 80088e8:	20000018 	.word	0x20000018
 80088ec:	08009651 	.word	0x08009651
 80088f0:	0800965e 	.word	0x0800965e
 80088f4:	0800968c 	.word	0x0800968c

080088f8 <_calloc_r>:
 80088f8:	b570      	push	{r4, r5, r6, lr}
 80088fa:	fba1 5402 	umull	r5, r4, r1, r2
 80088fe:	b934      	cbnz	r4, 800890e <_calloc_r+0x16>
 8008900:	4629      	mov	r1, r5
 8008902:	f7ff f999 	bl	8007c38 <_malloc_r>
 8008906:	4606      	mov	r6, r0
 8008908:	b928      	cbnz	r0, 8008916 <_calloc_r+0x1e>
 800890a:	4630      	mov	r0, r6
 800890c:	bd70      	pop	{r4, r5, r6, pc}
 800890e:	220c      	movs	r2, #12
 8008910:	6002      	str	r2, [r0, #0]
 8008912:	2600      	movs	r6, #0
 8008914:	e7f9      	b.n	800890a <_calloc_r+0x12>
 8008916:	462a      	mov	r2, r5
 8008918:	4621      	mov	r1, r4
 800891a:	f7fe fa41 	bl	8006da0 <memset>
 800891e:	e7f4      	b.n	800890a <_calloc_r+0x12>

08008920 <__ascii_mbtowc>:
 8008920:	b082      	sub	sp, #8
 8008922:	b901      	cbnz	r1, 8008926 <__ascii_mbtowc+0x6>
 8008924:	a901      	add	r1, sp, #4
 8008926:	b142      	cbz	r2, 800893a <__ascii_mbtowc+0x1a>
 8008928:	b14b      	cbz	r3, 800893e <__ascii_mbtowc+0x1e>
 800892a:	7813      	ldrb	r3, [r2, #0]
 800892c:	600b      	str	r3, [r1, #0]
 800892e:	7812      	ldrb	r2, [r2, #0]
 8008930:	1e10      	subs	r0, r2, #0
 8008932:	bf18      	it	ne
 8008934:	2001      	movne	r0, #1
 8008936:	b002      	add	sp, #8
 8008938:	4770      	bx	lr
 800893a:	4610      	mov	r0, r2
 800893c:	e7fb      	b.n	8008936 <__ascii_mbtowc+0x16>
 800893e:	f06f 0001 	mvn.w	r0, #1
 8008942:	e7f8      	b.n	8008936 <__ascii_mbtowc+0x16>

08008944 <_realloc_r>:
 8008944:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008948:	4607      	mov	r7, r0
 800894a:	4614      	mov	r4, r2
 800894c:	460d      	mov	r5, r1
 800894e:	b921      	cbnz	r1, 800895a <_realloc_r+0x16>
 8008950:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008954:	4611      	mov	r1, r2
 8008956:	f7ff b96f 	b.w	8007c38 <_malloc_r>
 800895a:	b92a      	cbnz	r2, 8008968 <_realloc_r+0x24>
 800895c:	f7ff f8f8 	bl	8007b50 <_free_r>
 8008960:	4625      	mov	r5, r4
 8008962:	4628      	mov	r0, r5
 8008964:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008968:	f000 f841 	bl	80089ee <_malloc_usable_size_r>
 800896c:	4284      	cmp	r4, r0
 800896e:	4606      	mov	r6, r0
 8008970:	d802      	bhi.n	8008978 <_realloc_r+0x34>
 8008972:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8008976:	d8f4      	bhi.n	8008962 <_realloc_r+0x1e>
 8008978:	4621      	mov	r1, r4
 800897a:	4638      	mov	r0, r7
 800897c:	f7ff f95c 	bl	8007c38 <_malloc_r>
 8008980:	4680      	mov	r8, r0
 8008982:	b908      	cbnz	r0, 8008988 <_realloc_r+0x44>
 8008984:	4645      	mov	r5, r8
 8008986:	e7ec      	b.n	8008962 <_realloc_r+0x1e>
 8008988:	42b4      	cmp	r4, r6
 800898a:	4622      	mov	r2, r4
 800898c:	4629      	mov	r1, r5
 800898e:	bf28      	it	cs
 8008990:	4632      	movcs	r2, r6
 8008992:	f7ff ff85 	bl	80088a0 <memcpy>
 8008996:	4629      	mov	r1, r5
 8008998:	4638      	mov	r0, r7
 800899a:	f7ff f8d9 	bl	8007b50 <_free_r>
 800899e:	e7f1      	b.n	8008984 <_realloc_r+0x40>

080089a0 <__ascii_wctomb>:
 80089a0:	4603      	mov	r3, r0
 80089a2:	4608      	mov	r0, r1
 80089a4:	b141      	cbz	r1, 80089b8 <__ascii_wctomb+0x18>
 80089a6:	2aff      	cmp	r2, #255	@ 0xff
 80089a8:	d904      	bls.n	80089b4 <__ascii_wctomb+0x14>
 80089aa:	228a      	movs	r2, #138	@ 0x8a
 80089ac:	601a      	str	r2, [r3, #0]
 80089ae:	f04f 30ff 	mov.w	r0, #4294967295
 80089b2:	4770      	bx	lr
 80089b4:	700a      	strb	r2, [r1, #0]
 80089b6:	2001      	movs	r0, #1
 80089b8:	4770      	bx	lr
	...

080089bc <fiprintf>:
 80089bc:	b40e      	push	{r1, r2, r3}
 80089be:	b503      	push	{r0, r1, lr}
 80089c0:	4601      	mov	r1, r0
 80089c2:	ab03      	add	r3, sp, #12
 80089c4:	4805      	ldr	r0, [pc, #20]	@ (80089dc <fiprintf+0x20>)
 80089c6:	f853 2b04 	ldr.w	r2, [r3], #4
 80089ca:	6800      	ldr	r0, [r0, #0]
 80089cc:	9301      	str	r3, [sp, #4]
 80089ce:	f000 f83f 	bl	8008a50 <_vfiprintf_r>
 80089d2:	b002      	add	sp, #8
 80089d4:	f85d eb04 	ldr.w	lr, [sp], #4
 80089d8:	b003      	add	sp, #12
 80089da:	4770      	bx	lr
 80089dc:	20000018 	.word	0x20000018

080089e0 <abort>:
 80089e0:	b508      	push	{r3, lr}
 80089e2:	2006      	movs	r0, #6
 80089e4:	f000 fa08 	bl	8008df8 <raise>
 80089e8:	2001      	movs	r0, #1
 80089ea:	f7f9 fd66 	bl	80024ba <_exit>

080089ee <_malloc_usable_size_r>:
 80089ee:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80089f2:	1f18      	subs	r0, r3, #4
 80089f4:	2b00      	cmp	r3, #0
 80089f6:	bfbc      	itt	lt
 80089f8:	580b      	ldrlt	r3, [r1, r0]
 80089fa:	18c0      	addlt	r0, r0, r3
 80089fc:	4770      	bx	lr

080089fe <__sfputc_r>:
 80089fe:	6893      	ldr	r3, [r2, #8]
 8008a00:	3b01      	subs	r3, #1
 8008a02:	2b00      	cmp	r3, #0
 8008a04:	b410      	push	{r4}
 8008a06:	6093      	str	r3, [r2, #8]
 8008a08:	da08      	bge.n	8008a1c <__sfputc_r+0x1e>
 8008a0a:	6994      	ldr	r4, [r2, #24]
 8008a0c:	42a3      	cmp	r3, r4
 8008a0e:	db01      	blt.n	8008a14 <__sfputc_r+0x16>
 8008a10:	290a      	cmp	r1, #10
 8008a12:	d103      	bne.n	8008a1c <__sfputc_r+0x1e>
 8008a14:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008a18:	f000 b932 	b.w	8008c80 <__swbuf_r>
 8008a1c:	6813      	ldr	r3, [r2, #0]
 8008a1e:	1c58      	adds	r0, r3, #1
 8008a20:	6010      	str	r0, [r2, #0]
 8008a22:	7019      	strb	r1, [r3, #0]
 8008a24:	4608      	mov	r0, r1
 8008a26:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008a2a:	4770      	bx	lr

08008a2c <__sfputs_r>:
 8008a2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008a2e:	4606      	mov	r6, r0
 8008a30:	460f      	mov	r7, r1
 8008a32:	4614      	mov	r4, r2
 8008a34:	18d5      	adds	r5, r2, r3
 8008a36:	42ac      	cmp	r4, r5
 8008a38:	d101      	bne.n	8008a3e <__sfputs_r+0x12>
 8008a3a:	2000      	movs	r0, #0
 8008a3c:	e007      	b.n	8008a4e <__sfputs_r+0x22>
 8008a3e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008a42:	463a      	mov	r2, r7
 8008a44:	4630      	mov	r0, r6
 8008a46:	f7ff ffda 	bl	80089fe <__sfputc_r>
 8008a4a:	1c43      	adds	r3, r0, #1
 8008a4c:	d1f3      	bne.n	8008a36 <__sfputs_r+0xa>
 8008a4e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08008a50 <_vfiprintf_r>:
 8008a50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008a54:	460d      	mov	r5, r1
 8008a56:	b09d      	sub	sp, #116	@ 0x74
 8008a58:	4614      	mov	r4, r2
 8008a5a:	4698      	mov	r8, r3
 8008a5c:	4606      	mov	r6, r0
 8008a5e:	b118      	cbz	r0, 8008a68 <_vfiprintf_r+0x18>
 8008a60:	6a03      	ldr	r3, [r0, #32]
 8008a62:	b90b      	cbnz	r3, 8008a68 <_vfiprintf_r+0x18>
 8008a64:	f7fe f8e6 	bl	8006c34 <__sinit>
 8008a68:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008a6a:	07d9      	lsls	r1, r3, #31
 8008a6c:	d405      	bmi.n	8008a7a <_vfiprintf_r+0x2a>
 8008a6e:	89ab      	ldrh	r3, [r5, #12]
 8008a70:	059a      	lsls	r2, r3, #22
 8008a72:	d402      	bmi.n	8008a7a <_vfiprintf_r+0x2a>
 8008a74:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008a76:	f7fe fa10 	bl	8006e9a <__retarget_lock_acquire_recursive>
 8008a7a:	89ab      	ldrh	r3, [r5, #12]
 8008a7c:	071b      	lsls	r3, r3, #28
 8008a7e:	d501      	bpl.n	8008a84 <_vfiprintf_r+0x34>
 8008a80:	692b      	ldr	r3, [r5, #16]
 8008a82:	b99b      	cbnz	r3, 8008aac <_vfiprintf_r+0x5c>
 8008a84:	4629      	mov	r1, r5
 8008a86:	4630      	mov	r0, r6
 8008a88:	f000 f938 	bl	8008cfc <__swsetup_r>
 8008a8c:	b170      	cbz	r0, 8008aac <_vfiprintf_r+0x5c>
 8008a8e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008a90:	07dc      	lsls	r4, r3, #31
 8008a92:	d504      	bpl.n	8008a9e <_vfiprintf_r+0x4e>
 8008a94:	f04f 30ff 	mov.w	r0, #4294967295
 8008a98:	b01d      	add	sp, #116	@ 0x74
 8008a9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008a9e:	89ab      	ldrh	r3, [r5, #12]
 8008aa0:	0598      	lsls	r0, r3, #22
 8008aa2:	d4f7      	bmi.n	8008a94 <_vfiprintf_r+0x44>
 8008aa4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008aa6:	f7fe f9f9 	bl	8006e9c <__retarget_lock_release_recursive>
 8008aaa:	e7f3      	b.n	8008a94 <_vfiprintf_r+0x44>
 8008aac:	2300      	movs	r3, #0
 8008aae:	9309      	str	r3, [sp, #36]	@ 0x24
 8008ab0:	2320      	movs	r3, #32
 8008ab2:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8008ab6:	f8cd 800c 	str.w	r8, [sp, #12]
 8008aba:	2330      	movs	r3, #48	@ 0x30
 8008abc:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8008c6c <_vfiprintf_r+0x21c>
 8008ac0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8008ac4:	f04f 0901 	mov.w	r9, #1
 8008ac8:	4623      	mov	r3, r4
 8008aca:	469a      	mov	sl, r3
 8008acc:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008ad0:	b10a      	cbz	r2, 8008ad6 <_vfiprintf_r+0x86>
 8008ad2:	2a25      	cmp	r2, #37	@ 0x25
 8008ad4:	d1f9      	bne.n	8008aca <_vfiprintf_r+0x7a>
 8008ad6:	ebba 0b04 	subs.w	fp, sl, r4
 8008ada:	d00b      	beq.n	8008af4 <_vfiprintf_r+0xa4>
 8008adc:	465b      	mov	r3, fp
 8008ade:	4622      	mov	r2, r4
 8008ae0:	4629      	mov	r1, r5
 8008ae2:	4630      	mov	r0, r6
 8008ae4:	f7ff ffa2 	bl	8008a2c <__sfputs_r>
 8008ae8:	3001      	adds	r0, #1
 8008aea:	f000 80a7 	beq.w	8008c3c <_vfiprintf_r+0x1ec>
 8008aee:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008af0:	445a      	add	r2, fp
 8008af2:	9209      	str	r2, [sp, #36]	@ 0x24
 8008af4:	f89a 3000 	ldrb.w	r3, [sl]
 8008af8:	2b00      	cmp	r3, #0
 8008afa:	f000 809f 	beq.w	8008c3c <_vfiprintf_r+0x1ec>
 8008afe:	2300      	movs	r3, #0
 8008b00:	f04f 32ff 	mov.w	r2, #4294967295
 8008b04:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008b08:	f10a 0a01 	add.w	sl, sl, #1
 8008b0c:	9304      	str	r3, [sp, #16]
 8008b0e:	9307      	str	r3, [sp, #28]
 8008b10:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8008b14:	931a      	str	r3, [sp, #104]	@ 0x68
 8008b16:	4654      	mov	r4, sl
 8008b18:	2205      	movs	r2, #5
 8008b1a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008b1e:	4853      	ldr	r0, [pc, #332]	@ (8008c6c <_vfiprintf_r+0x21c>)
 8008b20:	f7f7 fb7e 	bl	8000220 <memchr>
 8008b24:	9a04      	ldr	r2, [sp, #16]
 8008b26:	b9d8      	cbnz	r0, 8008b60 <_vfiprintf_r+0x110>
 8008b28:	06d1      	lsls	r1, r2, #27
 8008b2a:	bf44      	itt	mi
 8008b2c:	2320      	movmi	r3, #32
 8008b2e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008b32:	0713      	lsls	r3, r2, #28
 8008b34:	bf44      	itt	mi
 8008b36:	232b      	movmi	r3, #43	@ 0x2b
 8008b38:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008b3c:	f89a 3000 	ldrb.w	r3, [sl]
 8008b40:	2b2a      	cmp	r3, #42	@ 0x2a
 8008b42:	d015      	beq.n	8008b70 <_vfiprintf_r+0x120>
 8008b44:	9a07      	ldr	r2, [sp, #28]
 8008b46:	4654      	mov	r4, sl
 8008b48:	2000      	movs	r0, #0
 8008b4a:	f04f 0c0a 	mov.w	ip, #10
 8008b4e:	4621      	mov	r1, r4
 8008b50:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008b54:	3b30      	subs	r3, #48	@ 0x30
 8008b56:	2b09      	cmp	r3, #9
 8008b58:	d94b      	bls.n	8008bf2 <_vfiprintf_r+0x1a2>
 8008b5a:	b1b0      	cbz	r0, 8008b8a <_vfiprintf_r+0x13a>
 8008b5c:	9207      	str	r2, [sp, #28]
 8008b5e:	e014      	b.n	8008b8a <_vfiprintf_r+0x13a>
 8008b60:	eba0 0308 	sub.w	r3, r0, r8
 8008b64:	fa09 f303 	lsl.w	r3, r9, r3
 8008b68:	4313      	orrs	r3, r2
 8008b6a:	9304      	str	r3, [sp, #16]
 8008b6c:	46a2      	mov	sl, r4
 8008b6e:	e7d2      	b.n	8008b16 <_vfiprintf_r+0xc6>
 8008b70:	9b03      	ldr	r3, [sp, #12]
 8008b72:	1d19      	adds	r1, r3, #4
 8008b74:	681b      	ldr	r3, [r3, #0]
 8008b76:	9103      	str	r1, [sp, #12]
 8008b78:	2b00      	cmp	r3, #0
 8008b7a:	bfbb      	ittet	lt
 8008b7c:	425b      	neglt	r3, r3
 8008b7e:	f042 0202 	orrlt.w	r2, r2, #2
 8008b82:	9307      	strge	r3, [sp, #28]
 8008b84:	9307      	strlt	r3, [sp, #28]
 8008b86:	bfb8      	it	lt
 8008b88:	9204      	strlt	r2, [sp, #16]
 8008b8a:	7823      	ldrb	r3, [r4, #0]
 8008b8c:	2b2e      	cmp	r3, #46	@ 0x2e
 8008b8e:	d10a      	bne.n	8008ba6 <_vfiprintf_r+0x156>
 8008b90:	7863      	ldrb	r3, [r4, #1]
 8008b92:	2b2a      	cmp	r3, #42	@ 0x2a
 8008b94:	d132      	bne.n	8008bfc <_vfiprintf_r+0x1ac>
 8008b96:	9b03      	ldr	r3, [sp, #12]
 8008b98:	1d1a      	adds	r2, r3, #4
 8008b9a:	681b      	ldr	r3, [r3, #0]
 8008b9c:	9203      	str	r2, [sp, #12]
 8008b9e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008ba2:	3402      	adds	r4, #2
 8008ba4:	9305      	str	r3, [sp, #20]
 8008ba6:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8008c7c <_vfiprintf_r+0x22c>
 8008baa:	7821      	ldrb	r1, [r4, #0]
 8008bac:	2203      	movs	r2, #3
 8008bae:	4650      	mov	r0, sl
 8008bb0:	f7f7 fb36 	bl	8000220 <memchr>
 8008bb4:	b138      	cbz	r0, 8008bc6 <_vfiprintf_r+0x176>
 8008bb6:	9b04      	ldr	r3, [sp, #16]
 8008bb8:	eba0 000a 	sub.w	r0, r0, sl
 8008bbc:	2240      	movs	r2, #64	@ 0x40
 8008bbe:	4082      	lsls	r2, r0
 8008bc0:	4313      	orrs	r3, r2
 8008bc2:	3401      	adds	r4, #1
 8008bc4:	9304      	str	r3, [sp, #16]
 8008bc6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008bca:	4829      	ldr	r0, [pc, #164]	@ (8008c70 <_vfiprintf_r+0x220>)
 8008bcc:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8008bd0:	2206      	movs	r2, #6
 8008bd2:	f7f7 fb25 	bl	8000220 <memchr>
 8008bd6:	2800      	cmp	r0, #0
 8008bd8:	d03f      	beq.n	8008c5a <_vfiprintf_r+0x20a>
 8008bda:	4b26      	ldr	r3, [pc, #152]	@ (8008c74 <_vfiprintf_r+0x224>)
 8008bdc:	bb1b      	cbnz	r3, 8008c26 <_vfiprintf_r+0x1d6>
 8008bde:	9b03      	ldr	r3, [sp, #12]
 8008be0:	3307      	adds	r3, #7
 8008be2:	f023 0307 	bic.w	r3, r3, #7
 8008be6:	3308      	adds	r3, #8
 8008be8:	9303      	str	r3, [sp, #12]
 8008bea:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008bec:	443b      	add	r3, r7
 8008bee:	9309      	str	r3, [sp, #36]	@ 0x24
 8008bf0:	e76a      	b.n	8008ac8 <_vfiprintf_r+0x78>
 8008bf2:	fb0c 3202 	mla	r2, ip, r2, r3
 8008bf6:	460c      	mov	r4, r1
 8008bf8:	2001      	movs	r0, #1
 8008bfa:	e7a8      	b.n	8008b4e <_vfiprintf_r+0xfe>
 8008bfc:	2300      	movs	r3, #0
 8008bfe:	3401      	adds	r4, #1
 8008c00:	9305      	str	r3, [sp, #20]
 8008c02:	4619      	mov	r1, r3
 8008c04:	f04f 0c0a 	mov.w	ip, #10
 8008c08:	4620      	mov	r0, r4
 8008c0a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008c0e:	3a30      	subs	r2, #48	@ 0x30
 8008c10:	2a09      	cmp	r2, #9
 8008c12:	d903      	bls.n	8008c1c <_vfiprintf_r+0x1cc>
 8008c14:	2b00      	cmp	r3, #0
 8008c16:	d0c6      	beq.n	8008ba6 <_vfiprintf_r+0x156>
 8008c18:	9105      	str	r1, [sp, #20]
 8008c1a:	e7c4      	b.n	8008ba6 <_vfiprintf_r+0x156>
 8008c1c:	fb0c 2101 	mla	r1, ip, r1, r2
 8008c20:	4604      	mov	r4, r0
 8008c22:	2301      	movs	r3, #1
 8008c24:	e7f0      	b.n	8008c08 <_vfiprintf_r+0x1b8>
 8008c26:	ab03      	add	r3, sp, #12
 8008c28:	9300      	str	r3, [sp, #0]
 8008c2a:	462a      	mov	r2, r5
 8008c2c:	4b12      	ldr	r3, [pc, #72]	@ (8008c78 <_vfiprintf_r+0x228>)
 8008c2e:	a904      	add	r1, sp, #16
 8008c30:	4630      	mov	r0, r6
 8008c32:	f7fd fbbd 	bl	80063b0 <_printf_float>
 8008c36:	4607      	mov	r7, r0
 8008c38:	1c78      	adds	r0, r7, #1
 8008c3a:	d1d6      	bne.n	8008bea <_vfiprintf_r+0x19a>
 8008c3c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008c3e:	07d9      	lsls	r1, r3, #31
 8008c40:	d405      	bmi.n	8008c4e <_vfiprintf_r+0x1fe>
 8008c42:	89ab      	ldrh	r3, [r5, #12]
 8008c44:	059a      	lsls	r2, r3, #22
 8008c46:	d402      	bmi.n	8008c4e <_vfiprintf_r+0x1fe>
 8008c48:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008c4a:	f7fe f927 	bl	8006e9c <__retarget_lock_release_recursive>
 8008c4e:	89ab      	ldrh	r3, [r5, #12]
 8008c50:	065b      	lsls	r3, r3, #25
 8008c52:	f53f af1f 	bmi.w	8008a94 <_vfiprintf_r+0x44>
 8008c56:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008c58:	e71e      	b.n	8008a98 <_vfiprintf_r+0x48>
 8008c5a:	ab03      	add	r3, sp, #12
 8008c5c:	9300      	str	r3, [sp, #0]
 8008c5e:	462a      	mov	r2, r5
 8008c60:	4b05      	ldr	r3, [pc, #20]	@ (8008c78 <_vfiprintf_r+0x228>)
 8008c62:	a904      	add	r1, sp, #16
 8008c64:	4630      	mov	r0, r6
 8008c66:	f7fd fe3b 	bl	80068e0 <_printf_i>
 8008c6a:	e7e4      	b.n	8008c36 <_vfiprintf_r+0x1e6>
 8008c6c:	08009636 	.word	0x08009636
 8008c70:	08009640 	.word	0x08009640
 8008c74:	080063b1 	.word	0x080063b1
 8008c78:	08008a2d 	.word	0x08008a2d
 8008c7c:	0800963c 	.word	0x0800963c

08008c80 <__swbuf_r>:
 8008c80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008c82:	460e      	mov	r6, r1
 8008c84:	4614      	mov	r4, r2
 8008c86:	4605      	mov	r5, r0
 8008c88:	b118      	cbz	r0, 8008c92 <__swbuf_r+0x12>
 8008c8a:	6a03      	ldr	r3, [r0, #32]
 8008c8c:	b90b      	cbnz	r3, 8008c92 <__swbuf_r+0x12>
 8008c8e:	f7fd ffd1 	bl	8006c34 <__sinit>
 8008c92:	69a3      	ldr	r3, [r4, #24]
 8008c94:	60a3      	str	r3, [r4, #8]
 8008c96:	89a3      	ldrh	r3, [r4, #12]
 8008c98:	071a      	lsls	r2, r3, #28
 8008c9a:	d501      	bpl.n	8008ca0 <__swbuf_r+0x20>
 8008c9c:	6923      	ldr	r3, [r4, #16]
 8008c9e:	b943      	cbnz	r3, 8008cb2 <__swbuf_r+0x32>
 8008ca0:	4621      	mov	r1, r4
 8008ca2:	4628      	mov	r0, r5
 8008ca4:	f000 f82a 	bl	8008cfc <__swsetup_r>
 8008ca8:	b118      	cbz	r0, 8008cb2 <__swbuf_r+0x32>
 8008caa:	f04f 37ff 	mov.w	r7, #4294967295
 8008cae:	4638      	mov	r0, r7
 8008cb0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008cb2:	6823      	ldr	r3, [r4, #0]
 8008cb4:	6922      	ldr	r2, [r4, #16]
 8008cb6:	1a98      	subs	r0, r3, r2
 8008cb8:	6963      	ldr	r3, [r4, #20]
 8008cba:	b2f6      	uxtb	r6, r6
 8008cbc:	4283      	cmp	r3, r0
 8008cbe:	4637      	mov	r7, r6
 8008cc0:	dc05      	bgt.n	8008cce <__swbuf_r+0x4e>
 8008cc2:	4621      	mov	r1, r4
 8008cc4:	4628      	mov	r0, r5
 8008cc6:	f7ff fd99 	bl	80087fc <_fflush_r>
 8008cca:	2800      	cmp	r0, #0
 8008ccc:	d1ed      	bne.n	8008caa <__swbuf_r+0x2a>
 8008cce:	68a3      	ldr	r3, [r4, #8]
 8008cd0:	3b01      	subs	r3, #1
 8008cd2:	60a3      	str	r3, [r4, #8]
 8008cd4:	6823      	ldr	r3, [r4, #0]
 8008cd6:	1c5a      	adds	r2, r3, #1
 8008cd8:	6022      	str	r2, [r4, #0]
 8008cda:	701e      	strb	r6, [r3, #0]
 8008cdc:	6962      	ldr	r2, [r4, #20]
 8008cde:	1c43      	adds	r3, r0, #1
 8008ce0:	429a      	cmp	r2, r3
 8008ce2:	d004      	beq.n	8008cee <__swbuf_r+0x6e>
 8008ce4:	89a3      	ldrh	r3, [r4, #12]
 8008ce6:	07db      	lsls	r3, r3, #31
 8008ce8:	d5e1      	bpl.n	8008cae <__swbuf_r+0x2e>
 8008cea:	2e0a      	cmp	r6, #10
 8008cec:	d1df      	bne.n	8008cae <__swbuf_r+0x2e>
 8008cee:	4621      	mov	r1, r4
 8008cf0:	4628      	mov	r0, r5
 8008cf2:	f7ff fd83 	bl	80087fc <_fflush_r>
 8008cf6:	2800      	cmp	r0, #0
 8008cf8:	d0d9      	beq.n	8008cae <__swbuf_r+0x2e>
 8008cfa:	e7d6      	b.n	8008caa <__swbuf_r+0x2a>

08008cfc <__swsetup_r>:
 8008cfc:	b538      	push	{r3, r4, r5, lr}
 8008cfe:	4b29      	ldr	r3, [pc, #164]	@ (8008da4 <__swsetup_r+0xa8>)
 8008d00:	4605      	mov	r5, r0
 8008d02:	6818      	ldr	r0, [r3, #0]
 8008d04:	460c      	mov	r4, r1
 8008d06:	b118      	cbz	r0, 8008d10 <__swsetup_r+0x14>
 8008d08:	6a03      	ldr	r3, [r0, #32]
 8008d0a:	b90b      	cbnz	r3, 8008d10 <__swsetup_r+0x14>
 8008d0c:	f7fd ff92 	bl	8006c34 <__sinit>
 8008d10:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008d14:	0719      	lsls	r1, r3, #28
 8008d16:	d422      	bmi.n	8008d5e <__swsetup_r+0x62>
 8008d18:	06da      	lsls	r2, r3, #27
 8008d1a:	d407      	bmi.n	8008d2c <__swsetup_r+0x30>
 8008d1c:	2209      	movs	r2, #9
 8008d1e:	602a      	str	r2, [r5, #0]
 8008d20:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008d24:	81a3      	strh	r3, [r4, #12]
 8008d26:	f04f 30ff 	mov.w	r0, #4294967295
 8008d2a:	e033      	b.n	8008d94 <__swsetup_r+0x98>
 8008d2c:	0758      	lsls	r0, r3, #29
 8008d2e:	d512      	bpl.n	8008d56 <__swsetup_r+0x5a>
 8008d30:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008d32:	b141      	cbz	r1, 8008d46 <__swsetup_r+0x4a>
 8008d34:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008d38:	4299      	cmp	r1, r3
 8008d3a:	d002      	beq.n	8008d42 <__swsetup_r+0x46>
 8008d3c:	4628      	mov	r0, r5
 8008d3e:	f7fe ff07 	bl	8007b50 <_free_r>
 8008d42:	2300      	movs	r3, #0
 8008d44:	6363      	str	r3, [r4, #52]	@ 0x34
 8008d46:	89a3      	ldrh	r3, [r4, #12]
 8008d48:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8008d4c:	81a3      	strh	r3, [r4, #12]
 8008d4e:	2300      	movs	r3, #0
 8008d50:	6063      	str	r3, [r4, #4]
 8008d52:	6923      	ldr	r3, [r4, #16]
 8008d54:	6023      	str	r3, [r4, #0]
 8008d56:	89a3      	ldrh	r3, [r4, #12]
 8008d58:	f043 0308 	orr.w	r3, r3, #8
 8008d5c:	81a3      	strh	r3, [r4, #12]
 8008d5e:	6923      	ldr	r3, [r4, #16]
 8008d60:	b94b      	cbnz	r3, 8008d76 <__swsetup_r+0x7a>
 8008d62:	89a3      	ldrh	r3, [r4, #12]
 8008d64:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8008d68:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008d6c:	d003      	beq.n	8008d76 <__swsetup_r+0x7a>
 8008d6e:	4621      	mov	r1, r4
 8008d70:	4628      	mov	r0, r5
 8008d72:	f000 f883 	bl	8008e7c <__smakebuf_r>
 8008d76:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008d7a:	f013 0201 	ands.w	r2, r3, #1
 8008d7e:	d00a      	beq.n	8008d96 <__swsetup_r+0x9a>
 8008d80:	2200      	movs	r2, #0
 8008d82:	60a2      	str	r2, [r4, #8]
 8008d84:	6962      	ldr	r2, [r4, #20]
 8008d86:	4252      	negs	r2, r2
 8008d88:	61a2      	str	r2, [r4, #24]
 8008d8a:	6922      	ldr	r2, [r4, #16]
 8008d8c:	b942      	cbnz	r2, 8008da0 <__swsetup_r+0xa4>
 8008d8e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8008d92:	d1c5      	bne.n	8008d20 <__swsetup_r+0x24>
 8008d94:	bd38      	pop	{r3, r4, r5, pc}
 8008d96:	0799      	lsls	r1, r3, #30
 8008d98:	bf58      	it	pl
 8008d9a:	6962      	ldrpl	r2, [r4, #20]
 8008d9c:	60a2      	str	r2, [r4, #8]
 8008d9e:	e7f4      	b.n	8008d8a <__swsetup_r+0x8e>
 8008da0:	2000      	movs	r0, #0
 8008da2:	e7f7      	b.n	8008d94 <__swsetup_r+0x98>
 8008da4:	20000018 	.word	0x20000018

08008da8 <_raise_r>:
 8008da8:	291f      	cmp	r1, #31
 8008daa:	b538      	push	{r3, r4, r5, lr}
 8008dac:	4605      	mov	r5, r0
 8008dae:	460c      	mov	r4, r1
 8008db0:	d904      	bls.n	8008dbc <_raise_r+0x14>
 8008db2:	2316      	movs	r3, #22
 8008db4:	6003      	str	r3, [r0, #0]
 8008db6:	f04f 30ff 	mov.w	r0, #4294967295
 8008dba:	bd38      	pop	{r3, r4, r5, pc}
 8008dbc:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8008dbe:	b112      	cbz	r2, 8008dc6 <_raise_r+0x1e>
 8008dc0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008dc4:	b94b      	cbnz	r3, 8008dda <_raise_r+0x32>
 8008dc6:	4628      	mov	r0, r5
 8008dc8:	f000 f830 	bl	8008e2c <_getpid_r>
 8008dcc:	4622      	mov	r2, r4
 8008dce:	4601      	mov	r1, r0
 8008dd0:	4628      	mov	r0, r5
 8008dd2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008dd6:	f000 b817 	b.w	8008e08 <_kill_r>
 8008dda:	2b01      	cmp	r3, #1
 8008ddc:	d00a      	beq.n	8008df4 <_raise_r+0x4c>
 8008dde:	1c59      	adds	r1, r3, #1
 8008de0:	d103      	bne.n	8008dea <_raise_r+0x42>
 8008de2:	2316      	movs	r3, #22
 8008de4:	6003      	str	r3, [r0, #0]
 8008de6:	2001      	movs	r0, #1
 8008de8:	e7e7      	b.n	8008dba <_raise_r+0x12>
 8008dea:	2100      	movs	r1, #0
 8008dec:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8008df0:	4620      	mov	r0, r4
 8008df2:	4798      	blx	r3
 8008df4:	2000      	movs	r0, #0
 8008df6:	e7e0      	b.n	8008dba <_raise_r+0x12>

08008df8 <raise>:
 8008df8:	4b02      	ldr	r3, [pc, #8]	@ (8008e04 <raise+0xc>)
 8008dfa:	4601      	mov	r1, r0
 8008dfc:	6818      	ldr	r0, [r3, #0]
 8008dfe:	f7ff bfd3 	b.w	8008da8 <_raise_r>
 8008e02:	bf00      	nop
 8008e04:	20000018 	.word	0x20000018

08008e08 <_kill_r>:
 8008e08:	b538      	push	{r3, r4, r5, lr}
 8008e0a:	4d07      	ldr	r5, [pc, #28]	@ (8008e28 <_kill_r+0x20>)
 8008e0c:	2300      	movs	r3, #0
 8008e0e:	4604      	mov	r4, r0
 8008e10:	4608      	mov	r0, r1
 8008e12:	4611      	mov	r1, r2
 8008e14:	602b      	str	r3, [r5, #0]
 8008e16:	f7f9 fb40 	bl	800249a <_kill>
 8008e1a:	1c43      	adds	r3, r0, #1
 8008e1c:	d102      	bne.n	8008e24 <_kill_r+0x1c>
 8008e1e:	682b      	ldr	r3, [r5, #0]
 8008e20:	b103      	cbz	r3, 8008e24 <_kill_r+0x1c>
 8008e22:	6023      	str	r3, [r4, #0]
 8008e24:	bd38      	pop	{r3, r4, r5, pc}
 8008e26:	bf00      	nop
 8008e28:	200006a0 	.word	0x200006a0

08008e2c <_getpid_r>:
 8008e2c:	f7f9 bb2d 	b.w	800248a <_getpid>

08008e30 <__swhatbuf_r>:
 8008e30:	b570      	push	{r4, r5, r6, lr}
 8008e32:	460c      	mov	r4, r1
 8008e34:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008e38:	2900      	cmp	r1, #0
 8008e3a:	b096      	sub	sp, #88	@ 0x58
 8008e3c:	4615      	mov	r5, r2
 8008e3e:	461e      	mov	r6, r3
 8008e40:	da0d      	bge.n	8008e5e <__swhatbuf_r+0x2e>
 8008e42:	89a3      	ldrh	r3, [r4, #12]
 8008e44:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8008e48:	f04f 0100 	mov.w	r1, #0
 8008e4c:	bf14      	ite	ne
 8008e4e:	2340      	movne	r3, #64	@ 0x40
 8008e50:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8008e54:	2000      	movs	r0, #0
 8008e56:	6031      	str	r1, [r6, #0]
 8008e58:	602b      	str	r3, [r5, #0]
 8008e5a:	b016      	add	sp, #88	@ 0x58
 8008e5c:	bd70      	pop	{r4, r5, r6, pc}
 8008e5e:	466a      	mov	r2, sp
 8008e60:	f000 f848 	bl	8008ef4 <_fstat_r>
 8008e64:	2800      	cmp	r0, #0
 8008e66:	dbec      	blt.n	8008e42 <__swhatbuf_r+0x12>
 8008e68:	9901      	ldr	r1, [sp, #4]
 8008e6a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8008e6e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8008e72:	4259      	negs	r1, r3
 8008e74:	4159      	adcs	r1, r3
 8008e76:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008e7a:	e7eb      	b.n	8008e54 <__swhatbuf_r+0x24>

08008e7c <__smakebuf_r>:
 8008e7c:	898b      	ldrh	r3, [r1, #12]
 8008e7e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008e80:	079d      	lsls	r5, r3, #30
 8008e82:	4606      	mov	r6, r0
 8008e84:	460c      	mov	r4, r1
 8008e86:	d507      	bpl.n	8008e98 <__smakebuf_r+0x1c>
 8008e88:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8008e8c:	6023      	str	r3, [r4, #0]
 8008e8e:	6123      	str	r3, [r4, #16]
 8008e90:	2301      	movs	r3, #1
 8008e92:	6163      	str	r3, [r4, #20]
 8008e94:	b003      	add	sp, #12
 8008e96:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008e98:	ab01      	add	r3, sp, #4
 8008e9a:	466a      	mov	r2, sp
 8008e9c:	f7ff ffc8 	bl	8008e30 <__swhatbuf_r>
 8008ea0:	9f00      	ldr	r7, [sp, #0]
 8008ea2:	4605      	mov	r5, r0
 8008ea4:	4639      	mov	r1, r7
 8008ea6:	4630      	mov	r0, r6
 8008ea8:	f7fe fec6 	bl	8007c38 <_malloc_r>
 8008eac:	b948      	cbnz	r0, 8008ec2 <__smakebuf_r+0x46>
 8008eae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008eb2:	059a      	lsls	r2, r3, #22
 8008eb4:	d4ee      	bmi.n	8008e94 <__smakebuf_r+0x18>
 8008eb6:	f023 0303 	bic.w	r3, r3, #3
 8008eba:	f043 0302 	orr.w	r3, r3, #2
 8008ebe:	81a3      	strh	r3, [r4, #12]
 8008ec0:	e7e2      	b.n	8008e88 <__smakebuf_r+0xc>
 8008ec2:	89a3      	ldrh	r3, [r4, #12]
 8008ec4:	6020      	str	r0, [r4, #0]
 8008ec6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008eca:	81a3      	strh	r3, [r4, #12]
 8008ecc:	9b01      	ldr	r3, [sp, #4]
 8008ece:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8008ed2:	b15b      	cbz	r3, 8008eec <__smakebuf_r+0x70>
 8008ed4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008ed8:	4630      	mov	r0, r6
 8008eda:	f000 f81d 	bl	8008f18 <_isatty_r>
 8008ede:	b128      	cbz	r0, 8008eec <__smakebuf_r+0x70>
 8008ee0:	89a3      	ldrh	r3, [r4, #12]
 8008ee2:	f023 0303 	bic.w	r3, r3, #3
 8008ee6:	f043 0301 	orr.w	r3, r3, #1
 8008eea:	81a3      	strh	r3, [r4, #12]
 8008eec:	89a3      	ldrh	r3, [r4, #12]
 8008eee:	431d      	orrs	r5, r3
 8008ef0:	81a5      	strh	r5, [r4, #12]
 8008ef2:	e7cf      	b.n	8008e94 <__smakebuf_r+0x18>

08008ef4 <_fstat_r>:
 8008ef4:	b538      	push	{r3, r4, r5, lr}
 8008ef6:	4d07      	ldr	r5, [pc, #28]	@ (8008f14 <_fstat_r+0x20>)
 8008ef8:	2300      	movs	r3, #0
 8008efa:	4604      	mov	r4, r0
 8008efc:	4608      	mov	r0, r1
 8008efe:	4611      	mov	r1, r2
 8008f00:	602b      	str	r3, [r5, #0]
 8008f02:	f7f9 fb2a 	bl	800255a <_fstat>
 8008f06:	1c43      	adds	r3, r0, #1
 8008f08:	d102      	bne.n	8008f10 <_fstat_r+0x1c>
 8008f0a:	682b      	ldr	r3, [r5, #0]
 8008f0c:	b103      	cbz	r3, 8008f10 <_fstat_r+0x1c>
 8008f0e:	6023      	str	r3, [r4, #0]
 8008f10:	bd38      	pop	{r3, r4, r5, pc}
 8008f12:	bf00      	nop
 8008f14:	200006a0 	.word	0x200006a0

08008f18 <_isatty_r>:
 8008f18:	b538      	push	{r3, r4, r5, lr}
 8008f1a:	4d06      	ldr	r5, [pc, #24]	@ (8008f34 <_isatty_r+0x1c>)
 8008f1c:	2300      	movs	r3, #0
 8008f1e:	4604      	mov	r4, r0
 8008f20:	4608      	mov	r0, r1
 8008f22:	602b      	str	r3, [r5, #0]
 8008f24:	f7f9 fb29 	bl	800257a <_isatty>
 8008f28:	1c43      	adds	r3, r0, #1
 8008f2a:	d102      	bne.n	8008f32 <_isatty_r+0x1a>
 8008f2c:	682b      	ldr	r3, [r5, #0]
 8008f2e:	b103      	cbz	r3, 8008f32 <_isatty_r+0x1a>
 8008f30:	6023      	str	r3, [r4, #0]
 8008f32:	bd38      	pop	{r3, r4, r5, pc}
 8008f34:	200006a0 	.word	0x200006a0

08008f38 <sqrtf>:
 8008f38:	b508      	push	{r3, lr}
 8008f3a:	ed2d 8b02 	vpush	{d8}
 8008f3e:	eeb0 8a40 	vmov.f32	s16, s0
 8008f42:	f000 f817 	bl	8008f74 <__ieee754_sqrtf>
 8008f46:	eeb4 8a48 	vcmp.f32	s16, s16
 8008f4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008f4e:	d60c      	bvs.n	8008f6a <sqrtf+0x32>
 8008f50:	eddf 8a07 	vldr	s17, [pc, #28]	@ 8008f70 <sqrtf+0x38>
 8008f54:	eeb4 8ae8 	vcmpe.f32	s16, s17
 8008f58:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008f5c:	d505      	bpl.n	8008f6a <sqrtf+0x32>
 8008f5e:	f7fd ff71 	bl	8006e44 <__errno>
 8008f62:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 8008f66:	2321      	movs	r3, #33	@ 0x21
 8008f68:	6003      	str	r3, [r0, #0]
 8008f6a:	ecbd 8b02 	vpop	{d8}
 8008f6e:	bd08      	pop	{r3, pc}
 8008f70:	00000000 	.word	0x00000000

08008f74 <__ieee754_sqrtf>:
 8008f74:	eeb1 0ac0 	vsqrt.f32	s0, s0
 8008f78:	4770      	bx	lr
	...

08008f7c <_init>:
 8008f7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008f7e:	bf00      	nop
 8008f80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008f82:	bc08      	pop	{r3}
 8008f84:	469e      	mov	lr, r3
 8008f86:	4770      	bx	lr

08008f88 <_fini>:
 8008f88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008f8a:	bf00      	nop
 8008f8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008f8e:	bc08      	pop	{r3}
 8008f90:	469e      	mov	lr, r3
 8008f92:	4770      	bx	lr
